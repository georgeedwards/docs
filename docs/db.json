{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/docs/img/architecture.png","path":"docs/img/architecture.png","modified":0,"renderable":0},{"_id":"source/docs/img/ab-getting-started/step1-android.png","path":"docs/img/ab-getting-started/step1-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/ab-getting-started/step3-android.png","path":"docs/img/ab-getting-started/step3-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/ab-getting-started/step1-ios.png","path":"docs/img/ab-getting-started/step1-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/ab-getting-started/step2-android.png","path":"docs/img/ab-getting-started/step2-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/ab-getting-started/step2-ios.png","path":"docs/img/ab-getting-started/step2-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/angular/list-view-setupItemView.png","path":"docs/img/angular/list-view-setupItemView.png","modified":0,"renderable":0},{"_id":"source/docs/img/ab-getting-started/step3-ios.png","path":"docs/img/ab-getting-started/step3-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli/tns-create-windows.png","path":"docs/img/cli/tns-create-windows.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli/tns-create-unix.png","path":"docs/img/cli/tns-create-unix.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli/tns-platform-add-android-windows.png","path":"docs/img/cli/tns-platform-add-android-windows.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli/tns-platform-add-ios-unix.png","path":"docs/img/cli/tns-platform-add-ios-unix.png","modified":0,"renderable":0},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-backgroundSpan.png","path":"docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-backgroundSpan.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli/tns-prepare-android-windows.png","path":"docs/img/cli/tns-prepare-android-windows.png","modified":0,"renderable":0},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-background-color.png","path":"docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-background-color.png","modified":0,"renderable":0},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-black-style.png","path":"docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-black-style.png","modified":0,"renderable":0},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-style-change.png","path":"docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-style-change.png","modified":0,"renderable":0},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-set-backgroundcolor.png","path":"docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-set-backgroundcolor.png","modified":0,"renderable":0},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar.png","path":"docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar.png","modified":0,"renderable":0},{"_id":"source/docs/img/navigation-angular/outlet-ios.gif","path":"docs/img/navigation-angular/outlet-ios.gif","modified":0,"renderable":0},{"_id":"source/docs/img/companions/android-code.png","path":"docs/img/companions/android-code.png","modified":0,"renderable":0},{"_id":"source/docs/img/companions/ios-code.png","path":"docs/img/companions/ios-code.png","modified":0,"renderable":0},{"_id":"source/docs/img/resources/android-resources.png","path":"docs/img/resources/android-resources.png","modified":0,"renderable":0},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup.png","path":"docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup.png","modified":0,"renderable":0},{"_id":"source/docs/img/resources/ios-resources.png","path":"docs/img/resources/ios-resources.png","modified":0,"renderable":0},{"_id":"source/docs/img/visual-studio-code-extension/debug-panel.png","path":"docs/img/visual-studio-code-extension/debug-panel.png","modified":0,"renderable":0},{"_id":"source/docs/img/visual-studio-code-extension/nativescript-commands.png","path":"docs/img/visual-studio-code-extension/nativescript-commands.png","modified":0,"renderable":0},{"_id":"source/docs/img/visual-studio-code-extension/gear-icon.png","path":"docs/img/visual-studio-code-extension/gear-icon.png","modified":0,"renderable":0},{"_id":"source/docs/img/visual-studio-code-extension/nativescript-not-found-error-message.png","path":"docs/img/visual-studio-code-extension/nativescript-not-found-error-message.png","modified":0,"renderable":0},{"_id":"themes/nativescript/source/fonts/percolate.eot","path":"fonts/percolate.eot","modified":0,"renderable":1},{"_id":"themes/nativescript/source/fonts/percolate.ttf","path":"fonts/percolate.ttf","modified":0,"renderable":1},{"_id":"themes/nativescript/source/fonts/percolate.woff","path":"fonts/percolate.woff","modified":0,"renderable":1},{"_id":"themes/nativescript/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/nativescript/source/images/icon-white.svg","path":"images/icon-white.svg","modified":0,"renderable":1},{"_id":"themes/nativescript/source/images/logo-blue.svg","path":"images/logo-blue.svg","modified":0,"renderable":1},{"_id":"themes/nativescript/source/script/code-block.js","path":"script/code-block.js","modified":0,"renderable":1},{"_id":"themes/nativescript/source/script/code-environment.js","path":"script/code-environment.js","modified":0,"renderable":1},{"_id":"themes/nativescript/source/script/main.js","path":"script/main.js","modified":0,"renderable":1},{"_id":"themes/nativescript/source/script/smooth-scroll.min.js","path":"script/smooth-scroll.min.js","modified":0,"renderable":1},{"_id":"themes/nativescript/source/style/style.less","path":"style/style.less","modified":0,"renderable":1},{"_id":"themes/nativescript/source/style/tabs.css","path":"style/tabs.css","modified":0,"renderable":1},{"_id":"source/docs/img/cli/finder-app-created.png","path":"docs/img/cli/finder-app-created.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli/tns-emulate-ios-unix.png","path":"docs/img/cli/tns-emulate-ios-unix.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli/tns-emulate-android-windows.png","path":"docs/img/cli/tns-emulate-android-windows.png","modified":0,"renderable":0},{"_id":"source/docs/img/visual-studio-code-extension/install.png","path":"docs/img/visual-studio-code-extension/install.png","modified":0,"renderable":0},{"_id":"source/docs/img/visual-studio-code-extension/configurations-menu.png","path":"docs/img/visual-studio-code-extension/configurations-menu.png","modified":0,"renderable":0},{"_id":"source/docs/img/visual-studio-code-extension/nativescript-tns-args.png","path":"docs/img/visual-studio-code-extension/nativescript-tns-args.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/absoluteLayoutPage.png","path":"docs/img/gallery/android/absoluteLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/activityIndicatorPage.png","path":"docs/img/gallery/android/activityIndicatorPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/buttonPage.png","path":"docs/img/gallery/android/buttonPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/datePickerPage.png","path":"docs/img/gallery/android/datePickerPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/dialogsPage_confirm.png","path":"docs/img/gallery/android/dialogsPage_confirm.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/dockLayoutPage.png","path":"docs/img/gallery/android/dockLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/gridLayoutPage.png","path":"docs/img/gallery/android/gridLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/htmlViewPage.png","path":"docs/img/gallery/android/htmlViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/imagePage.png","path":"docs/img/gallery/android/imagePage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/homePage.png","path":"docs/img/gallery/android/homePage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/labelPage.png","path":"docs/img/gallery/android/labelPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/progressPage.png","path":"docs/img/gallery/android/progressPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/listPickerPage.png","path":"docs/img/gallery/android/listPickerPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/listViewPage.png","path":"docs/img/gallery/android/listViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/searchBarPage.png","path":"docs/img/gallery/android/searchBarPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/scrollViewPage.png","path":"docs/img/gallery/android/scrollViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/stackLayoutPage.png","path":"docs/img/gallery/android/stackLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/sliderPage.png","path":"docs/img/gallery/android/sliderPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/segmentedBarPage.png","path":"docs/img/gallery/android/segmentedBarPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/switchPage.png","path":"docs/img/gallery/android/switchPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/tabViewPage.png","path":"docs/img/gallery/android/tabViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/textFieldPage.png","path":"docs/img/gallery/android/textFieldPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/timePickerPage.png","path":"docs/img/gallery/android/timePickerPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/wrapLayoutPage.png","path":"docs/img/gallery/android/wrapLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/webViewPage.png","path":"docs/img/gallery/android/webViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/android/textViewPage.png","path":"docs/img/gallery/android/textViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/absoluteLayoutPage.png","path":"docs/img/gallery/ios/absoluteLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/activityIndicatorPage.png","path":"docs/img/gallery/ios/activityIndicatorPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/buttonPage.png","path":"docs/img/gallery/ios/buttonPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/gridLayoutPage.png","path":"docs/img/gallery/ios/gridLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/datePickerPage.png","path":"docs/img/gallery/ios/datePickerPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/dockLayoutPage.png","path":"docs/img/gallery/ios/dockLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/homePage.png","path":"docs/img/gallery/ios/homePage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/dialogsPage_confirm.png","path":"docs/img/gallery/ios/dialogsPage_confirm.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/htmlViewPage.png","path":"docs/img/gallery/ios/htmlViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/imagePage.png","path":"docs/img/gallery/ios/imagePage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/labelPage.png","path":"docs/img/gallery/ios/labelPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/progressPage.png","path":"docs/img/gallery/ios/progressPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/listPickerPage.png","path":"docs/img/gallery/ios/listPickerPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/listViewPage.png","path":"docs/img/gallery/ios/listViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/searchBarPage.png","path":"docs/img/gallery/ios/searchBarPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/sliderPage.png","path":"docs/img/gallery/ios/sliderPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/stackLayoutPage.png","path":"docs/img/gallery/ios/stackLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/switchPage.png","path":"docs/img/gallery/ios/switchPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/tabViewPage.png","path":"docs/img/gallery/ios/tabViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/segmentedBarPage.png","path":"docs/img/gallery/ios/segmentedBarPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/wrapLayoutPage.png","path":"docs/img/gallery/ios/wrapLayoutPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/textViewPage.png","path":"docs/img/gallery/ios/textViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/timePickerPage.png","path":"docs/img/gallery/ios/timePickerPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/webViewPage.png","path":"docs/img/gallery/ios/webViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/action-items-android.png","path":"docs/img/modules/action-bar/action-items-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/gallery/ios/textFieldPage.png","path":"docs/img/gallery/ios/textFieldPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/action-items-ios.png","path":"docs/img/modules/action-bar/action-items-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/action-items-visibility-ios.png","path":"docs/img/modules/action-bar/action-items-visibility-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/action-items-visibility-android.png","path":"docs/img/modules/action-bar/action-items-visibility-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/home-icon-android.png","path":"docs/img/modules/action-bar/home-icon-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/nav-btn-android.png","path":"docs/img/modules/action-bar/nav-btn-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/nav-btn-ios.png","path":"docs/img/modules/action-bar/nav-btn-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/style-android.png","path":"docs/img/modules/action-bar/style-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/side-drawer-ios.png","path":"docs/img/modules/action-bar/side-drawer-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/style-ios.png","path":"docs/img/modules/action-bar/style-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/title-ios.png","path":"docs/img/modules/action-bar/title-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/title-android.png","path":"docs/img/modules/action-bar/title-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/title-view-android.png","path":"docs/img/modules/action-bar/title-view-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/side-drawer-android.png","path":"docs/img/modules/action-bar/side-drawer-android.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/action-bar/title-view-ios.png","path":"docs/img/modules/action-bar/title-view-ios.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/bezier-graph.png","path":"docs/img/modules/animation/bezier-graph.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/hello-world.gif","path":"docs/img/modules/animation/hello-world.gif","modified":0,"renderable":0},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-001.png","path":"docs/img/launch-screen/ios/launch-screen-howto-001.png","modified":0,"renderable":0},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-008.png","path":"docs/img/launch-screen/ios/launch-screen-howto-008.png","modified":0,"renderable":0},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-009.png","path":"docs/img/launch-screen/ios/launch-screen-howto-009.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/absolute-layout.png","path":"docs/img/modules/layouts/absolute-layout.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/absolute-layout2.png","path":"docs/img/modules/layouts/absolute-layout2.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/dock-layout1.png","path":"docs/img/modules/layouts/dock-layout1.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/dock-layout2.png","path":"docs/img/modules/layouts/dock-layout2.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/dock-layout3.png","path":"docs/img/modules/layouts/dock-layout3.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/grid-layout.png","path":"docs/img/modules/layouts/grid-layout.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/grid-layout1.png","path":"docs/img/modules/layouts/grid-layout1.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/grid-layout2.png","path":"docs/img/modules/layouts/grid-layout2.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/grid-layout3.png","path":"docs/img/modules/layouts/grid-layout3.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/grid-layout4.png","path":"docs/img/modules/layouts/grid-layout4.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/grid-layout5.png","path":"docs/img/modules/layouts/grid-layout5.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/stack-layout3.png","path":"docs/img/modules/layouts/stack-layout3.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/stack-layout1.png","path":"docs/img/modules/layouts/stack-layout1.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/stack-layout2.png","path":"docs/img/modules/layouts/stack-layout2.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/stack-layout4.png","path":"docs/img/modules/layouts/stack-layout4.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/wrap-layout2.png","path":"docs/img/modules/layouts/wrap-layout2.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/wrap-layout1.png","path":"docs/img/modules/layouts/wrap-layout1.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/layouts/wrap-layout3.png","path":"docs/img/modules/layouts/wrap-layout3.png","modified":0,"renderable":0},{"_id":"source/docs/img/navigation-angular/outlet-android.gif","path":"docs/img/navigation-angular/outlet-android.gif","modified":0,"renderable":0},{"_id":"source/docs/img/navigation-angular/page-outlet-ios.gif","path":"docs/img/navigation-angular/page-outlet-ios.gif","modified":0,"renderable":0},{"_id":"themes/nativescript/source/fonts/percolate.svg","path":"fonts/percolate.svg","modified":0,"renderable":1},{"_id":"source/docs/img/gallery/ios/scrollViewPage.png","path":"docs/img/gallery/ios/scrollViewPage.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/background-color.gif","path":"docs/img/modules/animation/background-color.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/bezier.gif","path":"docs/img/modules/animation/bezier.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/easein.gif","path":"docs/img/modules/animation/easein.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/easeinout.gif","path":"docs/img/modules/animation/easeinout.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/easeout.gif","path":"docs/img/modules/animation/easeout.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/linear.gif","path":"docs/img/modules/animation/linear.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/reusing.gif","path":"docs/img/modules/animation/reusing.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/spring.gif","path":"docs/img/modules/animation/spring.gif","modified":0,"renderable":0},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-004.png","path":"docs/img/launch-screen/ios/launch-screen-howto-004.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/icon-fonts/icomoon.png","path":"docs/img/modules/icon-fonts/icomoon.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/done.png","path":"docs/img/modules/keyboard/done.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/go.png","path":"docs/img/modules/keyboard/go.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/next.png","path":"docs/img/modules/keyboard/next.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/search.png","path":"docs/img/modules/keyboard/search.png","modified":0,"renderable":0},{"_id":"source/docs/img/navigation-angular/page-outlet-android.gif","path":"docs/img/navigation-angular/page-outlet-android.gif","modified":0,"renderable":0},{"_id":"source/docs/img/visual-studio-code-extension/nativescript-debugging.png","path":"docs/img/visual-studio-code-extension/nativescript-debugging.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/send.png","path":"docs/img/modules/keyboard/send.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/NativeScript_Angular_logo.png","path":"docs/img/cli-getting-started/angular/chapter0/NativeScript_Angular_logo.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/Angular_logo.png","path":"docs/img/cli-getting-started/angular/chapter0/Angular_logo.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/NativeScript_logo.png","path":"docs/img/cli-getting-started/angular/chapter0/NativeScript_logo.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/terminal-1.png","path":"docs/img/cli-getting-started/angular/chapter3/terminal-1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/typescript.png","path":"docs/img/cli-getting-started/angular/chapter4/typescript.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/terminal-1.png","path":"docs/img/cli-getting-started/nativescript/chapter3/terminal-1.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/multiple-properties.gif","path":"docs/img/modules/animation/multiple-properties.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/opacity.gif","path":"docs/img/modules/animation/opacity.gif","modified":0,"renderable":0},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-003.png","path":"docs/img/launch-screen/ios/launch-screen-howto-003.png","modified":0,"renderable":0},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-010.png","path":"docs/img/launch-screen/ios/launch-screen-howto-010.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/icon-fonts/sample-app.png","path":"docs/img/modules/icon-fonts/sample-app.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/datetime.png","path":"docs/img/modules/keyboard/datetime.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/email.png","path":"docs/img/modules/keyboard/email.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/phone.png","path":"docs/img/modules/keyboard/phone.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/number.png","path":"docs/img/modules/keyboard/number.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/keyboard/url.png","path":"docs/img/modules/keyboard/url.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/terminal-2.png","path":"docs/img/cli-getting-started/nativescript/chapter3/terminal-2.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/slide-in-effect.gif","path":"docs/img/modules/animation/slide-in-effect.gif","modified":0,"renderable":0},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-002.png","path":"docs/img/launch-screen/ios/launch-screen-howto-002.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/translate.gif","path":"docs/img/modules/animation/translate.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/icon-fonts/fonts-folder.png","path":"docs/img/modules/icon-fonts/fonts-folder.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/android/3.png","path":"docs/img/cli-getting-started/angular/chapter0/android/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/ios/3.png","path":"docs/img/cli-getting-started/angular/chapter0/ios/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter1/android/1.png","path":"docs/img/cli-getting-started/angular/chapter1/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter1/android/2.png","path":"docs/img/cli-getting-started/angular/chapter1/android/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter1/ios/1.png","path":"docs/img/cli-getting-started/angular/chapter1/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter1/ios/2.png","path":"docs/img/cli-getting-started/angular/chapter1/ios/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/1.png","path":"docs/img/cli-getting-started/angular/chapter2/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/3.png","path":"docs/img/cli-getting-started/angular/chapter2/android/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/2.png","path":"docs/img/cli-getting-started/angular/chapter2/android/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/4.png","path":"docs/img/cli-getting-started/angular/chapter2/android/4.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/5.png","path":"docs/img/cli-getting-started/angular/chapter2/android/5.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/2.png","path":"docs/img/cli-getting-started/angular/chapter2/ios/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/3.png","path":"docs/img/cli-getting-started/angular/chapter2/ios/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/1.png","path":"docs/img/cli-getting-started/angular/chapter2/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/5.png","path":"docs/img/cli-getting-started/angular/chapter2/ios/5.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/4.png","path":"docs/img/cli-getting-started/angular/chapter2/ios/4.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/1.png","path":"docs/img/cli-getting-started/angular/chapter3/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/2.png","path":"docs/img/cli-getting-started/angular/chapter3/android/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/3.png","path":"docs/img/cli-getting-started/angular/chapter3/android/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/5.png","path":"docs/img/cli-getting-started/angular/chapter3/android/5.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/6.png","path":"docs/img/cli-getting-started/angular/chapter3/android/6.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/1.png","path":"docs/img/cli-getting-started/angular/chapter3/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/5.png","path":"docs/img/cli-getting-started/angular/chapter3/ios/5.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/6.png","path":"docs/img/cli-getting-started/angular/chapter3/ios/6.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/3.png","path":"docs/img/cli-getting-started/angular/chapter4/android/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/4.png","path":"docs/img/cli-getting-started/angular/chapter4/android/4.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/5.png","path":"docs/img/cli-getting-started/angular/chapter4/android/5.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/7.png","path":"docs/img/cli-getting-started/angular/chapter4/android/7.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/3.png","path":"docs/img/cli-getting-started/angular/chapter4/ios/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/4.png","path":"docs/img/cli-getting-started/angular/chapter4/ios/4.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/5.png","path":"docs/img/cli-getting-started/angular/chapter4/ios/5.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/7.png","path":"docs/img/cli-getting-started/angular/chapter4/ios/7.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter1/android/1.png","path":"docs/img/cli-getting-started/nativescript/chapter1/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/android/1.png","path":"docs/img/cli-getting-started/nativescript/chapter3/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/android/2.gif","path":"docs/img/cli-getting-started/nativescript/chapter3/android/2.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/android/3.png","path":"docs/img/cli-getting-started/nativescript/chapter3/android/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/ios/1.png","path":"docs/img/cli-getting-started/nativescript/chapter3/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/ios/3.png","path":"docs/img/cli-getting-started/nativescript/chapter3/ios/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/2.png","path":"docs/img/cli-getting-started/nativescript/chapter4/ios/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/1.png","path":"docs/img/cli-getting-started/nativescript/chapter4/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/3.png","path":"docs/img/cli-getting-started/nativescript/chapter4/ios/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/4.gif","path":"docs/img/cli-getting-started/nativescript/chapter4/ios/4.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/6.gif","path":"docs/img/cli-getting-started/nativescript/chapter4/ios/6.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/1.png","path":"docs/img/cli-getting-started/nativescript/chapter4/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/2.png","path":"docs/img/cli-getting-started/nativescript/chapter4/android/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/4.gif","path":"docs/img/cli-getting-started/nativescript/chapter4/android/4.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/3.png","path":"docs/img/cli-getting-started/nativescript/chapter4/android/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter5/ios/1.png","path":"docs/img/cli-getting-started/nativescript/chapter5/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/6.gif","path":"docs/img/cli-getting-started/nativescript/chapter4/android/6.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter5/android/2.gif","path":"docs/img/cli-getting-started/nativescript/chapter5/android/2.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter5/android/1.png","path":"docs/img/cli-getting-started/nativescript/chapter5/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter6/ios/1.png","path":"docs/img/cli-getting-started/nativescript/chapter6/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter6/ios/2.gif","path":"docs/img/cli-getting-started/nativescript/chapter6/ios/2.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter6/android/1.png","path":"docs/img/cli-getting-started/nativescript/chapter6/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter6/android/2.gif","path":"docs/img/cli-getting-started/nativescript/chapter6/android/2.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/android/1.png","path":"docs/img/cli-getting-started/nativescript/chapter2/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/android/2.png","path":"docs/img/cli-getting-started/nativescript/chapter2/android/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/android/4.png","path":"docs/img/cli-getting-started/nativescript/chapter2/android/4.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/android/3.png","path":"docs/img/cli-getting-started/nativescript/chapter2/android/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/ios/1.png","path":"docs/img/cli-getting-started/nativescript/chapter2/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/ios/4.png","path":"docs/img/cli-getting-started/nativescript/chapter2/ios/4.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/ios/2.png","path":"docs/img/cli-getting-started/nativescript/chapter2/ios/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/rotate.gif","path":"docs/img/modules/animation/rotate.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/ios/3.png","path":"docs/img/cli-getting-started/nativescript/chapter2/ios/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/4.gif","path":"docs/img/cli-getting-started/angular/chapter3/android/4.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/4.gif","path":"docs/img/cli-getting-started/angular/chapter3/ios/4.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/6.gif","path":"docs/img/cli-getting-started/angular/chapter4/android/6.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/android/2.png","path":"docs/img/cli-getting-started/nativescript/chapter0/android/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/android/1.png","path":"docs/img/cli-getting-started/nativescript/chapter0/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/android/3.png","path":"docs/img/cli-getting-started/nativescript/chapter0/android/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/ios/1.png","path":"docs/img/cli-getting-started/nativescript/chapter0/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/ios/2.png","path":"docs/img/cli-getting-started/nativescript/chapter0/ios/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/ios/3.png","path":"docs/img/cli-getting-started/nativescript/chapter0/ios/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter1/ios/1.png","path":"docs/img/cli-getting-started/nativescript/chapter1/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/ios/2.gif","path":"docs/img/cli-getting-started/nativescript/chapter3/ios/2.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/5.gif","path":"docs/img/cli-getting-started/nativescript/chapter4/ios/5.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/5.gif","path":"docs/img/cli-getting-started/nativescript/chapter4/android/5.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/chaining-with-animation-set.gif","path":"docs/img/modules/animation/chaining-with-animation-set.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/chaining-with-promises.gif","path":"docs/img/modules/animation/chaining-with-promises.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/multiple-views.gif","path":"docs/img/modules/animation/multiple-views.gif","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/scale.gif","path":"docs/img/modules/animation/scale.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/7.gif","path":"docs/img/cli-getting-started/angular/chapter3/android/7.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/6.gif","path":"docs/img/cli-getting-started/angular/chapter4/ios/6.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/7.gif","path":"docs/img/cli-getting-started/angular/chapter3/ios/7.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter5/android/1.png","path":"docs/img/cli-getting-started/angular/chapter5/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/modules/animation/infinite.gif","path":"docs/img/modules/animation/infinite.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/android/2.png","path":"docs/img/cli-getting-started/angular/chapter0/android/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/ios/1.png","path":"docs/img/cli-getting-started/angular/chapter0/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/android/1.png","path":"docs/img/cli-getting-started/angular/chapter0/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/ios/2.png","path":"docs/img/cli-getting-started/angular/chapter0/ios/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/1.png","path":"docs/img/cli-getting-started/angular/chapter4/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/1.png","path":"docs/img/cli-getting-started/angular/chapter4/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/android/1.png","path":"docs/img/cli-getting-started/angular/chapter6/android/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/android/2.png","path":"docs/img/cli-getting-started/angular/chapter6/android/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/android/3.png","path":"docs/img/cli-getting-started/angular/chapter6/android/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/ios/1.png","path":"docs/img/cli-getting-started/angular/chapter6/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/ios/2.png","path":"docs/img/cli-getting-started/angular/chapter6/ios/2.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/ios/3.png","path":"docs/img/cli-getting-started/angular/chapter6/ios/3.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter5/ios/1.png","path":"docs/img/cli-getting-started/angular/chapter5/ios/1.png","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/8.gif","path":"docs/img/cli-getting-started/angular/chapter4/ios/8.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter5/android/2.gif","path":"docs/img/cli-getting-started/angular/chapter5/android/2.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/8.gif","path":"docs/img/cli-getting-started/angular/chapter4/android/8.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter5/ios/2.gif","path":"docs/img/cli-getting-started/angular/chapter5/ios/2.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter5/ios/2.gif","path":"docs/img/cli-getting-started/nativescript/chapter5/ios/2.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/2.gif","path":"docs/img/cli-getting-started/angular/chapter4/android/2.gif","modified":0,"renderable":0},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/2.gif","path":"docs/img/cli-getting-started/angular/chapter4/ios/2.gif","modified":0,"renderable":0}],"Cache":[{"_id":"source/index.md","hash":"c687fa34923d61c9c05f1f98af8751845fc32142","modified":1472245554437},{"_id":"themes/nativescript/.git","hash":"9180112b71a2daaaab16705f347b1859c705359a","modified":1472910919976},{"_id":"themes/nativescript/_config.yaml","hash":"461f338d21df37b79f0cb2071fa7cadc04e9180b","modified":1472910921711},{"_id":"source/core-concepts/architecture-angular.md","hash":"19a69c3f0dd3d598501d57f61b8b2b6cbafaa745","modified":1472245552866},{"_id":"source/core-concepts/DataBinding.md","hash":"9038d046c249f09cb7c1996100b6c6f301325a2e","modified":1472245552863},{"_id":"source/core-concepts/accessing-native-apis-with-javascript.md","hash":"76bd632f33067ae23f87991f580f036c59ce7e71","modified":1472245552865},{"_id":"source/core-concepts/application-management.md","hash":"d87adafddd10354b3e3b794c90b8a793ff5110f6","modified":1472245552866},{"_id":"source/core-concepts/customizing-bootstrap.md","hash":"08777be2749a337cca38824436747b9dc4091cb8","modified":1472245552871},{"_id":"source/core-concepts/creating-launch-screens-ios.md","hash":"b02593c89ee6e278d182678c513ecbdba4099027","modified":1472245552870},{"_id":"source/core-concepts/navigation.md","hash":"64a397a7a189e07fd5c7dcc419e70189e23ef6a3","modified":1472245552877},{"_id":"source/core-concepts/modules.md","hash":"a4588703a5bd87b9ba1f83c9b2f23489d5467065","modified":1472245552874},{"_id":"source/core-concepts/bindings.md","hash":"441c2478101f2fbed47aa599e0dd3acfbce3b5e7","modified":1472245552869},{"_id":"source/docs/img/architecture.png","hash":"dc40f3426d88fe68aa35fa14a7a1462be5de161e","modified":1472245552898},{"_id":"source/core-concepts/supporting-multiple-screens.md","hash":"d648d7a1c9b74dd5bfac8f75a216af8da531ee78","modified":1472245552879},{"_id":"source/core-concepts/events.md","hash":"1e4ce363fb4563efa2c67332807971a080d00d8e","modified":1472245552873},{"_id":"source/core-concepts/properties.md","hash":"b699ba7c494bbd359f78de952b86c34c23ca335a","modified":1472245552878},{"_id":"source/hardware/location.md","hash":"d6b5748e9198d5057c31bd4754458aeff59a4037","modified":1472245552886},{"_id":"source/hardware/camera.md","hash":"9ce87c3131d20a9c83b609cec7800bd55eba1d29","modified":1472245552885},{"_id":"source/plugins/angular-third-party.md","hash":"4d62e666b2c42f3c58e7def002608417e0c2c5b0","modified":1472245554450},{"_id":"source/plugins/cocoapods.md","hash":"26a591d00544f86f26435b6a0b600364fe3c7cb4","modified":1472245554451},{"_id":"source/cookbook/formatted-string-ng.md","hash":"61cd2157f60a6de27aeaebb1fd9cae8186519806","modified":1472245552861},{"_id":"source/plugins/plugins.md","hash":"8fa944c59a46c75598bcf41f11d00ff03e7aae50","modified":1472245554464},{"_id":"source/cookbook/tab-view-ng.md","hash":"01714f2f82b6f3b4302bd3cfea971fd6c581717c","modified":1472245552862},{"_id":"source/plugins/ui-plugin.md","hash":"e8b80fdd2cf635993880456ae9124eb40897f1e6","modified":1472245554469},{"_id":"source/tutorial/0.md","hash":"aa351875e1bc22f6326521d2eddd1249ec663acc","modified":1472245554480},{"_id":"source/tutorial/1.md","hash":"2e474f36dc34c5d8c61e219e28e0d70c91207afa","modified":1473333840052},{"_id":"source/tutorial/2.md","hash":"6ccb928b47a9ad4f84288e41518a69a08c13f906","modified":1472245554495},{"_id":"source/tutorial/3.md","hash":"ea6fb81886d6908d914505d66e24690c4cfea83e","modified":1472245554506},{"_id":"source/tutorial/5.md","hash":"13e806094e6436af3bfda2739c31d78d0a43d0e7","modified":1472245554524},{"_id":"source/tutorial/4.md","hash":"bd127d3c6fb95fb19d34cbc9519cae0574b4a6ba","modified":1472245554510},{"_id":"source/tutorial/6.md","hash":"452415d655dc426e6cd9711d41e8e9a4cf02cb0c","modified":1472245554538},{"_id":"source/tutorial/7.md","hash":"40bd95540c118e913eca0762731add2dafd40325","modified":1472245554552},{"_id":"source/ui/action-bar.md","hash":"2f9633a59155e9c3890ecc26076deb2c9f46071c","modified":1472245554568},{"_id":"source/ui/animation-css.md","hash":"dbf7b0e699bde9e00efe3d4d0c0d16678ba4311b","modified":1472245554576},{"_id":"source/ui/animation-code.md","hash":"adcedce6069e2ac84e7126b60a74bdeac9b9b56a","modified":1472245554569},{"_id":"source/ui/animation-examples.md","hash":"4ec685a40d54330fffbfb3fb5fb25dd1360671f7","modified":1472245554586},{"_id":"source/ui/animation.md","hash":"e8f082f8e682bc4e7236ef86459c5187c7158092","modified":1472245554587},{"_id":"source/ui/change-status-bar-style-ios.md","hash":"6f7c849803ea8d4219f449923ea475350c1db032","modified":1472245554588},{"_id":"source/ui/gestures.md","hash":"a787a752eede3c7824d27d23b41db366f6b04d5d","modified":1472245554594},{"_id":"source/ui/icon-fonts.md","hash":"2a3aa7f9c591e0d4b9a889dfa9743801b9f91dfc","modified":1472245554601},{"_id":"source/ui/keyboard.md","hash":"3e540c65c980235d46e64efca443088197ee49e0","modified":1472245554602},{"_id":"source/ui/layouts.md","hash":"8d0714554aecdabc9333ac826eba3d92f94f8cc9","modified":1472245554613},{"_id":"source/ui/placeholder.md","hash":"8bb36cd443505289e94cd1b729dcdcde0fcc8150","modified":1472245554618},{"_id":"source/ui/list-view.md","hash":"2679d3e63d31879305810bb2489bf1a55d21928b","modified":1472245554613},{"_id":"source/ui/styling.md","hash":"4200eaa5fb73a5880616898d2bba62fcfa2a491e","modified":1472245554619},{"_id":"source/ui/ui-dialogs.md","hash":"f49a2dd62884df173af1681ea91209eae75184a1","modified":1472245554620},{"_id":"source/ui/ui-images.md","hash":"7f2654998aea0e7a585bb95e9150952c99eabeac","modified":1472245554627},{"_id":"source/ui/ui-views.md","hash":"08ece4829cd97e47b74c8cf57c7a45673fda8de8","modified":1472245554628},{"_id":"source/ui/ui-with-xml.md","hash":"793c90bff5201ce77f94308d1910c717e09b791d","modified":1472245554629},{"_id":"source/workflow/bundling-with-webpack.md","hash":"c2222419203d422284b047a4e9a8b051f4b37594","modified":1472245554630},{"_id":"source/workflow/debugging.md","hash":"39c7af200104122cc4afb16b28c2dcd018eca2e1","modified":1472245554632},{"_id":"source/workflow/publishing-android-apps.md","hash":"e5219d2a71dfe3ec5930989883462eb4e4cd8378","modified":1472245554639},{"_id":"source/workflow/publishing-ios-apps.md","hash":"a7230408604f110a82a67d051387a377bf0bcdec","modified":1472245554640},{"_id":"source/workflow/testing.md","hash":"44287e3fb6bd1d3043dec7371aaeeafbbf136187","modified":1472245554641},{"_id":"themes/nativescript/layout/layout.ejs","hash":"d5652b590bea9b7e5734d0b7bfb606d6d02d52e0","modified":1474618815691},{"_id":"source/workflow/transpilers.md","hash":"074348801083416599b270449a8a6d12c142ea75","modified":1472245554642},{"_id":"themes/nativescript/layout/page.ejs","hash":"94f695c70d52d360766b980383b7b78b6de1007f","modified":1472910921726},{"_id":"source/workflow/visual-studio-code-extension.md","hash":"9c9e6c7c532c895d04afe127bb7a0b4a08c45990","modified":1472245554643},{"_id":"source/docs/img/ab-getting-started/step1-android.png","hash":"f9d9ea75d4355b4a1c9989a33cd9f33b3a17e610","modified":1472245552887},{"_id":"source/docs/img/ab-getting-started/step3-android.png","hash":"e2d221e119e4dd5a413851bc499b9e8c20625d61","modified":1472245552892},{"_id":"source/docs/img/ab-getting-started/step1-ios.png","hash":"321aff59b86b2ea50de49923bb629e37c446ad7a","modified":1472245552889},{"_id":"source/docs/img/ab-getting-started/step2-android.png","hash":"6218e7591caf6a91b28bedef391954ff08bdecde","modified":1472245552890},{"_id":"source/docs/img/ab-getting-started/step2-ios.png","hash":"05b304d8e73207ba4d43fad8c3824fa943c08553","modified":1472245552891},{"_id":"source/docs/img/angular/list-view-setupItemView.png","hash":"8aff464d74a716dca45085fa87d6585f3bdc9fe3","modified":1472245552897},{"_id":"source/docs/img/ab-getting-started/step3-ios.png","hash":"3fd301df2e5ccfafa756a22c16814ebf47d532c4","modified":1472245552895},{"_id":"source/docs/img/cli/tns-create-windows.png","hash":"558297398d949a651e7b11c2f2ce00e9b4c77b48","modified":1472245553840},{"_id":"source/docs/img/cli/tns-create-unix.png","hash":"a59d287551e6c35b3174b90107671c9a5f63e3b1","modified":1472245553826},{"_id":"source/docs/img/cli/tns-platform-add-android-windows.png","hash":"4d301d886915e7ec523f54add4a490e0cfb2180a","modified":1472245553844},{"_id":"source/docs/img/cli/tns-platform-add-ios-unix.png","hash":"27d301b436db392d6061b772d2932cbbc6955d63","modified":1472245553845},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-backgroundSpan.png","hash":"f87b72ac92b9612ac1ecf209b60e69773bf7da4d","modified":1472245552905},{"_id":"source/docs/img/cli/tns-prepare-android-windows.png","hash":"8c73111fafaa3c7671d981a03dc9e88215788e33","modified":1472245553846},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-background-color.png","hash":"7d61e9adc4e3a35ebbb41357998c127ef303440b","modified":1472245552903},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-black-style.png","hash":"e6fd40fcc1258935c46df3eb935e5094ec06c0fd","modified":1472245552908},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-style-change.png","hash":"fe2007b3cf78ab7e95a99f43850e356c1dedd39c","modified":1472245552906},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-set-backgroundcolor.png","hash":"084577fa6a36417adc689fea94a60884e77008f8","modified":1472245552909},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar.png","hash":"07955d7b7cbfe13b2786227511f63595dd0d8b91","modified":1472245552910},{"_id":"source/docs/img/navigation-angular/outlet-ios.gif","hash":"198f8e008de618384c729ad275ee036d16bc9e69","modified":1472245554405},{"_id":"source/docs/img/companions/android-code.png","hash":"4f6f0334a6334fd6738879531dd826bf980ccd69","modified":1472245553848},{"_id":"source/docs/img/companions/ios-code.png","hash":"e0aded0b9e7f5e404ddd97070d6c3a1044691fc6","modified":1472245553851},{"_id":"source/docs/img/resources/android-resources.png","hash":"64278520cae3452c6cb73c1bd20805edc024cc68","modified":1472245554413},{"_id":"source/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup.png","hash":"c0fc357424662d7613666d8df14608e0ffc90818","modified":1472245552907},{"_id":"source/docs/img/resources/ios-resources.png","hash":"918e71b9fea355702db709f18d295375b7172742","modified":1472245554416},{"_id":"source/docs/img/visual-studio-code-extension/debug-panel.png","hash":"e612280f39e73b7d346b2d44a7cbd9adb11e86ff","modified":1472245554420},{"_id":"source/docs/img/visual-studio-code-extension/nativescript-commands.png","hash":"e3825dbd2e80090dd221ca32e05863cdbcdb68d3","modified":1472245554425},{"_id":"source/docs/img/visual-studio-code-extension/gear-icon.png","hash":"0600887cf4f80531625c5114661295adf3e3b478","modified":1472245554423},{"_id":"source/docs/img/visual-studio-code-extension/nativescript-not-found-error-message.png","hash":"fd810256e8b50e04ec9126149f0ab2646c1052c2","modified":1472245554429},{"_id":"themes/nativescript/layout/partials/illustration-compass.ejs","hash":"8072852c211ea881b8facccbe00d975b2507d990","modified":1472910921727},{"_id":"themes/nativescript/layout/partials/illustration-github.ejs","hash":"ad171cc4d41acf187831c415cb1928d5ef7a1142","modified":1472910921728},{"_id":"themes/nativescript/layout/partials/illustration-guide.ejs","hash":"f490bb8fd8e5abd0e71c97c92a335a0802e329e1","modified":1472910921729},{"_id":"themes/nativescript/layout/partials/illustration-help.ejs","hash":"5468f1f14d2ae2f64348300d19482a58ff270371","modified":1472910921729},{"_id":"themes/nativescript/layout/partials/illustration-logs.ejs","hash":"47638a8a92ab5e5a7a143e1588ca9baaec371f9d","modified":1472910921730},{"_id":"themes/nativescript/layout/partials/illustration-support.ejs","hash":"6091bbcbb48980030b9d799ca044a523f48f08c5","modified":1472910921731},{"_id":"themes/nativescript/layout/partials/sidebar.ejs","hash":"ffb59758ad680daf225b046b3f132b07cada61c9","modified":1472910921735},{"_id":"themes/nativescript/source/fonts/percolate.eot","hash":"9f46f6ed3453808cb206b5b8c7c399f8c7c50b4b","modified":1472910921737},{"_id":"themes/nativescript/source/fonts/percolate.ttf","hash":"ae93904a100e0c875bb382cb88709de4cd8b6a37","modified":1472910921740},{"_id":"themes/nativescript/source/fonts/percolate.woff","hash":"f475ff4ac3d777c8d56bc7040d6f8576b86398a5","modified":1472910921741},{"_id":"themes/nativescript/source/images/favicon.png","hash":"79ca4e158792462510cfec16c00b145e1f32c74e","modified":1472910921742},{"_id":"themes/nativescript/source/images/icon-white.svg","hash":"cbec26722baa2d6d49303c5e73920ca4751740a0","modified":1472910921743},{"_id":"themes/nativescript/source/images/logo-blue.svg","hash":"78d728c1ddfe431e31c04d4130a919db6d3979bd","modified":1472910921744},{"_id":"themes/nativescript/source/script/code-block.js","hash":"5f30513ca77e24ee1b48a46283443918adf0b6d7","modified":1472910921745},{"_id":"themes/nativescript/source/script/code-environment.js","hash":"af790301b4519657d4a43d55ebf5c346e6b13613","modified":1472910921750},{"_id":"themes/nativescript/source/script/main.js","hash":"f75c1da8a63548bf79b001ab6173439f74cdf7bd","modified":1472910921754},{"_id":"themes/nativescript/source/script/smooth-scroll.min.js","hash":"e020022c4f2f1d9efd1b090cf447eaa6a79fab48","modified":1472910921755},{"_id":"themes/nativescript/source/style/style.less","hash":"aefa787b325a977e9fc5bed971f937f6503c5b17","modified":1472910921778},{"_id":"themes/nativescript/source/style/tabs.css","hash":"f4f0c320d67eda84306421d64f5bdbdb82f51d89","modified":1472910921779},{"_id":"source/docs/img/cli/finder-app-created.png","hash":"b0b52720158da01df9a1dd4b451eb182e836b275","modified":1472245553825},{"_id":"source/docs/img/cli/tns-emulate-ios-unix.png","hash":"ed59c4ed2be470612ab8b96fd5f436b0c488d809","modified":1472245553843},{"_id":"source/docs/img/cli/tns-emulate-android-windows.png","hash":"6d92523737e64093220a782ed94340a042db24eb","modified":1472245553842},{"_id":"source/docs/img/visual-studio-code-extension/install.png","hash":"b65a6f7370a5243634b4507832388a4b1932be69","modified":1472245554424},{"_id":"source/docs/img/visual-studio-code-extension/configurations-menu.png","hash":"76e4e73b73d4a67f1e9678956fb421e08071aa84","modified":1472245554419},{"_id":"source/docs/img/visual-studio-code-extension/nativescript-tns-args.png","hash":"42056ea61850ec1a3f64d059cc7f1637f2a8c5ce","modified":1472245554430},{"_id":"themes/nativescript/source/style/_global/panel.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472910921765},{"_id":"source/docs/img/gallery/android/absoluteLayoutPage.png","hash":"c8da08322e8edf8840bfaed50191762f2ddc0296","modified":1472245553854},{"_id":"source/docs/img/gallery/android/activityIndicatorPage.png","hash":"760521166ec672daa374a76e5ca239eb7f7b3952","modified":1472245553855},{"_id":"source/docs/img/gallery/android/buttonPage.png","hash":"53da44f6e777546c141c236a8e6eb4ca154e2245","modified":1472245553863},{"_id":"source/docs/img/gallery/android/datePickerPage.png","hash":"8b616c42762ef942a3cc72bb71d36408afd1cdf9","modified":1472245553865},{"_id":"source/docs/img/gallery/android/dialogsPage_confirm.png","hash":"68be4af7c04e4204519b24374cf6520310dcfce2","modified":1472245553867},{"_id":"source/docs/img/gallery/android/dockLayoutPage.png","hash":"826faeef1d2cbc321cbab6062695d0053ebd0b66","modified":1472245553871},{"_id":"source/docs/img/gallery/android/gridLayoutPage.png","hash":"0db88e22a5e1c75abe032cd733e52a981e650e99","modified":1472245553871},{"_id":"source/docs/img/gallery/android/htmlViewPage.png","hash":"464a89dae2bf962e9a06678b46340d5a4e87b0f0","modified":1472245553873},{"_id":"source/docs/img/gallery/android/imagePage.png","hash":"05cbb0f329891cd610f0fa5fc46fc9d2d13b4e80","modified":1472245553874},{"_id":"source/docs/img/gallery/android/homePage.png","hash":"2919edda04a38beb43c3879ab2f5126649bd2c73","modified":1472245553872},{"_id":"source/docs/img/gallery/android/labelPage.png","hash":"a9e30d3ef5481608a1119cefd7684fa5634c5046","modified":1472245553875},{"_id":"source/docs/img/gallery/android/progressPage.png","hash":"06af2b0dbee9603477889fdca0bdcd2ecd8bf4a2","modified":1472245553877},{"_id":"source/docs/img/gallery/android/listPickerPage.png","hash":"6f3e1615fdcaa84149ed9bcfe82fe5190b2f3534","modified":1472245553875},{"_id":"source/docs/img/gallery/android/listViewPage.png","hash":"3d67fad090f42d4c168b7137f0360d7a7b61acc2","modified":1472245553876},{"_id":"source/docs/img/gallery/android/searchBarPage.png","hash":"de1a7f56691b32d87c86787e43d52faa768d44aa","modified":1472245553880},{"_id":"source/docs/img/gallery/android/scrollViewPage.png","hash":"55222d966597551edd41326dfbf922eb00f30711","modified":1472245553879},{"_id":"source/docs/img/gallery/android/stackLayoutPage.png","hash":"9f56a4dc6182ead7cc643c0bdfbad0256741c9ac","modified":1472245553905},{"_id":"source/docs/img/gallery/android/sliderPage.png","hash":"6aa8aac02ea84a2799b47b8076bfd2d86d7bb2ed","modified":1472245553894},{"_id":"source/docs/img/gallery/android/segmentedBarPage.png","hash":"2b1ca150056b19252401e9771484aeb004aaef88","modified":1472245553887},{"_id":"source/docs/img/gallery/android/switchPage.png","hash":"522ce7f7b35262400d0ced9e7fea6fdd1bfdc2bb","modified":1472245553906},{"_id":"source/docs/img/gallery/android/tabViewPage.png","hash":"c21560d56213e93e4e45f4fde5ae67f92f6b3fd3","modified":1472245553907},{"_id":"source/docs/img/gallery/android/textFieldPage.png","hash":"0427b2cc70c9cb3121c2fa27b5a7abb9b9d0f574","modified":1472245553908},{"_id":"source/docs/img/gallery/android/timePickerPage.png","hash":"888a3f86d4d2db0dcf81259211d5258f7a90a376","modified":1472245553910},{"_id":"source/docs/img/gallery/android/wrapLayoutPage.png","hash":"c2f2770c4825514381808f745bad6f9f4f7624c7","modified":1472245553912},{"_id":"source/docs/img/gallery/android/webViewPage.png","hash":"792e955943a845932f16a53b840b55740afb53b2","modified":1472245553911},{"_id":"source/docs/img/gallery/android/textViewPage.png","hash":"b30362d25f45df68f1532d0941da95746dbf78f0","modified":1472245553909},{"_id":"source/docs/img/gallery/ios/absoluteLayoutPage.png","hash":"cf25903f2a12baafcbebf215bcaec3b4a061fcce","modified":1472245553913},{"_id":"source/docs/img/gallery/ios/activityIndicatorPage.png","hash":"3ad43a953f1dc456c027ddd4306e30f61ba49903","modified":1472245553914},{"_id":"source/docs/img/gallery/ios/buttonPage.png","hash":"bc345d0f9d99f90149a87980f71e7511015ff7d3","modified":1472245553979},{"_id":"source/docs/img/gallery/ios/gridLayoutPage.png","hash":"ad6b8fca886783c985be2282eb08f7c414b254e1","modified":1472245554010},{"_id":"source/docs/img/gallery/ios/datePickerPage.png","hash":"d99450c49dfb28cdd8367262e2020c547fd73e18","modified":1472245553981},{"_id":"source/docs/img/gallery/ios/dockLayoutPage.png","hash":"44c11d0cc09917e45afffc17752d09a232f90d57","modified":1472245554009},{"_id":"source/docs/img/gallery/ios/homePage.png","hash":"117a4bdbc686644914e6dc36b64d4b942085bb6c","modified":1472245554011},{"_id":"source/docs/img/gallery/ios/dialogsPage_confirm.png","hash":"521ac4f8605ed140cd298647a41079b05d27815e","modified":1472245554008},{"_id":"source/docs/img/gallery/ios/htmlViewPage.png","hash":"e4bb13d5b225e94dbef54e5abc5f7f809742e4d2","modified":1472245554011},{"_id":"source/docs/img/gallery/ios/imagePage.png","hash":"31715dd2f87f74807f1946c5adeb0b02a50db53a","modified":1472245554012},{"_id":"source/docs/img/gallery/ios/labelPage.png","hash":"54547a5a2c705066d664a1c7edea417a426c8f3e","modified":1472245554013},{"_id":"source/docs/img/gallery/ios/progressPage.png","hash":"5b05e2915b5148f97453faa914cd481a58b56d19","modified":1472245554016},{"_id":"source/docs/img/gallery/ios/listPickerPage.png","hash":"0f9cc59e43f557e114cf071fefc39f61f6e2bde3","modified":1472245554014},{"_id":"source/docs/img/gallery/ios/listViewPage.png","hash":"5e905bec7c65c1f164e04b03d21906f1be6b5391","modified":1472245554015},{"_id":"source/docs/img/gallery/ios/searchBarPage.png","hash":"12a60670c5c6a14845708211f2cd2cad28a25bc0","modified":1472245554019},{"_id":"source/docs/img/gallery/ios/sliderPage.png","hash":"0f4efc5278cea535fa9e8aacce3a14f8f58879d4","modified":1472245554036},{"_id":"source/docs/img/gallery/ios/stackLayoutPage.png","hash":"f7a05444234771938b47766bc2114a2823b7e455","modified":1472245554037},{"_id":"source/docs/img/gallery/ios/switchPage.png","hash":"b0519118238cc4b9947ee611c227bbb3e701b67d","modified":1472245554038},{"_id":"source/docs/img/gallery/ios/tabViewPage.png","hash":"3ec10824a3d325738f9359f560c215f60eaa1862","modified":1472245554039},{"_id":"source/docs/img/gallery/ios/segmentedBarPage.png","hash":"1ba491148f277eba980faadf191cd560d9963c19","modified":1472245554021},{"_id":"source/docs/img/gallery/ios/wrapLayoutPage.png","hash":"2b8e25fdc91d0be46f9c35bc39046ffb2b9f212c","modified":1472245554044},{"_id":"source/docs/img/gallery/ios/textViewPage.png","hash":"654d0aa7c2209ba5fc634e1be3ec2d454e6de65b","modified":1472245554041},{"_id":"source/docs/img/gallery/ios/timePickerPage.png","hash":"42f353ad2ef0c40b4f41774b4231370d79ee8bc6","modified":1472245554041},{"_id":"source/docs/img/gallery/ios/webViewPage.png","hash":"b33466e3009495bc14885f89ae8107989d636cc2","modified":1472245554043},{"_id":"source/docs/img/modules/action-bar/action-items-android.png","hash":"d8358d05b139be6831b0f7ae8f4ad379704565a3","modified":1472245554090},{"_id":"source/docs/img/gallery/ios/textFieldPage.png","hash":"4495e79951426a76cb9077fa4ef8813142da405a","modified":1472245554040},{"_id":"source/docs/img/modules/action-bar/action-items-ios.png","hash":"3ff751464872463706a30974ce16de2c5c583839","modified":1472245554102},{"_id":"source/docs/img/modules/action-bar/action-items-visibility-ios.png","hash":"b482e32a30eceb4d5763dde6772496ba49764d20","modified":1472245554123},{"_id":"source/docs/img/modules/action-bar/action-items-visibility-android.png","hash":"280e22954c5249176637e6fc176116beb5525c0a","modified":1472245554122},{"_id":"source/docs/img/modules/action-bar/home-icon-android.png","hash":"dd3dc20e22231fe725d2865822867115f7ebf0c7","modified":1472245554124},{"_id":"source/docs/img/modules/action-bar/nav-btn-android.png","hash":"4dd28aa0eddff9b87e78d830096c86688c9cbad8","modified":1472245554124},{"_id":"source/docs/img/modules/action-bar/nav-btn-ios.png","hash":"14868d2bd6fba8fbee07817c53486facb37d8cf6","modified":1472245554125},{"_id":"source/docs/img/modules/action-bar/style-android.png","hash":"93cd29c0c2f67c627d38e7074714a36d6c2ea0b1","modified":1472245554127},{"_id":"source/docs/img/modules/action-bar/side-drawer-ios.png","hash":"923d6717c2fd218701a4507f204b215f3c604b4b","modified":1472245554126},{"_id":"source/docs/img/modules/action-bar/style-ios.png","hash":"bc7b975f4f0e82805fb69caf87aa9d3f2c913e59","modified":1472245554128},{"_id":"source/docs/img/modules/action-bar/title-ios.png","hash":"11b37a4c6b9bb4a748e0fface3e46afe0443b0b9","modified":1472245554129},{"_id":"source/docs/img/modules/action-bar/title-android.png","hash":"f0b4787fc548614a802c610071efd0a64e497153","modified":1472245554128},{"_id":"source/docs/img/modules/action-bar/title-view-android.png","hash":"95bbffa642ff90dea1367cf257fcdab9d995fe0d","modified":1472245554130},{"_id":"source/docs/img/modules/action-bar/side-drawer-android.png","hash":"2b0d9a94dcf15be707009f545c49ebb16a8ad3fa","modified":1472245554125},{"_id":"source/docs/img/modules/action-bar/title-view-ios.png","hash":"18f703f2c7019a3e39b092519d78612a48fd2d6a","modified":1472245554130},{"_id":"source/docs/img/modules/animation/bezier-graph.png","hash":"420b2424f4d6998adae1d22acecb87b311bd71f1","modified":1472245554134},{"_id":"source/docs/img/modules/animation/hello-world.gif","hash":"06972f26f6d0b91652949f860266b241046fb537","modified":1472245554209},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-001.png","hash":"f6334ee2f6e5d97d15e7d2ef817a305bfe883eca","modified":1472245554046},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-008.png","hash":"378e974068bd52cacdb0db6d5f50e123624fb08d","modified":1472245554078},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-009.png","hash":"89cdae6d66789e1aed410b4af3cfd23cf17f8281","modified":1472245554085},{"_id":"source/docs/img/modules/layouts/absolute-layout.png","hash":"490c88d9d04cf6380b32691fe7083d415817c5f5","modified":1472245554358},{"_id":"source/docs/img/modules/layouts/absolute-layout2.png","hash":"9cfe20183a66bbd7d6188148bf22b95e078826a9","modified":1472245554359},{"_id":"source/docs/img/modules/layouts/dock-layout1.png","hash":"ec31441fdc9d9e4b13b1f274af3cdeadcb392a60","modified":1472245554368},{"_id":"source/docs/img/modules/layouts/dock-layout2.png","hash":"0bb1974dcd8d8bfbdf051ec5ee1cdec9833ff3a1","modified":1472245554369},{"_id":"source/docs/img/modules/layouts/dock-layout3.png","hash":"f2e2a32e78573aaa002361534d338edef03c9ff8","modified":1472245554370},{"_id":"source/docs/img/modules/layouts/grid-layout.png","hash":"efc71f09e96fca5427d1aae58afe0ce5e61c0f4c","modified":1472245554371},{"_id":"source/docs/img/modules/layouts/grid-layout1.png","hash":"4559b43baac57f8e1783b865c550b6e782a3712a","modified":1472245554371},{"_id":"source/docs/img/modules/layouts/grid-layout2.png","hash":"8f229bdffc283a07d503f8274f0f3a4b50f7a60f","modified":1472245554372},{"_id":"source/docs/img/modules/layouts/grid-layout3.png","hash":"20f66c758a8874fe4fbcdd70ecd36caf8631b81e","modified":1472245554374},{"_id":"source/docs/img/modules/layouts/grid-layout4.png","hash":"f56bebfb306398880869eaadbec1946b68875fcf","modified":1472245554375},{"_id":"source/docs/img/modules/layouts/grid-layout5.png","hash":"5ed9ef1d470e10dbc364dedef72fd6f7ee718741","modified":1472245554376},{"_id":"source/docs/img/modules/layouts/stack-layout3.png","hash":"2420f6594b67acb6c368294af87f0ea7b349c67b","modified":1472245554378},{"_id":"source/docs/img/modules/layouts/stack-layout1.png","hash":"dff13e8c5bfa0bf886e891a02d548a6d1bbdb127","modified":1472245554377},{"_id":"source/docs/img/modules/layouts/stack-layout2.png","hash":"3ca84d3fdfc960c1f34f99f92bcc5f9328757376","modified":1472245554378},{"_id":"source/docs/img/modules/layouts/stack-layout4.png","hash":"f474699b119c51b0c7753dae583bf1128888357d","modified":1472245554379},{"_id":"source/docs/img/modules/layouts/wrap-layout2.png","hash":"57863fa3f35c4d9afb24f4a3bc3b7bf34f2f9df7","modified":1472245554380},{"_id":"source/docs/img/modules/layouts/wrap-layout1.png","hash":"6cf404c7cc2281ab9fee501a15f04c3d7a4717bf","modified":1472245554380},{"_id":"source/docs/img/modules/layouts/wrap-layout3.png","hash":"3d59ac80cb408d753e906772f623db17ca1ddaa4","modified":1472245554382},{"_id":"source/docs/img/navigation-angular/outlet-android.gif","hash":"a0ae24dffeff23d552789fcdacd434e6d20a503c","modified":1472245554395},{"_id":"source/docs/img/navigation-angular/page-outlet-ios.gif","hash":"adf77ea1876334eebb83b9f581ebbd5c086f1071","modified":1472245554412},{"_id":"themes/nativescript/source/fonts/percolate.svg","hash":"6e6127d99ec42503bda1c241dbf5ca0dd1deabe3","modified":1472910921739},{"_id":"themes/nativescript/source/style/_global/Radio.less","hash":"54761a87e83ba442457201ceaaadefa108ff958e","modified":1472910921757},{"_id":"themes/nativescript/source/style/_global/Checkbox.less","hash":"ae67f5cdb9c96422977de7ec114032fdacfac7f0","modified":1472910921756},{"_id":"themes/nativescript/source/style/_global/Select.less","hash":"01ebafa7fea76482f6952bcd897e4b8c3a498230","modified":1472910921758},{"_id":"themes/nativescript/source/style/_global/Input.less","hash":"3779647ad6dfda375fc71b2b31c484a5a3b0c924","modified":1472910921757},{"_id":"themes/nativescript/source/style/_global/Textarea.less","hash":"97a7023ade6b80af38aff1bef49db15d34204691","modified":1472910921759},{"_id":"themes/nativescript/source/style/_global/animation.less","hash":"b482a57b2c515cd32e5e851e7a4129d74d045309","modified":1472910921759},{"_id":"themes/nativescript/source/style/_global/base.less","hash":"475ab5fac0c6ace5777965212b4503445f77b2bc","modified":1472910921760},{"_id":"themes/nativescript/source/style/_global/button.less","hash":"a6ce0e5bf6fcc641fb018dce49c09d0a5fd3d06f","modified":1472910921760},{"_id":"themes/nativescript/source/style/_global/docsearch.less","hash":"7008b501c270676c4c39c47b3b839d373216aac0","modified":1472910921761},{"_id":"themes/nativescript/source/style/_global/form.less","hash":"bac5d33d4dcb9f4bc38e035a4692fa523189da12","modified":1472910921762},{"_id":"themes/nativescript/source/style/_global/formatting.less","hash":"8e523287fcc6098f79c19bcbb2239f9357a551f0","modified":1472910921762},{"_id":"themes/nativescript/source/style/_global/icon.less","hash":"d417e01b4c8126e3702cceb716e1666143b171d8","modified":1472910921763},{"_id":"themes/nativescript/source/style/_global/link.less","hash":"f0b6138cd1d51238f5d22a0ff3c26aea652cdc15","modified":1472910921764},{"_id":"themes/nativescript/source/style/_global/nav.less","hash":"da0b7ffba3ba4276266c7cd0261ea8ba877486dd","modified":1472910921765},{"_id":"themes/nativescript/source/style/_global/syntax.less","hash":"5442db7be1c95b3997008e565b4ac961e0d11170","modified":1472910921766},{"_id":"themes/nativescript/source/style/_theme/content.less","hash":"baff4cc03f2adc012cce4a4f0953401660bd74cd","modified":1472910921767},{"_id":"themes/nativescript/source/style/_theme/layout.less","hash":"7f300ada5cc3fc2d407a82da6f15f1adf76decc3","modified":1472910921768},{"_id":"themes/nativescript/source/style/_theme/nav.less","hash":"a546b13ce77b0fe5109b8a004dccd4dd03303b87","modified":1472910921769},{"_id":"themes/nativescript/source/style/_theme/panel.less","hash":"e4d3cf81da65576f175c05b1ac47f5706dfe2371","modified":1472910921769},{"_id":"themes/nativescript/source/style/_theme/sidebar.less","hash":"139126f6b94b2faf3d60173b2caef8f9c688f344","modified":1472910921770},{"_id":"themes/nativescript/source/style/_util/clearfix.import.less","hash":"a09a831dc92ab0695eca04523a6e1f415e404847","modified":1472910921771},{"_id":"themes/nativescript/source/style/_util/color.import.less","hash":"d9659e5e3283b139c2830e97acf54294dc47fbf9","modified":1472910921771},{"_id":"themes/nativescript/source/style/_util/easing.import.less","hash":"1c4561cd99df994253eb806f571026c0d92a5679","modified":1472910921772},{"_id":"themes/nativescript/source/style/_util/helper.import.less","hash":"a54d2ea43deb8c03bccf85af16c361541627d719","modified":1472910921773},{"_id":"themes/nativescript/source/style/_util/index.import.less","hash":"ad631da00385009d6e6970ea4b9112989488509a","modified":1472910921773},{"_id":"themes/nativescript/source/style/_util/lesshat.import.less","hash":"dbccdcb79814f8fddb8c4b83672b22867db73884","modified":1472910921774},{"_id":"themes/nativescript/source/style/_util/link.import.less","hash":"001685c05e0288a45b30ccac124e5e2859edd0b5","modified":1472910921774},{"_id":"themes/nativescript/source/style/_util/normalize.import.less","hash":"08678839e42ca4fea4367a847f38464081a4d35b","modified":1472910921775},{"_id":"themes/nativescript/source/style/_util/scrollbar.import.less","hash":"96cd6954f50a2e29e9bfc97592e8b12d75971345","modified":1472910921776},{"_id":"themes/nativescript/source/style/_util/text.import.less","hash":"ea177bc4512024e0f09a4d1fe8db86a6f9cc62d6","modified":1472910921776},{"_id":"themes/nativescript/source/style/_util/typography.import.less","hash":"d936a631cd9ad8688a671723f05491d3236b52b2","modified":1472910921777},{"_id":"themes/nativescript/source/style/_util/ui.import.less","hash":"5e10e18f47aea6a3f6081a5a18cc26b255064cc1","modified":1472910921778},{"_id":"source/docs/img/gallery/ios/scrollViewPage.png","hash":"38d4c2255df8c39b12281d66dbdb7eff0c00eb94","modified":1472245554018},{"_id":"source/docs/img/modules/animation/background-color.gif","hash":"c5c84bf41a70ff207af2ff8646a8f77a0c4a1af2","modified":1472245554133},{"_id":"source/docs/img/modules/animation/bezier.gif","hash":"590601b6a537be27a217a64c089de344a9ecdc34","modified":1472245554140},{"_id":"source/docs/img/modules/animation/easein.gif","hash":"6d719418ffd7018b58eba92aad364a292ed3748c","modified":1472245554173},{"_id":"source/docs/img/modules/animation/easeinout.gif","hash":"631f0d771b786a9f2bc533279730763f5b13a272","modified":1472245554183},{"_id":"source/docs/img/modules/animation/easeout.gif","hash":"3dfeaf4984f99c307829f6ec90118a0ef8f5d0a3","modified":1472245554195},{"_id":"source/docs/img/modules/animation/linear.gif","hash":"2ab6fd0a21bbfd92e8ebd370a930aa7d47b201fd","modified":1472245554227},{"_id":"source/docs/img/modules/animation/reusing.gif","hash":"f4331501517f6638613d6252ce46503abd614f1e","modified":1472245554255},{"_id":"source/docs/img/modules/animation/spring.gif","hash":"0ff3885a198c9afe49610fd1096648bdeacab320","modified":1472245554291},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-004.png","hash":"2d2a4648b6047084fd4ced8add9c143421eb5806","modified":1472245554075},{"_id":"source/docs/img/modules/icon-fonts/icomoon.png","hash":"075d8b14cd3a23c6ef36b3beaa177e05d2efd8f2","modified":1472245554309},{"_id":"source/docs/img/modules/keyboard/done.png","hash":"52e7211a33a6af89f3d26e693232007b5be12b38","modified":1472245554325},{"_id":"source/docs/img/modules/keyboard/go.png","hash":"17aaa9ce709b61a35e1f4f50514e160c9842f4b4","modified":1472245554330},{"_id":"source/docs/img/modules/keyboard/next.png","hash":"e9040c49ca6fe4de9350acd6480341553e39fc4a","modified":1472245554334},{"_id":"source/docs/img/modules/keyboard/search.png","hash":"eb9997fb9dca03b20cca4c67658aace500694612","modified":1472245554349},{"_id":"source/docs/img/navigation-angular/page-outlet-android.gif","hash":"678d1ea40ede99fa5d0a595c563ad7574c97dd92","modified":1472245554409},{"_id":"source/docs/img/visual-studio-code-extension/nativescript-debugging.png","hash":"27a64bc55b3bf5065af678a1b8100c50f5acd686","modified":1472245554428},{"_id":"source/docs/img/modules/keyboard/send.png","hash":"5f87ec86b2158d1662a95173c720057a53f8eb8c","modified":1472245554352},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/NativeScript_Angular_logo.png","hash":"272b41b64eb2fa50db64f07590d9f2f78388e54b","modified":1472245552914},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/Angular_logo.png","hash":"a4a7ab7294b56f70c17e53327ac06e59868d524c","modified":1472245552912},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/NativeScript_logo.png","hash":"b3cce0022705c2c3ddd9e3f48d51239d234e3b38","modified":1472245552917},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/terminal-1.png","hash":"27e476048790059e7e814697c9c5681bee227f1d","modified":1472245553043},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/typescript.png","hash":"fc5788ff0387828a29eec642f4428dd48dceb0ca","modified":1472245553275},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/terminal-1.png","hash":"e10f40c9c659fc829b5abb6d6690bf9df67a14af","modified":1472245553713},{"_id":"source/docs/img/modules/animation/multiple-properties.gif","hash":"24b4a81c5e3d464fad637cbce0239d61b1e9eeaf","modified":1472245554230},{"_id":"source/docs/img/modules/animation/opacity.gif","hash":"28c04c5bd263fe93ac4111147392b7a15fab8903","modified":1472245554243},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-003.png","hash":"82920bf29212c1c3d3e8bc10d677458d49000e19","modified":1472245554067},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-010.png","hash":"31655765efc2983ce2d1668d2b985ac716047832","modified":1472245554088},{"_id":"source/docs/img/modules/icon-fonts/sample-app.png","hash":"fca1920faca6d047a96adc9bde17a976acdbac93","modified":1472245554312},{"_id":"source/docs/img/modules/keyboard/datetime.png","hash":"bcc81a22cd16bb46ca5f799e0bc6023b6892d5ce","modified":1472245554322},{"_id":"source/docs/img/modules/keyboard/email.png","hash":"e2bd4bd882ab52265a877b1b6034fc55d435be1e","modified":1472245554327},{"_id":"source/docs/img/modules/keyboard/phone.png","hash":"58bd6314060eae70584fdd6526623e5e9b3f2737","modified":1472245554346},{"_id":"source/docs/img/modules/keyboard/number.png","hash":"6c5133a38cac763f20e7fbbfe9616fe54f922dcd","modified":1472245554339},{"_id":"source/docs/img/modules/keyboard/url.png","hash":"3314ecdb4528cf6e616d6ea4aca500469f4446d3","modified":1472245554356},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/terminal-2.png","hash":"14280f8dd1c9f1e8a34b0d9c7cc1ff0158f9d510","modified":1472245553727},{"_id":"source/docs/img/modules/animation/slide-in-effect.gif","hash":"e2d87bf098db317dee88ea49cc5bbe8e4ebbf0ce","modified":1472245554282},{"_id":"source/docs/img/launch-screen/ios/launch-screen-howto-002.png","hash":"d9f6c50afd15720ec653b60dbad65cf2bf749f95","modified":1472245554049},{"_id":"source/docs/img/modules/animation/translate.gif","hash":"4405d76b3db4848ad02358c4ce3199c687ce9ed0","modified":1472245554295},{"_id":"source/docs/img/modules/icon-fonts/fonts-folder.png","hash":"1d2ad22c0a904e037413207e3d134bd99b129e27","modified":1472245554306},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/android/3.png","hash":"7e7a536a2096fcb5277179ca1c98ce9cfe08ce84","modified":1472245552944},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/ios/3.png","hash":"0e1441a5140fc1cf2d753b3b634bfac5a33a261f","modified":1472245552965},{"_id":"source/docs/img/cli-getting-started/angular/chapter1/android/1.png","hash":"c08808ec23d7404dee4b5c812b9ca3b200aeb415","modified":1472245552968},{"_id":"source/docs/img/cli-getting-started/angular/chapter1/android/2.png","hash":"923ec6f489f02ed5eb9909703bc4723a384176c1","modified":1472245552969},{"_id":"source/docs/img/cli-getting-started/angular/chapter1/ios/1.png","hash":"5076620d36f81436819733f92bb7c27eb70beb8e","modified":1472245552970},{"_id":"source/docs/img/cli-getting-started/angular/chapter1/ios/2.png","hash":"11b7cb92ca541e41dc164be8138f73a6de9c4ada","modified":1472245552971},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/1.png","hash":"292e8b2adf5f2707fb806d381175197f5b8819ac","modified":1472245552973},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/3.png","hash":"a2fc2d24151630e0aa76a7b58c198b9931d27953","modified":1472245552978},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/2.png","hash":"06bc7d8b22da4da21bf319cc53ad07e6f698b28c","modified":1472245552976},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/4.png","hash":"ea09b60780b34c923f750475c624a2ac7714049e","modified":1472245552979},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/android/5.png","hash":"ef7531fa220a6167246585281158491133d496cd","modified":1472245552980},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/2.png","hash":"0d33dba202a8485be89f16b94ae574ff045e400a","modified":1472245552983},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/3.png","hash":"4967aba4fe772ae3acb649d63b0f75e680ee9cd2","modified":1472245552984},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/1.png","hash":"d1f9ff713a29adcd9891597fc21df996e289eac6","modified":1472245552982},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/5.png","hash":"e02c13d6d40ae4f88aa7cf91021a82eaca79de79","modified":1472245552994},{"_id":"source/docs/img/cli-getting-started/angular/chapter2/ios/4.png","hash":"14a050d37af42b85c43f5d468d1c5d219c4e4f7c","modified":1472245552988},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/1.png","hash":"9c0e0909bcd4ebe7ca52c50ec035c1cdbfb4c960","modified":1472245553009},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/2.png","hash":"9dacece245b31e0b9d449fbe4f01c5722bfb2e79","modified":1472245553011},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/3.png","hash":"7be2a0cfb252e6bebb60c230c61ad662f945f42c","modified":1472245553021},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/5.png","hash":"15e7f403083ba4adaf980a56024a7d4b29fa8d51","modified":1472245553024},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/6.png","hash":"194a293e73c4ce7c4065547da55b80847c730644","modified":1472245553026},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/1.png","hash":"350e46aa37f6da97062f795b02436169e1a19f91","modified":1472245553031},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/5.png","hash":"aec6fd4d94ddd9fe27963602793866c011da049d","modified":1472245553036},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/6.png","hash":"48b5aa923f78fda8698bbb737866d29f8d71b974","modified":1472245553037},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/3.png","hash":"6dbdb23cf5a4eccf66c8680e3db3dadb13b43545","modified":1472245553094},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/4.png","hash":"b2325bd66e0b61da6d839bff10003119cfb5287d","modified":1472245553095},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/5.png","hash":"2561ce986781bce3f2f85fa7de15f116b918c729","modified":1472245553096},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/7.png","hash":"cad219db1336d70b5e29f6a1653b267e9ca227de","modified":1472245553104},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/3.png","hash":"8123f1f76a154435986d953794eebd99a19d18a7","modified":1472245553205},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/4.png","hash":"4e13f91cfe561200f3b3124efe339b5a4ad2f3fd","modified":1472245553206},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/5.png","hash":"6adf815edc60c1c8c54ebc16942681bc94adc704","modified":1472245553208},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/7.png","hash":"9c257cc1ebc368908588398887de82d0f609861b","modified":1472245553235},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter1/android/1.png","hash":"d0ba53950508bb5cd5644ee9afb6066bd34490c5","modified":1472245553572},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/android/1.png","hash":"5901f6147a119b7b0dbce72b1c9ab21441c58b21","modified":1472245553669},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/android/2.gif","hash":"d2aea484f44dded903833947bad6dce5e88b4353","modified":1472245553679},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/android/3.png","hash":"d0df35c2e0fcd67e77abbeea07eddf66b4105548","modified":1472245553688},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/ios/1.png","hash":"b58e43808043b2eea40b73c9f384a0f3783ade80","modified":1472245553691},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/ios/3.png","hash":"83cf58e96ca0f5c594235a267a66a827023ec597","modified":1472245553711},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/2.png","hash":"288a3d270ad93b6feb838c23c715198484587126","modified":1472245553755},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/1.png","hash":"1417ebb8448aa023b35261e4d1cfe2a044f86329","modified":1472245553741},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/3.png","hash":"5dde3b06d7b08cc01e0b43992507f036a3be65ec","modified":1472245553778},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/4.gif","hash":"c5cdaea8f8f506c96856fbcd56c9b364b02bfcd6","modified":1472245553785},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/6.gif","hash":"216c5e91ee14439aa1b352e2a08c4998742b9757","modified":1472245553794},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/1.png","hash":"c9d5b28a853968e1d1e38f6514322260c358b433","modified":1472245553729},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/2.png","hash":"e699c797f0a5724f5c0e9ea2c4f517b3277766fd","modified":1472245553730},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/4.gif","hash":"6da8f35ad629d46fcb95cd3eafb6a4f0afdfbd0b","modified":1472245553735},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/3.png","hash":"71d656d1f1e96a622009ddde8d077feba779dfdc","modified":1472245553733},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter5/ios/1.png","hash":"b979de038c37951b46e02708d3cbea0cda8b8ee7","modified":1472245553806},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/6.gif","hash":"ba7941ea980083ad647d4ddc5ad1ec9a104a56c5","modified":1472245553739},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter5/android/2.gif","hash":"394f4c405f2d9cffa248ce49e269aad2471c1ce8","modified":1472245553804},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter5/android/1.png","hash":"b5313b06fb72ce82c1296e1be617eb40ecacb2ed","modified":1472245553803},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter6/ios/1.png","hash":"f6b2b8d011ec1748f75c85e2186e03caacdfb4fa","modified":1472245553820},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter6/ios/2.gif","hash":"5a99fdff5e312cae7fc13ad4986356839079eb2a","modified":1472245553822},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter6/android/1.png","hash":"49e28d508689ac32a459ce859a42f684abb1bad9","modified":1472245553818},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter6/android/2.gif","hash":"26aa6d2f709425076728e667303f40d4d9303602","modified":1472245553819},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/android/1.png","hash":"bc83b9e87f41ff1210a746a807d92f21e311b647","modified":1472245553606},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/android/2.png","hash":"568c3beddff47ad2d4f8f7fd3724f0c2f21d766b","modified":1472245553628},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/android/4.png","hash":"b2bf3581d6c8e8b2e7dcf9334b2e56a10b327c7b","modified":1472245553635},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/android/3.png","hash":"2bc0b2d88eb065462ba77a5cdb913a8f71bd6083","modified":1472245553630},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/ios/1.png","hash":"51f93dad070cfa6b15ca9a2504b41f191bdb3baf","modified":1472245553638},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/ios/4.png","hash":"67e6bfdfe771b61391397ad7ab1ec82b258ca027","modified":1472245553661},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/ios/2.png","hash":"bdeb917af8130d5f8c389700d5aa61c83abaf5e9","modified":1472245553658},{"_id":"source/docs/img/modules/animation/rotate.gif","hash":"24414b2fb35cca33c4aaf54ac6ccc47ed94c4e61","modified":1472245554264},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter2/ios/3.png","hash":"f7577616626335a5fa3d8e3cd25f2fea963eed58","modified":1472245553659},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/4.gif","hash":"0e8310064c6418d4898c12b1a7e580cdeec09354","modified":1472245553023},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/4.gif","hash":"f84d4dfd080f7db729cc26ec01ec3798b4985263","modified":1472245553034},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/6.gif","hash":"e8f085ae47cea16f9b6e815433380ced87043015","modified":1472245553102},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/android/2.png","hash":"44a1200a322355391de3d57cadde337324161613","modified":1472245553443},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/android/1.png","hash":"9d47bbe0ca6c5195086adedf332560ffaa174838","modified":1472245553427},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/android/3.png","hash":"6197e6e81e15b8d4bfaec34263ad80320c37a3a7","modified":1472245553452},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/ios/1.png","hash":"22b6cd726199fd7e23ee5451f884875e83bc3738","modified":1472245553461},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/ios/2.png","hash":"9ee20279d9baf731d963dd40c91aded61791f759","modified":1472245553495},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter0/ios/3.png","hash":"67e501ce06d2e2a8ae3f10d2ed0fd30496cfdefb","modified":1472245553512},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter1/ios/1.png","hash":"5015c3f1e8a3950f3ea5392db439c783bf73cf66","modified":1472245553575},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter3/ios/2.gif","hash":"17afb4649f340f82e8441e4165b8157151bfa22e","modified":1472245553710},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/ios/5.gif","hash":"21ea84d9cc4b6afbf29164a7bcdf9dc5fb88172e","modified":1472245553792},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter4/android/5.gif","hash":"e3ffe1a21b49a7883e97504919b7a69e713d6c3f","modified":1472245553738},{"_id":"source/docs/img/modules/animation/chaining-with-animation-set.gif","hash":"ef17d7f3819745d1f771e6cfe5da49c0f0fa06d4","modified":1472245554145},{"_id":"source/docs/img/modules/animation/chaining-with-promises.gif","hash":"f1663d760aa79be15c6a09e557718492cc9d18e5","modified":1472245554160},{"_id":"source/docs/img/modules/animation/multiple-views.gif","hash":"e94a278d8ffc02916495a835bde8052e3e0e9105","modified":1472245554240},{"_id":"source/docs/img/modules/animation/scale.gif","hash":"1fd759e65311b99a38fb24b5c4c664fc20ca40ae","modified":1472245554277},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/android/7.gif","hash":"f32ebb09fd0f0a70909526fbcbb2a7c100178f5a","modified":1472245553029},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/6.gif","hash":"c046896642a2023597b0e8695d3a7f01ca7aa231","modified":1472245553233},{"_id":"source/docs/img/cli-getting-started/angular/chapter3/ios/7.gif","hash":"d8b3fdf13952ca11259802d276ba4b27bca821ee","modified":1472245553041},{"_id":"source/docs/img/cli-getting-started/angular/chapter5/android/1.png","hash":"3d4ce746b97a3b18ec9a02a8a1499609c9c74f84","modified":1472245553280},{"_id":"source/docs/img/modules/animation/infinite.gif","hash":"e09ca8ffbc8f28c9824f2154e0677f2235f5b3d0","modified":1472245554225},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/android/2.png","hash":"d516adca0cf6b36c5679a5334bea3fe56c52e0c0","modified":1472245552935},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/ios/1.png","hash":"dc58cd4bbbc4ab30e5326c60a9dd2e973960eb12","modified":1472245552958},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/android/1.png","hash":"c9bb0f262ba62f9a9ff3824394ab29391c5f9a21","modified":1472245552921},{"_id":"source/docs/img/cli-getting-started/angular/chapter0/ios/2.png","hash":"30a746d13889ae908e67cc81d625d745877dd2ed","modified":1472245552963},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/1.png","hash":"0825819381bb916b29e5303042c77d6d07fcc568","modified":1472245553047},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/1.png","hash":"8b5cb14622eb24e361d75dfc73580abc643dcd3b","modified":1472245553121},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/android/1.png","hash":"a5d7d3f051a8d4459a9449ba8433e7fcae010100","modified":1472245553360},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/android/2.png","hash":"750dfc3ad1895551b9cee35bbfb5578bb87a9576","modified":1472245553364},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/android/3.png","hash":"32b40fa31c53cd60edf1405f267a0b1f3c547dad","modified":1472245553367},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/ios/1.png","hash":"0f26c1e7265f016739f1df1108d79906bcd50058","modified":1472245553372},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/ios/2.png","hash":"4c001887afde4eda70ae489b46c93da9f717eca2","modified":1472245553382},{"_id":"source/docs/img/cli-getting-started/angular/chapter6/ios/3.png","hash":"95a65934e12a1a2fdb77bb288134b1339ee02480","modified":1472245553390},{"_id":"source/docs/img/cli-getting-started/angular/chapter5/ios/1.png","hash":"0aa64034bc8278b56ea660b0865deb1d8adf48a7","modified":1472245553306},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/8.gif","hash":"493acf103d17892a731bba100cbfcb2f8c5f2496","modified":1472245553268},{"_id":"source/docs/img/cli-getting-started/angular/chapter5/android/2.gif","hash":"a15fcf0208beca86a87173bb1f153c25cc82f45a","modified":1472245553291},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/8.gif","hash":"3152e89defb26e52faeae9e2411e03498e77781f","modified":1472245553117},{"_id":"source/docs/img/cli-getting-started/angular/chapter5/ios/2.gif","hash":"ffd29858ff3ec41e0da75de1605386600468b41a","modified":1472245553344},{"_id":"source/docs/img/cli-getting-started/nativescript/chapter5/ios/2.gif","hash":"0ecd4809c8fa94624810e3b4da96baf194449deb","modified":1472245553815},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/android/2.gif","hash":"2b3efec0d1b65015a7e3a6e1edf43e8dd521b917","modified":1472245553093},{"_id":"source/docs/img/cli-getting-started/angular/chapter4/ios/2.gif","hash":"04290765461e7c8fac67b1235904e498acaa3485","modified":1472245553177},{"_id":"public/core-concepts/architecture-angular.html","hash":"8cad7b027524cf243ce14abb42d49243ad01d8dc","modified":1474618976218},{"_id":"public/index.html","hash":"32d44339102c319dd0f9549eebda5fda3c5b6021","modified":1474618976217},{"_id":"public/core-concepts/DataBinding.html","hash":"6c32a0cf5ec4cc9858b574971d9edef8f517a35a","modified":1474618976218},{"_id":"public/core-concepts/application-management.html","hash":"805f955b4fb6093615e84ec2f86ad2a5c9c2e0df","modified":1474618976219},{"_id":"public/core-concepts/accessing-native-apis-with-javascript.html","hash":"0e5908bc0fba0157190f1ad357baf64adbea3f14","modified":1474618976219},{"_id":"public/core-concepts/creating-launch-screens-ios.html","hash":"525447c8880264b00a77cd64f8898aec2a505e7f","modified":1474618976219},{"_id":"public/core-concepts/customizing-bootstrap.html","hash":"9436948338c283cc45517f0a6b355259bfb22f19","modified":1474618976219},{"_id":"public/core-concepts/navigation.html","hash":"75dddc89b7d54d35ae8acafd7d44ca17315aadfe","modified":1474618976219},{"_id":"public/core-concepts/modules.html","hash":"b8cb6e209c0b65be17c2ffcf9c94834cd9555567","modified":1474618976219},{"_id":"public/core-concepts/bindings.html","hash":"2511de69630cd07236e9e36e2be9a8f3fe5fd8a7","modified":1474618976219},{"_id":"public/core-concepts/events.html","hash":"3c6f95f3d548251feb1d5e9b23035cedb34f60a9","modified":1474618976219},{"_id":"public/core-concepts/supporting-multiple-screens.html","hash":"dbb1f6f7cde34b049bf11053788e8fdadccef89d","modified":1474618976219},{"_id":"public/hardware/location.html","hash":"7a57c9e3a9227a63afc48423ae9dc823ca8a08a2","modified":1474618976219},{"_id":"public/core-concepts/properties.html","hash":"f38d59570b3ee91d714e06811b4f07eaf919a1c9","modified":1474618976219},{"_id":"public/hardware/camera.html","hash":"f73e695ed397fbc4d7cd9e9dbe6718fb5f81ee4d","modified":1474618976219},{"_id":"public/cookbook/formatted-string-ng.html","hash":"7578dbac5a1cac32d81e91286a22de177f89c5a4","modified":1474618976219},{"_id":"public/cookbook/tab-view-ng.html","hash":"435a6f3db02f6351789333ab9020135a1112ad9a","modified":1474618976220},{"_id":"public/plugins/angular-third-party.html","hash":"5014b1d43d007095af243fd1f9a33d34fbb9de26","modified":1474618976219},{"_id":"public/plugins/cocoapods.html","hash":"56c2db742a7254335c1e8a6e02a18f67fc69dee4","modified":1474618976219},{"_id":"public/tutorial/0.html","hash":"dccc5f6757fb425c798854b06e729f3ed24a9cd5","modified":1474618976220},{"_id":"public/plugins/ui-plugin.html","hash":"ea8f085204c13e36ac1a0e07e03777fd081fe24b","modified":1474618976220},{"_id":"public/plugins/plugins.html","hash":"0bf32bb638d6f126de32abec50c2ebbc62b01027","modified":1474618976220},{"_id":"public/tutorial/1.html","hash":"fb7494d853c43b0e8a856ee353f1ba088783fa1c","modified":1474618976220},{"_id":"public/tutorial/5.html","hash":"c86d91dc8be5a9e5ee3b7bb73a56f5b65e1938ad","modified":1474618976220},{"_id":"public/tutorial/3.html","hash":"06f2156ecf271bc646df9353eb409056e862e311","modified":1474618976220},{"_id":"public/tutorial/2.html","hash":"9b482420882b8c1ddfa76a22b5463ea9a8af9bbb","modified":1474618976221},{"_id":"public/tutorial/4.html","hash":"1749e8dbfe2988f57f865671c6754af78114282a","modified":1474618976221},{"_id":"public/tutorial/6.html","hash":"168c7f8d9725e87dc1dcd9ce8cd9783f6119a639","modified":1474618976221},{"_id":"public/tutorial/7.html","hash":"a968d64385d3fe48b33211df480e315cc9e565bf","modified":1474618976221},{"_id":"public/ui/action-bar.html","hash":"89d79894e98cd1bcf820a3872961b5e6a69cb2b6","modified":1474618976221},{"_id":"public/ui/animation-examples.html","hash":"c1c0fee5e030a2e29ff6aa5c84405c28ebbe18f5","modified":1474618976221},{"_id":"public/ui/animation-code.html","hash":"2a891eb9cc24d7d5179b2fabdfc5b0ce3f7d23e2","modified":1474618976221},{"_id":"public/ui/animation.html","hash":"42bf4ff76ef09c019daafc9b3b4f8b502e928ed7","modified":1474618976221},{"_id":"public/ui/animation-css.html","hash":"9c807e96b197fac0c062cb904beffce2244faaa4","modified":1474618976221},{"_id":"public/ui/gestures.html","hash":"4e7f40f72acab47945ac2bd01711563cac9826a1","modified":1474618976221},{"_id":"public/ui/keyboard.html","hash":"d5eb3e3877347411801b7efcc6220a5e67f75d93","modified":1474618976222},{"_id":"public/ui/change-status-bar-style-ios.html","hash":"e1043c4b60d07464f94207b062764de63af9582c","modified":1474618976222},{"_id":"public/ui/list-view.html","hash":"0b1e1f1a4cdf133156a66b5d868722a0acc12105","modified":1474618976222},{"_id":"public/ui/placeholder.html","hash":"9071d9d2592062f84640b6b6026d9aff87b824f4","modified":1474618976222},{"_id":"public/ui/layouts.html","hash":"6b565fe4376b6a8607f0b7456c5da6d1ca1ce4ee","modified":1474618976222},{"_id":"public/ui/icon-fonts.html","hash":"cb9b1090f8a2b7c6ebcb8f28221bd3d49b854c35","modified":1474618976222},{"_id":"public/ui/styling.html","hash":"c967570047f6b7cee47e14abac72989abc700d6e","modified":1474618976222},{"_id":"public/ui/ui-images.html","hash":"dd841412eda904a9551bac4fd63ae7ceaa06536c","modified":1474618976222},{"_id":"public/ui/ui-with-xml.html","hash":"19e9620113270782fe4f2ef639e5123b21f2093c","modified":1474618976222},{"_id":"public/ui/ui-views.html","hash":"4ca7bb9bdbf946ff1a851072cd5913057640a6a4","modified":1474618976222},{"_id":"public/ui/ui-dialogs.html","hash":"bf799dcef639831ccd2956c7bc196fb55f15f32f","modified":1474618976222},{"_id":"public/workflow/debugging.html","hash":"32cca8173c32c5bf948f9727793b8b94dee5cbb2","modified":1474618976223},{"_id":"public/workflow/bundling-with-webpack.html","hash":"0719c7f2f6bd0ffd639a34eeffeadcb93413195b","modified":1474618976222},{"_id":"public/workflow/publishing-android-apps.html","hash":"eaec0eb6abb267298e13fca9e9aec608d82f4d8b","modified":1474618976223},{"_id":"public/workflow/publishing-ios-apps.html","hash":"935a8be41a0e701fb70966392dd7629f51163457","modified":1474618976223},{"_id":"public/workflow/visual-studio-code-extension.html","hash":"83cbb9eb3053fa552c7247c8f5ac093dc407ad61","modified":1474618976223},{"_id":"public/workflow/transpilers.html","hash":"5f5c8a4d4e864266714bdfe74206649cd2fb210b","modified":1474618976223},{"_id":"public/workflow/testing.html","hash":"7a67fd660e7451a7f2cc79f2255b4d36483c00ac","modified":1474618976223},{"_id":"public/docs/img/ab-getting-started/step1-android.png","hash":"f9d9ea75d4355b4a1c9989a33cd9f33b3a17e610","modified":1472910949077},{"_id":"public/docs/img/architecture.png","hash":"dc40f3426d88fe68aa35fa14a7a1462be5de161e","modified":1472910949077},{"_id":"public/docs/img/ab-getting-started/step3-android.png","hash":"e2d221e119e4dd5a413851bc499b9e8c20625d61","modified":1472910949077},{"_id":"public/docs/img/ab-getting-started/step1-ios.png","hash":"321aff59b86b2ea50de49923bb629e37c446ad7a","modified":1472910949077},{"_id":"public/docs/img/ab-getting-started/step2-android.png","hash":"6218e7591caf6a91b28bedef391954ff08bdecde","modified":1472910949077},{"_id":"public/docs/img/ab-getting-started/step2-ios.png","hash":"05b304d8e73207ba4d43fad8c3824fa943c08553","modified":1472910949077},{"_id":"public/docs/img/ab-getting-started/step3-ios.png","hash":"3fd301df2e5ccfafa756a22c16814ebf47d532c4","modified":1472910949077},{"_id":"public/docs/img/angular/list-view-setupItemView.png","hash":"8aff464d74a716dca45085fa87d6585f3bdc9fe3","modified":1472910949077},{"_id":"public/docs/img/cli/tns-create-windows.png","hash":"558297398d949a651e7b11c2f2ce00e9b4c77b48","modified":1472910949077},{"_id":"public/docs/img/cli/tns-platform-add-android-windows.png","hash":"4d301d886915e7ec523f54add4a490e0cfb2180a","modified":1472910949077},{"_id":"public/docs/img/cli/tns-create-unix.png","hash":"a59d287551e6c35b3174b90107671c9a5f63e3b1","modified":1472910949077},{"_id":"public/docs/img/cli/tns-platform-add-ios-unix.png","hash":"27d301b436db392d6061b772d2932cbbc6955d63","modified":1472910949077},{"_id":"public/docs/img/cli/tns-prepare-android-windows.png","hash":"8c73111fafaa3c7671d981a03dc9e88215788e33","modified":1472910949077},{"_id":"public/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-backgroundSpan.png","hash":"f87b72ac92b9612ac1ecf209b60e69773bf7da4d","modified":1472910949077},{"_id":"public/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-background-color.png","hash":"7d61e9adc4e3a35ebbb41357998c127ef303440b","modified":1472910949078},{"_id":"public/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-style-change.png","hash":"fe2007b3cf78ab7e95a99f43850e356c1dedd39c","modified":1472910949078},{"_id":"public/docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-black-style.png","hash":"e6fd40fcc1258935c46df3eb935e5094ec06c0fd","modified":1472910949078},{"_id":"public/docs/img/navigation-angular/outlet-ios.gif","hash":"198f8e008de618384c729ad275ee036d16bc9e69","modified":1472910949078},{"_id":"public/docs/img/companions/android-code.png","hash":"4f6f0334a6334fd6738879531dd826bf980ccd69","modified":1472910949078},{"_id":"public/docs/img/companions/ios-code.png","hash":"e0aded0b9e7f5e404ddd97070d6c3a1044691fc6","modified":1472910949078},{"_id":"public/docs/img/resources/android-resources.png","hash":"64278520cae3452c6cb73c1bd20805edc024cc68","modified":1472910949078},{"_id":"public/docs/img/resources/ios-resources.png","hash":"918e71b9fea355702db709f18d295375b7172742","modified":1472910949078},{"_id":"public/docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup.png","hash":"c0fc357424662d7613666d8df14608e0ffc90818","modified":1472910949078},{"_id":"public/docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar.png","hash":"07955d7b7cbfe13b2786227511f63595dd0d8b91","modified":1472910949078},{"_id":"public/docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-set-backgroundcolor.png","hash":"084577fa6a36417adc689fea94a60884e77008f8","modified":1472910949078},{"_id":"public/docs/img/visual-studio-code-extension/debug-panel.png","hash":"e612280f39e73b7d346b2d44a7cbd9adb11e86ff","modified":1472910949078},{"_id":"public/docs/img/visual-studio-code-extension/gear-icon.png","hash":"0600887cf4f80531625c5114661295adf3e3b478","modified":1472910949078},{"_id":"public/fonts/percolate.eot","hash":"9f46f6ed3453808cb206b5b8c7c399f8c7c50b4b","modified":1472910949078},{"_id":"public/docs/img/visual-studio-code-extension/nativescript-not-found-error-message.png","hash":"fd810256e8b50e04ec9126149f0ab2646c1052c2","modified":1472910949078},{"_id":"public/fonts/percolate.ttf","hash":"ae93904a100e0c875bb382cb88709de4cd8b6a37","modified":1472910949079},{"_id":"public/docs/img/visual-studio-code-extension/nativescript-commands.png","hash":"e3825dbd2e80090dd221ca32e05863cdbcdb68d3","modified":1472910949079},{"_id":"public/fonts/percolate.woff","hash":"f475ff4ac3d777c8d56bc7040d6f8576b86398a5","modified":1472910949079},{"_id":"public/images/favicon.png","hash":"79ca4e158792462510cfec16c00b145e1f32c74e","modified":1472910949079},{"_id":"public/images/icon-white.svg","hash":"cbec26722baa2d6d49303c5e73920ca4751740a0","modified":1472910949079},{"_id":"public/images/logo-blue.svg","hash":"78d728c1ddfe431e31c04d4130a919db6d3979bd","modified":1472910949079},{"_id":"public/docs/img/gallery/android/absoluteLayoutPage.png","hash":"c8da08322e8edf8840bfaed50191762f2ddc0296","modified":1472910949079},{"_id":"public/docs/img/gallery/android/activityIndicatorPage.png","hash":"760521166ec672daa374a76e5ca239eb7f7b3952","modified":1472910949079},{"_id":"public/docs/img/gallery/android/buttonPage.png","hash":"53da44f6e777546c141c236a8e6eb4ca154e2245","modified":1472910949079},{"_id":"public/docs/img/gallery/android/dialogsPage_confirm.png","hash":"68be4af7c04e4204519b24374cf6520310dcfce2","modified":1472910949079},{"_id":"public/docs/img/gallery/android/datePickerPage.png","hash":"8b616c42762ef942a3cc72bb71d36408afd1cdf9","modified":1472910949079},{"_id":"public/docs/img/gallery/android/dockLayoutPage.png","hash":"826faeef1d2cbc321cbab6062695d0053ebd0b66","modified":1472910949079},{"_id":"public/docs/img/gallery/android/gridLayoutPage.png","hash":"0db88e22a5e1c75abe032cd733e52a981e650e99","modified":1472910949079},{"_id":"public/docs/img/gallery/android/htmlViewPage.png","hash":"464a89dae2bf962e9a06678b46340d5a4e87b0f0","modified":1472910949080},{"_id":"public/docs/img/gallery/android/imagePage.png","hash":"05cbb0f329891cd610f0fa5fc46fc9d2d13b4e80","modified":1472910949080},{"_id":"public/docs/img/gallery/android/homePage.png","hash":"2919edda04a38beb43c3879ab2f5126649bd2c73","modified":1472910949080},{"_id":"public/docs/img/gallery/android/labelPage.png","hash":"a9e30d3ef5481608a1119cefd7684fa5634c5046","modified":1472910949080},{"_id":"public/docs/img/gallery/android/progressPage.png","hash":"06af2b0dbee9603477889fdca0bdcd2ecd8bf4a2","modified":1472910949080},{"_id":"public/docs/img/gallery/android/listViewPage.png","hash":"3d67fad090f42d4c168b7137f0360d7a7b61acc2","modified":1472910949080},{"_id":"public/docs/img/gallery/android/listPickerPage.png","hash":"6f3e1615fdcaa84149ed9bcfe82fe5190b2f3534","modified":1472910949080},{"_id":"public/docs/img/gallery/android/scrollViewPage.png","hash":"55222d966597551edd41326dfbf922eb00f30711","modified":1472910949080},{"_id":"public/docs/img/gallery/android/sliderPage.png","hash":"6aa8aac02ea84a2799b47b8076bfd2d86d7bb2ed","modified":1472910949080},{"_id":"public/docs/img/gallery/android/stackLayoutPage.png","hash":"9f56a4dc6182ead7cc643c0bdfbad0256741c9ac","modified":1472910949080},{"_id":"public/docs/img/gallery/android/searchBarPage.png","hash":"de1a7f56691b32d87c86787e43d52faa768d44aa","modified":1472910949080},{"_id":"public/docs/img/gallery/android/segmentedBarPage.png","hash":"2b1ca150056b19252401e9771484aeb004aaef88","modified":1472910949080},{"_id":"public/docs/img/gallery/android/switchPage.png","hash":"522ce7f7b35262400d0ced9e7fea6fdd1bfdc2bb","modified":1472910949080},{"_id":"public/docs/img/gallery/android/textFieldPage.png","hash":"0427b2cc70c9cb3121c2fa27b5a7abb9b9d0f574","modified":1472910949080},{"_id":"public/docs/img/gallery/android/tabViewPage.png","hash":"c21560d56213e93e4e45f4fde5ae67f92f6b3fd3","modified":1472910949080},{"_id":"public/docs/img/gallery/android/timePickerPage.png","hash":"888a3f86d4d2db0dcf81259211d5258f7a90a376","modified":1472910949081},{"_id":"public/docs/img/gallery/android/wrapLayoutPage.png","hash":"c2f2770c4825514381808f745bad6f9f4f7624c7","modified":1472910949081},{"_id":"public/docs/img/gallery/android/textViewPage.png","hash":"b30362d25f45df68f1532d0941da95746dbf78f0","modified":1472910949081},{"_id":"public/docs/img/gallery/android/webViewPage.png","hash":"792e955943a845932f16a53b840b55740afb53b2","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/buttonPage.png","hash":"bc345d0f9d99f90149a87980f71e7511015ff7d3","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/activityIndicatorPage.png","hash":"3ad43a953f1dc456c027ddd4306e30f61ba49903","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/absoluteLayoutPage.png","hash":"cf25903f2a12baafcbebf215bcaec3b4a061fcce","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/gridLayoutPage.png","hash":"ad6b8fca886783c985be2282eb08f7c414b254e1","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/homePage.png","hash":"117a4bdbc686644914e6dc36b64d4b942085bb6c","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/dockLayoutPage.png","hash":"44c11d0cc09917e45afffc17752d09a232f90d57","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/datePickerPage.png","hash":"d99450c49dfb28cdd8367262e2020c547fd73e18","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/dialogsPage_confirm.png","hash":"521ac4f8605ed140cd298647a41079b05d27815e","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/imagePage.png","hash":"31715dd2f87f74807f1946c5adeb0b02a50db53a","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/htmlViewPage.png","hash":"e4bb13d5b225e94dbef54e5abc5f7f809742e4d2","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/progressPage.png","hash":"5b05e2915b5148f97453faa914cd481a58b56d19","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/listPickerPage.png","hash":"0f9cc59e43f557e114cf071fefc39f61f6e2bde3","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/labelPage.png","hash":"54547a5a2c705066d664a1c7edea417a426c8f3e","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/listViewPage.png","hash":"5e905bec7c65c1f164e04b03d21906f1be6b5391","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/searchBarPage.png","hash":"12a60670c5c6a14845708211f2cd2cad28a25bc0","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/stackLayoutPage.png","hash":"f7a05444234771938b47766bc2114a2823b7e455","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/sliderPage.png","hash":"0f4efc5278cea535fa9e8aacce3a14f8f58879d4","modified":1472910949081},{"_id":"public/docs/img/gallery/ios/switchPage.png","hash":"b0519118238cc4b9947ee611c227bbb3e701b67d","modified":1472910949082},{"_id":"public/docs/img/gallery/ios/tabViewPage.png","hash":"3ec10824a3d325738f9359f560c215f60eaa1862","modified":1472910949082},{"_id":"public/docs/img/gallery/ios/segmentedBarPage.png","hash":"1ba491148f277eba980faadf191cd560d9963c19","modified":1472910949082},{"_id":"public/docs/img/gallery/ios/wrapLayoutPage.png","hash":"2b8e25fdc91d0be46f9c35bc39046ffb2b9f212c","modified":1472910949083},{"_id":"public/docs/img/gallery/ios/textViewPage.png","hash":"654d0aa7c2209ba5fc634e1be3ec2d454e6de65b","modified":1472910949083},{"_id":"public/docs/img/gallery/ios/webViewPage.png","hash":"b33466e3009495bc14885f89ae8107989d636cc2","modified":1472910949083},{"_id":"public/docs/img/gallery/ios/timePickerPage.png","hash":"42f353ad2ef0c40b4f41774b4231370d79ee8bc6","modified":1472910949083},{"_id":"public/docs/img/gallery/ios/textFieldPage.png","hash":"4495e79951426a76cb9077fa4ef8813142da405a","modified":1472910949083},{"_id":"public/docs/img/modules/action-bar/action-items-android.png","hash":"d8358d05b139be6831b0f7ae8f4ad379704565a3","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/action-items-ios.png","hash":"3ff751464872463706a30974ce16de2c5c583839","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/action-items-visibility-android.png","hash":"280e22954c5249176637e6fc176116beb5525c0a","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/action-items-visibility-ios.png","hash":"b482e32a30eceb4d5763dde6772496ba49764d20","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/style-android.png","hash":"93cd29c0c2f67c627d38e7074714a36d6c2ea0b1","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/nav-btn-android.png","hash":"4dd28aa0eddff9b87e78d830096c86688c9cbad8","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/nav-btn-ios.png","hash":"14868d2bd6fba8fbee07817c53486facb37d8cf6","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/home-icon-android.png","hash":"dd3dc20e22231fe725d2865822867115f7ebf0c7","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/side-drawer-ios.png","hash":"923d6717c2fd218701a4507f204b215f3c604b4b","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/style-ios.png","hash":"bc7b975f4f0e82805fb69caf87aa9d3f2c913e59","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/title-ios.png","hash":"11b37a4c6b9bb4a748e0fface3e46afe0443b0b9","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/title-android.png","hash":"f0b4787fc548614a802c610071efd0a64e497153","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/title-view-android.png","hash":"95bbffa642ff90dea1367cf257fcdab9d995fe0d","modified":1472910949084},{"_id":"public/docs/img/modules/action-bar/side-drawer-android.png","hash":"2b0d9a94dcf15be707009f545c49ebb16a8ad3fa","modified":1472910949085},{"_id":"public/docs/img/modules/action-bar/title-view-ios.png","hash":"18f703f2c7019a3e39b092519d78612a48fd2d6a","modified":1472910949085},{"_id":"public/docs/img/modules/animation/bezier-graph.png","hash":"420b2424f4d6998adae1d22acecb87b311bd71f1","modified":1472910949085},{"_id":"public/docs/img/launch-screen/ios/launch-screen-howto-001.png","hash":"f6334ee2f6e5d97d15e7d2ef817a305bfe883eca","modified":1472910949085},{"_id":"public/docs/img/launch-screen/ios/launch-screen-howto-008.png","hash":"378e974068bd52cacdb0db6d5f50e123624fb08d","modified":1472910949085},{"_id":"public/docs/img/launch-screen/ios/launch-screen-howto-009.png","hash":"89cdae6d66789e1aed410b4af3cfd23cf17f8281","modified":1472910949085},{"_id":"public/docs/img/modules/animation/hello-world.gif","hash":"06972f26f6d0b91652949f860266b241046fb537","modified":1472910949085},{"_id":"public/docs/img/modules/layouts/absolute-layout.png","hash":"490c88d9d04cf6380b32691fe7083d415817c5f5","modified":1472910949085},{"_id":"public/docs/img/modules/layouts/absolute-layout2.png","hash":"9cfe20183a66bbd7d6188148bf22b95e078826a9","modified":1472910949085},{"_id":"public/docs/img/modules/layouts/dock-layout1.png","hash":"ec31441fdc9d9e4b13b1f274af3cdeadcb392a60","modified":1472910949085},{"_id":"public/docs/img/modules/layouts/dock-layout2.png","hash":"0bb1974dcd8d8bfbdf051ec5ee1cdec9833ff3a1","modified":1472910949085},{"_id":"public/docs/img/modules/layouts/dock-layout3.png","hash":"f2e2a32e78573aaa002361534d338edef03c9ff8","modified":1472910949085},{"_id":"public/docs/img/modules/layouts/grid-layout.png","hash":"efc71f09e96fca5427d1aae58afe0ce5e61c0f4c","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/grid-layout1.png","hash":"4559b43baac57f8e1783b865c550b6e782a3712a","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/grid-layout2.png","hash":"8f229bdffc283a07d503f8274f0f3a4b50f7a60f","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/grid-layout3.png","hash":"20f66c758a8874fe4fbcdd70ecd36caf8631b81e","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/grid-layout4.png","hash":"f56bebfb306398880869eaadbec1946b68875fcf","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/stack-layout3.png","hash":"2420f6594b67acb6c368294af87f0ea7b349c67b","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/grid-layout5.png","hash":"5ed9ef1d470e10dbc364dedef72fd6f7ee718741","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/stack-layout4.png","hash":"f474699b119c51b0c7753dae583bf1128888357d","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/wrap-layout2.png","hash":"57863fa3f35c4d9afb24f4a3bc3b7bf34f2f9df7","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/stack-layout2.png","hash":"3ca84d3fdfc960c1f34f99f92bcc5f9328757376","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/wrap-layout1.png","hash":"6cf404c7cc2281ab9fee501a15f04c3d7a4717bf","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/stack-layout1.png","hash":"dff13e8c5bfa0bf886e891a02d548a6d1bbdb127","modified":1472910949086},{"_id":"public/docs/img/modules/layouts/wrap-layout3.png","hash":"3d59ac80cb408d753e906772f623db17ca1ddaa4","modified":1472910949086},{"_id":"public/docs/img/cli-getting-started/angular/chapter0/NativeScript_Angular_logo.png","hash":"272b41b64eb2fa50db64f07590d9f2f78388e54b","modified":1472910949086},{"_id":"public/docs/img/cli-getting-started/angular/chapter0/Angular_logo.png","hash":"a4a7ab7294b56f70c17e53327ac06e59868d524c","modified":1472910949087},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/terminal-1.png","hash":"27e476048790059e7e814697c9c5681bee227f1d","modified":1472910949087},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/typescript.png","hash":"fc5788ff0387828a29eec642f4428dd48dceb0ca","modified":1472910949087},{"_id":"public/docs/img/cli-getting-started/angular/chapter0/NativeScript_logo.png","hash":"b3cce0022705c2c3ddd9e3f48d51239d234e3b38","modified":1472910949087},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter3/terminal-1.png","hash":"e10f40c9c659fc829b5abb6d6690bf9df67a14af","modified":1472910949087},{"_id":"public/docs/img/cli-getting-started/angular/chapter1/android/1.png","hash":"c08808ec23d7404dee4b5c812b9ca3b200aeb415","modified":1472910949141},{"_id":"public/docs/img/cli-getting-started/angular/chapter0/ios/3.png","hash":"0e1441a5140fc1cf2d753b3b634bfac5a33a261f","modified":1472910949141},{"_id":"public/docs/img/cli-getting-started/angular/chapter0/android/3.png","hash":"7e7a536a2096fcb5277179ca1c98ce9cfe08ce84","modified":1472910949141},{"_id":"public/docs/img/cli-getting-started/angular/chapter1/android/2.png","hash":"923ec6f489f02ed5eb9909703bc4723a384176c1","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter1/ios/1.png","hash":"5076620d36f81436819733f92bb7c27eb70beb8e","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter1/ios/2.png","hash":"11b7cb92ca541e41dc164be8138f73a6de9c4ada","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/android/3.png","hash":"a2fc2d24151630e0aa76a7b58c198b9931d27953","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/android/2.png","hash":"06bc7d8b22da4da21bf319cc53ad07e6f698b28c","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/android/1.png","hash":"292e8b2adf5f2707fb806d381175197f5b8819ac","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/android/4.png","hash":"ea09b60780b34c923f750475c624a2ac7714049e","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/android/5.png","hash":"ef7531fa220a6167246585281158491133d496cd","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/ios/2.png","hash":"0d33dba202a8485be89f16b94ae574ff045e400a","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/ios/1.png","hash":"d1f9ff713a29adcd9891597fc21df996e289eac6","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/ios/5.png","hash":"e02c13d6d40ae4f88aa7cf91021a82eaca79de79","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/ios/3.png","hash":"4967aba4fe772ae3acb649d63b0f75e680ee9cd2","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter2/ios/4.png","hash":"14a050d37af42b85c43f5d468d1c5d219c4e4f7c","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/android/1.png","hash":"9c0e0909bcd4ebe7ca52c50ec035c1cdbfb4c960","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/android/2.png","hash":"9dacece245b31e0b9d449fbe4f01c5722bfb2e79","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/android/5.png","hash":"15e7f403083ba4adaf980a56024a7d4b29fa8d51","modified":1472910949142},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/android/3.png","hash":"7be2a0cfb252e6bebb60c230c61ad662f945f42c","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/ios/1.png","hash":"350e46aa37f6da97062f795b02436169e1a19f91","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/android/6.png","hash":"194a293e73c4ce7c4065547da55b80847c730644","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/ios/5.png","hash":"aec6fd4d94ddd9fe27963602793866c011da049d","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/android/4.png","hash":"b2325bd66e0b61da6d839bff10003119cfb5287d","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/android/3.png","hash":"6dbdb23cf5a4eccf66c8680e3db3dadb13b43545","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/ios/6.png","hash":"48b5aa923f78fda8698bbb737866d29f8d71b974","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/android/5.png","hash":"2561ce986781bce3f2f85fa7de15f116b918c729","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/android/7.png","hash":"cad219db1336d70b5e29f6a1653b267e9ca227de","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/ios/4.png","hash":"4e13f91cfe561200f3b3124efe339b5a4ad2f3fd","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter1/android/1.png","hash":"d0ba53950508bb5cd5644ee9afb6066bd34490c5","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/ios/3.png","hash":"8123f1f76a154435986d953794eebd99a19d18a7","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/ios/5.png","hash":"6adf815edc60c1c8c54ebc16942681bc94adc704","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/ios/7.png","hash":"9c257cc1ebc368908588398887de82d0f609861b","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter3/android/1.png","hash":"5901f6147a119b7b0dbce72b1c9ab21441c58b21","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter3/android/2.gif","hash":"d2aea484f44dded903833947bad6dce5e88b4353","modified":1472910949143},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter3/ios/1.png","hash":"b58e43808043b2eea40b73c9f384a0f3783ade80","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter3/android/3.png","hash":"d0df35c2e0fcd67e77abbeea07eddf66b4105548","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter3/ios/3.png","hash":"83cf58e96ca0f5c594235a267a66a827023ec597","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/ios/2.png","hash":"288a3d270ad93b6feb838c23c715198484587126","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/ios/4.gif","hash":"c5cdaea8f8f506c96856fbcd56c9b364b02bfcd6","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/ios/3.png","hash":"5dde3b06d7b08cc01e0b43992507f036a3be65ec","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/ios/1.png","hash":"1417ebb8448aa023b35261e4d1cfe2a044f86329","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/ios/6.gif","hash":"216c5e91ee14439aa1b352e2a08c4998742b9757","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/android/1.png","hash":"c9d5b28a853968e1d1e38f6514322260c358b433","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/android/4.gif","hash":"6da8f35ad629d46fcb95cd3eafb6a4f0afdfbd0b","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/android/2.png","hash":"e699c797f0a5724f5c0e9ea2c4f517b3277766fd","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/android/3.png","hash":"71d656d1f1e96a622009ddde8d077feba779dfdc","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter5/ios/1.png","hash":"b979de038c37951b46e02708d3cbea0cda8b8ee7","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/android/6.gif","hash":"ba7941ea980083ad647d4ddc5ad1ec9a104a56c5","modified":1472910949144},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter6/ios/1.png","hash":"f6b2b8d011ec1748f75c85e2186e03caacdfb4fa","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter6/ios/2.gif","hash":"5a99fdff5e312cae7fc13ad4986356839079eb2a","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter5/android/2.gif","hash":"394f4c405f2d9cffa248ce49e269aad2471c1ce8","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter5/android/1.png","hash":"b5313b06fb72ce82c1296e1be617eb40ecacb2ed","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter6/android/1.png","hash":"49e28d508689ac32a459ce859a42f684abb1bad9","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter6/android/2.gif","hash":"26aa6d2f709425076728e667303f40d4d9303602","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter2/android/1.png","hash":"bc83b9e87f41ff1210a746a807d92f21e311b647","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter2/android/2.png","hash":"568c3beddff47ad2d4f8f7fd3724f0c2f21d766b","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter2/android/4.png","hash":"b2bf3581d6c8e8b2e7dcf9334b2e56a10b327c7b","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter2/android/3.png","hash":"2bc0b2d88eb065462ba77a5cdb913a8f71bd6083","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter2/ios/4.png","hash":"67e6bfdfe771b61391397ad7ab1ec82b258ca027","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter2/ios/1.png","hash":"51f93dad070cfa6b15ca9a2504b41f191bdb3baf","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter2/ios/2.png","hash":"bdeb917af8130d5f8c389700d5aa61c83abaf5e9","modified":1472910949145},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter2/ios/3.png","hash":"f7577616626335a5fa3d8e3cd25f2fea963eed58","modified":1472910949145},{"_id":"public/docs/img/cli/finder-app-created.png","hash":"b0b52720158da01df9a1dd4b451eb182e836b275","modified":1472910949145},{"_id":"public/docs/img/cli/tns-emulate-ios-unix.png","hash":"ed59c4ed2be470612ab8b96fd5f436b0c488d809","modified":1472910949145},{"_id":"public/docs/img/cli/tns-emulate-android-windows.png","hash":"6d92523737e64093220a782ed94340a042db24eb","modified":1472910949146},{"_id":"public/docs/img/visual-studio-code-extension/configurations-menu.png","hash":"76e4e73b73d4a67f1e9678956fb421e08071aa84","modified":1472910949146},{"_id":"public/docs/img/visual-studio-code-extension/install.png","hash":"b65a6f7370a5243634b4507832388a4b1932be69","modified":1472910949146},{"_id":"public/docs/img/visual-studio-code-extension/nativescript-tns-args.png","hash":"42056ea61850ec1a3f64d059cc7f1637f2a8c5ce","modified":1472910949146},{"_id":"public/docs/img/modules/animation/background-color.gif","hash":"c5c84bf41a70ff207af2ff8646a8f77a0c4a1af2","modified":1472910949146},{"_id":"public/docs/img/modules/animation/easein.gif","hash":"6d719418ffd7018b58eba92aad364a292ed3748c","modified":1472910949146},{"_id":"public/docs/img/gallery/ios/scrollViewPage.png","hash":"38d4c2255df8c39b12281d66dbdb7eff0c00eb94","modified":1472910949146},{"_id":"public/docs/img/modules/animation/easeinout.gif","hash":"631f0d771b786a9f2bc533279730763f5b13a272","modified":1472910949146},{"_id":"public/docs/img/modules/animation/bezier.gif","hash":"590601b6a537be27a217a64c089de344a9ecdc34","modified":1472910949146},{"_id":"public/docs/img/modules/animation/easeout.gif","hash":"3dfeaf4984f99c307829f6ec90118a0ef8f5d0a3","modified":1472910949146},{"_id":"public/docs/img/launch-screen/ios/launch-screen-howto-004.png","hash":"2d2a4648b6047084fd4ced8add9c143421eb5806","modified":1472910949146},{"_id":"public/docs/img/modules/icon-fonts/icomoon.png","hash":"075d8b14cd3a23c6ef36b3beaa177e05d2efd8f2","modified":1472910949146},{"_id":"public/docs/img/modules/animation/reusing.gif","hash":"f4331501517f6638613d6252ce46503abd614f1e","modified":1472910949146},{"_id":"public/docs/img/modules/animation/linear.gif","hash":"2ab6fd0a21bbfd92e8ebd370a930aa7d47b201fd","modified":1472910949147},{"_id":"public/docs/img/modules/animation/spring.gif","hash":"0ff3885a198c9afe49610fd1096648bdeacab320","modified":1472910949147},{"_id":"public/docs/img/modules/keyboard/next.png","hash":"e9040c49ca6fe4de9350acd6480341553e39fc4a","modified":1472910949147},{"_id":"public/docs/img/modules/keyboard/go.png","hash":"17aaa9ce709b61a35e1f4f50514e160c9842f4b4","modified":1472910949147},{"_id":"public/docs/img/modules/keyboard/search.png","hash":"eb9997fb9dca03b20cca4c67658aace500694612","modified":1472910949147},{"_id":"public/docs/img/modules/keyboard/done.png","hash":"52e7211a33a6af89f3d26e693232007b5be12b38","modified":1472910949147},{"_id":"public/docs/img/modules/keyboard/send.png","hash":"5f87ec86b2158d1662a95173c720057a53f8eb8c","modified":1472910949147},{"_id":"public/script/code-block.js","hash":"ab55dc612c196bada6f74ef4a972d0f3b4551f0b","modified":1472910949185},{"_id":"public/script/code-environment.js","hash":"5ae0b8f2549cf06ac9b7652c5269dc74140f7812","modified":1472910949185},{"_id":"public/script/smooth-scroll.min.js","hash":"c80cccc6c68f32b348b3d8459eb89686871b2e38","modified":1472910949185},{"_id":"public/script/main.js","hash":"000670427cfe2940448af7f1a62f3d922e1f8f98","modified":1472910949185},{"_id":"public/style/tabs.css","hash":"0a6fe76ce08082a4414d107286cd586aefc29f55","modified":1472910949185},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter3/terminal-2.png","hash":"14280f8dd1c9f1e8a34b0d9c7cc1ff0158f9d510","modified":1472910949185},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/android/4.gif","hash":"0e8310064c6418d4898c12b1a7e580cdeec09354","modified":1472910949185},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/ios/4.gif","hash":"f84d4dfd080f7db729cc26ec01ec3798b4985263","modified":1472910949185},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter0/android/2.png","hash":"44a1200a322355391de3d57cadde337324161613","modified":1472910949185},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter0/android/3.png","hash":"6197e6e81e15b8d4bfaec34263ad80320c37a3a7","modified":1472910949185},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter0/android/1.png","hash":"9d47bbe0ca6c5195086adedf332560ffaa174838","modified":1472910949185},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/android/6.gif","hash":"e8f085ae47cea16f9b6e815433380ced87043015","modified":1472910949185},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter0/ios/1.png","hash":"22b6cd726199fd7e23ee5451f884875e83bc3738","modified":1472910949186},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter0/ios/2.png","hash":"9ee20279d9baf731d963dd40c91aded61791f759","modified":1472910949186},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter0/ios/3.png","hash":"67e501ce06d2e2a8ae3f10d2ed0fd30496cfdefb","modified":1472910949186},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter1/ios/1.png","hash":"5015c3f1e8a3950f3ea5392db439c783bf73cf66","modified":1472910949186},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter3/ios/2.gif","hash":"17afb4649f340f82e8441e4165b8157151bfa22e","modified":1472910949186},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/ios/5.gif","hash":"21ea84d9cc4b6afbf29164a7bcdf9dc5fb88172e","modified":1472910949186},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter4/android/5.gif","hash":"e3ffe1a21b49a7883e97504919b7a69e713d6c3f","modified":1472910949186},{"_id":"public/docs/img/navigation-angular/outlet-android.gif","hash":"a0ae24dffeff23d552789fcdacd434e6d20a503c","modified":1472910949187},{"_id":"public/fonts/percolate.svg","hash":"6e6127d99ec42503bda1c241dbf5ca0dd1deabe3","modified":1472910949187},{"_id":"public/docs/img/navigation-angular/page-outlet-ios.gif","hash":"adf77ea1876334eebb83b9f581ebbd5c086f1071","modified":1472910949187},{"_id":"public/docs/img/launch-screen/ios/launch-screen-howto-003.png","hash":"82920bf29212c1c3d3e8bc10d677458d49000e19","modified":1472910949187},{"_id":"public/docs/img/modules/animation/multiple-properties.gif","hash":"24b4a81c5e3d464fad637cbce0239d61b1e9eeaf","modified":1472910949187},{"_id":"public/docs/img/modules/animation/opacity.gif","hash":"28c04c5bd263fe93ac4111147392b7a15fab8903","modified":1472910949187},{"_id":"public/docs/img/modules/icon-fonts/sample-app.png","hash":"fca1920faca6d047a96adc9bde17a976acdbac93","modified":1472910949188},{"_id":"public/docs/img/launch-screen/ios/launch-screen-howto-010.png","hash":"31655765efc2983ce2d1668d2b985ac716047832","modified":1472910949188},{"_id":"public/docs/img/modules/keyboard/email.png","hash":"e2bd4bd882ab52265a877b1b6034fc55d435be1e","modified":1472910949188},{"_id":"public/docs/img/modules/keyboard/datetime.png","hash":"bcc81a22cd16bb46ca5f799e0bc6023b6892d5ce","modified":1472910949188},{"_id":"public/docs/img/modules/keyboard/number.png","hash":"6c5133a38cac763f20e7fbbfe9616fe54f922dcd","modified":1472910949188},{"_id":"public/docs/img/modules/keyboard/phone.png","hash":"58bd6314060eae70584fdd6526623e5e9b3f2737","modified":1472910949188},{"_id":"public/docs/img/modules/keyboard/url.png","hash":"3314ecdb4528cf6e616d6ea4aca500469f4446d3","modified":1472910949189},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/android/7.gif","hash":"f32ebb09fd0f0a70909526fbcbb2a7c100178f5a","modified":1472910949314},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/ios/6.gif","hash":"c046896642a2023597b0e8695d3a7f01ca7aa231","modified":1472910949314},{"_id":"public/docs/img/navigation-angular/page-outlet-android.gif","hash":"678d1ea40ede99fa5d0a595c563ad7574c97dd92","modified":1472910949314},{"_id":"public/docs/img/visual-studio-code-extension/nativescript-debugging.png","hash":"27a64bc55b3bf5065af678a1b8100c50f5acd686","modified":1472910949315},{"_id":"public/docs/img/launch-screen/ios/launch-screen-howto-002.png","hash":"d9f6c50afd15720ec653b60dbad65cf2bf749f95","modified":1472910949315},{"_id":"public/docs/img/modules/icon-fonts/fonts-folder.png","hash":"1d2ad22c0a904e037413207e3d134bd99b129e27","modified":1472910949603},{"_id":"public/docs/img/modules/animation/slide-in-effect.gif","hash":"e2d87bf098db317dee88ea49cc5bbe8e4ebbf0ce","modified":1472910949603},{"_id":"public/docs/img/modules/animation/translate.gif","hash":"4405d76b3db4848ad02358c4ce3199c687ce9ed0","modified":1472910949603},{"_id":"public/docs/img/cli-getting-started/angular/chapter3/ios/7.gif","hash":"d8b3fdf13952ca11259802d276ba4b27bca821ee","modified":1472910949604},{"_id":"public/docs/img/cli-getting-started/angular/chapter5/android/1.png","hash":"3d4ce746b97a3b18ec9a02a8a1499609c9c74f84","modified":1472910949604},{"_id":"public/docs/img/modules/animation/rotate.gif","hash":"24414b2fb35cca33c4aaf54ac6ccc47ed94c4e61","modified":1472910949776},{"_id":"public/docs/img/cli-getting-started/angular/chapter0/ios/1.png","hash":"dc58cd4bbbc4ab30e5326c60a9dd2e973960eb12","modified":1472910949777},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/android/1.png","hash":"0825819381bb916b29e5303042c77d6d07fcc568","modified":1472910949777},{"_id":"public/docs/img/cli-getting-started/angular/chapter0/android/2.png","hash":"d516adca0cf6b36c5679a5334bea3fe56c52e0c0","modified":1472910949777},{"_id":"public/docs/img/cli-getting-started/angular/chapter0/android/1.png","hash":"c9bb0f262ba62f9a9ff3824394ab29391c5f9a21","modified":1472910949777},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/ios/1.png","hash":"8b5cb14622eb24e361d75dfc73580abc643dcd3b","modified":1472910949777},{"_id":"public/docs/img/cli-getting-started/angular/chapter0/ios/2.png","hash":"30a746d13889ae908e67cc81d625d745877dd2ed","modified":1472910949778},{"_id":"public/docs/img/cli-getting-started/angular/chapter6/android/1.png","hash":"a5d7d3f051a8d4459a9449ba8433e7fcae010100","modified":1472910949778},{"_id":"public/docs/img/cli-getting-started/angular/chapter6/ios/1.png","hash":"0f26c1e7265f016739f1df1108d79906bcd50058","modified":1472910949778},{"_id":"public/docs/img/cli-getting-started/angular/chapter6/android/3.png","hash":"32b40fa31c53cd60edf1405f267a0b1f3c547dad","modified":1472910949778},{"_id":"public/docs/img/cli-getting-started/angular/chapter6/android/2.png","hash":"750dfc3ad1895551b9cee35bbfb5578bb87a9576","modified":1472910949778},{"_id":"public/docs/img/cli-getting-started/angular/chapter6/ios/2.png","hash":"4c001887afde4eda70ae489b46c93da9f717eca2","modified":1472910949778},{"_id":"public/docs/img/cli-getting-started/angular/chapter5/ios/1.png","hash":"0aa64034bc8278b56ea660b0865deb1d8adf48a7","modified":1472910949778},{"_id":"public/docs/img/cli-getting-started/angular/chapter6/ios/3.png","hash":"95a65934e12a1a2fdb77bb288134b1339ee02480","modified":1472910949779},{"_id":"public/docs/img/modules/animation/chaining-with-animation-set.gif","hash":"ef17d7f3819745d1f771e6cfe5da49c0f0fa06d4","modified":1472910949814},{"_id":"public/docs/img/modules/animation/chaining-with-promises.gif","hash":"f1663d760aa79be15c6a09e557718492cc9d18e5","modified":1472910949814},{"_id":"public/docs/img/modules/animation/multiple-views.gif","hash":"e94a278d8ffc02916495a835bde8052e3e0e9105","modified":1472910949815},{"_id":"public/docs/img/modules/animation/scale.gif","hash":"1fd759e65311b99a38fb24b5c4c664fc20ca40ae","modified":1472910949815},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/ios/8.gif","hash":"493acf103d17892a731bba100cbfcb2f8c5f2496","modified":1472910949949},{"_id":"public/docs/img/cli-getting-started/angular/chapter5/android/2.gif","hash":"a15fcf0208beca86a87173bb1f153c25cc82f45a","modified":1472910949949},{"_id":"public/docs/img/modules/animation/infinite.gif","hash":"e09ca8ffbc8f28c9824f2154e0677f2235f5b3d0","modified":1472910949964},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/android/8.gif","hash":"3152e89defb26e52faeae9e2411e03498e77781f","modified":1472910949964},{"_id":"public/docs/img/cli-getting-started/angular/chapter5/ios/2.gif","hash":"ffd29858ff3ec41e0da75de1605386600468b41a","modified":1472910949997},{"_id":"public/docs/img/cli-getting-started/nativescript/chapter5/ios/2.gif","hash":"0ecd4809c8fa94624810e3b4da96baf194449deb","modified":1472910949997},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/android/2.gif","hash":"2b3efec0d1b65015a7e3a6e1edf43e8dd521b917","modified":1472910950499},{"_id":"public/style/style.css","hash":"06ce5fb0f4da12a621f94723a3d45cbcff6080ff","modified":1472910950509},{"_id":"public/docs/img/cli-getting-started/angular/chapter4/ios/2.gif","hash":"04290765461e7c8fac67b1235904e498acaa3485","modified":1472910950524}],"Category":[],"Data":[],"Page":[{"title":"Introducing Nativescript Docs","description":"Meet NativeScript - an open-source framework for the cross-platform development of truly native apps.","order":0,"_content":"\n{% nativescript %}  \n\n# Welcome to NativeScript\n\nNativeScript is how you build cross-platform, native iOS and Android apps without web views. Use Angular, TypeScript or modern JavaScript to get truly native UI and performance while sharing skills and code with the web. Get 100% access to native APIs via JavaScript and reuse of packages from npm, CocoaPods and Gradle. Open source and backed by Telerik.\n\n{% endnativescript %}\n\n{% angular %}\n# NativeScript with Angular\n\nNativeScript doesn’t require Angular, but it’s even better when you use it. You can fully reuse skills and code from the web to build beautiful, high performance native mobile apps without web views. NativeScript features deep integration with Angular 2, the latest and greatest (and fastest) Angular framework. Open source and backed by Telerik.\n{% endangular %}\n\n## Get Started\n\nReady to get started developing with NativeScript? We offer a set of comprehensive tutorials that walk you through installing NativeScript, and building a real-world iOS and Android app from scratch.\n\n<div id=\"start-button-container\">\n  <a href=\"http://docs.nativescript.org/angular/tutorial/ng-chapter-0\" class=\"Btn\" id=\"ng-start-button\">Get Started with TypeScript & Angular</a>\n  <a href=\"http://docs.nativescript.org/tutorial/chapter-0\" class=\"Btn\" id=\"js-start-button\">Get Started with JavaScript</a>\n</div>\n\n<script>\n  // Quick script to randomize the tutorial button order\n  var container = document.getElementById(\"start-button-container\");\n  var ngButton = document.getElementById(\"ng-start-button\");\n  var jsButton = document.getElementById(\"js-start-button\");\n\n  if (Math.floor(Math.random() * 2) == 0) {\n    container.insertBefore(jsButton, ngButton);\n    ngButton.style.marginTop = \"1em\";\n    ngButton.style.marginBottom = \"1em\";\n  } else {\n    jsButton.style.marginTop = \"1em\";\n    jsButton.style.marginBottom = \"1em\";\n  }\n</script>\n\n## Join the NativeScript Community\n\nWe have a vibrant, engaged community and are here to help. You can find us on [Twitter](https://twitter.com/nativescript) and [Slack](http://developer.telerik.com/wp-login.php?action=slack-invitation).\n\n# Set Up Your System\n\nWith the open-source NativeScript command-line interface and an IDE or text editor of your choice, you can create, develop, store and build your apps entirely locally, free of charge and anonymously. Let’s look at how to set up the CLI for development.\n\n> **NOTE**: The steps on this page are quick setup steps intended for users new to mobile development. If you have existing mobile experience, if you’re on Linux, or if you want full control of the installation process, refer to one of the advanced setup guide below, which walk you through manually setting up your environment for NativeScript development.\n> * [Advanced setup: Windows](/start/ns-setup-win)\n> * [Advanced setup: OS X](/start/ns-setup-os-x)\n> * [Advanced setup: Linux](/start/ns-setup-linux)\n\n## Step 1: Install Node.js\n\nThe NativeScript CLI is built on Node.js, and as such you need to have Node.js installed to use NativeScript.\n\nYou can check whether you have Node.js set up by opening a terminal or command prompt on your development machine and executing `node --version`. If you get an error, head to  <https://nodejs.org/> and download and install the latest “LTS” (long-term support) distribution for your development machine.\n\n> **TIP**:\n> * If you’re on OS X and use [Homebrew](http://brew.sh/), you can alternatively install the Node.js LTS release by running `brew install node4-lts` in your terminal.\n> * The NativeScript CLI supports a wide variety of Node.js versions, so if you already have Node.js installed you should be good to go. If, by chance, you’re running an unsupported version, the `tns doctor` command we’ll run momentarily will flag the problem so you can upgrade.\n\n## Step 2: Install the NativeScript CLI\n\nOpen your terminal or command prompt and execute the following command to install the NativeScript CLI from npm, which is Node.js’ package manager:\n\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">npm install -g nativescript</code></pre>\n\n> **NOTE**:\n> * You may be asked two questions during the installation—_Do you want to visit the official documentation?_, and _Do you want to run the setup script?_ Go ahead and answer “No” to both questions for now as we’ll cover the documentation and scripts momentarily.\n> * If you’re on OS X and receive an EACCES error, you either need to rerun the previous command with `sudo`—that is, `sudo npm install -g nativescript`—or take a moment to [fix your npm permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions) so that you don’t need admin rights to globally install npm packages.\n\nAfter completing the setup you should have two commands available from your terminal or command prompt: `tns`—which is short for <b>T</b>elerik <b>N</b>ative<b>S</b>cript—and `nativescript`. The two commands are equivalent, so we'll stick with the shorter `tns`.\n\nYou can verify the installation was successful by running `tns` in your terminal. You should see something like this:\n\n```\n$ tns\n# NativeScript\n┌─────────┬─────────────────────────────────────────────────────────────────────┐\n│ Usage   │ Synopsis                                                            │\n│ General │ $ tns <Command> [Command Parameters] [--command <Options>]          │\n│ Alias   │ $ nativescript <Command> [Command Parameters] [--command <Options>] │\n└─────────┴─────────────────────────────────────────────────────────────────────┘\n```\n\n## Step 3: Install iOS and Android requirements\n\nWhen you build with NativeScript you’re building truly native iOS and Android apps, and as such, you need to set up each platform you intend to build for on your development machine. To ease the pain of installing all of these requirements manually, the NativeScript CLI provides quick-start scripts for Windows and OS X that handle the necessary setup for you automatically. Let’s look at how they work.\n\n> **TIP**: Setting up your machine for native development can be tricky, especially if you’re new to mobile development. If you get stuck, or if you have questions while going through these instructions, the NativeScript Community Slack is a great place to get help. Feel free to [join us](http://developer.telerik.com/wp-login.php?action=slack-invitation), and ask any installation questions you may have in the #getting-started channel.\n\n### Windows\n\nIf you’re on Windows, copy and paste the script below into your command prompt and press Enter:\n\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://www.nativescript.org/setup/win'))\"</code></pre>\n\nDuring installation you may need to accept a User Account Control prompt to grant the script administrative privileges. Also, be aware that the script downloads and installs some big dependencies—so it’s common for the script to take a while to complete. When the script finishes, close and reopen your command prompt.\n\n> **NOTE**: On Windows systems you can only use the NativeScript CLI to develop Android apps. This is because the NativeScript CLI uses Xcode to build iOS apps, which is only available on the OS X operating system. If you’re interested in building iOS apps on Windows, you may want to try out the [Telerik Platform](http://www.telerik.com/platform). The Telerik Platform provides robust tooling for NativeScript apps, including a service that performs iOS and Android builds in the cloud, removing the need to complete these system requirements, and allowing you to build for iOS on Windows.\n\n### OS X\n\nIf you’re on a Mac, copy and paste the script below into your terminal and press Enter:\n\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">ruby -e \"$(curl -fsSL https://www.nativescript.org/setup/mac)\"</code></pre>\n\nMuch like the Windows script, the OS X script needs administrative access to run some commands using `sudo`; therefore, you may need to provide your password several times during execution. The OS X script also may take some time to complete, as it’s installing the dependencies for both iOS and Android development. When the script finishes, close and restart your terminal.\n\n## Step 4: Verify the setup\n\nOnce you’ve finished installing NativeScript and its dependencies, run the `tns doctor` command, which will check for any issues with your installation.\n\n```\ntns doctor\n```\n\nIf you see “No issues were detected” you’re good to go!\n\n## What’s Next\n\n* [Return to the JavaScript tutorial](http://docs.nativescript.org/tutorial/chapter-1#11-install-nativescript-and-configure-your-environment)\n* [Return to the TypeScript & Angular tutorial](http://docs.nativescript.org/angular/tutorial/ng-chapter-1#11-install-nativescript-and-configure-your-environment)","source":"index.md","raw":"---\ntitle: Introducing Nativescript Docs\ndescription: Meet NativeScript - an open-source framework for the cross-platform development of truly native apps.\norder: 0\n---\n\n{% nativescript %}  \n\n# Welcome to NativeScript\n\nNativeScript is how you build cross-platform, native iOS and Android apps without web views. Use Angular, TypeScript or modern JavaScript to get truly native UI and performance while sharing skills and code with the web. Get 100% access to native APIs via JavaScript and reuse of packages from npm, CocoaPods and Gradle. Open source and backed by Telerik.\n\n{% endnativescript %}\n\n{% angular %}\n# NativeScript with Angular\n\nNativeScript doesn’t require Angular, but it’s even better when you use it. You can fully reuse skills and code from the web to build beautiful, high performance native mobile apps without web views. NativeScript features deep integration with Angular 2, the latest and greatest (and fastest) Angular framework. Open source and backed by Telerik.\n{% endangular %}\n\n## Get Started\n\nReady to get started developing with NativeScript? We offer a set of comprehensive tutorials that walk you through installing NativeScript, and building a real-world iOS and Android app from scratch.\n\n<div id=\"start-button-container\">\n  <a href=\"http://docs.nativescript.org/angular/tutorial/ng-chapter-0\" class=\"Btn\" id=\"ng-start-button\">Get Started with TypeScript & Angular</a>\n  <a href=\"http://docs.nativescript.org/tutorial/chapter-0\" class=\"Btn\" id=\"js-start-button\">Get Started with JavaScript</a>\n</div>\n\n<script>\n  // Quick script to randomize the tutorial button order\n  var container = document.getElementById(\"start-button-container\");\n  var ngButton = document.getElementById(\"ng-start-button\");\n  var jsButton = document.getElementById(\"js-start-button\");\n\n  if (Math.floor(Math.random() * 2) == 0) {\n    container.insertBefore(jsButton, ngButton);\n    ngButton.style.marginTop = \"1em\";\n    ngButton.style.marginBottom = \"1em\";\n  } else {\n    jsButton.style.marginTop = \"1em\";\n    jsButton.style.marginBottom = \"1em\";\n  }\n</script>\n\n## Join the NativeScript Community\n\nWe have a vibrant, engaged community and are here to help. You can find us on [Twitter](https://twitter.com/nativescript) and [Slack](http://developer.telerik.com/wp-login.php?action=slack-invitation).\n\n# Set Up Your System\n\nWith the open-source NativeScript command-line interface and an IDE or text editor of your choice, you can create, develop, store and build your apps entirely locally, free of charge and anonymously. Let’s look at how to set up the CLI for development.\n\n> **NOTE**: The steps on this page are quick setup steps intended for users new to mobile development. If you have existing mobile experience, if you’re on Linux, or if you want full control of the installation process, refer to one of the advanced setup guide below, which walk you through manually setting up your environment for NativeScript development.\n> * [Advanced setup: Windows](/start/ns-setup-win)\n> * [Advanced setup: OS X](/start/ns-setup-os-x)\n> * [Advanced setup: Linux](/start/ns-setup-linux)\n\n## Step 1: Install Node.js\n\nThe NativeScript CLI is built on Node.js, and as such you need to have Node.js installed to use NativeScript.\n\nYou can check whether you have Node.js set up by opening a terminal or command prompt on your development machine and executing `node --version`. If you get an error, head to  <https://nodejs.org/> and download and install the latest “LTS” (long-term support) distribution for your development machine.\n\n> **TIP**:\n> * If you’re on OS X and use [Homebrew](http://brew.sh/), you can alternatively install the Node.js LTS release by running `brew install node4-lts` in your terminal.\n> * The NativeScript CLI supports a wide variety of Node.js versions, so if you already have Node.js installed you should be good to go. If, by chance, you’re running an unsupported version, the `tns doctor` command we’ll run momentarily will flag the problem so you can upgrade.\n\n## Step 2: Install the NativeScript CLI\n\nOpen your terminal or command prompt and execute the following command to install the NativeScript CLI from npm, which is Node.js’ package manager:\n\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">npm install -g nativescript</code></pre>\n\n> **NOTE**:\n> * You may be asked two questions during the installation—_Do you want to visit the official documentation?_, and _Do you want to run the setup script?_ Go ahead and answer “No” to both questions for now as we’ll cover the documentation and scripts momentarily.\n> * If you’re on OS X and receive an EACCES error, you either need to rerun the previous command with `sudo`—that is, `sudo npm install -g nativescript`—or take a moment to [fix your npm permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions) so that you don’t need admin rights to globally install npm packages.\n\nAfter completing the setup you should have two commands available from your terminal or command prompt: `tns`—which is short for <b>T</b>elerik <b>N</b>ative<b>S</b>cript—and `nativescript`. The two commands are equivalent, so we'll stick with the shorter `tns`.\n\nYou can verify the installation was successful by running `tns` in your terminal. You should see something like this:\n\n```\n$ tns\n# NativeScript\n┌─────────┬─────────────────────────────────────────────────────────────────────┐\n│ Usage   │ Synopsis                                                            │\n│ General │ $ tns <Command> [Command Parameters] [--command <Options>]          │\n│ Alias   │ $ nativescript <Command> [Command Parameters] [--command <Options>] │\n└─────────┴─────────────────────────────────────────────────────────────────────┘\n```\n\n## Step 3: Install iOS and Android requirements\n\nWhen you build with NativeScript you’re building truly native iOS and Android apps, and as such, you need to set up each platform you intend to build for on your development machine. To ease the pain of installing all of these requirements manually, the NativeScript CLI provides quick-start scripts for Windows and OS X that handle the necessary setup for you automatically. Let’s look at how they work.\n\n> **TIP**: Setting up your machine for native development can be tricky, especially if you’re new to mobile development. If you get stuck, or if you have questions while going through these instructions, the NativeScript Community Slack is a great place to get help. Feel free to [join us](http://developer.telerik.com/wp-login.php?action=slack-invitation), and ask any installation questions you may have in the #getting-started channel.\n\n### Windows\n\nIf you’re on Windows, copy and paste the script below into your command prompt and press Enter:\n\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://www.nativescript.org/setup/win'))\"</code></pre>\n\nDuring installation you may need to accept a User Account Control prompt to grant the script administrative privileges. Also, be aware that the script downloads and installs some big dependencies—so it’s common for the script to take a while to complete. When the script finishes, close and reopen your command prompt.\n\n> **NOTE**: On Windows systems you can only use the NativeScript CLI to develop Android apps. This is because the NativeScript CLI uses Xcode to build iOS apps, which is only available on the OS X operating system. If you’re interested in building iOS apps on Windows, you may want to try out the [Telerik Platform](http://www.telerik.com/platform). The Telerik Platform provides robust tooling for NativeScript apps, including a service that performs iOS and Android builds in the cloud, removing the need to complete these system requirements, and allowing you to build for iOS on Windows.\n\n### OS X\n\nIf you’re on a Mac, copy and paste the script below into your terminal and press Enter:\n\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">ruby -e \"$(curl -fsSL https://www.nativescript.org/setup/mac)\"</code></pre>\n\nMuch like the Windows script, the OS X script needs administrative access to run some commands using `sudo`; therefore, you may need to provide your password several times during execution. The OS X script also may take some time to complete, as it’s installing the dependencies for both iOS and Android development. When the script finishes, close and restart your terminal.\n\n## Step 4: Verify the setup\n\nOnce you’ve finished installing NativeScript and its dependencies, run the `tns doctor` command, which will check for any issues with your installation.\n\n```\ntns doctor\n```\n\nIf you see “No issues were detected” you’re good to go!\n\n## What’s Next\n\n* [Return to the JavaScript tutorial](http://docs.nativescript.org/tutorial/chapter-1#11-install-nativescript-and-configure-your-environment)\n* [Return to the TypeScript & Angular tutorial](http://docs.nativescript.org/angular/tutorial/ng-chapter-1#11-install-nativescript-and-configure-your-environment)","date":"2016-08-26T21:05:54.437Z","updated":"2016-08-26T21:05:54.437Z","path":"index.html","comments":1,"layout":"page","_id":"cisn95c1w0000wsl0zudnhnuk","content":"<div class=\"codeblock n\"><h1 id=\"welcome-to-nativescript\">Welcome to NativeScript</h1>\n<p>NativeScript is how you build cross-platform, native iOS and Android apps without web views. Use Angular, TypeScript or modern JavaScript to get truly native UI and performance while sharing skills and code with the web. Get 100% access to native APIs via JavaScript and reuse of packages from npm, CocoaPods and Gradle. Open source and backed by Telerik.</p>\n</div>\n<div class=\"codeblock ng\"><h1 id=\"nativescript-with-angular\">NativeScript with Angular</h1>\n<p>NativeScript doesn’t require Angular, but it’s even better when you use it. You can fully reuse skills and code from the web to build beautiful, high performance native mobile apps without web views. NativeScript features deep integration with Angular 2, the latest and greatest (and fastest) Angular framework. Open source and backed by Telerik.</p>\n</div>\n<h2 id=\"Get-Started\"><a href=\"#Get-Started\" class=\"headerlink\" title=\"Get Started\"></a>Get Started</h2><p>Ready to get started developing with NativeScript? We offer a set of comprehensive tutorials that walk you through installing NativeScript, and building a real-world iOS and Android app from scratch.</p>\n<div id=\"start-button-container\">\n  <a href=\"http://docs.nativescript.org/angular/tutorial/ng-chapter-0\" class=\"Btn\" id=\"ng-start-button\">Get Started with TypeScript &amp; Angular</a>\n  <a href=\"http://docs.nativescript.org/tutorial/chapter-0\" class=\"Btn\" id=\"js-start-button\">Get Started with JavaScript</a>\n</div>\n\n<script>\n  // Quick script to randomize the tutorial button order\n  var container = document.getElementById(\"start-button-container\");\n  var ngButton = document.getElementById(\"ng-start-button\");\n  var jsButton = document.getElementById(\"js-start-button\");\n\n  if (Math.floor(Math.random() * 2) == 0) {\n    container.insertBefore(jsButton, ngButton);\n    ngButton.style.marginTop = \"1em\";\n    ngButton.style.marginBottom = \"1em\";\n  } else {\n    jsButton.style.marginTop = \"1em\";\n    jsButton.style.marginBottom = \"1em\";\n  }\n</script>\n\n<h2 id=\"Join-the-NativeScript-Community\"><a href=\"#Join-the-NativeScript-Community\" class=\"headerlink\" title=\"Join the NativeScript Community\"></a>Join the NativeScript Community</h2><p>We have a vibrant, engaged community and are here to help. You can find us on <a href=\"https://twitter.com/nativescript\" target=\"_blank\" rel=\"external\">Twitter</a> and <a href=\"http://developer.telerik.com/wp-login.php?action=slack-invitation\" target=\"_blank\" rel=\"external\">Slack</a>.</p>\n<h1 id=\"Set-Up-Your-System\"><a href=\"#Set-Up-Your-System\" class=\"headerlink\" title=\"Set Up Your System\"></a>Set Up Your System</h1><p>With the open-source NativeScript command-line interface and an IDE or text editor of your choice, you can create, develop, store and build your apps entirely locally, free of charge and anonymously. Let’s look at how to set up the CLI for development.</p>\n<blockquote>\n<p><strong>NOTE</strong>: The steps on this page are quick setup steps intended for users new to mobile development. If you have existing mobile experience, if you’re on Linux, or if you want full control of the installation process, refer to one of the advanced setup guide below, which walk you through manually setting up your environment for NativeScript development.</p>\n<ul>\n<li><a href=\"/start/ns-setup-win\">Advanced setup: Windows</a></li>\n<li><a href=\"/start/ns-setup-os-x\">Advanced setup: OS X</a></li>\n<li><a href=\"/start/ns-setup-linux\">Advanced setup: Linux</a></li>\n</ul>\n</blockquote>\n<h2 id=\"Step-1-Install-Node-js\"><a href=\"#Step-1-Install-Node-js\" class=\"headerlink\" title=\"Step 1: Install Node.js\"></a>Step 1: Install Node.js</h2><p>The NativeScript CLI is built on Node.js, and as such you need to have Node.js installed to use NativeScript.</p>\n<p>You can check whether you have Node.js set up by opening a terminal or command prompt on your development machine and executing <code>node --version</code>. If you get an error, head to  <a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">https://nodejs.org/</a> and download and install the latest “LTS” (long-term support) distribution for your development machine.</p>\n<blockquote>\n<p><strong>TIP</strong>:</p>\n<ul>\n<li>If you’re on OS X and use <a href=\"http://brew.sh/\" target=\"_blank\" rel=\"external\">Homebrew</a>, you can alternatively install the Node.js LTS release by running <code>brew install node4-lts</code> in your terminal.</li>\n<li>The NativeScript CLI supports a wide variety of Node.js versions, so if you already have Node.js installed you should be good to go. If, by chance, you’re running an unsupported version, the <code>tns doctor</code> command we’ll run momentarily will flag the problem so you can upgrade.</li>\n</ul>\n</blockquote>\n<h2 id=\"Step-2-Install-the-NativeScript-CLI\"><a href=\"#Step-2-Install-the-NativeScript-CLI\" class=\"headerlink\" title=\"Step 2: Install the NativeScript CLI\"></a>Step 2: Install the NativeScript CLI</h2><p>Open your terminal or command prompt and execute the following command to install the NativeScript CLI from npm, which is Node.js’ package manager:</p>\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">npm install -g nativescript</code></pre>\n\n<blockquote>\n<p><strong>NOTE</strong>:</p>\n<ul>\n<li>You may be asked two questions during the installation—<em>Do you want to visit the official documentation?</em>, and <em>Do you want to run the setup script?</em> Go ahead and answer “No” to both questions for now as we’ll cover the documentation and scripts momentarily.</li>\n<li>If you’re on OS X and receive an EACCES error, you either need to rerun the previous command with <code>sudo</code>—that is, <code>sudo npm install -g nativescript</code>—or take a moment to <a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\" target=\"_blank\" rel=\"external\">fix your npm permissions</a> so that you don’t need admin rights to globally install npm packages.</li>\n</ul>\n</blockquote>\n<p>After completing the setup you should have two commands available from your terminal or command prompt: <code>tns</code>—which is short for <b>T</b>elerik <b>N</b>ative<b>S</b>cript—and <code>nativescript</code>. The two commands are equivalent, so we’ll stick with the shorter <code>tns</code>.</p>\n<p>You can verify the installation was successful by running <code>tns</code> in your terminal. You should see something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns</div><div class=\"line\"># NativeScript</div><div class=\"line\">┌─────────┬─────────────────────────────────────────────────────────────────────┐</div><div class=\"line\">│ Usage   │ Synopsis                                                            │</div><div class=\"line\">│ General │ $ tns &lt;Command&gt; [Command Parameters] [--command &lt;Options&gt;]          │</div><div class=\"line\">│ Alias   │ $ nativescript &lt;Command&gt; [Command Parameters] [--command &lt;Options&gt;] │</div><div class=\"line\">└─────────┴─────────────────────────────────────────────────────────────────────┘</div></pre></td></tr></table></figure>\n<h2 id=\"Step-3-Install-iOS-and-Android-requirements\"><a href=\"#Step-3-Install-iOS-and-Android-requirements\" class=\"headerlink\" title=\"Step 3: Install iOS and Android requirements\"></a>Step 3: Install iOS and Android requirements</h2><p>When you build with NativeScript you’re building truly native iOS and Android apps, and as such, you need to set up each platform you intend to build for on your development machine. To ease the pain of installing all of these requirements manually, the NativeScript CLI provides quick-start scripts for Windows and OS X that handle the necessary setup for you automatically. Let’s look at how they work.</p>\n<blockquote>\n<p><strong>TIP</strong>: Setting up your machine for native development can be tricky, especially if you’re new to mobile development. If you get stuck, or if you have questions while going through these instructions, the NativeScript Community Slack is a great place to get help. Feel free to <a href=\"http://developer.telerik.com/wp-login.php?action=slack-invitation\" target=\"_blank\" rel=\"external\">join us</a>, and ask any installation questions you may have in the #getting-started channel.</p>\n</blockquote>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>If you’re on Windows, copy and paste the script below into your command prompt and press Enter:</p>\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://www.nativescript.org/setup/win'))\"</code></pre>\n\n<p>During installation you may need to accept a User Account Control prompt to grant the script administrative privileges. Also, be aware that the script downloads and installs some big dependencies—so it’s common for the script to take a while to complete. When the script finishes, close and reopen your command prompt.</p>\n<blockquote>\n<p><strong>NOTE</strong>: On Windows systems you can only use the NativeScript CLI to develop Android apps. This is because the NativeScript CLI uses Xcode to build iOS apps, which is only available on the OS X operating system. If you’re interested in building iOS apps on Windows, you may want to try out the <a href=\"http://www.telerik.com/platform\" target=\"_blank\" rel=\"external\">Telerik Platform</a>. The Telerik Platform provides robust tooling for NativeScript apps, including a service that performs iOS and Android builds in the cloud, removing the need to complete these system requirements, and allowing you to build for iOS on Windows.</p>\n</blockquote>\n<h3 id=\"OS-X\"><a href=\"#OS-X\" class=\"headerlink\" title=\"OS X\"></a>OS X</h3><p>If you’re on a Mac, copy and paste the script below into your terminal and press Enter:</p>\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">ruby -e \"$(curl -fsSL https://www.nativescript.org/setup/mac)\"</code></pre>\n\n<p>Much like the Windows script, the OS X script needs administrative access to run some commands using <code>sudo</code>; therefore, you may need to provide your password several times during execution. The OS X script also may take some time to complete, as it’s installing the dependencies for both iOS and Android development. When the script finishes, close and restart your terminal.</p>\n<h2 id=\"Step-4-Verify-the-setup\"><a href=\"#Step-4-Verify-the-setup\" class=\"headerlink\" title=\"Step 4: Verify the setup\"></a>Step 4: Verify the setup</h2><p>Once you’ve finished installing NativeScript and its dependencies, run the <code>tns doctor</code> command, which will check for any issues with your installation.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns doctor</div></pre></td></tr></table></figure>\n<p>If you see “No issues were detected” you’re good to go!</p>\n<h2 id=\"What’s-Next\"><a href=\"#What’s-Next\" class=\"headerlink\" title=\"What’s Next\"></a>What’s Next</h2><ul>\n<li><a href=\"http://docs.nativescript.org/tutorial/chapter-1#11-install-nativescript-and-configure-your-environment\">Return to the JavaScript tutorial</a></li>\n<li><a href=\"http://docs.nativescript.org/angular/tutorial/ng-chapter-1#11-install-nativescript-and-configure-your-environment\">Return to the TypeScript &amp; Angular tutorial</a></li>\n</ul>\n","excerpt":"","more":"<div class=\"codeblock n\"><h1 id=\"welcome-to-nativescript\">Welcome to NativeScript</h1>\n<p>NativeScript is how you build cross-platform, native iOS and Android apps without web views. Use Angular, TypeScript or modern JavaScript to get truly native UI and performance while sharing skills and code with the web. Get 100% access to native APIs via JavaScript and reuse of packages from npm, CocoaPods and Gradle. Open source and backed by Telerik.</p>\n</div>\n<div class=\"codeblock ng\"><h1 id=\"nativescript-with-angular\">NativeScript with Angular</h1>\n<p>NativeScript doesn’t require Angular, but it’s even better when you use it. You can fully reuse skills and code from the web to build beautiful, high performance native mobile apps without web views. NativeScript features deep integration with Angular 2, the latest and greatest (and fastest) Angular framework. Open source and backed by Telerik.</p>\n</div>\n<h2 id=\"Get-Started\"><a href=\"#Get-Started\" class=\"headerlink\" title=\"Get Started\"></a>Get Started</h2><p>Ready to get started developing with NativeScript? We offer a set of comprehensive tutorials that walk you through installing NativeScript, and building a real-world iOS and Android app from scratch.</p>\n<div id=\"start-button-container\">\n  <a href=\"http://docs.nativescript.org/angular/tutorial/ng-chapter-0\" class=\"Btn\" id=\"ng-start-button\">Get Started with TypeScript &amp; Angular</a>\n  <a href=\"http://docs.nativescript.org/tutorial/chapter-0\" class=\"Btn\" id=\"js-start-button\">Get Started with JavaScript</a>\n</div>\n\n<script>\n  // Quick script to randomize the tutorial button order\n  var container = document.getElementById(\"start-button-container\");\n  var ngButton = document.getElementById(\"ng-start-button\");\n  var jsButton = document.getElementById(\"js-start-button\");\n\n  if (Math.floor(Math.random() * 2) == 0) {\n    container.insertBefore(jsButton, ngButton);\n    ngButton.style.marginTop = \"1em\";\n    ngButton.style.marginBottom = \"1em\";\n  } else {\n    jsButton.style.marginTop = \"1em\";\n    jsButton.style.marginBottom = \"1em\";\n  }\n</script>\n\n<h2 id=\"Join-the-NativeScript-Community\"><a href=\"#Join-the-NativeScript-Community\" class=\"headerlink\" title=\"Join the NativeScript Community\"></a>Join the NativeScript Community</h2><p>We have a vibrant, engaged community and are here to help. You can find us on <a href=\"https://twitter.com/nativescript\">Twitter</a> and <a href=\"http://developer.telerik.com/wp-login.php?action=slack-invitation\">Slack</a>.</p>\n<h1 id=\"Set-Up-Your-System\"><a href=\"#Set-Up-Your-System\" class=\"headerlink\" title=\"Set Up Your System\"></a>Set Up Your System</h1><p>With the open-source NativeScript command-line interface and an IDE or text editor of your choice, you can create, develop, store and build your apps entirely locally, free of charge and anonymously. Let’s look at how to set up the CLI for development.</p>\n<blockquote>\n<p><strong>NOTE</strong>: The steps on this page are quick setup steps intended for users new to mobile development. If you have existing mobile experience, if you’re on Linux, or if you want full control of the installation process, refer to one of the advanced setup guide below, which walk you through manually setting up your environment for NativeScript development.</p>\n<ul>\n<li><a href=\"/start/ns-setup-win\">Advanced setup: Windows</a></li>\n<li><a href=\"/start/ns-setup-os-x\">Advanced setup: OS X</a></li>\n<li><a href=\"/start/ns-setup-linux\">Advanced setup: Linux</a></li>\n</ul>\n</blockquote>\n<h2 id=\"Step-1-Install-Node-js\"><a href=\"#Step-1-Install-Node-js\" class=\"headerlink\" title=\"Step 1: Install Node.js\"></a>Step 1: Install Node.js</h2><p>The NativeScript CLI is built on Node.js, and as such you need to have Node.js installed to use NativeScript.</p>\n<p>You can check whether you have Node.js set up by opening a terminal or command prompt on your development machine and executing <code>node --version</code>. If you get an error, head to  <a href=\"https://nodejs.org/\">https://nodejs.org/</a> and download and install the latest “LTS” (long-term support) distribution for your development machine.</p>\n<blockquote>\n<p><strong>TIP</strong>:</p>\n<ul>\n<li>If you’re on OS X and use <a href=\"http://brew.sh/\">Homebrew</a>, you can alternatively install the Node.js LTS release by running <code>brew install node4-lts</code> in your terminal.</li>\n<li>The NativeScript CLI supports a wide variety of Node.js versions, so if you already have Node.js installed you should be good to go. If, by chance, you’re running an unsupported version, the <code>tns doctor</code> command we’ll run momentarily will flag the problem so you can upgrade.</li>\n</ul>\n</blockquote>\n<h2 id=\"Step-2-Install-the-NativeScript-CLI\"><a href=\"#Step-2-Install-the-NativeScript-CLI\" class=\"headerlink\" title=\"Step 2: Install the NativeScript CLI\"></a>Step 2: Install the NativeScript CLI</h2><p>Open your terminal or command prompt and execute the following command to install the NativeScript CLI from npm, which is Node.js’ package manager:</p>\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">npm install -g nativescript</code></pre>\n\n<blockquote>\n<p><strong>NOTE</strong>:</p>\n<ul>\n<li>You may be asked two questions during the installation—<em>Do you want to visit the official documentation?</em>, and <em>Do you want to run the setup script?</em> Go ahead and answer “No” to both questions for now as we’ll cover the documentation and scripts momentarily.</li>\n<li>If you’re on OS X and receive an EACCES error, you either need to rerun the previous command with <code>sudo</code>—that is, <code>sudo npm install -g nativescript</code>—or take a moment to <a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\">fix your npm permissions</a> so that you don’t need admin rights to globally install npm packages.</li>\n</ul>\n</blockquote>\n<p>After completing the setup you should have two commands available from your terminal or command prompt: <code>tns</code>—which is short for <b>T</b>elerik <b>N</b>ative<b>S</b>cript—and <code>nativescript</code>. The two commands are equivalent, so we’ll stick with the shorter <code>tns</code>.</p>\n<p>You can verify the installation was successful by running <code>tns</code> in your terminal. You should see something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns</div><div class=\"line\"># NativeScript</div><div class=\"line\">┌─────────┬─────────────────────────────────────────────────────────────────────┐</div><div class=\"line\">│ Usage   │ Synopsis                                                            │</div><div class=\"line\">│ General │ $ tns &lt;Command&gt; [Command Parameters] [--command &lt;Options&gt;]          │</div><div class=\"line\">│ Alias   │ $ nativescript &lt;Command&gt; [Command Parameters] [--command &lt;Options&gt;] │</div><div class=\"line\">└─────────┴─────────────────────────────────────────────────────────────────────┘</div></pre></td></tr></table></figure>\n<h2 id=\"Step-3-Install-iOS-and-Android-requirements\"><a href=\"#Step-3-Install-iOS-and-Android-requirements\" class=\"headerlink\" title=\"Step 3: Install iOS and Android requirements\"></a>Step 3: Install iOS and Android requirements</h2><p>When you build with NativeScript you’re building truly native iOS and Android apps, and as such, you need to set up each platform you intend to build for on your development machine. To ease the pain of installing all of these requirements manually, the NativeScript CLI provides quick-start scripts for Windows and OS X that handle the necessary setup for you automatically. Let’s look at how they work.</p>\n<blockquote>\n<p><strong>TIP</strong>: Setting up your machine for native development can be tricky, especially if you’re new to mobile development. If you get stuck, or if you have questions while going through these instructions, the NativeScript Community Slack is a great place to get help. Feel free to <a href=\"http://developer.telerik.com/wp-login.php?action=slack-invitation\">join us</a>, and ask any installation questions you may have in the #getting-started channel.</p>\n</blockquote>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>If you’re on Windows, copy and paste the script below into your command prompt and press Enter:</p>\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://www.nativescript.org/setup/win'))\"</code></pre>\n\n<p>During installation you may need to accept a User Account Control prompt to grant the script administrative privileges. Also, be aware that the script downloads and installs some big dependencies—so it’s common for the script to take a while to complete. When the script finishes, close and reopen your command prompt.</p>\n<blockquote>\n<p><strong>NOTE</strong>: On Windows systems you can only use the NativeScript CLI to develop Android apps. This is because the NativeScript CLI uses Xcode to build iOS apps, which is only available on the OS X operating system. If you’re interested in building iOS apps on Windows, you may want to try out the <a href=\"http://www.telerik.com/platform\">Telerik Platform</a>. The Telerik Platform provides robust tooling for NativeScript apps, including a service that performs iOS and Android builds in the cloud, removing the need to complete these system requirements, and allowing you to build for iOS on Windows.</p>\n</blockquote>\n<h3 id=\"OS-X\"><a href=\"#OS-X\" class=\"headerlink\" title=\"OS X\"></a>OS X</h3><p>If you’re on a Mac, copy and paste the script below into your terminal and press Enter:</p>\n<pre class=\"add-copy-button\"><code class=\"language-terminal\">ruby -e \"$(curl -fsSL https://www.nativescript.org/setup/mac)\"</code></pre>\n\n<p>Much like the Windows script, the OS X script needs administrative access to run some commands using <code>sudo</code>; therefore, you may need to provide your password several times during execution. The OS X script also may take some time to complete, as it’s installing the dependencies for both iOS and Android development. When the script finishes, close and restart your terminal.</p>\n<h2 id=\"Step-4-Verify-the-setup\"><a href=\"#Step-4-Verify-the-setup\" class=\"headerlink\" title=\"Step 4: Verify the setup\"></a>Step 4: Verify the setup</h2><p>Once you’ve finished installing NativeScript and its dependencies, run the <code>tns doctor</code> command, which will check for any issues with your installation.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns doctor</div></pre></td></tr></table></figure>\n<p>If you see “No issues were detected” you’re good to go!</p>\n<h2 id=\"What’s-Next\"><a href=\"#What’s-Next\" class=\"headerlink\" title=\"What’s Next\"></a>What’s Next</h2><ul>\n<li><a href=\"http://docs.nativescript.org/tutorial/chapter-1#11-install-nativescript-and-configure-your-environment\">Return to the JavaScript tutorial</a></li>\n<li><a href=\"http://docs.nativescript.org/angular/tutorial/ng-chapter-1#11-install-nativescript-and-configure-your-environment\">Return to the TypeScript &amp; Angular tutorial</a></li>\n</ul>\n"},{"title":"Application Architecture","description":"Learn the core concepts of building Angular 2 apps with NativeScript","position":0,"slug":"architecture-angular","environment":"angular","_content":"\n# Application Architecture\n\nIn this article we are going to go through the core concepts of the Angular 2 framework, with an an emphasis on the specifics of using Angular 2 with NativeScript.\n\n>**Note:** The best place to learn about Angular 2 concepts is on [angular.io](https://angular.io/docs/ts/latest/). We are going to refer to it in many sections in this article.\n\n* [Components](#components)\n* [Template Syntax](#template-syntax)\n* [Data Binding](#data-binding)\n* [Directives](#directives)\n* [Dependency Injection](#dependency-injection)\n* [Navigation](#navigation)\n\n# Components\n\nComponents are the main building block of Angluar 2 applications. They define the application UI and the logic that controls it. Let's take look at the following component:\n\n``` TypeScript\nimport {Component} from \"@angular/core\";\n\n@Component({\n    selector: \"my-app\",\n    template: `\n        <StackLayout orientation=\"vertical\">\n            <Label [text]=\"message\" (tap)=\"onTap()\"></Label>\n        </StackLayout>`\n})\nexport class AppComponent {\n    public message: string = \"Hello, Angular!\";\n    public onTap() {\n        this.message = \"OHAI\";\n    }\n}\n```\n\nEach component has two parts - the **component class** and the **component template**:\n* **The component class** (`class AppComponent` in the example) defines the application logic of the component - its behavior. \n* **The component template** defines the UI of the component - also called a *view*. It is the topic of the next section.\n\nThe class and the view communicate with each other using data binding and events.\n\nYou can learn more about components on [angular.io](https://angular.io/docs/ts/latest/guide/architecture.html#!#component)\n\nThere are almost no differences between creating component classes in Angular 2 web apps and NativeScript apps.\n\n# Template Syntax\nThe template defines the view of the component - what is actually rendered. \nIn NativeScript applications the template is defined with XML using [NativeScript UI elements]({% slug components %}). It is different from HTML. So instead of `<input>`, `<span>`, `<div>` etc. - we have `<text-field>`, `<label>` and layouts.\n\nThe important thing is that although the elements are different - all the of [Angular’s template syntax](https://angular.io/docs/ts/latest/guide/template-syntax.html) works exactly the same. So you can still use template expressions, bindings, templates as well as all the build in directives.\n\n>When defining the template you can use both CamelCase and kebab-case. So, both `<StackLayout>` and `<stack-layout>` are valid inside a template definition. \n\nThere is no text-node element in NativeScript so the following template will render an empty `StackLayout`:\n``` XML\n<StackLayout orientation=\"vertical\">\n    {%raw%} {{ message }} {%endraw%} \n</StackLayout>`,\n```\n\nTo fix it you can just use a `Label` to show the message:\n``` XML\n<StackLayout orientation=\"vertical\">\n    {%raw%}<Label text=\"{{ message }}\"></Label>{%endraw%} \n</StackLayout>`\n```\n\n# Data Binding\nData binding is a mechanism for connecting the parts of the view (template) with parts of the component class. There are several forms of data binding in an angular app. \n\n``` XML\n<StackLayout orientation=\"vertical\">\n    <Label [text]=\"message\"></Label>\n    <Button text=\"tap me\" (tap)=\"onTap()\"></Button>\n    <TextField [(ngModel)]=\"message\"></TextField>\n</StackLayout>\n```\n\nLet's examine:\n\n* `[text]=\"message\"` - *binds* the `text` property of the `Label` to the `message` property of the component. Whenever the message is updated the label will be updated as well. This kind of binding is called “one-way binding” - the data flows in one direction from the component to the view.\n* `(tap)=\"onTap()\"` - means that when the button is tapped the `onTap` method in the component should be called. This kind of binding is called “event binding” - here the data flows from the view to the component.\n* `[(ngModel)]=\"message\"` - This is an example of “two-way-binding”. When the user types something in the `TextField` - the `message` property of the component will be changed and vice versa - if your code changes the `message` property - the UI will be updated. Data flows in both directions, thus the name.\n    \nThis topic is covered in depth in the [data binding article]({% slug data-binding %}).\n\n# Directives\nDirectives allow you to create and attach behavior to the visual tree. There are three kinds of directives:\n\n* `Components` - We already talked about them. `Components` are actually directives which have their own template.\n* [Structural Directives](https://angular.io/docs/ts/latest/guide/structural-directives.html) - alter the visual tree by adding, removing or replacing elements. The most commonly used structural directives are [`*ngIf`](https://angular.io/docs/ts/latest/guide/displaying-data.html#!#ngIf) and [`*ngFor`](https://angular.io/docs/ts/latest/guide/displaying-data.html#!#ngFor).\n* [Attribute Directive](https://angular.io/docs/ts/latest/guide/attribute-directives.html) - change the appearance or behavior of UI elements. One of the most commonly used attribute directives is [`ngClass`](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#ngClass).\n\nWhen it comes to NativeScript specifics - there are again almost no differences as far as directives are concerned. You are free to use all the built-in Angular 2 directives; you’re also free to write your own.\n\n# Dependency Injection\n\nAngular ships with its own dependency injection (DI for short) framework. It is extremely powerful and fully usable in NativeScript.\nYou can read more about it on [angular.io](https://angular.io/docs/ts/latest/guide/dependency-injection.html).\n\n# Navigation\n\nThe navigation inside a NativeScript application is done with the [Angular 2 Router](https://angular.io/docs/ts/latest/guide/router.html#). However, you can choose between two router-outlets:\n* `router-outlet` - the built in Angular 2 router outlet. It replaces the content of the outlet with the templates of different component.\n* `page-router-outlet` - uses NativeScript [page navigation]({% slug navigation %}#pages). \n\nTo use the Router you will have to pass the `NS_ROUTER_PROVIDERS` providers when bootstrapping you app:\n\n``` TypeScript\nimport {nativeScriptBootstrap} from \"nativescript-angular/application\";\nimport {NS_ROUTER_PROVIDERS} from \"nativescript-angular/router\";\n\n// ...\n\nnativeScriptBootstrap(NavigationTestRouter, [NS_ROUTER_PROVIDERS]);\n```\n\nNavigation is covered in detail in the [navigation article]({% slug navigation %}).\n ","source":"core-concepts/architecture-angular.md","raw":"---\ntitle: Application Architecture\ndescription: Learn the core concepts of building Angular 2 apps with NativeScript\nposition: 0\nslug: architecture-angular\nenvironment: angular\n---\n\n# Application Architecture\n\nIn this article we are going to go through the core concepts of the Angular 2 framework, with an an emphasis on the specifics of using Angular 2 with NativeScript.\n\n>**Note:** The best place to learn about Angular 2 concepts is on [angular.io](https://angular.io/docs/ts/latest/). We are going to refer to it in many sections in this article.\n\n* [Components](#components)\n* [Template Syntax](#template-syntax)\n* [Data Binding](#data-binding)\n* [Directives](#directives)\n* [Dependency Injection](#dependency-injection)\n* [Navigation](#navigation)\n\n# Components\n\nComponents are the main building block of Angluar 2 applications. They define the application UI and the logic that controls it. Let's take look at the following component:\n\n``` TypeScript\nimport {Component} from \"@angular/core\";\n\n@Component({\n    selector: \"my-app\",\n    template: `\n        <StackLayout orientation=\"vertical\">\n            <Label [text]=\"message\" (tap)=\"onTap()\"></Label>\n        </StackLayout>`\n})\nexport class AppComponent {\n    public message: string = \"Hello, Angular!\";\n    public onTap() {\n        this.message = \"OHAI\";\n    }\n}\n```\n\nEach component has two parts - the **component class** and the **component template**:\n* **The component class** (`class AppComponent` in the example) defines the application logic of the component - its behavior. \n* **The component template** defines the UI of the component - also called a *view*. It is the topic of the next section.\n\nThe class and the view communicate with each other using data binding and events.\n\nYou can learn more about components on [angular.io](https://angular.io/docs/ts/latest/guide/architecture.html#!#component)\n\nThere are almost no differences between creating component classes in Angular 2 web apps and NativeScript apps.\n\n# Template Syntax\nThe template defines the view of the component - what is actually rendered. \nIn NativeScript applications the template is defined with XML using [NativeScript UI elements]({% slug components %}). It is different from HTML. So instead of `<input>`, `<span>`, `<div>` etc. - we have `<text-field>`, `<label>` and layouts.\n\nThe important thing is that although the elements are different - all the of [Angular’s template syntax](https://angular.io/docs/ts/latest/guide/template-syntax.html) works exactly the same. So you can still use template expressions, bindings, templates as well as all the build in directives.\n\n>When defining the template you can use both CamelCase and kebab-case. So, both `<StackLayout>` and `<stack-layout>` are valid inside a template definition. \n\nThere is no text-node element in NativeScript so the following template will render an empty `StackLayout`:\n``` XML\n<StackLayout orientation=\"vertical\">\n    {%raw%} {{ message }} {%endraw%} \n</StackLayout>`,\n```\n\nTo fix it you can just use a `Label` to show the message:\n``` XML\n<StackLayout orientation=\"vertical\">\n    {%raw%}<Label text=\"{{ message }}\"></Label>{%endraw%} \n</StackLayout>`\n```\n\n# Data Binding\nData binding is a mechanism for connecting the parts of the view (template) with parts of the component class. There are several forms of data binding in an angular app. \n\n``` XML\n<StackLayout orientation=\"vertical\">\n    <Label [text]=\"message\"></Label>\n    <Button text=\"tap me\" (tap)=\"onTap()\"></Button>\n    <TextField [(ngModel)]=\"message\"></TextField>\n</StackLayout>\n```\n\nLet's examine:\n\n* `[text]=\"message\"` - *binds* the `text` property of the `Label` to the `message` property of the component. Whenever the message is updated the label will be updated as well. This kind of binding is called “one-way binding” - the data flows in one direction from the component to the view.\n* `(tap)=\"onTap()\"` - means that when the button is tapped the `onTap` method in the component should be called. This kind of binding is called “event binding” - here the data flows from the view to the component.\n* `[(ngModel)]=\"message\"` - This is an example of “two-way-binding”. When the user types something in the `TextField` - the `message` property of the component will be changed and vice versa - if your code changes the `message` property - the UI will be updated. Data flows in both directions, thus the name.\n    \nThis topic is covered in depth in the [data binding article]({% slug data-binding %}).\n\n# Directives\nDirectives allow you to create and attach behavior to the visual tree. There are three kinds of directives:\n\n* `Components` - We already talked about them. `Components` are actually directives which have their own template.\n* [Structural Directives](https://angular.io/docs/ts/latest/guide/structural-directives.html) - alter the visual tree by adding, removing or replacing elements. The most commonly used structural directives are [`*ngIf`](https://angular.io/docs/ts/latest/guide/displaying-data.html#!#ngIf) and [`*ngFor`](https://angular.io/docs/ts/latest/guide/displaying-data.html#!#ngFor).\n* [Attribute Directive](https://angular.io/docs/ts/latest/guide/attribute-directives.html) - change the appearance or behavior of UI elements. One of the most commonly used attribute directives is [`ngClass`](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#ngClass).\n\nWhen it comes to NativeScript specifics - there are again almost no differences as far as directives are concerned. You are free to use all the built-in Angular 2 directives; you’re also free to write your own.\n\n# Dependency Injection\n\nAngular ships with its own dependency injection (DI for short) framework. It is extremely powerful and fully usable in NativeScript.\nYou can read more about it on [angular.io](https://angular.io/docs/ts/latest/guide/dependency-injection.html).\n\n# Navigation\n\nThe navigation inside a NativeScript application is done with the [Angular 2 Router](https://angular.io/docs/ts/latest/guide/router.html#). However, you can choose between two router-outlets:\n* `router-outlet` - the built in Angular 2 router outlet. It replaces the content of the outlet with the templates of different component.\n* `page-router-outlet` - uses NativeScript [page navigation]({% slug navigation %}#pages). \n\nTo use the Router you will have to pass the `NS_ROUTER_PROVIDERS` providers when bootstrapping you app:\n\n``` TypeScript\nimport {nativeScriptBootstrap} from \"nativescript-angular/application\";\nimport {NS_ROUTER_PROVIDERS} from \"nativescript-angular/router\";\n\n// ...\n\nnativeScriptBootstrap(NavigationTestRouter, [NS_ROUTER_PROVIDERS]);\n```\n\nNavigation is covered in detail in the [navigation article]({% slug navigation %}).\n ","date":"2016-08-26T21:05:52.866Z","updated":"2016-08-26T21:05:52.866Z","path":"core-concepts/architecture-angular.html","comments":1,"layout":"page","_id":"cisn95c5y0001wsl0h0e2aoko","content":"<h1 id=\"Application-Architecture\"><a href=\"#Application-Architecture\" class=\"headerlink\" title=\"Application Architecture\"></a>Application Architecture</h1><p>In this article we are going to go through the core concepts of the Angular 2 framework, with an an emphasis on the specifics of using Angular 2 with NativeScript.</p>\n<blockquote>\n<p><strong>Note:</strong> The best place to learn about Angular 2 concepts is on <a href=\"https://angular.io/docs/ts/latest/\" target=\"_blank\" rel=\"external\">angular.io</a>. We are going to refer to it in many sections in this article.</p>\n</blockquote>\n<ul>\n<li><a href=\"#components\">Components</a></li>\n<li><a href=\"#template-syntax\">Template Syntax</a></li>\n<li><a href=\"#data-binding\">Data Binding</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#dependency-injection\">Dependency Injection</a></li>\n<li><a href=\"#navigation\">Navigation</a></li>\n</ul>\n<h1 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h1><p>Components are the main building block of Angluar 2 applications. They define the application UI and the logic that controls it. Let’s take look at the following component:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; from <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">\"my-app\"</span>,</div><div class=\"line\">    template: <span class=\"string\">`</span></div><div class=\"line\">        &lt;StackLayout orientation=\"vertical\"&gt;</div><div class=\"line\">            &lt;Label [text]=\"message\" (tap)=\"onTap()\"&gt;&lt;/Label&gt;</div><div class=\"line\">        &lt;/StackLayout&gt;`</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> message: <span class=\"built_in\">string</span> = <span class=\"string\">\"Hello, Angular!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> onTap() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.message = <span class=\"string\">\"OHAI\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Each component has two parts - the <strong>component class</strong> and the <strong>component template</strong>:</p>\n<ul>\n<li><strong>The component class</strong> (<code>class AppComponent</code> in the example) defines the application logic of the component - its behavior. </li>\n<li><strong>The component template</strong> defines the UI of the component - also called a <em>view</em>. It is the topic of the next section.</li>\n</ul>\n<p>The class and the view communicate with each other using data binding and events.</p>\n<p>You can learn more about components on <a href=\"https://angular.io/docs/ts/latest/guide/architecture.html#!#component\" target=\"_blank\" rel=\"external\">angular.io</a></p>\n<p>There are almost no differences between creating component classes in Angular 2 web apps and NativeScript apps.</p>\n<h1 id=\"Template-Syntax\"><a href=\"#Template-Syntax\" class=\"headerlink\" title=\"Template Syntax\"></a>Template Syntax</h1><p>The template defines the view of the component - what is actually rendered. \nIn NativeScript applications the template is defined with XML using <a href=\"!--￼5--\">NativeScript UI elements</a>. It is different from HTML. So instead of <code>&lt;input&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;div&gt;</code> etc. - we have <code>&lt;text-field&gt;</code>, <code>&lt;label&gt;</code> and layouts.</p>\n<p>The important thing is that although the elements are different - all the of <a href=\"https://angular.io/docs/ts/latest/guide/template-syntax.html\" target=\"_blank\" rel=\"external\">Angular’s template syntax</a> works exactly the same. So you can still use template expressions, bindings, templates as well as all the build in directives.</p>\n<blockquote>\n<p>When defining the template you can use both CamelCase and kebab-case. So, both <code>&lt;StackLayout&gt;</code> and <code>&lt;stack-layout&gt;</code> are valid inside a template definition. </p>\n</blockquote>\n<p>There is no text-node element in NativeScript so the following template will render an empty <code>StackLayout</code>:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\">    &#123;%raw%&#125; &#123;&#123; message &#125;&#125; &#123;%endraw%&#125; </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span>`,</div></pre></td></tr></table></figure></p>\n<p>To fix it you can just use a <code>Label</code> to show the message:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\">    &#123;%raw%&#125;<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; message &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span>&#123;%endraw%&#125; </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span>`</div></pre></td></tr></table></figure></p>\n<h1 id=\"Data-Binding\"><a href=\"#Data-Binding\" class=\"headerlink\" title=\"Data Binding\"></a>Data Binding</h1><p>Data binding is a mechanism for connecting the parts of the view (template) with parts of the component class. There are several forms of data binding in an angular app. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"tap me\"</span> (<span class=\"attr\">tap</span>)=<span class=\"string\">\"onTap()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextField</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextField</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Let’s examine:</p>\n<ul>\n<li><code>[text]=&quot;message&quot;</code> - <em>binds</em> the <code>text</code> property of the <code>Label</code> to the <code>message</code> property of the component. Whenever the message is updated the label will be updated as well. This kind of binding is called “one-way binding” - the data flows in one direction from the component to the view.</li>\n<li><code>(tap)=&quot;onTap()&quot;</code> - means that when the button is tapped the <code>onTap</code> method in the component should be called. This kind of binding is called “event binding” - here the data flows from the view to the component.</li>\n<li><code>[(ngModel)]=&quot;message&quot;</code> - This is an example of “two-way-binding”. When the user types something in the <code>TextField</code> - the <code>message</code> property of the component will be changed and vice versa - if your code changes the <code>message</code> property - the UI will be updated. Data flows in both directions, thus the name.</li>\n</ul>\n<p>This topic is covered in depth in the <a href=\"!--￼6--\">data binding article</a>.</p>\n<h1 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h1><p>Directives allow you to create and attach behavior to the visual tree. There are three kinds of directives:</p>\n<ul>\n<li><code>Components</code> - We already talked about them. <code>Components</code> are actually directives which have their own template.</li>\n<li><a href=\"https://angular.io/docs/ts/latest/guide/structural-directives.html\" target=\"_blank\" rel=\"external\">Structural Directives</a> - alter the visual tree by adding, removing or replacing elements. The most commonly used structural directives are <a href=\"https://angular.io/docs/ts/latest/guide/displaying-data.html#!#ngIf\" target=\"_blank\" rel=\"external\"><code>*ngIf</code></a> and <a href=\"https://angular.io/docs/ts/latest/guide/displaying-data.html#!#ngFor\" target=\"_blank\" rel=\"external\"><code>*ngFor</code></a>.</li>\n<li><a href=\"https://angular.io/docs/ts/latest/guide/attribute-directives.html\" target=\"_blank\" rel=\"external\">Attribute Directive</a> - change the appearance or behavior of UI elements. One of the most commonly used attribute directives is <a href=\"https://angular.io/docs/ts/latest/guide/template-syntax.html#!#ngClass\" target=\"_blank\" rel=\"external\"><code>ngClass</code></a>.</li>\n</ul>\n<p>When it comes to NativeScript specifics - there are again almost no differences as far as directives are concerned. You are free to use all the built-in Angular 2 directives; you’re also free to write your own.</p>\n<h1 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h1><p>Angular ships with its own dependency injection (DI for short) framework. It is extremely powerful and fully usable in NativeScript.\nYou can read more about it on <a href=\"https://angular.io/docs/ts/latest/guide/dependency-injection.html\" target=\"_blank\" rel=\"external\">angular.io</a>.</p>\n<h1 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a>Navigation</h1><p>The navigation inside a NativeScript application is done with the <a href=\"https://angular.io/docs/ts/latest/guide/router.html#\" target=\"_blank\" rel=\"external\">Angular 2 Router</a>. However, you can choose between two router-outlets:</p>\n<ul>\n<li><code>router-outlet</code> - the built in Angular 2 router outlet. It replaces the content of the outlet with the templates of different component.</li>\n<li><code>page-router-outlet</code> - uses NativeScript <a href=\"!--￼7--&gt;#pages\">page navigation</a>. </li>\n</ul>\n<p>To use the Router you will have to pass the <code>NS_ROUTER_PROVIDERS</code> providers when bootstrapping you app:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;nativeScriptBootstrap&#125; from <span class=\"string\">\"nativescript-angular/application\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;NS_ROUTER_PROVIDERS&#125; from <span class=\"string\">\"nativescript-angular/router\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">nativeScriptBootstrap(NavigationTestRouter, [NS_ROUTER_PROVIDERS]);</div></pre></td></tr></table></figure>\n<p>Navigation is covered in detail in the <a href=\"!--￼8--\">navigation article</a>.</p>\n","excerpt":"","more":"<h1 id=\"Application-Architecture\"><a href=\"#Application-Architecture\" class=\"headerlink\" title=\"Application Architecture\"></a>Application Architecture</h1><p>In this article we are going to go through the core concepts of the Angular 2 framework, with an an emphasis on the specifics of using Angular 2 with NativeScript.</p>\n<blockquote>\n<p><strong>Note:</strong> The best place to learn about Angular 2 concepts is on <a href=\"https://angular.io/docs/ts/latest/\">angular.io</a>. We are going to refer to it in many sections in this article.</p>\n</blockquote>\n<ul>\n<li><a href=\"#components\">Components</a></li>\n<li><a href=\"#template-syntax\">Template Syntax</a></li>\n<li><a href=\"#data-binding\">Data Binding</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#dependency-injection\">Dependency Injection</a></li>\n<li><a href=\"#navigation\">Navigation</a></li>\n</ul>\n<h1 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h1><p>Components are the main building block of Angluar 2 applications. They define the application UI and the logic that controls it. Let’s take look at the following component:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; from <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">\"my-app\"</span>,</div><div class=\"line\">    template: <span class=\"string\">`</div><div class=\"line\">        &lt;StackLayout orientation=\"vertical\"&gt;</div><div class=\"line\">            &lt;Label [text]=\"message\" (tap)=\"onTap()\"&gt;&lt;/Label&gt;</div><div class=\"line\">        &lt;/StackLayout&gt;`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> message: <span class=\"built_in\">string</span> = <span class=\"string\">\"Hello, Angular!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> onTap() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.message = <span class=\"string\">\"OHAI\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Each component has two parts - the <strong>component class</strong> and the <strong>component template</strong>:</p>\n<ul>\n<li><strong>The component class</strong> (<code>class AppComponent</code> in the example) defines the application logic of the component - its behavior. </li>\n<li><strong>The component template</strong> defines the UI of the component - also called a <em>view</em>. It is the topic of the next section.</li>\n</ul>\n<p>The class and the view communicate with each other using data binding and events.</p>\n<p>You can learn more about components on <a href=\"https://angular.io/docs/ts/latest/guide/architecture.html#!#component\">angular.io</a></p>\n<p>There are almost no differences between creating component classes in Angular 2 web apps and NativeScript apps.</p>\n<h1 id=\"Template-Syntax\"><a href=\"#Template-Syntax\" class=\"headerlink\" title=\"Template Syntax\"></a>Template Syntax</h1><p>The template defines the view of the component - what is actually rendered. \nIn NativeScript applications the template is defined with XML using <a href=\"!--￼5--\">NativeScript UI elements</a>. It is different from HTML. So instead of <code>&lt;input&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;div&gt;</code> etc. - we have <code>&lt;text-field&gt;</code>, <code>&lt;label&gt;</code> and layouts.</p>\n<p>The important thing is that although the elements are different - all the of <a href=\"https://angular.io/docs/ts/latest/guide/template-syntax.html\">Angular’s template syntax</a> works exactly the same. So you can still use template expressions, bindings, templates as well as all the build in directives.</p>\n<blockquote>\n<p>When defining the template you can use both CamelCase and kebab-case. So, both <code>&lt;StackLayout&gt;</code> and <code>&lt;stack-layout&gt;</code> are valid inside a template definition. </p>\n</blockquote>\n<p>There is no text-node element in NativeScript so the following template will render an empty <code>StackLayout</code>:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\">    &#123;%raw%&#125; &#123;&#123; message &#125;&#125; &#123;%endraw%&#125; </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span>`,</div></pre></td></tr></table></figure></p>\n<p>To fix it you can just use a <code>Label</code> to show the message:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\">    &#123;%raw%&#125;<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; message &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span>&#123;%endraw%&#125; </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span>`</div></pre></td></tr></table></figure></p>\n<h1 id=\"Data-Binding\"><a href=\"#Data-Binding\" class=\"headerlink\" title=\"Data Binding\"></a>Data Binding</h1><p>Data binding is a mechanism for connecting the parts of the view (template) with parts of the component class. There are several forms of data binding in an angular app. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"tap me\"</span> (<span class=\"attr\">tap</span>)=<span class=\"string\">\"onTap()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextField</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextField</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Let’s examine:</p>\n<ul>\n<li><code>[text]=&quot;message&quot;</code> - <em>binds</em> the <code>text</code> property of the <code>Label</code> to the <code>message</code> property of the component. Whenever the message is updated the label will be updated as well. This kind of binding is called “one-way binding” - the data flows in one direction from the component to the view.</li>\n<li><code>(tap)=&quot;onTap()&quot;</code> - means that when the button is tapped the <code>onTap</code> method in the component should be called. This kind of binding is called “event binding” - here the data flows from the view to the component.</li>\n<li><code>[(ngModel)]=&quot;message&quot;</code> - This is an example of “two-way-binding”. When the user types something in the <code>TextField</code> - the <code>message</code> property of the component will be changed and vice versa - if your code changes the <code>message</code> property - the UI will be updated. Data flows in both directions, thus the name.</li>\n</ul>\n<p>This topic is covered in depth in the <a href=\"!--￼6--\">data binding article</a>.</p>\n<h1 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h1><p>Directives allow you to create and attach behavior to the visual tree. There are three kinds of directives:</p>\n<ul>\n<li><code>Components</code> - We already talked about them. <code>Components</code> are actually directives which have their own template.</li>\n<li><a href=\"https://angular.io/docs/ts/latest/guide/structural-directives.html\">Structural Directives</a> - alter the visual tree by adding, removing or replacing elements. The most commonly used structural directives are <a href=\"https://angular.io/docs/ts/latest/guide/displaying-data.html#!#ngIf\"><code>*ngIf</code></a> and <a href=\"https://angular.io/docs/ts/latest/guide/displaying-data.html#!#ngFor\"><code>*ngFor</code></a>.</li>\n<li><a href=\"https://angular.io/docs/ts/latest/guide/attribute-directives.html\">Attribute Directive</a> - change the appearance or behavior of UI elements. One of the most commonly used attribute directives is <a href=\"https://angular.io/docs/ts/latest/guide/template-syntax.html#!#ngClass\"><code>ngClass</code></a>.</li>\n</ul>\n<p>When it comes to NativeScript specifics - there are again almost no differences as far as directives are concerned. You are free to use all the built-in Angular 2 directives; you’re also free to write your own.</p>\n<h1 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h1><p>Angular ships with its own dependency injection (DI for short) framework. It is extremely powerful and fully usable in NativeScript.\nYou can read more about it on <a href=\"https://angular.io/docs/ts/latest/guide/dependency-injection.html\">angular.io</a>.</p>\n<h1 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a>Navigation</h1><p>The navigation inside a NativeScript application is done with the <a href=\"https://angular.io/docs/ts/latest/guide/router.html#\">Angular 2 Router</a>. However, you can choose between two router-outlets:</p>\n<ul>\n<li><code>router-outlet</code> - the built in Angular 2 router outlet. It replaces the content of the outlet with the templates of different component.</li>\n<li><code>page-router-outlet</code> - uses NativeScript <a href=\"!--￼7--&gt;#pages\">page navigation</a>. </li>\n</ul>\n<p>To use the Router you will have to pass the <code>NS_ROUTER_PROVIDERS</code> providers when bootstrapping you app:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;nativeScriptBootstrap&#125; from <span class=\"string\">\"nativescript-angular/application\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;NS_ROUTER_PROVIDERS&#125; from <span class=\"string\">\"nativescript-angular/router\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">nativeScriptBootstrap(NavigationTestRouter, [NS_ROUTER_PROVIDERS]);</div></pre></td></tr></table></figure>\n<p>Navigation is covered in detail in the <a href=\"!--￼8--\">navigation article</a>.</p>\n"},{"_content":"---\ntitle: Data Binding\ndescription: NativeScript Documentation - Data Binding\nposition: 4\nslug: data-binding\nenvironment: angular\n--- \n\n#Data Binding\n\nDataBinding is a core concept for both NativeScript and Angular frameworks. By default `Data Binding` stands for a connection (`binding`) between `Data Model` (Model) and `User Interface` (UI). Since this `binding` involves mostly `data` we use therm `Data Binding` to denote such connection or relationship.\n\nThere are several ways of data flows (data bindings).\n\n* one-way data binding - this is the most popular way of binding from Model to UI. A good example of such binding is a text stored in Model and displayed on UI in a text area control.\n* one-way to source (to model) - this is a way of binding which updates Model due to some action on UI. The best example for this is an event like button click (tap).\n* two-way data binding - this is a way of binding that combines both previous ways of binding. A tipical example is a text box field that reads its value from Model, but also changes the Model based on user input.\n\n`NativeScript-angular` plugin simplifies the way which data binding will be used. NativeScript part of the binding infrastructure is used to bind Model values to the real native elements (Android and iOS). Angular 2 part is used to provide correct binding context, change detection and notifications. In order to use data binding within NativeScript-Angular application generally do not differ from a standard Angular 2 web application.\n\nLet's see some examples how to use data binding with `NativeScript-Angular` plugin.\n\n* one-way data binding - surround target (UI) property with square brackets \n```XML\n<Label [text]='model.mytext' ></Label>\n```\n```TypeScript\nthis.model.mytext = 'Lorem ipsum ...';\n// this is the component where label is added\n```\n* one-way to source data binding - surround source event with brackets\n```XML\n<Button (tap)='onButtonTap()'></Button>\n```\n```TypeScript\nonButtonTap = function () {\n\tconsole.log('Button tapped');\n}\n// onButtonTap is a function inside component class where Button is placed\n```\n* two-way data binding - surround target property with square and normal brackets\n\nIn Angular 1.x two-way data binding was the default way of binding. However with Angular 2 the state of `two-way data binding` is not the same - due to too many performance problems caused by the uncertainty of what or who caused the change of the value within Model which sometimes results in way too many changes (and change notifications). So Angular 2 does not have two-way data binding by default, instead it uses events to notify Model that something is changed.\n\n```XML\n<TextField [(ngModel)]='model.mytext'></TextField>\n```\n```TypeScript\nthis.model.mytext = 'Lorem Ipsum ...';\n```\nThere are some limitations when using two-way data binding with Angular 2. Two-way binding is initialized with `ngModel` directive instead of the name of the property. This under the hood creates two simple data bindings one-way and one-way to source:\n\n```XML\n<TextField [(ngModel)]='model.mytext' ></TextField>\n// becomes\n<TextField [ngModel]='model.mytext' (ngModelChange)='model.mytext=$event.value' ></TextField>\n```\n\nThis is the way Angular 2 supports two-way data binding. It generally works in almost all cases with the limitation that we could use only one property with two-way data binding (in the case of TextField this is the `text` property). `ngModel` directive also provide an interface for safely updating property in both directions. For all NativeScript controls `NativeScript-Angular` plugin provides the underlying infrastructure to support native controls via `ngModel` directive (the same way as Angular 2 syntax). It is done by using a single value property for every control that could be used with `ngModel` syntax. Following is the list of available properties:\n\n* TextField, TextView, SearchBar - text property\n* DatePicker - date property\n* TimePicker - time property\n* ListPicker, SegmentedBar - selectedIndex property\n* Switch - checked property\n* Slider - value property\n\nAngular mustache {%raw%}(`{{ }}`){%endraw%} syntax for binding is also supported within a NativeScript-Angular application. It's just another way of one-way binding placed in the middle of a text.\n\n```XML\n{%raw%}<Label text='{{model.deliveryHour}}:{{deliveryMinute}}'></Label>{%endraw%}\n```\n```TypeScript\nthis.model.deliveryHour = 10;\nthis.model.deliveryMinute = 25;\n```\n\n> Note: Notice that property text of the Label element in previous example is not surrounded by any brackets.\n\n### Data converters\n\nOften data within Data Model is stored in a way that is optimized for best performance of tasks like search, replace and so on. Unfortunately the way like computers store data differs a lot with a human readable format. Probably the best example is `Date object`. In JavaScript `Date` actually is a very big number that represents milliseconds from 01.01.1970 which does not speak much to any human. Here comes the use of data converters which basically are functions that formats the data (from Model) in a human readable format (display in UI). Angular 2 uses same concept and named it `pipe` (like UNIX pipe) - value is passed to the pipe function which transforms it and the final result is displayed to the user. Using `pipe` is simple and with the same syntax like UNIX pipe.\n\n```XML\n<Label [text]='model.deliveryDate | date:\"fullDate\"' ></Label>\n```\n```TypeScript\nthis.model.deliveryDate = new Date(2016, 2, 24);\n// this will display Thursday, March 24, 2016 for en-US locale\n```\n\nPipes like pipes in UNIX can be chained and used one after another, while each pipe receives the result of the previous pipe or value of the property:\n\n```XML\n<Label [text]='model.deliveryDate | date:\"fullDate\" | testPipe' ></Label>\n```\n\n> Note: Pipes do not work with `one-way to source` and `two-way` binding syntax.\n","source":"core-concepts/DataBinding.md","raw":"---\ntitle: Data Binding\ndescription: NativeScript Documentation - Data Binding\nposition: 4\nslug: data-binding\nenvironment: angular\n--- \n\n#Data Binding\n\nDataBinding is a core concept for both NativeScript and Angular frameworks. By default `Data Binding` stands for a connection (`binding`) between `Data Model` (Model) and `User Interface` (UI). Since this `binding` involves mostly `data` we use therm `Data Binding` to denote such connection or relationship.\n\nThere are several ways of data flows (data bindings).\n\n* one-way data binding - this is the most popular way of binding from Model to UI. A good example of such binding is a text stored in Model and displayed on UI in a text area control.\n* one-way to source (to model) - this is a way of binding which updates Model due to some action on UI. The best example for this is an event like button click (tap).\n* two-way data binding - this is a way of binding that combines both previous ways of binding. A tipical example is a text box field that reads its value from Model, but also changes the Model based on user input.\n\n`NativeScript-angular` plugin simplifies the way which data binding will be used. NativeScript part of the binding infrastructure is used to bind Model values to the real native elements (Android and iOS). Angular 2 part is used to provide correct binding context, change detection and notifications. In order to use data binding within NativeScript-Angular application generally do not differ from a standard Angular 2 web application.\n\nLet's see some examples how to use data binding with `NativeScript-Angular` plugin.\n\n* one-way data binding - surround target (UI) property with square brackets \n```XML\n<Label [text]='model.mytext' ></Label>\n```\n```TypeScript\nthis.model.mytext = 'Lorem ipsum ...';\n// this is the component where label is added\n```\n* one-way to source data binding - surround source event with brackets\n```XML\n<Button (tap)='onButtonTap()'></Button>\n```\n```TypeScript\nonButtonTap = function () {\n\tconsole.log('Button tapped');\n}\n// onButtonTap is a function inside component class where Button is placed\n```\n* two-way data binding - surround target property with square and normal brackets\n\nIn Angular 1.x two-way data binding was the default way of binding. However with Angular 2 the state of `two-way data binding` is not the same - due to too many performance problems caused by the uncertainty of what or who caused the change of the value within Model which sometimes results in way too many changes (and change notifications). So Angular 2 does not have two-way data binding by default, instead it uses events to notify Model that something is changed.\n\n```XML\n<TextField [(ngModel)]='model.mytext'></TextField>\n```\n```TypeScript\nthis.model.mytext = 'Lorem Ipsum ...';\n```\nThere are some limitations when using two-way data binding with Angular 2. Two-way binding is initialized with `ngModel` directive instead of the name of the property. This under the hood creates two simple data bindings one-way and one-way to source:\n\n```XML\n<TextField [(ngModel)]='model.mytext' ></TextField>\n// becomes\n<TextField [ngModel]='model.mytext' (ngModelChange)='model.mytext=$event.value' ></TextField>\n```\n\nThis is the way Angular 2 supports two-way data binding. It generally works in almost all cases with the limitation that we could use only one property with two-way data binding (in the case of TextField this is the `text` property). `ngModel` directive also provide an interface for safely updating property in both directions. For all NativeScript controls `NativeScript-Angular` plugin provides the underlying infrastructure to support native controls via `ngModel` directive (the same way as Angular 2 syntax). It is done by using a single value property for every control that could be used with `ngModel` syntax. Following is the list of available properties:\n\n* TextField, TextView, SearchBar - text property\n* DatePicker - date property\n* TimePicker - time property\n* ListPicker, SegmentedBar - selectedIndex property\n* Switch - checked property\n* Slider - value property\n\nAngular mustache {%raw%}(`{{ }}`){%endraw%} syntax for binding is also supported within a NativeScript-Angular application. It's just another way of one-way binding placed in the middle of a text.\n\n```XML\n{%raw%}<Label text='{{model.deliveryHour}}:{{deliveryMinute}}'></Label>{%endraw%}\n```\n```TypeScript\nthis.model.deliveryHour = 10;\nthis.model.deliveryMinute = 25;\n```\n\n> Note: Notice that property text of the Label element in previous example is not surrounded by any brackets.\n\n### Data converters\n\nOften data within Data Model is stored in a way that is optimized for best performance of tasks like search, replace and so on. Unfortunately the way like computers store data differs a lot with a human readable format. Probably the best example is `Date object`. In JavaScript `Date` actually is a very big number that represents milliseconds from 01.01.1970 which does not speak much to any human. Here comes the use of data converters which basically are functions that formats the data (from Model) in a human readable format (display in UI). Angular 2 uses same concept and named it `pipe` (like UNIX pipe) - value is passed to the pipe function which transforms it and the final result is displayed to the user. Using `pipe` is simple and with the same syntax like UNIX pipe.\n\n```XML\n<Label [text]='model.deliveryDate | date:\"fullDate\"' ></Label>\n```\n```TypeScript\nthis.model.deliveryDate = new Date(2016, 2, 24);\n// this will display Thursday, March 24, 2016 for en-US locale\n```\n\nPipes like pipes in UNIX can be chained and used one after another, while each pipe receives the result of the previous pipe or value of the property:\n\n```XML\n<Label [text]='model.deliveryDate | date:\"fullDate\" | testPipe' ></Label>\n```\n\n> Note: Pipes do not work with `one-way to source` and `two-way` binding syntax.\n","date":"2016-08-26T21:05:52.863Z","updated":"2016-08-26T21:05:52.863Z","path":"core-concepts/DataBinding.html","title":"","comments":1,"layout":"page","_id":"cisn95c5z0002wsl0235s8bf1","content":"<hr>\n<p>title: Data Binding\ndescription: NativeScript Documentation - Data Binding\nposition: 4\nslug: data-binding</p>\n<h2 id=\"environment-angular\"><a href=\"#environment-angular\" class=\"headerlink\" title=\"environment: angular\"></a>environment: angular</h2><p>#Data Binding</p>\n<p>DataBinding is a core concept for both NativeScript and Angular frameworks. By default <code>Data Binding</code> stands for a connection (<code>binding</code>) between <code>Data Model</code> (Model) and <code>User Interface</code> (UI). Since this <code>binding</code> involves mostly <code>data</code> we use therm <code>Data Binding</code> to denote such connection or relationship.</p>\n<p>There are several ways of data flows (data bindings).</p>\n<ul>\n<li>one-way data binding - this is the most popular way of binding from Model to UI. A good example of such binding is a text stored in Model and displayed on UI in a text area control.</li>\n<li>one-way to source (to model) - this is a way of binding which updates Model due to some action on UI. The best example for this is an event like button click (tap).</li>\n<li>two-way data binding - this is a way of binding that combines both previous ways of binding. A tipical example is a text box field that reads its value from Model, but also changes the Model based on user input.</li>\n</ul>\n<p><code>NativeScript-angular</code> plugin simplifies the way which data binding will be used. NativeScript part of the binding infrastructure is used to bind Model values to the real native elements (Android and iOS). Angular 2 part is used to provide correct binding context, change detection and notifications. In order to use data binding within NativeScript-Angular application generally do not differ from a standard Angular 2 web application.</p>\n<p>Let’s see some examples how to use data binding with <code>NativeScript-Angular</code> plugin.</p>\n<ul>\n<li>one-way data binding - surround target (UI) property with square brackets <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'model.mytext'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.model.mytext = <span class=\"string\">'Lorem ipsum ...'</span>;</div><div class=\"line\"><span class=\"comment\">// this is the component where label is added</span></div></pre></td></tr></table></figure>\n<ul>\n<li>one-way to source data binding - surround source event with brackets<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> (<span class=\"attr\">tap</span>)=<span class=\"string\">'onButtonTap()'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">onButtonTap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Button tapped'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// onButtonTap is a function inside component class where Button is placed</span></div></pre></td></tr></table></figure>\n<ul>\n<li>two-way data binding - surround target property with square and normal brackets</li>\n</ul>\n<p>In Angular 1.x two-way data binding was the default way of binding. However with Angular 2 the state of <code>two-way data binding</code> is not the same - due to too many performance problems caused by the uncertainty of what or who caused the change of the value within Model which sometimes results in way too many changes (and change notifications). So Angular 2 does not have two-way data binding by default, instead it uses events to notify Model that something is changed.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">'model.mytext'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextField</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.model.mytext = <span class=\"string\">'Lorem Ipsum ...'</span>;</div></pre></td></tr></table></figure>\n<p>There are some limitations when using two-way data binding with Angular 2. Two-way binding is initialized with <code>ngModel</code> directive instead of the name of the property. This under the hood creates two simple data bindings one-way and one-way to source:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">'model.mytext'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextField</span>&gt;</span></div><div class=\"line\">// becomes</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> [<span class=\"attr\">ngModel</span>]=<span class=\"string\">'model.mytext'</span> (<span class=\"attr\">ngModelChange</span>)=<span class=\"string\">'model.mytext=$event.value'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextField</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This is the way Angular 2 supports two-way data binding. It generally works in almost all cases with the limitation that we could use only one property with two-way data binding (in the case of TextField this is the <code>text</code> property). <code>ngModel</code> directive also provide an interface for safely updating property in both directions. For all NativeScript controls <code>NativeScript-Angular</code> plugin provides the underlying infrastructure to support native controls via <code>ngModel</code> directive (the same way as Angular 2 syntax). It is done by using a single value property for every control that could be used with <code>ngModel</code> syntax. Following is the list of available properties:</p>\n<ul>\n<li>TextField, TextView, SearchBar - text property</li>\n<li>DatePicker - date property</li>\n<li>TimePicker - time property</li>\n<li>ListPicker, SegmentedBar - selectedIndex property</li>\n<li>Switch - checked property</li>\n<li>Slider - value property</li>\n</ul>\n<p>Angular mustache (`{{ }}`) syntax for binding is also supported within a NativeScript-Angular application. It’s just another way of one-way binding placed in the middle of a text.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;%raw%&#125;<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">'&#123;&#123;model.deliveryHour&#125;&#125;:&#123;&#123;deliveryMinute&#125;&#125;'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span>&#123;%endraw%&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.model.deliveryHour = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">this</span>.model.deliveryMinute = <span class=\"number\">25</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: Notice that property text of the Label element in previous example is not surrounded by any brackets.</p>\n</blockquote>\n<h3 id=\"Data-converters\"><a href=\"#Data-converters\" class=\"headerlink\" title=\"Data converters\"></a>Data converters</h3><p>Often data within Data Model is stored in a way that is optimized for best performance of tasks like search, replace and so on. Unfortunately the way like computers store data differs a lot with a human readable format. Probably the best example is <code>Date object</code>. In JavaScript <code>Date</code> actually is a very big number that represents milliseconds from 01.01.1970 which does not speak much to any human. Here comes the use of data converters which basically are functions that formats the data (from Model) in a human readable format (display in UI). Angular 2 uses same concept and named it <code>pipe</code> (like UNIX pipe) - value is passed to the pipe function which transforms it and the final result is displayed to the user. Using <code>pipe</code> is simple and with the same syntax like UNIX pipe.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'model.deliveryDate | date:\"fullDate\"'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.model.deliveryDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">24</span>);</div><div class=\"line\"><span class=\"comment\">// this will display Thursday, March 24, 2016 for en-US locale</span></div></pre></td></tr></table></figure>\n<p>Pipes like pipes in UNIX can be chained and used one after another, while each pipe receives the result of the previous pipe or value of the property:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'model.deliveryDate | date:\"fullDate\" | testPipe'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: Pipes do not work with <code>one-way to source</code> and <code>two-way</code> binding syntax.</p>\n</blockquote>\n","excerpt":"","more":"<hr>\n<p>title: Data Binding\ndescription: NativeScript Documentation - Data Binding\nposition: 4\nslug: data-binding</p>\n<h2 id=\"environment-angular\"><a href=\"#environment-angular\" class=\"headerlink\" title=\"environment: angular\"></a>environment: angular</h2><p>#Data Binding</p>\n<p>DataBinding is a core concept for both NativeScript and Angular frameworks. By default <code>Data Binding</code> stands for a connection (<code>binding</code>) between <code>Data Model</code> (Model) and <code>User Interface</code> (UI). Since this <code>binding</code> involves mostly <code>data</code> we use therm <code>Data Binding</code> to denote such connection or relationship.</p>\n<p>There are several ways of data flows (data bindings).</p>\n<ul>\n<li>one-way data binding - this is the most popular way of binding from Model to UI. A good example of such binding is a text stored in Model and displayed on UI in a text area control.</li>\n<li>one-way to source (to model) - this is a way of binding which updates Model due to some action on UI. The best example for this is an event like button click (tap).</li>\n<li>two-way data binding - this is a way of binding that combines both previous ways of binding. A tipical example is a text box field that reads its value from Model, but also changes the Model based on user input.</li>\n</ul>\n<p><code>NativeScript-angular</code> plugin simplifies the way which data binding will be used. NativeScript part of the binding infrastructure is used to bind Model values to the real native elements (Android and iOS). Angular 2 part is used to provide correct binding context, change detection and notifications. In order to use data binding within NativeScript-Angular application generally do not differ from a standard Angular 2 web application.</p>\n<p>Let’s see some examples how to use data binding with <code>NativeScript-Angular</code> plugin.</p>\n<ul>\n<li>one-way data binding - surround target (UI) property with square brackets <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'model.mytext'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.model.mytext = <span class=\"string\">'Lorem ipsum ...'</span>;</div><div class=\"line\"><span class=\"comment\">// this is the component where label is added</span></div></pre></td></tr></table></figure>\n<ul>\n<li>one-way to source data binding - surround source event with brackets<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> (<span class=\"attr\">tap</span>)=<span class=\"string\">'onButtonTap()'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">onButtonTap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Button tapped'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// onButtonTap is a function inside component class where Button is placed</span></div></pre></td></tr></table></figure>\n<ul>\n<li>two-way data binding - surround target property with square and normal brackets</li>\n</ul>\n<p>In Angular 1.x two-way data binding was the default way of binding. However with Angular 2 the state of <code>two-way data binding</code> is not the same - due to too many performance problems caused by the uncertainty of what or who caused the change of the value within Model which sometimes results in way too many changes (and change notifications). So Angular 2 does not have two-way data binding by default, instead it uses events to notify Model that something is changed.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">'model.mytext'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextField</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.model.mytext = <span class=\"string\">'Lorem Ipsum ...'</span>;</div></pre></td></tr></table></figure>\n<p>There are some limitations when using two-way data binding with Angular 2. Two-way binding is initialized with <code>ngModel</code> directive instead of the name of the property. This under the hood creates two simple data bindings one-way and one-way to source:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">'model.mytext'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextField</span>&gt;</span></div><div class=\"line\">// becomes</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> [<span class=\"attr\">ngModel</span>]=<span class=\"string\">'model.mytext'</span> (<span class=\"attr\">ngModelChange</span>)=<span class=\"string\">'model.mytext=$event.value'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextField</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This is the way Angular 2 supports two-way data binding. It generally works in almost all cases with the limitation that we could use only one property with two-way data binding (in the case of TextField this is the <code>text</code> property). <code>ngModel</code> directive also provide an interface for safely updating property in both directions. For all NativeScript controls <code>NativeScript-Angular</code> plugin provides the underlying infrastructure to support native controls via <code>ngModel</code> directive (the same way as Angular 2 syntax). It is done by using a single value property for every control that could be used with <code>ngModel</code> syntax. Following is the list of available properties:</p>\n<ul>\n<li>TextField, TextView, SearchBar - text property</li>\n<li>DatePicker - date property</li>\n<li>TimePicker - time property</li>\n<li>ListPicker, SegmentedBar - selectedIndex property</li>\n<li>Switch - checked property</li>\n<li>Slider - value property</li>\n</ul>\n<p>Angular mustache (`{{ }}`) syntax for binding is also supported within a NativeScript-Angular application. It’s just another way of one-way binding placed in the middle of a text.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;%raw%&#125;<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">'&#123;&#123;model.deliveryHour&#125;&#125;:&#123;&#123;deliveryMinute&#125;&#125;'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span>&#123;%endraw%&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.model.deliveryHour = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">this</span>.model.deliveryMinute = <span class=\"number\">25</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: Notice that property text of the Label element in previous example is not surrounded by any brackets.</p>\n</blockquote>\n<h3 id=\"Data-converters\"><a href=\"#Data-converters\" class=\"headerlink\" title=\"Data converters\"></a>Data converters</h3><p>Often data within Data Model is stored in a way that is optimized for best performance of tasks like search, replace and so on. Unfortunately the way like computers store data differs a lot with a human readable format. Probably the best example is <code>Date object</code>. In JavaScript <code>Date</code> actually is a very big number that represents milliseconds from 01.01.1970 which does not speak much to any human. Here comes the use of data converters which basically are functions that formats the data (from Model) in a human readable format (display in UI). Angular 2 uses same concept and named it <code>pipe</code> (like UNIX pipe) - value is passed to the pipe function which transforms it and the final result is displayed to the user. Using <code>pipe</code> is simple and with the same syntax like UNIX pipe.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'model.deliveryDate | date:\"fullDate\"'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.model.deliveryDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">24</span>);</div><div class=\"line\"><span class=\"comment\">// this will display Thursday, March 24, 2016 for en-US locale</span></div></pre></td></tr></table></figure>\n<p>Pipes like pipes in UNIX can be chained and used one after another, while each pipe receives the result of the previous pipe or value of the property:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'model.deliveryDate | date:\"fullDate\" | testPipe'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: Pipes do not work with <code>one-way to source</code> and <code>two-way</code> binding syntax.</p>\n</blockquote>\n"},{"title":"Accessing Native APIs with JavaScript","description":"Learn how to access native APIs in NativeScript","position":10,"slug":"access-native-apis","_content":"\n# Overview\n\nNativeScript lets you access all native APIs from the underlying platform. To achieve this behaviour, many things happen under the hood. One of them is marshalling - the conversion between JavaScript and Objective-C data types for iOS and Java data types for Android.\n\nIn this article, you will learn how to call native APIs from JavaScript with various data types parameters. For more information, see the platform-specific resources about data conversion in the [iOS Runtime](./../runtimes/ios/marshalling/Marshalling-Overview.md) and [Android Runtime](./../runtimes/android/marshalling/overview.md) sections.\n\n# Numeric Types\n\nAll native numeric types (e.g., char, short, int, double, float on iOS and byte, short, int, long, double, float on Android) are implicitly converted to JavaScript number and vice versa. For example, when you run the following code on Android:\n\n```javascript\n// iOS\nconsole.log('pow(2.5, 3) = ', pow(2.5, 3));\n```\n\nthe iOS Runtime converts the JavaScript number literals to native doubles and passes them to the native `pow(double x, double y)` function. The returned native integer is automatically converted to a JavaScript number and passed to `console.log()`. The same is valid for Android:\n\n```javascript\n// Android\nconsole.log('min(3, 4) = ', java.lang.Math.min(3, 4));\n```\n\nThe native `java.lang.Math.min()` method expects two integers. The Android Runtime knows the signature of `java.lang.Math.min()` function and translates the literals `3` and `4` to their representation in a Java integer data type. The returned integer is also automatically translated to a JavaScript number and passed to `console.log()`.\n\n# Classes and Objects\n\nAll native classes are represented in the JavaScript world by a constructor function. Each static method on a native class becomes a function on its JavaScript constructor function and each instance method becomes a function on the JavaScript prototype. When executing this code on iOS:\n\n```javascript\n// iOS\nvar array = new NSMutableArray();\narray.addObject(new NSObject());\n```\n\nthe iOS Runtime calls `[[NSMutableArray alloc] init]` and the returned native object is converted to a JavaScript object wrapper (proxy object) and assigned to `array1`. The wrapper has all instance methods of `NSMutableArray` (and its predecessor) in its prototype chain, so they can be called from JavaScript. Method names are slightly changed in order to be more convenient to use from JavaScript (e.g., `setObject:atIndexedSubscript:` is named `setObjectAtIndexedSubscript()` in JavaScript). The same is valid for Android:\n\n```javascript\n// Android\nvar context = ...;\nvar button = new android.widget.Button(context);\nbutton.setText(\"My Button\"); // \"My Button\" is converted to java.lang.String\n```\n\n# String\n\nJavaScript strings are implicitly marshalled to `java.lang.String` on Android and `NSString` on iOS and vice versa.\n\n```javascript\n// iOS\nvar button = new UIButton();\nbutton.setTitleForState('Button title', UIControlStateNormal); // 'Button title' is converted to NSString\nconsole.log(button.titleLabel.text); // The returned NSString is converted to JavaScript string\n```\n\n```javascript\n// Android\nvar file = new java.io.File('myfile.txt'); // 'myfile.txt' is converted to java.lang.String\n```\n\nThe exception to this are the methods on `NSString` classes declared as returning `instancetype` - init methods and factory methods. This means that a call to `NSString.stringWithString` whose return type in Objective-C is `instancetype` will return a wrapper around a `NSString` instance, rather than a JavaScript string.\n\n> Exception: Methods on `NSString` classes declared as returning `instancetype` (e.g., init methods and factory methods). For example, calls to `NSString.stringWithString` return `instancetype` results in Objective-C. In your NativeScript code, such calls will return a wrapper around a `NSString` instance instead of a JavaScript string.\n\n# Boolean\n\nJavaScript boolean values are implicitly marshalled to `boolean` on Android and `BOOL` on iOS and vice versa.\n\n```javascript\n// iOS\nvar str = NSString.stringWithString('YES');\nvar isTrue = str.boolValue();\n```\n\n```javascript\n// Android\nvar str = new java.lang.String('Hello world!');\nvar result = str.endsWith('world!');\nconsole.log(result); // true\n```\n\n# Array\n\nJavaScript arrays map to specialized Java arrays on Android and `NSArray` on iOS.\n\n```javascript\n// iOS\n// nsArray is not a JavaScript array but a JavaScript wrapper around a native NSArray\nvar nsArray = NSArray.arrayWithArray(['Four', 'Five', 'Two', 'Seven']);\nvar jsArray = ['One', 'Two', 'Three']; // pure JavaScript array\nvar firstCommon = nsArray.firstObjectCommonWithArray(jsArray);\nconsole.log(firstCommon); // Two\n```\n\nThe following code snippet shows how to call a `ns.example.Math.minElement(int[] array)` from JavaScript:\n\n```javascript\n// Android\nvar numbers = [3, 6, 19, -2, 7, 6];\nvar min = ns.example.Math.minElement(numbers); // -2\n```\n\n# Undefined & Null\n\nJavaScript [Undefined](http://www.w3schools.com/jsref/jsref_undefined.asp) & [Null](http://www.w3schools.com/js/js_datatypes.asp) map to Java null pointer and Objective-C nil. Native null values map to JavaScript null.\n\n```javascript\n// iOS\nconsole.log(NSStringFromClass(null)); // null\n```\n\n```javascript\n// Android\nvar context = ...;\nvar button = new android.widget.Button(context);\nbutton.setOnClickListener(undefined); // the Java call will be made using the null keyword\n```\n\n# See Also\n* [Marshalling in Android Runtime](./../runtimes/android/marshalling/overview.md)\n* [Marshalling in iOS Runtime](./../runtimes/ios/marshalling/Marshalling-Overview.md)\n\n","source":"core-concepts/accessing-native-apis-with-javascript.md","raw":"---\ntitle: Accessing Native APIs with JavaScript\ndescription: Learn how to access native APIs in NativeScript\nposition: 10\nslug: access-native-apis\n---\n\n# Overview\n\nNativeScript lets you access all native APIs from the underlying platform. To achieve this behaviour, many things happen under the hood. One of them is marshalling - the conversion between JavaScript and Objective-C data types for iOS and Java data types for Android.\n\nIn this article, you will learn how to call native APIs from JavaScript with various data types parameters. For more information, see the platform-specific resources about data conversion in the [iOS Runtime](./../runtimes/ios/marshalling/Marshalling-Overview.md) and [Android Runtime](./../runtimes/android/marshalling/overview.md) sections.\n\n# Numeric Types\n\nAll native numeric types (e.g., char, short, int, double, float on iOS and byte, short, int, long, double, float on Android) are implicitly converted to JavaScript number and vice versa. For example, when you run the following code on Android:\n\n```javascript\n// iOS\nconsole.log('pow(2.5, 3) = ', pow(2.5, 3));\n```\n\nthe iOS Runtime converts the JavaScript number literals to native doubles and passes them to the native `pow(double x, double y)` function. The returned native integer is automatically converted to a JavaScript number and passed to `console.log()`. The same is valid for Android:\n\n```javascript\n// Android\nconsole.log('min(3, 4) = ', java.lang.Math.min(3, 4));\n```\n\nThe native `java.lang.Math.min()` method expects two integers. The Android Runtime knows the signature of `java.lang.Math.min()` function and translates the literals `3` and `4` to their representation in a Java integer data type. The returned integer is also automatically translated to a JavaScript number and passed to `console.log()`.\n\n# Classes and Objects\n\nAll native classes are represented in the JavaScript world by a constructor function. Each static method on a native class becomes a function on its JavaScript constructor function and each instance method becomes a function on the JavaScript prototype. When executing this code on iOS:\n\n```javascript\n// iOS\nvar array = new NSMutableArray();\narray.addObject(new NSObject());\n```\n\nthe iOS Runtime calls `[[NSMutableArray alloc] init]` and the returned native object is converted to a JavaScript object wrapper (proxy object) and assigned to `array1`. The wrapper has all instance methods of `NSMutableArray` (and its predecessor) in its prototype chain, so they can be called from JavaScript. Method names are slightly changed in order to be more convenient to use from JavaScript (e.g., `setObject:atIndexedSubscript:` is named `setObjectAtIndexedSubscript()` in JavaScript). The same is valid for Android:\n\n```javascript\n// Android\nvar context = ...;\nvar button = new android.widget.Button(context);\nbutton.setText(\"My Button\"); // \"My Button\" is converted to java.lang.String\n```\n\n# String\n\nJavaScript strings are implicitly marshalled to `java.lang.String` on Android and `NSString` on iOS and vice versa.\n\n```javascript\n// iOS\nvar button = new UIButton();\nbutton.setTitleForState('Button title', UIControlStateNormal); // 'Button title' is converted to NSString\nconsole.log(button.titleLabel.text); // The returned NSString is converted to JavaScript string\n```\n\n```javascript\n// Android\nvar file = new java.io.File('myfile.txt'); // 'myfile.txt' is converted to java.lang.String\n```\n\nThe exception to this are the methods on `NSString` classes declared as returning `instancetype` - init methods and factory methods. This means that a call to `NSString.stringWithString` whose return type in Objective-C is `instancetype` will return a wrapper around a `NSString` instance, rather than a JavaScript string.\n\n> Exception: Methods on `NSString` classes declared as returning `instancetype` (e.g., init methods and factory methods). For example, calls to `NSString.stringWithString` return `instancetype` results in Objective-C. In your NativeScript code, such calls will return a wrapper around a `NSString` instance instead of a JavaScript string.\n\n# Boolean\n\nJavaScript boolean values are implicitly marshalled to `boolean` on Android and `BOOL` on iOS and vice versa.\n\n```javascript\n// iOS\nvar str = NSString.stringWithString('YES');\nvar isTrue = str.boolValue();\n```\n\n```javascript\n// Android\nvar str = new java.lang.String('Hello world!');\nvar result = str.endsWith('world!');\nconsole.log(result); // true\n```\n\n# Array\n\nJavaScript arrays map to specialized Java arrays on Android and `NSArray` on iOS.\n\n```javascript\n// iOS\n// nsArray is not a JavaScript array but a JavaScript wrapper around a native NSArray\nvar nsArray = NSArray.arrayWithArray(['Four', 'Five', 'Two', 'Seven']);\nvar jsArray = ['One', 'Two', 'Three']; // pure JavaScript array\nvar firstCommon = nsArray.firstObjectCommonWithArray(jsArray);\nconsole.log(firstCommon); // Two\n```\n\nThe following code snippet shows how to call a `ns.example.Math.minElement(int[] array)` from JavaScript:\n\n```javascript\n// Android\nvar numbers = [3, 6, 19, -2, 7, 6];\nvar min = ns.example.Math.minElement(numbers); // -2\n```\n\n# Undefined & Null\n\nJavaScript [Undefined](http://www.w3schools.com/jsref/jsref_undefined.asp) & [Null](http://www.w3schools.com/js/js_datatypes.asp) map to Java null pointer and Objective-C nil. Native null values map to JavaScript null.\n\n```javascript\n// iOS\nconsole.log(NSStringFromClass(null)); // null\n```\n\n```javascript\n// Android\nvar context = ...;\nvar button = new android.widget.Button(context);\nbutton.setOnClickListener(undefined); // the Java call will be made using the null keyword\n```\n\n# See Also\n* [Marshalling in Android Runtime](./../runtimes/android/marshalling/overview.md)\n* [Marshalling in iOS Runtime](./../runtimes/ios/marshalling/Marshalling-Overview.md)\n\n","date":"2016-08-26T21:05:52.865Z","updated":"2016-08-26T21:05:52.865Z","path":"core-concepts/accessing-native-apis-with-javascript.html","comments":1,"layout":"page","_id":"cisn95c610003wsl0kpcj45t9","content":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>NativeScript lets you access all native APIs from the underlying platform. To achieve this behaviour, many things happen under the hood. One of them is marshalling - the conversion between JavaScript and Objective-C data types for iOS and Java data types for Android.</p>\n<p>In this article, you will learn how to call native APIs from JavaScript with various data types parameters. For more information, see the platform-specific resources about data conversion in the <a href=\"./../runtimes/ios/marshalling/Marshalling-Overview.md\">iOS Runtime</a> and <a href=\"./../runtimes/android/marshalling/overview.md\">Android Runtime</a> sections.</p>\n<h1 id=\"Numeric-Types\"><a href=\"#Numeric-Types\" class=\"headerlink\" title=\"Numeric Types\"></a>Numeric Types</h1><p>All native numeric types (e.g., char, short, int, double, float on iOS and byte, short, int, long, double, float on Android) are implicitly converted to JavaScript number and vice versa. For example, when you run the following code on Android:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'pow(2.5, 3) = '</span>, pow(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>));</div></pre></td></tr></table></figure>\n<p>the iOS Runtime converts the JavaScript number literals to native doubles and passes them to the native <code>pow(double x, double y)</code> function. The returned native integer is automatically converted to a JavaScript number and passed to <code>console.log()</code>. The same is valid for Android:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'min(3, 4) = '</span>, java.lang.Math.min(<span class=\"number\">3</span>, <span class=\"number\">4</span>));</div></pre></td></tr></table></figure>\n<p>The native <code>java.lang.Math.min()</code> method expects two integers. The Android Runtime knows the signature of <code>java.lang.Math.min()</code> function and translates the literals <code>3</code> and <code>4</code> to their representation in a Java integer data type. The returned integer is also automatically translated to a JavaScript number and passed to <code>console.log()</code>.</p>\n<h1 id=\"Classes-and-Objects\"><a href=\"#Classes-and-Objects\" class=\"headerlink\" title=\"Classes and Objects\"></a>Classes and Objects</h1><p>All native classes are represented in the JavaScript world by a constructor function. Each static method on a native class becomes a function on its JavaScript constructor function and each instance method becomes a function on the JavaScript prototype. When executing this code on iOS:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"keyword\">var</span> array = <span class=\"keyword\">new</span> NSMutableArray();</div><div class=\"line\">array.addObject(<span class=\"keyword\">new</span> NSObject());</div></pre></td></tr></table></figure>\n<p>the iOS Runtime calls <code>[[NSMutableArray alloc] init]</code> and the returned native object is converted to a JavaScript object wrapper (proxy object) and assigned to <code>array1</code>. The wrapper has all instance methods of <code>NSMutableArray</code> (and its predecessor) in its prototype chain, so they can be called from JavaScript. Method names are slightly changed in order to be more convenient to use from JavaScript (e.g., <code>setObject:atIndexedSubscript:</code> is named <code>setObjectAtIndexedSubscript()</code> in JavaScript). The same is valid for Android:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> context = ...;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"keyword\">new</span> android.widget.Button(context);</div><div class=\"line\">button.setText(<span class=\"string\">\"My Button\"</span>); <span class=\"comment\">// \"My Button\" is converted to java.lang.String</span></div></pre></td></tr></table></figure>\n<h1 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h1><p>JavaScript strings are implicitly marshalled to <code>java.lang.String</code> on Android and <code>NSString</code> on iOS and vice versa.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"keyword\">new</span> UIButton();</div><div class=\"line\">button.setTitleForState(<span class=\"string\">'Button title'</span>, UIControlStateNormal); <span class=\"comment\">// 'Button title' is converted to NSString</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(button.titleLabel.text); <span class=\"comment\">// The returned NSString is converted to JavaScript string</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> file = <span class=\"keyword\">new</span> java.io.File(<span class=\"string\">'myfile.txt'</span>); <span class=\"comment\">// 'myfile.txt' is converted to java.lang.String</span></div></pre></td></tr></table></figure>\n<p>The exception to this are the methods on <code>NSString</code> classes declared as returning <code>instancetype</code> - init methods and factory methods. This means that a call to <code>NSString.stringWithString</code> whose return type in Objective-C is <code>instancetype</code> will return a wrapper around a <code>NSString</code> instance, rather than a JavaScript string.</p>\n<blockquote>\n<p>Exception: Methods on <code>NSString</code> classes declared as returning <code>instancetype</code> (e.g., init methods and factory methods). For example, calls to <code>NSString.stringWithString</code> return <code>instancetype</code> results in Objective-C. In your NativeScript code, such calls will return a wrapper around a <code>NSString</code> instance instead of a JavaScript string.</p>\n</blockquote>\n<h1 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h1><p>JavaScript boolean values are implicitly marshalled to <code>boolean</code> on Android and <code>BOOL</code> on iOS and vice versa.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = NSString.stringWithString(<span class=\"string\">'YES'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> isTrue = str.boolValue();</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> java.lang.String(<span class=\"string\">'Hello world!'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> result = str.endsWith(<span class=\"string\">'world!'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h1 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h1><p>JavaScript arrays map to specialized Java arrays on Android and <code>NSArray</code> on iOS.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"comment\">// nsArray is not a JavaScript array but a JavaScript wrapper around a native NSArray</span></div><div class=\"line\"><span class=\"keyword\">var</span> nsArray = NSArray.arrayWithArray([<span class=\"string\">'Four'</span>, <span class=\"string\">'Five'</span>, <span class=\"string\">'Two'</span>, <span class=\"string\">'Seven'</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> jsArray = [<span class=\"string\">'One'</span>, <span class=\"string\">'Two'</span>, <span class=\"string\">'Three'</span>]; <span class=\"comment\">// pure JavaScript array</span></div><div class=\"line\"><span class=\"keyword\">var</span> firstCommon = nsArray.firstObjectCommonWithArray(jsArray);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(firstCommon); <span class=\"comment\">// Two</span></div></pre></td></tr></table></figure>\n<p>The following code snippet shows how to call a <code>ns.example.Math.minElement(int[] array)</code> from JavaScript:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">19</span>, <span class=\"number\">-2</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> min = ns.example.Math.minElement(numbers); <span class=\"comment\">// -2</span></div></pre></td></tr></table></figure>\n<h1 id=\"Undefined-amp-Null\"><a href=\"#Undefined-amp-Null\" class=\"headerlink\" title=\"Undefined &amp; Null\"></a>Undefined &amp; Null</h1><p>JavaScript <a href=\"http://www.w3schools.com/jsref/jsref_undefined.asp\" target=\"_blank\" rel=\"external\">Undefined</a> &amp; <a href=\"http://www.w3schools.com/js/js_datatypes.asp\" target=\"_blank\" rel=\"external\">Null</a> map to Java null pointer and Objective-C nil. Native null values map to JavaScript null.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(NSStringFromClass(<span class=\"literal\">null</span>)); <span class=\"comment\">// null</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> context = ...;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"keyword\">new</span> android.widget.Button(context);</div><div class=\"line\">button.setOnClickListener(<span class=\"literal\">undefined</span>); <span class=\"comment\">// the Java call will be made using the null keyword</span></div></pre></td></tr></table></figure>\n<h1 id=\"See-Also\"><a href=\"#See-Also\" class=\"headerlink\" title=\"See Also\"></a>See Also</h1><ul>\n<li><a href=\"./../runtimes/android/marshalling/overview.md\">Marshalling in Android Runtime</a></li>\n<li><a href=\"./../runtimes/ios/marshalling/Marshalling-Overview.md\">Marshalling in iOS Runtime</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>NativeScript lets you access all native APIs from the underlying platform. To achieve this behaviour, many things happen under the hood. One of them is marshalling - the conversion between JavaScript and Objective-C data types for iOS and Java data types for Android.</p>\n<p>In this article, you will learn how to call native APIs from JavaScript with various data types parameters. For more information, see the platform-specific resources about data conversion in the <a href=\"./../runtimes/ios/marshalling/Marshalling-Overview.md\">iOS Runtime</a> and <a href=\"./../runtimes/android/marshalling/overview.md\">Android Runtime</a> sections.</p>\n<h1 id=\"Numeric-Types\"><a href=\"#Numeric-Types\" class=\"headerlink\" title=\"Numeric Types\"></a>Numeric Types</h1><p>All native numeric types (e.g., char, short, int, double, float on iOS and byte, short, int, long, double, float on Android) are implicitly converted to JavaScript number and vice versa. For example, when you run the following code on Android:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'pow(2.5, 3) = '</span>, pow(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>));</div></pre></td></tr></table></figure>\n<p>the iOS Runtime converts the JavaScript number literals to native doubles and passes them to the native <code>pow(double x, double y)</code> function. The returned native integer is automatically converted to a JavaScript number and passed to <code>console.log()</code>. The same is valid for Android:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'min(3, 4) = '</span>, java.lang.Math.min(<span class=\"number\">3</span>, <span class=\"number\">4</span>));</div></pre></td></tr></table></figure>\n<p>The native <code>java.lang.Math.min()</code> method expects two integers. The Android Runtime knows the signature of <code>java.lang.Math.min()</code> function and translates the literals <code>3</code> and <code>4</code> to their representation in a Java integer data type. The returned integer is also automatically translated to a JavaScript number and passed to <code>console.log()</code>.</p>\n<h1 id=\"Classes-and-Objects\"><a href=\"#Classes-and-Objects\" class=\"headerlink\" title=\"Classes and Objects\"></a>Classes and Objects</h1><p>All native classes are represented in the JavaScript world by a constructor function. Each static method on a native class becomes a function on its JavaScript constructor function and each instance method becomes a function on the JavaScript prototype. When executing this code on iOS:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"keyword\">var</span> array = <span class=\"keyword\">new</span> NSMutableArray();</div><div class=\"line\">array.addObject(<span class=\"keyword\">new</span> NSObject());</div></pre></td></tr></table></figure>\n<p>the iOS Runtime calls <code>[[NSMutableArray alloc] init]</code> and the returned native object is converted to a JavaScript object wrapper (proxy object) and assigned to <code>array1</code>. The wrapper has all instance methods of <code>NSMutableArray</code> (and its predecessor) in its prototype chain, so they can be called from JavaScript. Method names are slightly changed in order to be more convenient to use from JavaScript (e.g., <code>setObject:atIndexedSubscript:</code> is named <code>setObjectAtIndexedSubscript()</code> in JavaScript). The same is valid for Android:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> context = ...;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"keyword\">new</span> android.widget.Button(context);</div><div class=\"line\">button.setText(<span class=\"string\">\"My Button\"</span>); <span class=\"comment\">// \"My Button\" is converted to java.lang.String</span></div></pre></td></tr></table></figure>\n<h1 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h1><p>JavaScript strings are implicitly marshalled to <code>java.lang.String</code> on Android and <code>NSString</code> on iOS and vice versa.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"keyword\">new</span> UIButton();</div><div class=\"line\">button.setTitleForState(<span class=\"string\">'Button title'</span>, UIControlStateNormal); <span class=\"comment\">// 'Button title' is converted to NSString</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(button.titleLabel.text); <span class=\"comment\">// The returned NSString is converted to JavaScript string</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> file = <span class=\"keyword\">new</span> java.io.File(<span class=\"string\">'myfile.txt'</span>); <span class=\"comment\">// 'myfile.txt' is converted to java.lang.String</span></div></pre></td></tr></table></figure>\n<p>The exception to this are the methods on <code>NSString</code> classes declared as returning <code>instancetype</code> - init methods and factory methods. This means that a call to <code>NSString.stringWithString</code> whose return type in Objective-C is <code>instancetype</code> will return a wrapper around a <code>NSString</code> instance, rather than a JavaScript string.</p>\n<blockquote>\n<p>Exception: Methods on <code>NSString</code> classes declared as returning <code>instancetype</code> (e.g., init methods and factory methods). For example, calls to <code>NSString.stringWithString</code> return <code>instancetype</code> results in Objective-C. In your NativeScript code, such calls will return a wrapper around a <code>NSString</code> instance instead of a JavaScript string.</p>\n</blockquote>\n<h1 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h1><p>JavaScript boolean values are implicitly marshalled to <code>boolean</code> on Android and <code>BOOL</code> on iOS and vice versa.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = NSString.stringWithString(<span class=\"string\">'YES'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> isTrue = str.boolValue();</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> java.lang.String(<span class=\"string\">'Hello world!'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> result = str.endsWith(<span class=\"string\">'world!'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h1 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h1><p>JavaScript arrays map to specialized Java arrays on Android and <code>NSArray</code> on iOS.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"comment\">// nsArray is not a JavaScript array but a JavaScript wrapper around a native NSArray</span></div><div class=\"line\"><span class=\"keyword\">var</span> nsArray = NSArray.arrayWithArray([<span class=\"string\">'Four'</span>, <span class=\"string\">'Five'</span>, <span class=\"string\">'Two'</span>, <span class=\"string\">'Seven'</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> jsArray = [<span class=\"string\">'One'</span>, <span class=\"string\">'Two'</span>, <span class=\"string\">'Three'</span>]; <span class=\"comment\">// pure JavaScript array</span></div><div class=\"line\"><span class=\"keyword\">var</span> firstCommon = nsArray.firstObjectCommonWithArray(jsArray);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(firstCommon); <span class=\"comment\">// Two</span></div></pre></td></tr></table></figure>\n<p>The following code snippet shows how to call a <code>ns.example.Math.minElement(int[] array)</code> from JavaScript:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">19</span>, <span class=\"number\">-2</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> min = ns.example.Math.minElement(numbers); <span class=\"comment\">// -2</span></div></pre></td></tr></table></figure>\n<h1 id=\"Undefined-amp-Null\"><a href=\"#Undefined-amp-Null\" class=\"headerlink\" title=\"Undefined &amp; Null\"></a>Undefined &amp; Null</h1><p>JavaScript <a href=\"http://www.w3schools.com/jsref/jsref_undefined.asp\">Undefined</a> &amp; <a href=\"http://www.w3schools.com/js/js_datatypes.asp\">Null</a> map to Java null pointer and Objective-C nil. Native null values map to JavaScript null.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// iOS</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(NSStringFromClass(<span class=\"literal\">null</span>)); <span class=\"comment\">// null</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Android</span></div><div class=\"line\"><span class=\"keyword\">var</span> context = ...;</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"keyword\">new</span> android.widget.Button(context);</div><div class=\"line\">button.setOnClickListener(<span class=\"literal\">undefined</span>); <span class=\"comment\">// the Java call will be made using the null keyword</span></div></pre></td></tr></table></figure>\n<h1 id=\"See-Also\"><a href=\"#See-Also\" class=\"headerlink\" title=\"See Also\"></a>See Also</h1><ul>\n<li><a href=\"./../runtimes/android/marshalling/overview.md\">Marshalling in Android Runtime</a></li>\n<li><a href=\"./../runtimes/ios/marshalling/Marshalling-Overview.md\">Marshalling in iOS Runtime</a></li>\n</ul>\n"},{"title":"Application Lifecycle","description":"Learn how to manage the life cycle of NativeScript applications from application start to storing user-defined settings.","position":2,"slug":"lifecycle","previous_url":"/application-management","_content":"{% angular %}\n# NativeScript application architecture and lifecycle\n\nThe main building blocks of NativeScript applications with Angular 2 are:\n\n* [Modules](#modules)\n* [Components](#components)\n\nThe `application` module lets you manage the life cycle of your NativeScript apps from starting the application to storing user-defined settings.\n\n* [Start Application](#start-application)\n* [Use Application Events](#use-application-events)\n* [Android Activity Events](#android-activity-events)\n* [iOS UIApplicationDelegate](#ios-uiapplicationdelegate)\n* [Persist and Restore Application Settings](#persist-and-restore-application-settings)\n\n## Modules \n\nAngular applications are modular. A module is a file containing a block of code dedicated to a single purpose. It exports a value that can be used by other parts of the application. For example:\n\n``` TypeScript\nexport class AppComponent {}\n```\n\nThe `export` statement is important as it makes the `AppComponent` accessible to other modules. The import clause is used to reference the `AppComponent` class from other modules:\n\n``` TypeScript\nimport { Component } from '@angular/core';\nimport { AppComponent } from './app.component';\n```\n\nSome modules are libraries of other modules. Modules installed as npm packages (like `@angular/core` in the above example) should be referenced without a path prefix. When we import from one of our own files, we prefix the module name with the file path. In this example we specify a relative file path (./). That means the source module is in the same folder (./) as the module importing it. \n\n## Components\n\nComponents are the fundamental building blocks of NativeScript applications built with Angular 2. Every NativeScript application contains a set of components that define every UI element, screen or route. The application has a root component that contains all other components. The following constitutes a component:\n\n* A component knows how to interact with its host element.\n* A component knows how to render itself.\n* A component configures dependency injection.\n* A component has a well-defined public API of input and output properties.\n* A component has well-defined lifecycle.\n\n### Component example\n\n``` TypeScript\nimport {Component} from \"@angular/core\";\n\n@Component({\n    selector: \"main-component\",\n    template: `\n        <StackLayout>\n            <Label text=\"Hello {{ name }}\"></Label>\n        </StackLayout>\n    `\n})\nexport class MainComponent {\n    constructor() {\n        this.name = \"Angular!\";\n    }\n}\n```\n\n## Component metadata\n\nThe `@Component` decorator contains metadata describing how to create and present the component. Here are some of the configuration options:\n\n* **selector** - a CSS selector that tells Angular to create and insert an instance of this component where it finds the selector in parent component's template. For example:\n\n```HTML\n<main-component></main-component>\n```\n\n* **template** - A visual tree that represents the component view. Here you can use all NativeScript UI elements and custom defined UI components.\n* **templateUrl** - The address of a file where the component template is located.\n* **styles** - CSS directives that define the component style.\n* **styleUrls** - An array containing URLs of CSS files that define the component style.\n* **animations** - The animations associated with this component.\n* **providers** - an array of dependency injection providers for services that the component requires.\n\n## Component lifecycle\n\nThe component lifecycle is controlled by the Angular application. It creates, updates and destroys components. Lifecycle hooks are used to handle different events from the component lifecycle. Each hook method starts with the **ng** prefix. The following are some the component lifecycle methods:\n\n* **ngOnInit** - Called after all data-bound input methods are initialized.\n* **ngOnChanges** - Callled after a data-bound property has been changed.\n* **ngDoCheck** - Detect and act upon changes that Angular can or won't detect on its own. Called every change detection run.\n* **ngOnDestroy** - Called just before Angular destroys the component.\n\nFor a full list, see the official [Angular 2 Lifecyle Hooks docs](https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html).\n\n## Start application\n\nThe starting point of an Angular 2 application is the `nativeScriptBootstrap` method. It takes the root component as an argument:\n\n### Example\n\n``` TypeScript\nimport { nativeScriptBootstrap } from \"./nativescript-angular/application\";\nimport { MainComponent } from \"./main-component\";\n\nnativeScriptBootstrap(MainComponent).then((compRef) => {\n    console.log(\"The application is now running!\");\n}).catch((e) => {\n    console.log(\"The application bootstrapping failed with error: \" + e);\n});\n```\n\n> **IMPORTANT:** You must call the `nativeScriptBootstrap` method **after** the module initialization. Any code after the `nativeScriptBootstrap` call will not be executed.\n{% endangular%} \n\n{% nativescript %}\n# Application Management\n\nThe `application` module lets you manage the life cycle of your NativeScript apps from starting the application to storing user-defined settings.\n\n* [Start Application](#start-application)\n* [Use Application Events](#use-application-events)\n* [Android Activity Events](#android-activity-events)\n* [iOS UIApplicationDelegate](#ios-uiapplicationdelegate)\n* [Persist and Restore Application Settings](#persist-and-restore-application-settings)\n\n## Start Application\n\nThis method is required only for iOS applications. \n\n> **IMPORTANT:** You must call the `start` method of the application module **after** the module initialization. Any code after the `start` call will not be executed.\n\n### Example\n\n``` JavaScript\n/*\niOS calls UIApplication and triggers the application main event loop.\n*/\n\nvar application = require(\"application\");\napplication.start({ moduleName: \"main-page\" });\n```\n``` TypeScript\n/*\niOS calls UIApplication and triggers the application main event loop.\n*/\n\nimport application = require(\"application\");\napplication.start({ moduleName: \"main-page\" });\n```\n{% endnativescript %}\n\n## Use Application Events\n\nNativeScript applications have the following life cycle events.\n\n+ `launch`: This event is raised when application launch.\n+ `suspend`: This event is raised when the application is suspended.\n+ `resume`: This event is raised when the application is resumed after it has been suspended.\n+ `exit`: This event is raised when the application is about to exit.\n+ `lowMemory`: This event is raised when the memory on the target device is low.\n+ `uncaughtError`: This event is raised when an uncaught application error is present.\n\n### Example\n\n{% nativescript %}\n``` JavaScript\nvar application = require(\"application\");\n\napplication.on(application.launchEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android.content.Intent class.\n        console.log(\"Launched Android application with the following intent: \" + args.android + \".\");\n    } else if (args.ios !== undefined) {\n        // For iOS applications, args.ios is NSDictionary (launchOptions).\n        console.log(\"Launched iOS application with options: \" + args.ios);\n    }\n});\n\napplication.on(application.suspendEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.resumeEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.exitEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.lowMemoryEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.uncaughtErrorEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an NativeScriptError.\n        console.log(\"NativeScriptError: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is NativeScriptError.\n        console.log(\"NativeScriptError: \" + args.ios);\n    }\n});\n\napplication.start({ moduleName: \"main-page\" });\n```\n{% endnativescript %}\n``` TypeScript\nimport application = require(\"application\");\napplication.on(application.launchEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android.content.Intent class.\n        console.log(\"Launched Android application with the following intent: \" + args.android + \".\");\n    } else if (args.ios !== undefined) {\n        // For iOS applications, args.ios is NSDictionary (launchOptions).\n        console.log(\"Launched iOS application with options: \" + args.ios);\n    }\n});\n\napplication.on(application.suspendEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.resumeEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.exitEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.lowMemoryEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.uncaughtErrorEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an NativeScriptError.\n        console.log(\"NativeScriptError: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is NativeScriptError.\n        console.log(\"NativeScriptError: \" + args.ios);\n    }\n});\napplication.start({ moduleName: \"main-page\" });\n```\n## Android Activity Events\n\nNativeScript applications have the following Android specific activity events:\n\n+ `activityCreated`: This event is raised when activity is created.\n+ `activityDestroyed`: This event is raised when activity is destroyed.\n+ `activityStarted`: This event is raised when activity is started.\n+ `activityPaused`: This event is raised when activity is paused.\n+ `activityResumed`: This event is raised when activity is resumed.\n+ `activityStopped`: This event is raised when activity is stopped.\n+ `saveActivityState`: This event is raised to retrieve per-instance state from an activity before being killed so that the state can be restored.\n+ `activityResult`: This event is raised when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it.\n+ `activityBackPressed`: This event is raised when the activity has detected the user's press of the back key.\n\n### Example\n\n{% nativescript %}\n``` JavaScript\nvar application = require(\"application\");\n\nif (application.android) {\n    application.android.on(application.AndroidApplication.activityCreatedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity + \", Bundle: \" + args.bundle);\n    });\n    \n    application.android.on(application.AndroidApplication.activityDestroyedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.activityStartedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.activityPausedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.activityResumedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.activityStoppedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.saveActivityStateEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity + \", Bundle: \" + args.bundle);\n    });\n    \n    application.android.on(application.AndroidApplication.activityResultEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity +\n            \", requestCode: \" + args.requestCode + \", resultCode: \" + args.resultCode + \", Intent: \" + args.intent);\n    });\n    \n    application.android.on(application.AndroidApplication.activityBackPressedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n        // Set args.cancel = true to cancel back navigation and do something custom.\n    });\n}\n\napplication.start();\n```\n{% endnativescript %}\n``` TypeScript\nimport application = require(\"application\");\n\n// Android activity events\nif (application.android) {\n    application.android.on(application.AndroidApplication.activityCreatedEvent, function (args: application.AndroidActivityBundleEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity + \", Bundle: \" + args.bundle);\n    });\n\n    application.android.on(application.AndroidApplication.activityDestroyedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.activityStartedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.activityPausedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.activityResumedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.activityStoppedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.saveActivityStateEvent, function (args: application.AndroidActivityBundleEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity + \", Bundle: \" + args.bundle);\n    });\n\n    application.android.on(application.AndroidApplication.activityResultEvent, function (args: application.AndroidActivityResultEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity +\n            \", requestCode: \" + args.requestCode + \", resultCode: \" + args.resultCode + \", Intent: \" + args.intent);\n    });\n\n    application.android.on(application.AndroidApplication.activityBackPressedEvent, function (args: application.AndroidActivityBackPressedEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n        // Set args.cancel = true to cancel back navigation and do something custom.\n    });\n}\n\napplication.start({ moduleName: \"main-page\" });\n```\n\n## iOS UIApplicationDelegate\n\nSince NativeScript 1.3 you can specify custom UIApplicationDelegate for the iOS application:\n\n### Example\n\n{% nativescript %}\n``` JavaScript\nvar application = require(\"application\");\nvar MyDelegate = (function (_super) {\n    __extends(MyDelegate, _super);\n    function MyDelegate() {\n        _super.apply(this, arguments);\n    }\n    MyDelegate.prototype.applicationDidFinishLaunchingWithOptions = function (application, launchOptions) {\n        console.log(\"applicationWillFinishLaunchingWithOptions: \" + launchOptions);\n        return true;\n    };\n    MyDelegate.prototype.applicationDidBecomeActive = function (application) {\n        console.log(\"applicationDidBecomeActive: \" + application);\n    };\n    MyDelegate.ObjCProtocols = [UIApplicationDelegate];\n    return MyDelegate;\n})(UIResponder);\napplication.ios.delegate = MyDelegate;\napplication.start();\n```\n{% endnativescript %}\n``` TypeScript\nimport application = require(\"application\");\nclass MyDelegate extends UIResponder implements UIApplicationDelegate {\n    public static ObjCProtocols = [UIApplicationDelegate];\n\n    applicationDidFinishLaunchingWithOptions(application: UIApplication, launchOptions: NSDictionary): boolean {\n        console.log(\"applicationWillFinishLaunchingWithOptions: \" + launchOptions)\n\n        return true;\n    }\n\n    applicationDidBecomeActive(application: UIApplication): void {\n        console.log(\"applicationDidBecomeActive: \" + application)\n    }\n}\napplication.ios.delegate = MyDelegate;\napplication.start();\n```\n\n## Persist and Restore Application Settings\n\nTo persist user-defined settings, you need to use the `application-settings` module. The `application-settings` module is a static singleton hash table that stores key-value pairs for the application. \n\nThe getter methods have two parameters: a key and an optional default value to return if the specified key does not exist.\nThe setter methods have two required parameters: a key and value. \n\n### Example\n\n{% nativescript %}\n``` JavaScript\nvar applicationSettings = require(\"application-settings\");\n// Event handler for Page \"loaded\" event attached in main-page.xml.\nfunction pageLoaded(args) {\n    applicationSettings.setString(\"Name\", \"John Doe\");\n    console.log(applicationSettings.getString(\"Name\")); // Prints \"John Doe\".\n    applicationSettings.setBoolean(\"Married\", false);\n    console.log(applicationSettings.getBoolean(\"Married\")); // Prints false.\n    applicationSettings.setNumber(\"Age\", 42);\n    console.log(applicationSettings.getNumber(\"Age\")); // Prints 42.\n    console.log(applicationSettings.hasKey(\"Name\")); // Prints true.\n    applicationSettings.remove(\"Name\"); // Removes the Name entry.\n    console.log(applicationSettings.hasKey(\"Name\")); // Prints false.\n}\nexports.pageLoaded = pageLoaded;\n```\n{% endnativescript %}\n``` TypeScript\nimport observable = require(\"data/observable\");\nimport applicationSettings = require(\"application-settings\");\n// Event handler for Page \"loaded\" event attached in main-page.xml.\nexport function pageLoaded(args: observable.EventData) {\n    applicationSettings.setString(\"Name\", \"John Doe\");\n    console.log(applicationSettings.getString(\"Name\"));// Prints \"John Doe\".\n    applicationSettings.setBoolean(\"Married\", false);\n    console.log(applicationSettings.getBoolean(\"Married\"));// Prints false.\n    applicationSettings.setNumber(\"Age\", 42);\n    console.log(applicationSettings.getNumber(\"Age\"));// Prints 42.\n    console.log(applicationSettings.hasKey(\"Name\"));// Prints true.\n    applicationSettings.remove(\"Name\");// Removes the Name entry.\n    console.log(applicationSettings.hasKey(\"Name\"));// Prints false.\n}\n```\n","source":"core-concepts/application-management.md","raw":"---\ntitle: Application Lifecycle\ndescription: Learn how to manage the life cycle of NativeScript applications from application start to storing user-defined settings.\nposition: 2\nslug: lifecycle\nprevious_url: /application-management\n---\n{% angular %}\n# NativeScript application architecture and lifecycle\n\nThe main building blocks of NativeScript applications with Angular 2 are:\n\n* [Modules](#modules)\n* [Components](#components)\n\nThe `application` module lets you manage the life cycle of your NativeScript apps from starting the application to storing user-defined settings.\n\n* [Start Application](#start-application)\n* [Use Application Events](#use-application-events)\n* [Android Activity Events](#android-activity-events)\n* [iOS UIApplicationDelegate](#ios-uiapplicationdelegate)\n* [Persist and Restore Application Settings](#persist-and-restore-application-settings)\n\n## Modules \n\nAngular applications are modular. A module is a file containing a block of code dedicated to a single purpose. It exports a value that can be used by other parts of the application. For example:\n\n``` TypeScript\nexport class AppComponent {}\n```\n\nThe `export` statement is important as it makes the `AppComponent` accessible to other modules. The import clause is used to reference the `AppComponent` class from other modules:\n\n``` TypeScript\nimport { Component } from '@angular/core';\nimport { AppComponent } from './app.component';\n```\n\nSome modules are libraries of other modules. Modules installed as npm packages (like `@angular/core` in the above example) should be referenced without a path prefix. When we import from one of our own files, we prefix the module name with the file path. In this example we specify a relative file path (./). That means the source module is in the same folder (./) as the module importing it. \n\n## Components\n\nComponents are the fundamental building blocks of NativeScript applications built with Angular 2. Every NativeScript application contains a set of components that define every UI element, screen or route. The application has a root component that contains all other components. The following constitutes a component:\n\n* A component knows how to interact with its host element.\n* A component knows how to render itself.\n* A component configures dependency injection.\n* A component has a well-defined public API of input and output properties.\n* A component has well-defined lifecycle.\n\n### Component example\n\n``` TypeScript\nimport {Component} from \"@angular/core\";\n\n@Component({\n    selector: \"main-component\",\n    template: `\n        <StackLayout>\n            <Label text=\"Hello {{ name }}\"></Label>\n        </StackLayout>\n    `\n})\nexport class MainComponent {\n    constructor() {\n        this.name = \"Angular!\";\n    }\n}\n```\n\n## Component metadata\n\nThe `@Component` decorator contains metadata describing how to create and present the component. Here are some of the configuration options:\n\n* **selector** - a CSS selector that tells Angular to create and insert an instance of this component where it finds the selector in parent component's template. For example:\n\n```HTML\n<main-component></main-component>\n```\n\n* **template** - A visual tree that represents the component view. Here you can use all NativeScript UI elements and custom defined UI components.\n* **templateUrl** - The address of a file where the component template is located.\n* **styles** - CSS directives that define the component style.\n* **styleUrls** - An array containing URLs of CSS files that define the component style.\n* **animations** - The animations associated with this component.\n* **providers** - an array of dependency injection providers for services that the component requires.\n\n## Component lifecycle\n\nThe component lifecycle is controlled by the Angular application. It creates, updates and destroys components. Lifecycle hooks are used to handle different events from the component lifecycle. Each hook method starts with the **ng** prefix. The following are some the component lifecycle methods:\n\n* **ngOnInit** - Called after all data-bound input methods are initialized.\n* **ngOnChanges** - Callled after a data-bound property has been changed.\n* **ngDoCheck** - Detect and act upon changes that Angular can or won't detect on its own. Called every change detection run.\n* **ngOnDestroy** - Called just before Angular destroys the component.\n\nFor a full list, see the official [Angular 2 Lifecyle Hooks docs](https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html).\n\n## Start application\n\nThe starting point of an Angular 2 application is the `nativeScriptBootstrap` method. It takes the root component as an argument:\n\n### Example\n\n``` TypeScript\nimport { nativeScriptBootstrap } from \"./nativescript-angular/application\";\nimport { MainComponent } from \"./main-component\";\n\nnativeScriptBootstrap(MainComponent).then((compRef) => {\n    console.log(\"The application is now running!\");\n}).catch((e) => {\n    console.log(\"The application bootstrapping failed with error: \" + e);\n});\n```\n\n> **IMPORTANT:** You must call the `nativeScriptBootstrap` method **after** the module initialization. Any code after the `nativeScriptBootstrap` call will not be executed.\n{% endangular%} \n\n{% nativescript %}\n# Application Management\n\nThe `application` module lets you manage the life cycle of your NativeScript apps from starting the application to storing user-defined settings.\n\n* [Start Application](#start-application)\n* [Use Application Events](#use-application-events)\n* [Android Activity Events](#android-activity-events)\n* [iOS UIApplicationDelegate](#ios-uiapplicationdelegate)\n* [Persist and Restore Application Settings](#persist-and-restore-application-settings)\n\n## Start Application\n\nThis method is required only for iOS applications. \n\n> **IMPORTANT:** You must call the `start` method of the application module **after** the module initialization. Any code after the `start` call will not be executed.\n\n### Example\n\n``` JavaScript\n/*\niOS calls UIApplication and triggers the application main event loop.\n*/\n\nvar application = require(\"application\");\napplication.start({ moduleName: \"main-page\" });\n```\n``` TypeScript\n/*\niOS calls UIApplication and triggers the application main event loop.\n*/\n\nimport application = require(\"application\");\napplication.start({ moduleName: \"main-page\" });\n```\n{% endnativescript %}\n\n## Use Application Events\n\nNativeScript applications have the following life cycle events.\n\n+ `launch`: This event is raised when application launch.\n+ `suspend`: This event is raised when the application is suspended.\n+ `resume`: This event is raised when the application is resumed after it has been suspended.\n+ `exit`: This event is raised when the application is about to exit.\n+ `lowMemory`: This event is raised when the memory on the target device is low.\n+ `uncaughtError`: This event is raised when an uncaught application error is present.\n\n### Example\n\n{% nativescript %}\n``` JavaScript\nvar application = require(\"application\");\n\napplication.on(application.launchEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android.content.Intent class.\n        console.log(\"Launched Android application with the following intent: \" + args.android + \".\");\n    } else if (args.ios !== undefined) {\n        // For iOS applications, args.ios is NSDictionary (launchOptions).\n        console.log(\"Launched iOS application with options: \" + args.ios);\n    }\n});\n\napplication.on(application.suspendEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.resumeEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.exitEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.lowMemoryEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.uncaughtErrorEvent, function (args) {\n    if (args.android) {\n        // For Android applications, args.android is an NativeScriptError.\n        console.log(\"NativeScriptError: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is NativeScriptError.\n        console.log(\"NativeScriptError: \" + args.ios);\n    }\n});\n\napplication.start({ moduleName: \"main-page\" });\n```\n{% endnativescript %}\n``` TypeScript\nimport application = require(\"application\");\napplication.on(application.launchEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android.content.Intent class.\n        console.log(\"Launched Android application with the following intent: \" + args.android + \".\");\n    } else if (args.ios !== undefined) {\n        // For iOS applications, args.ios is NSDictionary (launchOptions).\n        console.log(\"Launched iOS application with options: \" + args.ios);\n    }\n});\n\napplication.on(application.suspendEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.resumeEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.exitEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.lowMemoryEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an android activity class.\n        console.log(\"Activity: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is UIApplication.\n        console.log(\"UIApplication: \" + args.ios);\n    }\n});\n\napplication.on(application.uncaughtErrorEvent, function (args: application.ApplicationEventData) {\n    if (args.android) {\n        // For Android applications, args.android is an NativeScriptError.\n        console.log(\"NativeScriptError: \" + args.android);\n    } else if (args.ios) {\n        // For iOS applications, args.ios is NativeScriptError.\n        console.log(\"NativeScriptError: \" + args.ios);\n    }\n});\napplication.start({ moduleName: \"main-page\" });\n```\n## Android Activity Events\n\nNativeScript applications have the following Android specific activity events:\n\n+ `activityCreated`: This event is raised when activity is created.\n+ `activityDestroyed`: This event is raised when activity is destroyed.\n+ `activityStarted`: This event is raised when activity is started.\n+ `activityPaused`: This event is raised when activity is paused.\n+ `activityResumed`: This event is raised when activity is resumed.\n+ `activityStopped`: This event is raised when activity is stopped.\n+ `saveActivityState`: This event is raised to retrieve per-instance state from an activity before being killed so that the state can be restored.\n+ `activityResult`: This event is raised when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it.\n+ `activityBackPressed`: This event is raised when the activity has detected the user's press of the back key.\n\n### Example\n\n{% nativescript %}\n``` JavaScript\nvar application = require(\"application\");\n\nif (application.android) {\n    application.android.on(application.AndroidApplication.activityCreatedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity + \", Bundle: \" + args.bundle);\n    });\n    \n    application.android.on(application.AndroidApplication.activityDestroyedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.activityStartedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.activityPausedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.activityResumedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.activityStoppedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n    \n    application.android.on(application.AndroidApplication.saveActivityStateEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity + \", Bundle: \" + args.bundle);\n    });\n    \n    application.android.on(application.AndroidApplication.activityResultEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity +\n            \", requestCode: \" + args.requestCode + \", resultCode: \" + args.resultCode + \", Intent: \" + args.intent);\n    });\n    \n    application.android.on(application.AndroidApplication.activityBackPressedEvent, function (args) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n        // Set args.cancel = true to cancel back navigation and do something custom.\n    });\n}\n\napplication.start();\n```\n{% endnativescript %}\n``` TypeScript\nimport application = require(\"application\");\n\n// Android activity events\nif (application.android) {\n    application.android.on(application.AndroidApplication.activityCreatedEvent, function (args: application.AndroidActivityBundleEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity + \", Bundle: \" + args.bundle);\n    });\n\n    application.android.on(application.AndroidApplication.activityDestroyedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.activityStartedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.activityPausedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.activityResumedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.activityStoppedEvent, function (args: application.AndroidActivityEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n    });\n\n    application.android.on(application.AndroidApplication.saveActivityStateEvent, function (args: application.AndroidActivityBundleEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity + \", Bundle: \" + args.bundle);\n    });\n\n    application.android.on(application.AndroidApplication.activityResultEvent, function (args: application.AndroidActivityResultEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity +\n            \", requestCode: \" + args.requestCode + \", resultCode: \" + args.resultCode + \", Intent: \" + args.intent);\n    });\n\n    application.android.on(application.AndroidApplication.activityBackPressedEvent, function (args: application.AndroidActivityBackPressedEventData) {\n        console.log(\"Event: \" + args.eventName + \", Activity: \" + args.activity);\n        // Set args.cancel = true to cancel back navigation and do something custom.\n    });\n}\n\napplication.start({ moduleName: \"main-page\" });\n```\n\n## iOS UIApplicationDelegate\n\nSince NativeScript 1.3 you can specify custom UIApplicationDelegate for the iOS application:\n\n### Example\n\n{% nativescript %}\n``` JavaScript\nvar application = require(\"application\");\nvar MyDelegate = (function (_super) {\n    __extends(MyDelegate, _super);\n    function MyDelegate() {\n        _super.apply(this, arguments);\n    }\n    MyDelegate.prototype.applicationDidFinishLaunchingWithOptions = function (application, launchOptions) {\n        console.log(\"applicationWillFinishLaunchingWithOptions: \" + launchOptions);\n        return true;\n    };\n    MyDelegate.prototype.applicationDidBecomeActive = function (application) {\n        console.log(\"applicationDidBecomeActive: \" + application);\n    };\n    MyDelegate.ObjCProtocols = [UIApplicationDelegate];\n    return MyDelegate;\n})(UIResponder);\napplication.ios.delegate = MyDelegate;\napplication.start();\n```\n{% endnativescript %}\n``` TypeScript\nimport application = require(\"application\");\nclass MyDelegate extends UIResponder implements UIApplicationDelegate {\n    public static ObjCProtocols = [UIApplicationDelegate];\n\n    applicationDidFinishLaunchingWithOptions(application: UIApplication, launchOptions: NSDictionary): boolean {\n        console.log(\"applicationWillFinishLaunchingWithOptions: \" + launchOptions)\n\n        return true;\n    }\n\n    applicationDidBecomeActive(application: UIApplication): void {\n        console.log(\"applicationDidBecomeActive: \" + application)\n    }\n}\napplication.ios.delegate = MyDelegate;\napplication.start();\n```\n\n## Persist and Restore Application Settings\n\nTo persist user-defined settings, you need to use the `application-settings` module. The `application-settings` module is a static singleton hash table that stores key-value pairs for the application. \n\nThe getter methods have two parameters: a key and an optional default value to return if the specified key does not exist.\nThe setter methods have two required parameters: a key and value. \n\n### Example\n\n{% nativescript %}\n``` JavaScript\nvar applicationSettings = require(\"application-settings\");\n// Event handler for Page \"loaded\" event attached in main-page.xml.\nfunction pageLoaded(args) {\n    applicationSettings.setString(\"Name\", \"John Doe\");\n    console.log(applicationSettings.getString(\"Name\")); // Prints \"John Doe\".\n    applicationSettings.setBoolean(\"Married\", false);\n    console.log(applicationSettings.getBoolean(\"Married\")); // Prints false.\n    applicationSettings.setNumber(\"Age\", 42);\n    console.log(applicationSettings.getNumber(\"Age\")); // Prints 42.\n    console.log(applicationSettings.hasKey(\"Name\")); // Prints true.\n    applicationSettings.remove(\"Name\"); // Removes the Name entry.\n    console.log(applicationSettings.hasKey(\"Name\")); // Prints false.\n}\nexports.pageLoaded = pageLoaded;\n```\n{% endnativescript %}\n``` TypeScript\nimport observable = require(\"data/observable\");\nimport applicationSettings = require(\"application-settings\");\n// Event handler for Page \"loaded\" event attached in main-page.xml.\nexport function pageLoaded(args: observable.EventData) {\n    applicationSettings.setString(\"Name\", \"John Doe\");\n    console.log(applicationSettings.getString(\"Name\"));// Prints \"John Doe\".\n    applicationSettings.setBoolean(\"Married\", false);\n    console.log(applicationSettings.getBoolean(\"Married\"));// Prints false.\n    applicationSettings.setNumber(\"Age\", 42);\n    console.log(applicationSettings.getNumber(\"Age\"));// Prints 42.\n    console.log(applicationSettings.hasKey(\"Name\"));// Prints true.\n    applicationSettings.remove(\"Name\");// Removes the Name entry.\n    console.log(applicationSettings.hasKey(\"Name\"));// Prints false.\n}\n```\n","date":"2016-08-26T21:05:52.866Z","updated":"2016-08-26T21:05:52.866Z","path":"core-concepts/application-management.html","comments":1,"layout":"page","_id":"cisn95c620004wsl0cecw380p","content":"<div class=\"codeblock ng\"><h1 id=\"nativescript-application-architecture-and-lifecycle\">NativeScript application architecture and lifecycle</h1>\n<p>The main building blocks of NativeScript applications with Angular 2 are:</p>\n<ul>\n<li><a href=\"#modules\">Modules</a></li>\n<li><a href=\"#components\">Components</a></li>\n</ul>\n<p>The <code>application</code> module lets you manage the life cycle of your NativeScript apps from starting the application to storing user-defined settings.</p>\n<ul>\n<li><a href=\"#start-application\">Start Application</a></li>\n<li><a href=\"#use-application-events\">Use Application Events</a></li>\n<li><a href=\"#android-activity-events\">Android Activity Events</a></li>\n<li><a href=\"#ios-uiapplicationdelegate\">iOS UIApplicationDelegate</a></li>\n<li><a href=\"#persist-and-restore-application-settings\">Persist and Restore Application Settings</a></li>\n</ul>\n<h2 id=\"modules\">Modules</h2>\n<p>Angular applications are modular. A module is a file containing a block of code dedicated to a single purpose. It exports a value that can be used by other parts of the application. For example:</p>\nundefined\n<p>The <code>export</code> statement is important as it makes the <code>AppComponent</code> accessible to other modules. The import clause is used to reference the <code>AppComponent</code> class from other modules:</p>\nundefined\n<p>Some modules are libraries of other modules. Modules installed as npm packages (like <code>@angular/core</code> in the above example) should be referenced without a path prefix. When we import from one of our own files, we prefix the module name with the file path. In this example we specify a relative file path (./). That means the source module is in the same folder (./) as the module importing it. </p>\n<h2 id=\"components\">Components</h2>\n<p>Components are the fundamental building blocks of NativeScript applications built with Angular 2. Every NativeScript application contains a set of components that define every UI element, screen or route. The application has a root component that contains all other components. The following constitutes a component:</p>\n<ul>\n<li>A component knows how to interact with its host element.</li>\n<li>A component knows how to render itself.</li>\n<li>A component configures dependency injection.</li>\n<li>A component has a well-defined public API of input and output properties.</li>\n<li>A component has well-defined lifecycle.</li>\n</ul>\n<h3 id=\"component-example\">Component example</h3>\nundefined\n<h2 id=\"component-metadata\">Component metadata</h2>\n<p>The <code>@Component</code> decorator contains metadata describing how to create and present the component. Here are some of the configuration options:</p>\n<ul>\n<li><strong>selector</strong> - a CSS selector that tells Angular to create and insert an instance of this component where it finds the selector in parent component&#39;s template. For example:</li>\n</ul>\nundefined\n<ul>\n<li><strong>template</strong> - A visual tree that represents the component view. Here you can use all NativeScript UI elements and custom defined UI components.</li>\n<li><strong>templateUrl</strong> - The address of a file where the component template is located.</li>\n<li><strong>styles</strong> - CSS directives that define the component style.</li>\n<li><strong>styleUrls</strong> - An array containing URLs of CSS files that define the component style.</li>\n<li><strong>animations</strong> - The animations associated with this component.</li>\n<li><strong>providers</strong> - an array of dependency injection providers for services that the component requires.</li>\n</ul>\n<h2 id=\"component-lifecycle\">Component lifecycle</h2>\n<p>The component lifecycle is controlled by the Angular application. It creates, updates and destroys components. Lifecycle hooks are used to handle different events from the component lifecycle. Each hook method starts with the <strong>ng</strong> prefix. The following are some the component lifecycle methods:</p>\n<ul>\n<li><strong>ngOnInit</strong> - Called after all data-bound input methods are initialized.</li>\n<li><strong>ngOnChanges</strong> - Callled after a data-bound property has been changed.</li>\n<li><strong>ngDoCheck</strong> - Detect and act upon changes that Angular can or won&#39;t detect on its own. Called every change detection run.</li>\n<li><strong>ngOnDestroy</strong> - Called just before Angular destroys the component.</li>\n</ul>\n<p>For a full list, see the official <a href=\"https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html\" target=\"_blank\" rel=\"external\">Angular 2 Lifecyle Hooks docs</a>.</p>\n<h2 id=\"start-application\">Start application</h2>\n<p>The starting point of an Angular 2 application is the <code>nativeScriptBootstrap</code> method. It takes the root component as an argument:</p>\n<h3 id=\"example\">Example</h3>\nundefined\n<blockquote>\n<p><strong>IMPORTANT:</strong> You must call the <code>nativeScriptBootstrap</code> method <strong>after</strong> the module initialization. Any code after the <code>nativeScriptBootstrap</code> call will not be executed.</p>\n</blockquote>\n</div> \n<div class=\"codeblock n\"><h1 id=\"application-management\">Application Management</h1>\n<p>The <code>application</code> module lets you manage the life cycle of your NativeScript apps from starting the application to storing user-defined settings.</p>\n<ul>\n<li><a href=\"#start-application\">Start Application</a></li>\n<li><a href=\"#use-application-events\">Use Application Events</a></li>\n<li><a href=\"#android-activity-events\">Android Activity Events</a></li>\n<li><a href=\"#ios-uiapplicationdelegate\">iOS UIApplicationDelegate</a></li>\n<li><a href=\"#persist-and-restore-application-settings\">Persist and Restore Application Settings</a></li>\n</ul>\n<h2 id=\"start-application\">Start Application</h2>\n<p>This method is required only for iOS applications. </p>\n<blockquote>\n<p><strong>IMPORTANT:</strong> You must call the <code>start</code> method of the application module <strong>after</strong> the module initialization. Any code after the <code>start</code> call will not be executed.</p>\n</blockquote>\n<h3 id=\"example\">Example</h3>\nundefined\nundefined\n</div>\n<h2 id=\"Use-Application-Events\"><a href=\"#Use-Application-Events\" class=\"headerlink\" title=\"Use Application Events\"></a>Use Application Events</h2><p>NativeScript applications have the following life cycle events.</p>\n<ul>\n<li><code>launch</code>: This event is raised when application launch.</li>\n<li><code>suspend</code>: This event is raised when the application is suspended.</li>\n<li><code>resume</code>: This event is raised when the application is resumed after it has been suspended.</li>\n<li><code>exit</code>: This event is raised when the application is about to exit.</li>\n<li><code>lowMemory</code>: This event is raised when the memory on the target device is low.</li>\n<li><code>uncaughtError</code>: This event is raised when an uncaught application error is present.</li>\n</ul>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><div class=\"codeblock n\">undefined\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\">application.on(application.launchEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android.content.Intent class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Launched Android application with the following intent: \"</span> + args.android + <span class=\"string\">\".\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is NSDictionary (launchOptions).</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Launched iOS application with options: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.suspendEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android activity class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Activity: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is UIApplication.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"UIApplication: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.resumeEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android activity class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Activity: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is UIApplication.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"UIApplication: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.exitEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android activity class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Activity: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is UIApplication.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"UIApplication: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.lowMemoryEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android activity class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Activity: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is UIApplication.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"UIApplication: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.uncaughtErrorEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an NativeScriptError.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"NativeScriptError: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is NativeScriptError.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"NativeScriptError: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"main-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Android-Activity-Events\"><a href=\"#Android-Activity-Events\" class=\"headerlink\" title=\"Android Activity Events\"></a>Android Activity Events</h2><p>NativeScript applications have the following Android specific activity events:</p>\n<ul>\n<li><code>activityCreated</code>: This event is raised when activity is created.</li>\n<li><code>activityDestroyed</code>: This event is raised when activity is destroyed.</li>\n<li><code>activityStarted</code>: This event is raised when activity is started.</li>\n<li><code>activityPaused</code>: This event is raised when activity is paused.</li>\n<li><code>activityResumed</code>: This event is raised when activity is resumed.</li>\n<li><code>activityStopped</code>: This event is raised when activity is stopped.</li>\n<li><code>saveActivityState</code>: This event is raised to retrieve per-instance state from an activity before being killed so that the state can be restored.</li>\n<li><code>activityResult</code>: This event is raised when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it.</li>\n<li><code>activityBackPressed</code>: This event is raised when the activity has detected the user’s press of the back key.</li>\n</ul>\n<h3 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example\"></a>Example</h3><div class=\"codeblock n\">undefined\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Android activity events</span></div><div class=\"line\"><span class=\"keyword\">if</span> (application.android) &#123;</div><div class=\"line\">    application.android.on(application.AndroidApplication.activityCreatedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityBundleEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity + <span class=\"string\">\", Bundle: \"</span> + args.bundle);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityDestroyedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityStartedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityPausedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityResumedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityStoppedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.saveActivityStateEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityBundleEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity + <span class=\"string\">\", Bundle: \"</span> + args.bundle);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityResultEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityResultEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity +</div><div class=\"line\">            <span class=\"string\">\", requestCode: \"</span> + args.requestCode + <span class=\"string\">\", resultCode: \"</span> + args.resultCode + <span class=\"string\">\", Intent: \"</span> + args.intent);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityBackPressedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityBackPressedEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">        <span class=\"comment\">// Set args.cancel = true to cancel back navigation and do something custom.</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"main-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"iOS-UIApplicationDelegate\"><a href=\"#iOS-UIApplicationDelegate\" class=\"headerlink\" title=\"iOS UIApplicationDelegate\"></a>iOS UIApplicationDelegate</h2><p>Since NativeScript 1.3 you can specify custom UIApplicationDelegate for the iOS application:</p>\n<h3 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example\"></a>Example</h3><div class=\"codeblock n\">undefined\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"keyword\">class</span> MyDelegate extends UIResponder <span class=\"keyword\">implements</span> UIApplicationDelegate &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ObjCProtocols = [UIApplicationDelegate];</div><div class=\"line\"></div><div class=\"line\">    applicationDidFinishLaunchingWithOptions(application: UIApplication, launchOptions: NSDictionary): <span class=\"built_in\">boolean</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"applicationWillFinishLaunchingWithOptions: \"</span> + launchOptions)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    applicationDidBecomeActive(application: UIApplication): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"applicationDidBecomeActive: \"</span> + application)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">application.ios.delegate = MyDelegate;</div><div class=\"line\">application.start();</div></pre></td></tr></table></figure>\n<h2 id=\"Persist-and-Restore-Application-Settings\"><a href=\"#Persist-and-Restore-Application-Settings\" class=\"headerlink\" title=\"Persist and Restore Application Settings\"></a>Persist and Restore Application Settings</h2><p>To persist user-defined settings, you need to use the <code>application-settings</code> module. The <code>application-settings</code> module is a static singleton hash table that stores key-value pairs for the application. </p>\n<p>The getter methods have two parameters: a key and an optional default value to return if the specified key does not exist.\nThe setter methods have two required parameters: a key and value. </p>\n<h3 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example\"></a>Example</h3><div class=\"codeblock n\">undefined\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> applicationSettings = <span class=\"built_in\">require</span>(<span class=\"string\">\"application-settings\"</span>);</div><div class=\"line\"><span class=\"comment\">// Event handler for Page \"loaded\" event attached in main-page.xml.</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    applicationSettings.setString(<span class=\"string\">\"Name\"</span>, <span class=\"string\">\"John Doe\"</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.getString(<span class=\"string\">\"Name\"</span>));<span class=\"comment\">// Prints \"John Doe\".</span></div><div class=\"line\">    applicationSettings.setBoolean(<span class=\"string\">\"Married\"</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.getBoolean(<span class=\"string\">\"Married\"</span>));<span class=\"comment\">// Prints false.</span></div><div class=\"line\">    applicationSettings.setNumber(<span class=\"string\">\"Age\"</span>, <span class=\"number\">42</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.getNumber(<span class=\"string\">\"Age\"</span>));<span class=\"comment\">// Prints 42.</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.hasKey(<span class=\"string\">\"Name\"</span>));<span class=\"comment\">// Prints true.</span></div><div class=\"line\">    applicationSettings.remove(<span class=\"string\">\"Name\"</span>);<span class=\"comment\">// Removes the Name entry.</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.hasKey(<span class=\"string\">\"Name\"</span>));<span class=\"comment\">// Prints false.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<div class=\"codeblock ng\"><h1 id=\"nativescript-application-architecture-and-lifecycle\">NativeScript application architecture and lifecycle</h1>\n<p>The main building blocks of NativeScript applications with Angular 2 are:</p>\n<ul>\n<li><a href=\"#modules\">Modules</a></li>\n<li><a href=\"#components\">Components</a></li>\n</ul>\n<p>The <code>application</code> module lets you manage the life cycle of your NativeScript apps from starting the application to storing user-defined settings.</p>\n<ul>\n<li><a href=\"#start-application\">Start Application</a></li>\n<li><a href=\"#use-application-events\">Use Application Events</a></li>\n<li><a href=\"#android-activity-events\">Android Activity Events</a></li>\n<li><a href=\"#ios-uiapplicationdelegate\">iOS UIApplicationDelegate</a></li>\n<li><a href=\"#persist-and-restore-application-settings\">Persist and Restore Application Settings</a></li>\n</ul>\n<h2 id=\"modules\">Modules</h2>\n<p>Angular applications are modular. A module is a file containing a block of code dedicated to a single purpose. It exports a value that can be used by other parts of the application. For example:</p>\nundefined\n<p>The <code>export</code> statement is important as it makes the <code>AppComponent</code> accessible to other modules. The import clause is used to reference the <code>AppComponent</code> class from other modules:</p>\nundefined\n<p>Some modules are libraries of other modules. Modules installed as npm packages (like <code>@angular/core</code> in the above example) should be referenced without a path prefix. When we import from one of our own files, we prefix the module name with the file path. In this example we specify a relative file path (./). That means the source module is in the same folder (./) as the module importing it. </p>\n<h2 id=\"components\">Components</h2>\n<p>Components are the fundamental building blocks of NativeScript applications built with Angular 2. Every NativeScript application contains a set of components that define every UI element, screen or route. The application has a root component that contains all other components. The following constitutes a component:</p>\n<ul>\n<li>A component knows how to interact with its host element.</li>\n<li>A component knows how to render itself.</li>\n<li>A component configures dependency injection.</li>\n<li>A component has a well-defined public API of input and output properties.</li>\n<li>A component has well-defined lifecycle.</li>\n</ul>\n<h3 id=\"component-example\">Component example</h3>\nundefined\n<h2 id=\"component-metadata\">Component metadata</h2>\n<p>The <code>@Component</code> decorator contains metadata describing how to create and present the component. Here are some of the configuration options:</p>\n<ul>\n<li><strong>selector</strong> - a CSS selector that tells Angular to create and insert an instance of this component where it finds the selector in parent component&#39;s template. For example:</li>\n</ul>\nundefined\n<ul>\n<li><strong>template</strong> - A visual tree that represents the component view. Here you can use all NativeScript UI elements and custom defined UI components.</li>\n<li><strong>templateUrl</strong> - The address of a file where the component template is located.</li>\n<li><strong>styles</strong> - CSS directives that define the component style.</li>\n<li><strong>styleUrls</strong> - An array containing URLs of CSS files that define the component style.</li>\n<li><strong>animations</strong> - The animations associated with this component.</li>\n<li><strong>providers</strong> - an array of dependency injection providers for services that the component requires.</li>\n</ul>\n<h2 id=\"component-lifecycle\">Component lifecycle</h2>\n<p>The component lifecycle is controlled by the Angular application. It creates, updates and destroys components. Lifecycle hooks are used to handle different events from the component lifecycle. Each hook method starts with the <strong>ng</strong> prefix. The following are some the component lifecycle methods:</p>\n<ul>\n<li><strong>ngOnInit</strong> - Called after all data-bound input methods are initialized.</li>\n<li><strong>ngOnChanges</strong> - Callled after a data-bound property has been changed.</li>\n<li><strong>ngDoCheck</strong> - Detect and act upon changes that Angular can or won&#39;t detect on its own. Called every change detection run.</li>\n<li><strong>ngOnDestroy</strong> - Called just before Angular destroys the component.</li>\n</ul>\n<p>For a full list, see the official <a href=\"https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html\">Angular 2 Lifecyle Hooks docs</a>.</p>\n<h2 id=\"start-application\">Start application</h2>\n<p>The starting point of an Angular 2 application is the <code>nativeScriptBootstrap</code> method. It takes the root component as an argument:</p>\n<h3 id=\"example\">Example</h3>\nundefined\n<blockquote>\n<p><strong>IMPORTANT:</strong> You must call the <code>nativeScriptBootstrap</code> method <strong>after</strong> the module initialization. Any code after the <code>nativeScriptBootstrap</code> call will not be executed.</p>\n</blockquote>\n</div> \n<div class=\"codeblock n\"><h1 id=\"application-management\">Application Management</h1>\n<p>The <code>application</code> module lets you manage the life cycle of your NativeScript apps from starting the application to storing user-defined settings.</p>\n<ul>\n<li><a href=\"#start-application\">Start Application</a></li>\n<li><a href=\"#use-application-events\">Use Application Events</a></li>\n<li><a href=\"#android-activity-events\">Android Activity Events</a></li>\n<li><a href=\"#ios-uiapplicationdelegate\">iOS UIApplicationDelegate</a></li>\n<li><a href=\"#persist-and-restore-application-settings\">Persist and Restore Application Settings</a></li>\n</ul>\n<h2 id=\"start-application\">Start Application</h2>\n<p>This method is required only for iOS applications. </p>\n<blockquote>\n<p><strong>IMPORTANT:</strong> You must call the <code>start</code> method of the application module <strong>after</strong> the module initialization. Any code after the <code>start</code> call will not be executed.</p>\n</blockquote>\n<h3 id=\"example\">Example</h3>\nundefined\nundefined\n</div>\n<h2 id=\"Use-Application-Events\"><a href=\"#Use-Application-Events\" class=\"headerlink\" title=\"Use Application Events\"></a>Use Application Events</h2><p>NativeScript applications have the following life cycle events.</p>\n<ul>\n<li><code>launch</code>: This event is raised when application launch.</li>\n<li><code>suspend</code>: This event is raised when the application is suspended.</li>\n<li><code>resume</code>: This event is raised when the application is resumed after it has been suspended.</li>\n<li><code>exit</code>: This event is raised when the application is about to exit.</li>\n<li><code>lowMemory</code>: This event is raised when the memory on the target device is low.</li>\n<li><code>uncaughtError</code>: This event is raised when an uncaught application error is present.</li>\n</ul>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><div class=\"codeblock n\">undefined\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\">application.on(application.launchEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android.content.Intent class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Launched Android application with the following intent: \"</span> + args.android + <span class=\"string\">\".\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is NSDictionary (launchOptions).</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Launched iOS application with options: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.suspendEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android activity class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Activity: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is UIApplication.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"UIApplication: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.resumeEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android activity class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Activity: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is UIApplication.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"UIApplication: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.exitEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android activity class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Activity: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is UIApplication.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"UIApplication: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.lowMemoryEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an android activity class.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Activity: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is UIApplication.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"UIApplication: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">application.on(application.uncaughtErrorEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.ApplicationEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.android) &#123;</div><div class=\"line\">        <span class=\"comment\">// For Android applications, args.android is an NativeScriptError.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"NativeScriptError: \"</span> + args.android);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args.ios) &#123;</div><div class=\"line\">        <span class=\"comment\">// For iOS applications, args.ios is NativeScriptError.</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"NativeScriptError: \"</span> + args.ios);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"main-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Android-Activity-Events\"><a href=\"#Android-Activity-Events\" class=\"headerlink\" title=\"Android Activity Events\"></a>Android Activity Events</h2><p>NativeScript applications have the following Android specific activity events:</p>\n<ul>\n<li><code>activityCreated</code>: This event is raised when activity is created.</li>\n<li><code>activityDestroyed</code>: This event is raised when activity is destroyed.</li>\n<li><code>activityStarted</code>: This event is raised when activity is started.</li>\n<li><code>activityPaused</code>: This event is raised when activity is paused.</li>\n<li><code>activityResumed</code>: This event is raised when activity is resumed.</li>\n<li><code>activityStopped</code>: This event is raised when activity is stopped.</li>\n<li><code>saveActivityState</code>: This event is raised to retrieve per-instance state from an activity before being killed so that the state can be restored.</li>\n<li><code>activityResult</code>: This event is raised when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it.</li>\n<li><code>activityBackPressed</code>: This event is raised when the activity has detected the user’s press of the back key.</li>\n</ul>\n<h3 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example\"></a>Example</h3><div class=\"codeblock n\">undefined\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Android activity events</span></div><div class=\"line\"><span class=\"keyword\">if</span> (application.android) &#123;</div><div class=\"line\">    application.android.on(application.AndroidApplication.activityCreatedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityBundleEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity + <span class=\"string\">\", Bundle: \"</span> + args.bundle);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityDestroyedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityStartedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityPausedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityResumedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityStoppedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.saveActivityStateEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityBundleEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity + <span class=\"string\">\", Bundle: \"</span> + args.bundle);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityResultEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityResultEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity +</div><div class=\"line\">            <span class=\"string\">\", requestCode: \"</span> + args.requestCode + <span class=\"string\">\", resultCode: \"</span> + args.resultCode + <span class=\"string\">\", Intent: \"</span> + args.intent);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    application.android.on(application.AndroidApplication.activityBackPressedEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args: application.AndroidActivityBackPressedEventData</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Event: \"</span> + args.eventName + <span class=\"string\">\", Activity: \"</span> + args.activity);</div><div class=\"line\">        <span class=\"comment\">// Set args.cancel = true to cancel back navigation and do something custom.</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"main-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"iOS-UIApplicationDelegate\"><a href=\"#iOS-UIApplicationDelegate\" class=\"headerlink\" title=\"iOS UIApplicationDelegate\"></a>iOS UIApplicationDelegate</h2><p>Since NativeScript 1.3 you can specify custom UIApplicationDelegate for the iOS application:</p>\n<h3 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example\"></a>Example</h3><div class=\"codeblock n\">undefined\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"keyword\">class</span> MyDelegate extends UIResponder <span class=\"keyword\">implements</span> UIApplicationDelegate &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ObjCProtocols = [UIApplicationDelegate];</div><div class=\"line\"></div><div class=\"line\">    applicationDidFinishLaunchingWithOptions(application: UIApplication, launchOptions: NSDictionary): <span class=\"built_in\">boolean</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"applicationWillFinishLaunchingWithOptions: \"</span> + launchOptions)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    applicationDidBecomeActive(application: UIApplication): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"applicationDidBecomeActive: \"</span> + application)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">application.ios.delegate = MyDelegate;</div><div class=\"line\">application.start();</div></pre></td></tr></table></figure>\n<h2 id=\"Persist-and-Restore-Application-Settings\"><a href=\"#Persist-and-Restore-Application-Settings\" class=\"headerlink\" title=\"Persist and Restore Application Settings\"></a>Persist and Restore Application Settings</h2><p>To persist user-defined settings, you need to use the <code>application-settings</code> module. The <code>application-settings</code> module is a static singleton hash table that stores key-value pairs for the application. </p>\n<p>The getter methods have two parameters: a key and an optional default value to return if the specified key does not exist.\nThe setter methods have two required parameters: a key and value. </p>\n<h3 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example\"></a>Example</h3><div class=\"codeblock n\">undefined\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> applicationSettings = <span class=\"built_in\">require</span>(<span class=\"string\">\"application-settings\"</span>);</div><div class=\"line\"><span class=\"comment\">// Event handler for Page \"loaded\" event attached in main-page.xml.</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    applicationSettings.setString(<span class=\"string\">\"Name\"</span>, <span class=\"string\">\"John Doe\"</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.getString(<span class=\"string\">\"Name\"</span>));<span class=\"comment\">// Prints \"John Doe\".</span></div><div class=\"line\">    applicationSettings.setBoolean(<span class=\"string\">\"Married\"</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.getBoolean(<span class=\"string\">\"Married\"</span>));<span class=\"comment\">// Prints false.</span></div><div class=\"line\">    applicationSettings.setNumber(<span class=\"string\">\"Age\"</span>, <span class=\"number\">42</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.getNumber(<span class=\"string\">\"Age\"</span>));<span class=\"comment\">// Prints 42.</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.hasKey(<span class=\"string\">\"Name\"</span>));<span class=\"comment\">// Prints true.</span></div><div class=\"line\">    applicationSettings.remove(<span class=\"string\">\"Name\"</span>);<span class=\"comment\">// Removes the Name entry.</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(applicationSettings.hasKey(<span class=\"string\">\"Name\"</span>));<span class=\"comment\">// Prints false.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Angular Bootstrap","description":"Learn how a NativeScript Angular application bootstraps and how you can customize the process.","position":2,"slug":"angular-bootstrap","environment":"angular","_content":"\n# Overview\n\nThis article will cover in detail the process of bootstrapping an Angular application.\n\n* [The Bootstrap Process](#the-bootstrap-process)\n* [NativeScript Application Options](#nativescript-application-options)\n* [Customizing DI Providers](#customizing-di-providers)\n* [Objects Injected by the Platform](#objects-injected-by-the-platform)\n* [Advanced Bootstrap](#advanced-bootstrap)\n\n# The Bootstrap Process\n\nA traditional NativeScript application starts by initializing global objects, setting up global CSS rules, creating, and navigating to the main page. Angular does not care about any of that -- all it needs is a place in the DOM to attach to. To make both paradigms work together, we provide a wrapper function, `nativeScriptBootstrap`, that sets up a NativeScript application and bootstraps the Angular framework in a default location on the main UI page.\n\n```typescript\nnativeScriptBootstrap(AppMainComponent);\n```\n\nOne of our major design goals here is to provide virtually the same interface as the default Angular `bootstrap` routine, so that people familiar with the web version of Angular get productive with as little friction as possible.\n\n# NativeScript Application Options\n\nApplication options in NativeScript are configured at the time the application boots. That could be problematic for Angular apps since the usual application start up process is hidden inside the `nativeScriptBootstrap` black box. To allow for customizations, we introduced an additional `AppOptions` parameter that lets you preconfigure certain aspects of your application behavior. At the moment those are:\n\n* `cssFile`: overrides the path to the file containing global CSS rules that are applied to all visual objects in the application. The default path is `app.css`.\n* `startPageActionBarHidden`: a boolean setting controlling whether your app will display the action bar on startup. The default setting is platform-specific: it displays the action bar on Android and hides it on iOS.\n\n```typescript\nnativeScriptBootstrap(AppMainComponent, [], {startPageActionBarHidden: true});\n```\n\n# Customizing DI Providers\n\nMany aspects of Angular applications are configured through the dependency injection (DI) system. The bootstrap function is the tool that configures the DI providers and exposes them to all application objects. Multiple Angular libraries, such as the router and the http client use it to configure providers and associated directives:\n\n```typescript\nimport {NS_ROUTER_PROVIDERS} from \"nativescript-angular/router\";\n\nnativeScriptBootstrap(AppMainComponent, [NS_ROUTER_PROVIDERS]);\n```\n\nFor an in-depth guide to dependency injection in Angular 2, please review the [Dependency Injection in Angular 2](http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html) blog post.\n\n# Objects Injected by the Platform\n\nThe DI system plays a central part in Angular apps, and it makes sense to use it to expose certain platform objects to client code. That makes accessing them as simple as declaring a constructor parameter of the specified type. For example, here is how the component below gets an instance of the native `Page` object:\n\n```typescript\n@Component({\n    selector: \"user-details\",\n    template: \"...\"\n})\nexport class UserDetailsView {\n    constructor(private page: Page) {\n    }\n}\n```\n\n## Autoinjected objects:\n\n* `\"ui/page\".Page`: the native page the component renders on. The router implementation takes care to inject the correct instance when loading components on different pages.\n* `\"platform\".Device`: contains information about the device the application is running on.\n\n# Advanced Bootstrap\n\nCertain application scenarios may require bootstrapping an Angular app in a preexisting NativeScript application. The need to do that usually arises in automated tests that need to create and destroy applications in different setups. Advanced bootstraps could also be useful when migrating vanilla NativeScript applications to Angular -- you can start the migration by integrating Angular and implementing new features with it, then start migrating old features one at a time.\n\nThe advanced bootstrap API entry point is called just `bootstrap`. All it does is set up DI providers needed by the NativeScript renderer and start the Angular application. To use it, you need to specify a location in the visual tree that will be the application root. Angular web applications use the main component selector for that purpose, but due to a limitation in the NativeScript CSS selector implementation you need to configure a DI provider with a special key: `APP_ROOT_VIEW`.\n\n```typescript\nimport {bootstrap} from \"nativescript-angular/application\";\nimport {APP_ROOT_VIEW} from \"nativescript-angular/platform-providers\";\n\nconst viewRoot = new GridLayout();\nrootLayout.addChild(viewRoot);\n\nconst rootViewProvider = provide(APP_ROOT_VIEW, { useValue: viewRoot });\nreturn bootstrap(appComponentType, providers.concat(rootViewProvider)).then((componentRef) => {\n    //...\n});\n```\n\n# Conclusion\n\nBootstrapping a mobile Angular application should look almost identical to web application bootstraps. Most projects will never need to go beyond customizing providers for the DI subsystem, yet the customization mechanisms are there for the complex use cases.\n","source":"core-concepts/customizing-bootstrap.md","raw":"---\ntitle: Angular Bootstrap\ndescription: Learn how a NativeScript Angular application bootstraps and how you can customize the process.\nposition: 2\nslug: angular-bootstrap\nenvironment: angular\n---\n\n# Overview\n\nThis article will cover in detail the process of bootstrapping an Angular application.\n\n* [The Bootstrap Process](#the-bootstrap-process)\n* [NativeScript Application Options](#nativescript-application-options)\n* [Customizing DI Providers](#customizing-di-providers)\n* [Objects Injected by the Platform](#objects-injected-by-the-platform)\n* [Advanced Bootstrap](#advanced-bootstrap)\n\n# The Bootstrap Process\n\nA traditional NativeScript application starts by initializing global objects, setting up global CSS rules, creating, and navigating to the main page. Angular does not care about any of that -- all it needs is a place in the DOM to attach to. To make both paradigms work together, we provide a wrapper function, `nativeScriptBootstrap`, that sets up a NativeScript application and bootstraps the Angular framework in a default location on the main UI page.\n\n```typescript\nnativeScriptBootstrap(AppMainComponent);\n```\n\nOne of our major design goals here is to provide virtually the same interface as the default Angular `bootstrap` routine, so that people familiar with the web version of Angular get productive with as little friction as possible.\n\n# NativeScript Application Options\n\nApplication options in NativeScript are configured at the time the application boots. That could be problematic for Angular apps since the usual application start up process is hidden inside the `nativeScriptBootstrap` black box. To allow for customizations, we introduced an additional `AppOptions` parameter that lets you preconfigure certain aspects of your application behavior. At the moment those are:\n\n* `cssFile`: overrides the path to the file containing global CSS rules that are applied to all visual objects in the application. The default path is `app.css`.\n* `startPageActionBarHidden`: a boolean setting controlling whether your app will display the action bar on startup. The default setting is platform-specific: it displays the action bar on Android and hides it on iOS.\n\n```typescript\nnativeScriptBootstrap(AppMainComponent, [], {startPageActionBarHidden: true});\n```\n\n# Customizing DI Providers\n\nMany aspects of Angular applications are configured through the dependency injection (DI) system. The bootstrap function is the tool that configures the DI providers and exposes them to all application objects. Multiple Angular libraries, such as the router and the http client use it to configure providers and associated directives:\n\n```typescript\nimport {NS_ROUTER_PROVIDERS} from \"nativescript-angular/router\";\n\nnativeScriptBootstrap(AppMainComponent, [NS_ROUTER_PROVIDERS]);\n```\n\nFor an in-depth guide to dependency injection in Angular 2, please review the [Dependency Injection in Angular 2](http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html) blog post.\n\n# Objects Injected by the Platform\n\nThe DI system plays a central part in Angular apps, and it makes sense to use it to expose certain platform objects to client code. That makes accessing them as simple as declaring a constructor parameter of the specified type. For example, here is how the component below gets an instance of the native `Page` object:\n\n```typescript\n@Component({\n    selector: \"user-details\",\n    template: \"...\"\n})\nexport class UserDetailsView {\n    constructor(private page: Page) {\n    }\n}\n```\n\n## Autoinjected objects:\n\n* `\"ui/page\".Page`: the native page the component renders on. The router implementation takes care to inject the correct instance when loading components on different pages.\n* `\"platform\".Device`: contains information about the device the application is running on.\n\n# Advanced Bootstrap\n\nCertain application scenarios may require bootstrapping an Angular app in a preexisting NativeScript application. The need to do that usually arises in automated tests that need to create and destroy applications in different setups. Advanced bootstraps could also be useful when migrating vanilla NativeScript applications to Angular -- you can start the migration by integrating Angular and implementing new features with it, then start migrating old features one at a time.\n\nThe advanced bootstrap API entry point is called just `bootstrap`. All it does is set up DI providers needed by the NativeScript renderer and start the Angular application. To use it, you need to specify a location in the visual tree that will be the application root. Angular web applications use the main component selector for that purpose, but due to a limitation in the NativeScript CSS selector implementation you need to configure a DI provider with a special key: `APP_ROOT_VIEW`.\n\n```typescript\nimport {bootstrap} from \"nativescript-angular/application\";\nimport {APP_ROOT_VIEW} from \"nativescript-angular/platform-providers\";\n\nconst viewRoot = new GridLayout();\nrootLayout.addChild(viewRoot);\n\nconst rootViewProvider = provide(APP_ROOT_VIEW, { useValue: viewRoot });\nreturn bootstrap(appComponentType, providers.concat(rootViewProvider)).then((componentRef) => {\n    //...\n});\n```\n\n# Conclusion\n\nBootstrapping a mobile Angular application should look almost identical to web application bootstraps. Most projects will never need to go beyond customizing providers for the DI subsystem, yet the customization mechanisms are there for the complex use cases.\n","date":"2016-08-26T21:05:52.871Z","updated":"2016-08-26T21:05:52.871Z","path":"core-concepts/customizing-bootstrap.html","comments":1,"layout":"page","_id":"cisn95c640005wsl04ohakk0s","content":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>This article will cover in detail the process of bootstrapping an Angular application.</p>\n<ul>\n<li><a href=\"#the-bootstrap-process\">The Bootstrap Process</a></li>\n<li><a href=\"#nativescript-application-options\">NativeScript Application Options</a></li>\n<li><a href=\"#customizing-di-providers\">Customizing DI Providers</a></li>\n<li><a href=\"#objects-injected-by-the-platform\">Objects Injected by the Platform</a></li>\n<li><a href=\"#advanced-bootstrap\">Advanced Bootstrap</a></li>\n</ul>\n<h1 id=\"The-Bootstrap-Process\"><a href=\"#The-Bootstrap-Process\" class=\"headerlink\" title=\"The Bootstrap Process\"></a>The Bootstrap Process</h1><p>A traditional NativeScript application starts by initializing global objects, setting up global CSS rules, creating, and navigating to the main page. Angular does not care about any of that – all it needs is a place in the DOM to attach to. To make both paradigms work together, we provide a wrapper function, <code>nativeScriptBootstrap</code>, that sets up a NativeScript application and bootstraps the Angular framework in a default location on the main UI page.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nativeScriptBootstrap(AppMainComponent);</div></pre></td></tr></table></figure>\n<p>One of our major design goals here is to provide virtually the same interface as the default Angular <code>bootstrap</code> routine, so that people familiar with the web version of Angular get productive with as little friction as possible.</p>\n<h1 id=\"NativeScript-Application-Options\"><a href=\"#NativeScript-Application-Options\" class=\"headerlink\" title=\"NativeScript Application Options\"></a>NativeScript Application Options</h1><p>Application options in NativeScript are configured at the time the application boots. That could be problematic for Angular apps since the usual application start up process is hidden inside the <code>nativeScriptBootstrap</code> black box. To allow for customizations, we introduced an additional <code>AppOptions</code> parameter that lets you preconfigure certain aspects of your application behavior. At the moment those are:</p>\n<ul>\n<li><code>cssFile</code>: overrides the path to the file containing global CSS rules that are applied to all visual objects in the application. The default path is <code>app.css</code>.</li>\n<li><code>startPageActionBarHidden</code>: a boolean setting controlling whether your app will display the action bar on startup. The default setting is platform-specific: it displays the action bar on Android and hides it on iOS.</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nativeScriptBootstrap(AppMainComponent, [], &#123;startPageActionBarHidden: <span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Customizing-DI-Providers\"><a href=\"#Customizing-DI-Providers\" class=\"headerlink\" title=\"Customizing DI Providers\"></a>Customizing DI Providers</h1><p>Many aspects of Angular applications are configured through the dependency injection (DI) system. The bootstrap function is the tool that configures the DI providers and exposes them to all application objects. Multiple Angular libraries, such as the router and the http client use it to configure providers and associated directives:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;NS_ROUTER_PROVIDERS&#125; from <span class=\"string\">\"nativescript-angular/router\"</span>;</div><div class=\"line\"></div><div class=\"line\">nativeScriptBootstrap(AppMainComponent, [NS_ROUTER_PROVIDERS]);</div></pre></td></tr></table></figure>\n<p>For an in-depth guide to dependency injection in Angular 2, please review the <a href=\"http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html\" target=\"_blank\" rel=\"external\">Dependency Injection in Angular 2</a> blog post.</p>\n<h1 id=\"Objects-Injected-by-the-Platform\"><a href=\"#Objects-Injected-by-the-Platform\" class=\"headerlink\" title=\"Objects Injected by the Platform\"></a>Objects Injected by the Platform</h1><p>The DI system plays a central part in Angular apps, and it makes sense to use it to expose certain platform objects to client code. That makes accessing them as simple as declaring a constructor parameter of the specified type. For example, here is how the component below gets an instance of the native <code>Page</code> object:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">\"user-details\"</span>,</div><div class=\"line\">    template: <span class=\"string\">\"...\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserDetailsView &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private page: Page) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Autoinjected-objects\"><a href=\"#Autoinjected-objects\" class=\"headerlink\" title=\"Autoinjected objects:\"></a>Autoinjected objects:</h2><ul>\n<li><code>&quot;ui/page&quot;.Page</code>: the native page the component renders on. The router implementation takes care to inject the correct instance when loading components on different pages.</li>\n<li><code>&quot;platform&quot;.Device</code>: contains information about the device the application is running on.</li>\n</ul>\n<h1 id=\"Advanced-Bootstrap\"><a href=\"#Advanced-Bootstrap\" class=\"headerlink\" title=\"Advanced Bootstrap\"></a>Advanced Bootstrap</h1><p>Certain application scenarios may require bootstrapping an Angular app in a preexisting NativeScript application. The need to do that usually arises in automated tests that need to create and destroy applications in different setups. Advanced bootstraps could also be useful when migrating vanilla NativeScript applications to Angular – you can start the migration by integrating Angular and implementing new features with it, then start migrating old features one at a time.</p>\n<p>The advanced bootstrap API entry point is called just <code>bootstrap</code>. All it does is set up DI providers needed by the NativeScript renderer and start the Angular application. To use it, you need to specify a location in the visual tree that will be the application root. Angular web applications use the main component selector for that purpose, but due to a limitation in the NativeScript CSS selector implementation you need to configure a DI provider with a special key: <code>APP_ROOT_VIEW</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;bootstrap&#125; from <span class=\"string\">\"nativescript-angular/application\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;APP_ROOT_VIEW&#125; from <span class=\"string\">\"nativescript-angular/platform-providers\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> viewRoot = <span class=\"keyword\">new</span> GridLayout();</div><div class=\"line\">rootLayout.addChild(viewRoot);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> rootViewProvider = provide(APP_ROOT_VIEW, &#123; useValue: viewRoot &#125;);</div><div class=\"line\"><span class=\"keyword\">return</span> bootstrap(appComponentType, providers.concat(rootViewProvider)).then((componentRef) =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Bootstrapping a mobile Angular application should look almost identical to web application bootstraps. Most projects will never need to go beyond customizing providers for the DI subsystem, yet the customization mechanisms are there for the complex use cases.</p>\n","excerpt":"","more":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>This article will cover in detail the process of bootstrapping an Angular application.</p>\n<ul>\n<li><a href=\"#the-bootstrap-process\">The Bootstrap Process</a></li>\n<li><a href=\"#nativescript-application-options\">NativeScript Application Options</a></li>\n<li><a href=\"#customizing-di-providers\">Customizing DI Providers</a></li>\n<li><a href=\"#objects-injected-by-the-platform\">Objects Injected by the Platform</a></li>\n<li><a href=\"#advanced-bootstrap\">Advanced Bootstrap</a></li>\n</ul>\n<h1 id=\"The-Bootstrap-Process\"><a href=\"#The-Bootstrap-Process\" class=\"headerlink\" title=\"The Bootstrap Process\"></a>The Bootstrap Process</h1><p>A traditional NativeScript application starts by initializing global objects, setting up global CSS rules, creating, and navigating to the main page. Angular does not care about any of that – all it needs is a place in the DOM to attach to. To make both paradigms work together, we provide a wrapper function, <code>nativeScriptBootstrap</code>, that sets up a NativeScript application and bootstraps the Angular framework in a default location on the main UI page.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nativeScriptBootstrap(AppMainComponent);</div></pre></td></tr></table></figure>\n<p>One of our major design goals here is to provide virtually the same interface as the default Angular <code>bootstrap</code> routine, so that people familiar with the web version of Angular get productive with as little friction as possible.</p>\n<h1 id=\"NativeScript-Application-Options\"><a href=\"#NativeScript-Application-Options\" class=\"headerlink\" title=\"NativeScript Application Options\"></a>NativeScript Application Options</h1><p>Application options in NativeScript are configured at the time the application boots. That could be problematic for Angular apps since the usual application start up process is hidden inside the <code>nativeScriptBootstrap</code> black box. To allow for customizations, we introduced an additional <code>AppOptions</code> parameter that lets you preconfigure certain aspects of your application behavior. At the moment those are:</p>\n<ul>\n<li><code>cssFile</code>: overrides the path to the file containing global CSS rules that are applied to all visual objects in the application. The default path is <code>app.css</code>.</li>\n<li><code>startPageActionBarHidden</code>: a boolean setting controlling whether your app will display the action bar on startup. The default setting is platform-specific: it displays the action bar on Android and hides it on iOS.</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nativeScriptBootstrap(AppMainComponent, [], &#123;startPageActionBarHidden: <span class=\"literal\">true</span>&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Customizing-DI-Providers\"><a href=\"#Customizing-DI-Providers\" class=\"headerlink\" title=\"Customizing DI Providers\"></a>Customizing DI Providers</h1><p>Many aspects of Angular applications are configured through the dependency injection (DI) system. The bootstrap function is the tool that configures the DI providers and exposes them to all application objects. Multiple Angular libraries, such as the router and the http client use it to configure providers and associated directives:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;NS_ROUTER_PROVIDERS&#125; from <span class=\"string\">\"nativescript-angular/router\"</span>;</div><div class=\"line\"></div><div class=\"line\">nativeScriptBootstrap(AppMainComponent, [NS_ROUTER_PROVIDERS]);</div></pre></td></tr></table></figure>\n<p>For an in-depth guide to dependency injection in Angular 2, please review the <a href=\"http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html\">Dependency Injection in Angular 2</a> blog post.</p>\n<h1 id=\"Objects-Injected-by-the-Platform\"><a href=\"#Objects-Injected-by-the-Platform\" class=\"headerlink\" title=\"Objects Injected by the Platform\"></a>Objects Injected by the Platform</h1><p>The DI system plays a central part in Angular apps, and it makes sense to use it to expose certain platform objects to client code. That makes accessing them as simple as declaring a constructor parameter of the specified type. For example, here is how the component below gets an instance of the native <code>Page</code> object:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">\"user-details\"</span>,</div><div class=\"line\">    template: <span class=\"string\">\"...\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserDetailsView &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private page: Page) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Autoinjected-objects\"><a href=\"#Autoinjected-objects\" class=\"headerlink\" title=\"Autoinjected objects:\"></a>Autoinjected objects:</h2><ul>\n<li><code>&quot;ui/page&quot;.Page</code>: the native page the component renders on. The router implementation takes care to inject the correct instance when loading components on different pages.</li>\n<li><code>&quot;platform&quot;.Device</code>: contains information about the device the application is running on.</li>\n</ul>\n<h1 id=\"Advanced-Bootstrap\"><a href=\"#Advanced-Bootstrap\" class=\"headerlink\" title=\"Advanced Bootstrap\"></a>Advanced Bootstrap</h1><p>Certain application scenarios may require bootstrapping an Angular app in a preexisting NativeScript application. The need to do that usually arises in automated tests that need to create and destroy applications in different setups. Advanced bootstraps could also be useful when migrating vanilla NativeScript applications to Angular – you can start the migration by integrating Angular and implementing new features with it, then start migrating old features one at a time.</p>\n<p>The advanced bootstrap API entry point is called just <code>bootstrap</code>. All it does is set up DI providers needed by the NativeScript renderer and start the Angular application. To use it, you need to specify a location in the visual tree that will be the application root. Angular web applications use the main component selector for that purpose, but due to a limitation in the NativeScript CSS selector implementation you need to configure a DI provider with a special key: <code>APP_ROOT_VIEW</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;bootstrap&#125; from <span class=\"string\">\"nativescript-angular/application\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;APP_ROOT_VIEW&#125; from <span class=\"string\">\"nativescript-angular/platform-providers\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> viewRoot = <span class=\"keyword\">new</span> GridLayout();</div><div class=\"line\">rootLayout.addChild(viewRoot);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> rootViewProvider = provide(APP_ROOT_VIEW, &#123; useValue: viewRoot &#125;);</div><div class=\"line\"><span class=\"keyword\">return</span> bootstrap(appComponentType, providers.concat(rootViewProvider)).then((componentRef) =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Bootstrapping a mobile Angular application should look almost identical to web application bootstraps. Most projects will never need to go beyond customizing providers for the DI subsystem, yet the customization mechanisms are there for the complex use cases.</p>\n"},{"title":"Creating Launch Screen and AppIcons for iOS","description":"How to set up and modify Launch Screen and AppIcons for iOS","position":13,"slug":"launch-screen-and-icons-ios","_content":"\n# Creating AppIcons and Launch Screens for iOS \n\nPublishing your iOS app is an essential step in the development process and in order for your iOS application \nto be published successfully in App Store, there are some requirements that need to be fulfilled. \nAs described in [iOS Human Interface Guidelines](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html) setting the following is mandatory:\n\n* App name\n* App icon\n* Launch image or files\n\nIn NativeScript, your application comes with predefined template settings and images for these steps.\nIn this article, we are going to introduce the workflow to create your own launch screens.\n\n## Setting launch screen and AppIcons\n\nSetting up launch screens depends on the version of iOS you are targeting.\nIn iOS 7 and lower, the approach for creating the launch screen is to use static image resources.\nThe drawback of this method is that the app developer will have to provide many different\nimages, each with different resolution for each iOS device. In iOS 8 and above, the approach is to create\na LaunchScreen.storyboard, which is much more powerful in terms of customization and is easier to maintain.\n\nThe default Hello-World project in NativeScript is provided with default settings that supports both \napproaches. When you build your app for devices with iOS lower then version 8, NativeScript will use the static images and when you use NativeScript to build your app for devices with iOS 8 and above, it will use the provided LaunchScreen.storyboard.\n\n### How to set your launch screen\n\nThe default template in NativeScript (created with `tns create myApp`) provides you with predefined \nAppIcons, launch images and a LaunchScreen.storyboard all with the NativeScript logo. \nTo modify that template and create your own launch screen using your own assets and design, you will need the following:\n\n* **app/App_Resources/iOS/Assets.xcassets**: The resource that holds your image asset catalogs (for AppIcons, LaunchImages and LaunchScreen).\n\n* **app/App_Resources/iOS/LaunchScreen.storyboard**: Your default storyboard used for your launch screen (used in iOS versions 8, 9 and 10).\n\n* **app/App_Resources/iOS/build.xcconfig**: The resource that holds the references to the assets catalogs which will be used \n(optional: modify only if you change the name convention or introduce a new image asset catalog).\n\n* Xcode 7.1 or newer version (optional: needed only if you prefer WYSIWYG workflow for changing your images).\n\nThe workflow for creating your own launch screen can be handled from Xcode or manually in the NativeScript enviroment. \nIn this article we are going to cover both the manual and the Xcode WYSIWYG approach.\n\nIn your **app/App_Resources/iOS/Assets.xcassets** you will find the following sub-folders:\n   \n* **AppIcon.appiconset**: The resource that holds the images for your AppIcons (all iOS versions).\n\n* **LaunchImage.launchimage**: The resource that holds the images for your launch screen images (for iOS 7 and lower versions).\n\n* **LaunchScreen.AspectFill.imageset**: The resource that holds the background image for your LaunchScreen.storyboard (for iOS 8, 9 amd 10).\n\n* **LaunchScreen.Center.imageset**: The resource that holds the centered image for your LaunchScreen.storyboard (for iOS 8, 9 amd 10).\n\n![Default asset catalog](../docs/img/launch-screen/ios/launch-screen-howto-001.png \"Default asset catalog\")\n\n### Customizing AppIcons\n+ Changing AppIcons: manual approach \n\t\nOpen **AppIcon.appiconset** and change the default icons images with your own using the proper resolution for each image (e.g., icon-29.png should be 29px x 29px; icon-29@2x should be 58px x 58px).\nIf your images have different file names then open Contents.json and change the key `filename` for each image.\n\n![App icons config.json](../docs/img/launch-screen/ios/launch-screen-howto-002.png \"App icons config.json\")\n\n+ Changing AppIcons: Xcode WYSIWYG approach\n\t\nDrag and drop your **Assets.xcassets** into Xcode (7.1 or newer version).\nIn the opened window choose **AppIcon** and add a proper image for each iOS version and device.\nClose Xcode and rebuild your NativeScript app to use the new AppIcons.\n\n![AppIcon setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-003.png \"AppIcon setup in Xcode]\")\n\n### Customizing launch images\n+ Manual approach \n\t\nOpen **LaunchImage.launchimage** and change the default launch images with your own using the proper resolution for each image (e.g., Default-568h@2x.png should be 640px x 1136px).\nIf your images have different file names then open Contents.json and change the key `filename` for each image.\n\n| Image Resolution | Image name                          |\n|------------------|-------------------------------------|\n| 320x480          | Default.png                         |\n| 640x960          | Default@2x.png                      |\n| 640x1136         | Default-568h@2x.png                 |\n| 750x1334         | Default-667h@2x.png                 |\n| 1242x2208        | Default-736h@3x.png                 |\n| 768x1024         | Default-Portrait.png                |\n| 1024x768         | Default-Landscape.png               |\n| 1536x2048        | Default-Portrait@2x.png             |\n| 2048x1536        | Default-Landscape@2x.png            |\n\n> **Note: ** For a better understanding of the supported image resolutions for the different iOS devices, refer to [iOS Human Interface Guidelines](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1)\nor check our reference table. \n\n+ Xcode WYSIWYG approach\n\t\nDrag and drop your **Assets.xcassets** into Xcode (7.1 or newer version).\nIn the opened window choose **LaunchImage** and add the proper image for each iOS version and device.\nClose Xcode and rebuild your NativeScript app to use the new launch images.\n\n![LaunchImages setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-004.png \"LaunchImages setup in Xcode\")\n\n> **Important:** Make sure you have provided all required images or your app wil be rejected from publishing in the App Store.\t \n\n\n### Customizing LaunchScreen.storyboard\n\nThe default template app in NativeScript comes with **LaunchScreen.storyboard**, which contains two image views.\nThe first one, named **LaunchScreen.AspectFill.imageset**, is used to visualize your background.\nThe second one, named **LaunchScreen.Center.imageset**, is used to visualize your centered logo.\nYour own storyboard can be customized to use your own logic with different images and styles.\nHowever, keep in mind that according to iOS Human Interface Guidelines, the LaunchScreen should be as light as possible\nwith minimal or no moving elements and text labels. It is meant to provide immediate UX rather than artistic presentation.\n\n![LaunchScreen setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-010.png \"LaunchScreen setup in Xcode\")\n\n#### Customizing LaunchScreen.AspectFill\n\n+ Manual approach \n\t\nOpen **LaunchScreen.AspectFill.imageset** and change the default LaunchScreen.AspectFill images with your own using the proper scale for each image (1x, 2x and 3x).\nAs this is an image that will be used in your LaunchScreen.storyboard, your actual resolution may vary depending on your design.\nThe default NativeScript template ships a LaunchScreen-AspectFill.png and LaunchScreen-AspectFill@2x.png used as a sample background.\nIf your images have different file names then open Contents.json and change the key `filename` for each image.\n\n> **Important:** After each file change in the **Assets.xcassets** folder you should rebuild your project and restart your emulator to avoid visualising cached images.\n\n+ Xcode WYSIWYG approach\n\t\nDrag and drop your **Assets.xcassets** into Xcode (7.1 or newer version).\nIn the opened window choose **LaunchScreen.AspectFill** and add the properly scaled image for each entry (1x, 2x and 3x).\nClose Xcode and rebuild your NativeScript app to use the new LaunchScreen.AspectFill.\n\n![LaunchScreen.AspectFill setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-008.png \"LaunchScreen.AspectFill setup in Xcode\")\n\n#### Customizing LaunchScreen.Center\n\n+ Manual approach \n\nOpen **LaunchScreen.Center.imageset** and change the default LaunchScreen.Center images with your own using the proper scale for each image (1x, 2x and 3x).\nAs this is an image that will be used in your LaunchScreen.storyboard, your actual resolution may vary depending on your design.\nThe default NativeScript template ships a LaunchScreen-Center.png and LaunchScreen-Center@2x.png used as a sample center logo image.\nIf your images have different file names then open Contents.json and change the key `filename` for each image.\n\n> **Important:** After each file change in the **Assets.xcassets** folder you should rebuild your project and restart your emulator to avoid visualising cached images.\n\n+ Xcode WYSIWYG approach\n\nDrag and drop your **Assets.xcassets** into Xcode (7.1 or newer version).\nIn the opened window choose **LaunchScreen.Center** and add the properly scaled image for each entry (1x, 2x and 3x).\nClose Xcode and rebuild your NativeScript app to use the new LaunchScreen.Center.\n\n![LaunchScreen.Center setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-009.png \"LaunchScreen.Center setup in Xcode\")\n","source":"core-concepts/creating-launch-screens-ios.md","raw":"---\ntitle: Creating Launch Screen and AppIcons for iOS\ndescription: How to set up and modify Launch Screen and AppIcons for iOS\nposition: 13\nslug: launch-screen-and-icons-ios\n---\n\n# Creating AppIcons and Launch Screens for iOS \n\nPublishing your iOS app is an essential step in the development process and in order for your iOS application \nto be published successfully in App Store, there are some requirements that need to be fulfilled. \nAs described in [iOS Human Interface Guidelines](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html) setting the following is mandatory:\n\n* App name\n* App icon\n* Launch image or files\n\nIn NativeScript, your application comes with predefined template settings and images for these steps.\nIn this article, we are going to introduce the workflow to create your own launch screens.\n\n## Setting launch screen and AppIcons\n\nSetting up launch screens depends on the version of iOS you are targeting.\nIn iOS 7 and lower, the approach for creating the launch screen is to use static image resources.\nThe drawback of this method is that the app developer will have to provide many different\nimages, each with different resolution for each iOS device. In iOS 8 and above, the approach is to create\na LaunchScreen.storyboard, which is much more powerful in terms of customization and is easier to maintain.\n\nThe default Hello-World project in NativeScript is provided with default settings that supports both \napproaches. When you build your app for devices with iOS lower then version 8, NativeScript will use the static images and when you use NativeScript to build your app for devices with iOS 8 and above, it will use the provided LaunchScreen.storyboard.\n\n### How to set your launch screen\n\nThe default template in NativeScript (created with `tns create myApp`) provides you with predefined \nAppIcons, launch images and a LaunchScreen.storyboard all with the NativeScript logo. \nTo modify that template and create your own launch screen using your own assets and design, you will need the following:\n\n* **app/App_Resources/iOS/Assets.xcassets**: The resource that holds your image asset catalogs (for AppIcons, LaunchImages and LaunchScreen).\n\n* **app/App_Resources/iOS/LaunchScreen.storyboard**: Your default storyboard used for your launch screen (used in iOS versions 8, 9 and 10).\n\n* **app/App_Resources/iOS/build.xcconfig**: The resource that holds the references to the assets catalogs which will be used \n(optional: modify only if you change the name convention or introduce a new image asset catalog).\n\n* Xcode 7.1 or newer version (optional: needed only if you prefer WYSIWYG workflow for changing your images).\n\nThe workflow for creating your own launch screen can be handled from Xcode or manually in the NativeScript enviroment. \nIn this article we are going to cover both the manual and the Xcode WYSIWYG approach.\n\nIn your **app/App_Resources/iOS/Assets.xcassets** you will find the following sub-folders:\n   \n* **AppIcon.appiconset**: The resource that holds the images for your AppIcons (all iOS versions).\n\n* **LaunchImage.launchimage**: The resource that holds the images for your launch screen images (for iOS 7 and lower versions).\n\n* **LaunchScreen.AspectFill.imageset**: The resource that holds the background image for your LaunchScreen.storyboard (for iOS 8, 9 amd 10).\n\n* **LaunchScreen.Center.imageset**: The resource that holds the centered image for your LaunchScreen.storyboard (for iOS 8, 9 amd 10).\n\n![Default asset catalog](../docs/img/launch-screen/ios/launch-screen-howto-001.png \"Default asset catalog\")\n\n### Customizing AppIcons\n+ Changing AppIcons: manual approach \n\t\nOpen **AppIcon.appiconset** and change the default icons images with your own using the proper resolution for each image (e.g., icon-29.png should be 29px x 29px; icon-29@2x should be 58px x 58px).\nIf your images have different file names then open Contents.json and change the key `filename` for each image.\n\n![App icons config.json](../docs/img/launch-screen/ios/launch-screen-howto-002.png \"App icons config.json\")\n\n+ Changing AppIcons: Xcode WYSIWYG approach\n\t\nDrag and drop your **Assets.xcassets** into Xcode (7.1 or newer version).\nIn the opened window choose **AppIcon** and add a proper image for each iOS version and device.\nClose Xcode and rebuild your NativeScript app to use the new AppIcons.\n\n![AppIcon setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-003.png \"AppIcon setup in Xcode]\")\n\n### Customizing launch images\n+ Manual approach \n\t\nOpen **LaunchImage.launchimage** and change the default launch images with your own using the proper resolution for each image (e.g., Default-568h@2x.png should be 640px x 1136px).\nIf your images have different file names then open Contents.json and change the key `filename` for each image.\n\n| Image Resolution | Image name                          |\n|------------------|-------------------------------------|\n| 320x480          | Default.png                         |\n| 640x960          | Default@2x.png                      |\n| 640x1136         | Default-568h@2x.png                 |\n| 750x1334         | Default-667h@2x.png                 |\n| 1242x2208        | Default-736h@3x.png                 |\n| 768x1024         | Default-Portrait.png                |\n| 1024x768         | Default-Landscape.png               |\n| 1536x2048        | Default-Portrait@2x.png             |\n| 2048x1536        | Default-Landscape@2x.png            |\n\n> **Note: ** For a better understanding of the supported image resolutions for the different iOS devices, refer to [iOS Human Interface Guidelines](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1)\nor check our reference table. \n\n+ Xcode WYSIWYG approach\n\t\nDrag and drop your **Assets.xcassets** into Xcode (7.1 or newer version).\nIn the opened window choose **LaunchImage** and add the proper image for each iOS version and device.\nClose Xcode and rebuild your NativeScript app to use the new launch images.\n\n![LaunchImages setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-004.png \"LaunchImages setup in Xcode\")\n\n> **Important:** Make sure you have provided all required images or your app wil be rejected from publishing in the App Store.\t \n\n\n### Customizing LaunchScreen.storyboard\n\nThe default template app in NativeScript comes with **LaunchScreen.storyboard**, which contains two image views.\nThe first one, named **LaunchScreen.AspectFill.imageset**, is used to visualize your background.\nThe second one, named **LaunchScreen.Center.imageset**, is used to visualize your centered logo.\nYour own storyboard can be customized to use your own logic with different images and styles.\nHowever, keep in mind that according to iOS Human Interface Guidelines, the LaunchScreen should be as light as possible\nwith minimal or no moving elements and text labels. It is meant to provide immediate UX rather than artistic presentation.\n\n![LaunchScreen setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-010.png \"LaunchScreen setup in Xcode\")\n\n#### Customizing LaunchScreen.AspectFill\n\n+ Manual approach \n\t\nOpen **LaunchScreen.AspectFill.imageset** and change the default LaunchScreen.AspectFill images with your own using the proper scale for each image (1x, 2x and 3x).\nAs this is an image that will be used in your LaunchScreen.storyboard, your actual resolution may vary depending on your design.\nThe default NativeScript template ships a LaunchScreen-AspectFill.png and LaunchScreen-AspectFill@2x.png used as a sample background.\nIf your images have different file names then open Contents.json and change the key `filename` for each image.\n\n> **Important:** After each file change in the **Assets.xcassets** folder you should rebuild your project and restart your emulator to avoid visualising cached images.\n\n+ Xcode WYSIWYG approach\n\t\nDrag and drop your **Assets.xcassets** into Xcode (7.1 or newer version).\nIn the opened window choose **LaunchScreen.AspectFill** and add the properly scaled image for each entry (1x, 2x and 3x).\nClose Xcode and rebuild your NativeScript app to use the new LaunchScreen.AspectFill.\n\n![LaunchScreen.AspectFill setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-008.png \"LaunchScreen.AspectFill setup in Xcode\")\n\n#### Customizing LaunchScreen.Center\n\n+ Manual approach \n\nOpen **LaunchScreen.Center.imageset** and change the default LaunchScreen.Center images with your own using the proper scale for each image (1x, 2x and 3x).\nAs this is an image that will be used in your LaunchScreen.storyboard, your actual resolution may vary depending on your design.\nThe default NativeScript template ships a LaunchScreen-Center.png and LaunchScreen-Center@2x.png used as a sample center logo image.\nIf your images have different file names then open Contents.json and change the key `filename` for each image.\n\n> **Important:** After each file change in the **Assets.xcassets** folder you should rebuild your project and restart your emulator to avoid visualising cached images.\n\n+ Xcode WYSIWYG approach\n\nDrag and drop your **Assets.xcassets** into Xcode (7.1 or newer version).\nIn the opened window choose **LaunchScreen.Center** and add the properly scaled image for each entry (1x, 2x and 3x).\nClose Xcode and rebuild your NativeScript app to use the new LaunchScreen.Center.\n\n![LaunchScreen.Center setup in Xcode](../docs/img/launch-screen/ios/launch-screen-howto-009.png \"LaunchScreen.Center setup in Xcode\")\n","date":"2016-08-26T21:05:52.870Z","updated":"2016-08-26T21:05:52.870Z","path":"core-concepts/creating-launch-screens-ios.html","comments":1,"layout":"page","_id":"cisn95c660006wsl0x89s21hv","content":"<h1 id=\"Creating-AppIcons-and-Launch-Screens-for-iOS\"><a href=\"#Creating-AppIcons-and-Launch-Screens-for-iOS\" class=\"headerlink\" title=\"Creating AppIcons and Launch Screens for iOS\"></a>Creating AppIcons and Launch Screens for iOS</h1><p>Publishing your iOS app is an essential step in the development process and in order for your iOS application \nto be published successfully in App Store, there are some requirements that need to be fulfilled. \nAs described in <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html\" target=\"_blank\" rel=\"external\">iOS Human Interface Guidelines</a> setting the following is mandatory:</p>\n<ul>\n<li>App name</li>\n<li>App icon</li>\n<li>Launch image or files</li>\n</ul>\n<p>In NativeScript, your application comes with predefined template settings and images for these steps.\nIn this article, we are going to introduce the workflow to create your own launch screens.</p>\n<h2 id=\"Setting-launch-screen-and-AppIcons\"><a href=\"#Setting-launch-screen-and-AppIcons\" class=\"headerlink\" title=\"Setting launch screen and AppIcons\"></a>Setting launch screen and AppIcons</h2><p>Setting up launch screens depends on the version of iOS you are targeting.\nIn iOS 7 and lower, the approach for creating the launch screen is to use static image resources.\nThe drawback of this method is that the app developer will have to provide many different\nimages, each with different resolution for each iOS device. In iOS 8 and above, the approach is to create\na LaunchScreen.storyboard, which is much more powerful in terms of customization and is easier to maintain.</p>\n<p>The default Hello-World project in NativeScript is provided with default settings that supports both \napproaches. When you build your app for devices with iOS lower then version 8, NativeScript will use the static images and when you use NativeScript to build your app for devices with iOS 8 and above, it will use the provided LaunchScreen.storyboard.</p>\n<h3 id=\"How-to-set-your-launch-screen\"><a href=\"#How-to-set-your-launch-screen\" class=\"headerlink\" title=\"How to set your launch screen\"></a>How to set your launch screen</h3><p>The default template in NativeScript (created with <code>tns create myApp</code>) provides you with predefined \nAppIcons, launch images and a LaunchScreen.storyboard all with the NativeScript logo. \nTo modify that template and create your own launch screen using your own assets and design, you will need the following:</p>\n<ul>\n<li><p><strong>app/App_Resources/iOS/Assets.xcassets</strong>: The resource that holds your image asset catalogs (for AppIcons, LaunchImages and LaunchScreen).</p>\n</li>\n<li><p><strong>app/App_Resources/iOS/LaunchScreen.storyboard</strong>: Your default storyboard used for your launch screen (used in iOS versions 8, 9 and 10).</p>\n</li>\n<li><p><strong>app/App_Resources/iOS/build.xcconfig</strong>: The resource that holds the references to the assets catalogs which will be used \n(optional: modify only if you change the name convention or introduce a new image asset catalog).</p>\n</li>\n<li><p>Xcode 7.1 or newer version (optional: needed only if you prefer WYSIWYG workflow for changing your images).</p>\n</li>\n</ul>\n<p>The workflow for creating your own launch screen can be handled from Xcode or manually in the NativeScript enviroment. \nIn this article we are going to cover both the manual and the Xcode WYSIWYG approach.</p>\n<p>In your <strong>app/App_Resources/iOS/Assets.xcassets</strong> you will find the following sub-folders:</p>\n<ul>\n<li><p><strong>AppIcon.appiconset</strong>: The resource that holds the images for your AppIcons (all iOS versions).</p>\n</li>\n<li><p><strong>LaunchImage.launchimage</strong>: The resource that holds the images for your launch screen images (for iOS 7 and lower versions).</p>\n</li>\n<li><p><strong>LaunchScreen.AspectFill.imageset</strong>: The resource that holds the background image for your LaunchScreen.storyboard (for iOS 8, 9 amd 10).</p>\n</li>\n<li><p><strong>LaunchScreen.Center.imageset</strong>: The resource that holds the centered image for your LaunchScreen.storyboard (for iOS 8, 9 amd 10).</p>\n</li>\n</ul>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-001.png\" alt=\"Default asset catalog\" title=\"Default asset catalog\"></p>\n<h3 id=\"Customizing-AppIcons\"><a href=\"#Customizing-AppIcons\" class=\"headerlink\" title=\"Customizing AppIcons\"></a>Customizing AppIcons</h3><ul>\n<li>Changing AppIcons: manual approach </li>\n</ul>\n<p>Open <strong>AppIcon.appiconset</strong> and change the default icons images with your own using the proper resolution for each image (e.g., icon-29.png should be 29px x 29px; icon-29@2x should be 58px x 58px).\nIf your images have different file names then open Contents.json and change the key <code>filename</code> for each image.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-002.png\" alt=\"App icons config.json\" title=\"App icons config.json\"></p>\n<ul>\n<li>Changing AppIcons: Xcode WYSIWYG approach</li>\n</ul>\n<p>Drag and drop your <strong>Assets.xcassets</strong> into Xcode (7.1 or newer version).\nIn the opened window choose <strong>AppIcon</strong> and add a proper image for each iOS version and device.\nClose Xcode and rebuild your NativeScript app to use the new AppIcons.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-003.png\" alt=\"AppIcon setup in Xcode\" title=\"AppIcon setup in Xcode]\"></p>\n<h3 id=\"Customizing-launch-images\"><a href=\"#Customizing-launch-images\" class=\"headerlink\" title=\"Customizing launch images\"></a>Customizing launch images</h3><ul>\n<li>Manual approach </li>\n</ul>\n<p>Open <strong>LaunchImage.launchimage</strong> and change the default launch images with your own using the proper resolution for each image (e.g., Default-568h@2x.png should be 640px x 1136px).\nIf your images have different file names then open Contents.json and change the key <code>filename</code> for each image.</p>\n<table>\n<thead>\n<tr>\n<th>Image Resolution</th>\n<th>Image name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>320x480</td>\n<td>Default.png</td>\n</tr>\n<tr>\n<td>640x960</td>\n<td>Default@2x.png</td>\n</tr>\n<tr>\n<td>640x1136</td>\n<td>Default-568h@2x.png</td>\n</tr>\n<tr>\n<td>750x1334</td>\n<td>Default-667h@2x.png</td>\n</tr>\n<tr>\n<td>1242x2208</td>\n<td>Default-736h@3x.png</td>\n</tr>\n<tr>\n<td>768x1024</td>\n<td>Default-Portrait.png</td>\n</tr>\n<tr>\n<td>1024x768</td>\n<td>Default-Landscape.png</td>\n</tr>\n<tr>\n<td>1536x2048</td>\n<td>Default-Portrait@2x.png</td>\n</tr>\n<tr>\n<td>2048x1536</td>\n<td>Default-Landscape@2x.png</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Note: </strong> For a better understanding of the supported image resolutions for the different iOS devices, refer to <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1\" target=\"_blank\" rel=\"external\">iOS Human Interface Guidelines</a>\nor check our reference table. </p>\n</blockquote>\n<ul>\n<li>Xcode WYSIWYG approach</li>\n</ul>\n<p>Drag and drop your <strong>Assets.xcassets</strong> into Xcode (7.1 or newer version).\nIn the opened window choose <strong>LaunchImage</strong> and add the proper image for each iOS version and device.\nClose Xcode and rebuild your NativeScript app to use the new launch images.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-004.png\" alt=\"LaunchImages setup in Xcode\" title=\"LaunchImages setup in Xcode\"></p>\n<blockquote>\n<p><strong>Important:</strong> Make sure you have provided all required images or your app wil be rejected from publishing in the App Store.     </p>\n</blockquote>\n<h3 id=\"Customizing-LaunchScreen-storyboard\"><a href=\"#Customizing-LaunchScreen-storyboard\" class=\"headerlink\" title=\"Customizing LaunchScreen.storyboard\"></a>Customizing LaunchScreen.storyboard</h3><p>The default template app in NativeScript comes with <strong>LaunchScreen.storyboard</strong>, which contains two image views.\nThe first one, named <strong>LaunchScreen.AspectFill.imageset</strong>, is used to visualize your background.\nThe second one, named <strong>LaunchScreen.Center.imageset</strong>, is used to visualize your centered logo.\nYour own storyboard can be customized to use your own logic with different images and styles.\nHowever, keep in mind that according to iOS Human Interface Guidelines, the LaunchScreen should be as light as possible\nwith minimal or no moving elements and text labels. It is meant to provide immediate UX rather than artistic presentation.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-010.png\" alt=\"LaunchScreen setup in Xcode\" title=\"LaunchScreen setup in Xcode\"></p>\n<h4 id=\"Customizing-LaunchScreen-AspectFill\"><a href=\"#Customizing-LaunchScreen-AspectFill\" class=\"headerlink\" title=\"Customizing LaunchScreen.AspectFill\"></a>Customizing LaunchScreen.AspectFill</h4><ul>\n<li>Manual approach </li>\n</ul>\n<p>Open <strong>LaunchScreen.AspectFill.imageset</strong> and change the default LaunchScreen.AspectFill images with your own using the proper scale for each image (1x, 2x and 3x).\nAs this is an image that will be used in your LaunchScreen.storyboard, your actual resolution may vary depending on your design.\nThe default NativeScript template ships a LaunchScreen-AspectFill.png and LaunchScreen-AspectFill@2x.png used as a sample background.\nIf your images have different file names then open Contents.json and change the key <code>filename</code> for each image.</p>\n<blockquote>\n<p><strong>Important:</strong> After each file change in the <strong>Assets.xcassets</strong> folder you should rebuild your project and restart your emulator to avoid visualising cached images.</p>\n</blockquote>\n<ul>\n<li>Xcode WYSIWYG approach</li>\n</ul>\n<p>Drag and drop your <strong>Assets.xcassets</strong> into Xcode (7.1 or newer version).\nIn the opened window choose <strong>LaunchScreen.AspectFill</strong> and add the properly scaled image for each entry (1x, 2x and 3x).\nClose Xcode and rebuild your NativeScript app to use the new LaunchScreen.AspectFill.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-008.png\" alt=\"LaunchScreen.AspectFill setup in Xcode\" title=\"LaunchScreen.AspectFill setup in Xcode\"></p>\n<h4 id=\"Customizing-LaunchScreen-Center\"><a href=\"#Customizing-LaunchScreen-Center\" class=\"headerlink\" title=\"Customizing LaunchScreen.Center\"></a>Customizing LaunchScreen.Center</h4><ul>\n<li>Manual approach </li>\n</ul>\n<p>Open <strong>LaunchScreen.Center.imageset</strong> and change the default LaunchScreen.Center images with your own using the proper scale for each image (1x, 2x and 3x).\nAs this is an image that will be used in your LaunchScreen.storyboard, your actual resolution may vary depending on your design.\nThe default NativeScript template ships a LaunchScreen-Center.png and LaunchScreen-Center@2x.png used as a sample center logo image.\nIf your images have different file names then open Contents.json and change the key <code>filename</code> for each image.</p>\n<blockquote>\n<p><strong>Important:</strong> After each file change in the <strong>Assets.xcassets</strong> folder you should rebuild your project and restart your emulator to avoid visualising cached images.</p>\n</blockquote>\n<ul>\n<li>Xcode WYSIWYG approach</li>\n</ul>\n<p>Drag and drop your <strong>Assets.xcassets</strong> into Xcode (7.1 or newer version).\nIn the opened window choose <strong>LaunchScreen.Center</strong> and add the properly scaled image for each entry (1x, 2x and 3x).\nClose Xcode and rebuild your NativeScript app to use the new LaunchScreen.Center.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-009.png\" alt=\"LaunchScreen.Center setup in Xcode\" title=\"LaunchScreen.Center setup in Xcode\"></p>\n","excerpt":"","more":"<h1 id=\"Creating-AppIcons-and-Launch-Screens-for-iOS\"><a href=\"#Creating-AppIcons-and-Launch-Screens-for-iOS\" class=\"headerlink\" title=\"Creating AppIcons and Launch Screens for iOS\"></a>Creating AppIcons and Launch Screens for iOS</h1><p>Publishing your iOS app is an essential step in the development process and in order for your iOS application \nto be published successfully in App Store, there are some requirements that need to be fulfilled. \nAs described in <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html\">iOS Human Interface Guidelines</a> setting the following is mandatory:</p>\n<ul>\n<li>App name</li>\n<li>App icon</li>\n<li>Launch image or files</li>\n</ul>\n<p>In NativeScript, your application comes with predefined template settings and images for these steps.\nIn this article, we are going to introduce the workflow to create your own launch screens.</p>\n<h2 id=\"Setting-launch-screen-and-AppIcons\"><a href=\"#Setting-launch-screen-and-AppIcons\" class=\"headerlink\" title=\"Setting launch screen and AppIcons\"></a>Setting launch screen and AppIcons</h2><p>Setting up launch screens depends on the version of iOS you are targeting.\nIn iOS 7 and lower, the approach for creating the launch screen is to use static image resources.\nThe drawback of this method is that the app developer will have to provide many different\nimages, each with different resolution for each iOS device. In iOS 8 and above, the approach is to create\na LaunchScreen.storyboard, which is much more powerful in terms of customization and is easier to maintain.</p>\n<p>The default Hello-World project in NativeScript is provided with default settings that supports both \napproaches. When you build your app for devices with iOS lower then version 8, NativeScript will use the static images and when you use NativeScript to build your app for devices with iOS 8 and above, it will use the provided LaunchScreen.storyboard.</p>\n<h3 id=\"How-to-set-your-launch-screen\"><a href=\"#How-to-set-your-launch-screen\" class=\"headerlink\" title=\"How to set your launch screen\"></a>How to set your launch screen</h3><p>The default template in NativeScript (created with <code>tns create myApp</code>) provides you with predefined \nAppIcons, launch images and a LaunchScreen.storyboard all with the NativeScript logo. \nTo modify that template and create your own launch screen using your own assets and design, you will need the following:</p>\n<ul>\n<li><p><strong>app/App_Resources/iOS/Assets.xcassets</strong>: The resource that holds your image asset catalogs (for AppIcons, LaunchImages and LaunchScreen).</p>\n</li>\n<li><p><strong>app/App_Resources/iOS/LaunchScreen.storyboard</strong>: Your default storyboard used for your launch screen (used in iOS versions 8, 9 and 10).</p>\n</li>\n<li><p><strong>app/App_Resources/iOS/build.xcconfig</strong>: The resource that holds the references to the assets catalogs which will be used \n(optional: modify only if you change the name convention or introduce a new image asset catalog).</p>\n</li>\n<li><p>Xcode 7.1 or newer version (optional: needed only if you prefer WYSIWYG workflow for changing your images).</p>\n</li>\n</ul>\n<p>The workflow for creating your own launch screen can be handled from Xcode or manually in the NativeScript enviroment. \nIn this article we are going to cover both the manual and the Xcode WYSIWYG approach.</p>\n<p>In your <strong>app/App_Resources/iOS/Assets.xcassets</strong> you will find the following sub-folders:</p>\n<ul>\n<li><p><strong>AppIcon.appiconset</strong>: The resource that holds the images for your AppIcons (all iOS versions).</p>\n</li>\n<li><p><strong>LaunchImage.launchimage</strong>: The resource that holds the images for your launch screen images (for iOS 7 and lower versions).</p>\n</li>\n<li><p><strong>LaunchScreen.AspectFill.imageset</strong>: The resource that holds the background image for your LaunchScreen.storyboard (for iOS 8, 9 amd 10).</p>\n</li>\n<li><p><strong>LaunchScreen.Center.imageset</strong>: The resource that holds the centered image for your LaunchScreen.storyboard (for iOS 8, 9 amd 10).</p>\n</li>\n</ul>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-001.png\" alt=\"Default asset catalog\" title=\"Default asset catalog\"></p>\n<h3 id=\"Customizing-AppIcons\"><a href=\"#Customizing-AppIcons\" class=\"headerlink\" title=\"Customizing AppIcons\"></a>Customizing AppIcons</h3><ul>\n<li>Changing AppIcons: manual approach </li>\n</ul>\n<p>Open <strong>AppIcon.appiconset</strong> and change the default icons images with your own using the proper resolution for each image (e.g., icon-29.png should be 29px x 29px; icon-29@2x should be 58px x 58px).\nIf your images have different file names then open Contents.json and change the key <code>filename</code> for each image.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-002.png\" alt=\"App icons config.json\" title=\"App icons config.json\"></p>\n<ul>\n<li>Changing AppIcons: Xcode WYSIWYG approach</li>\n</ul>\n<p>Drag and drop your <strong>Assets.xcassets</strong> into Xcode (7.1 or newer version).\nIn the opened window choose <strong>AppIcon</strong> and add a proper image for each iOS version and device.\nClose Xcode and rebuild your NativeScript app to use the new AppIcons.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-003.png\" alt=\"AppIcon setup in Xcode\" title=\"AppIcon setup in Xcode]\"></p>\n<h3 id=\"Customizing-launch-images\"><a href=\"#Customizing-launch-images\" class=\"headerlink\" title=\"Customizing launch images\"></a>Customizing launch images</h3><ul>\n<li>Manual approach </li>\n</ul>\n<p>Open <strong>LaunchImage.launchimage</strong> and change the default launch images with your own using the proper resolution for each image (e.g., Default-568h@2x.png should be 640px x 1136px).\nIf your images have different file names then open Contents.json and change the key <code>filename</code> for each image.</p>\n<table>\n<thead>\n<tr>\n<th>Image Resolution</th>\n<th>Image name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>320x480</td>\n<td>Default.png</td>\n</tr>\n<tr>\n<td>640x960</td>\n<td>Default@2x.png</td>\n</tr>\n<tr>\n<td>640x1136</td>\n<td>Default-568h@2x.png</td>\n</tr>\n<tr>\n<td>750x1334</td>\n<td>Default-667h@2x.png</td>\n</tr>\n<tr>\n<td>1242x2208</td>\n<td>Default-736h@3x.png</td>\n</tr>\n<tr>\n<td>768x1024</td>\n<td>Default-Portrait.png</td>\n</tr>\n<tr>\n<td>1024x768</td>\n<td>Default-Landscape.png</td>\n</tr>\n<tr>\n<td>1536x2048</td>\n<td>Default-Portrait@2x.png</td>\n</tr>\n<tr>\n<td>2048x1536</td>\n<td>Default-Landscape@2x.png</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Note: </strong> For a better understanding of the supported image resolutions for the different iOS devices, refer to <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1\">iOS Human Interface Guidelines</a>\nor check our reference table. </p>\n</blockquote>\n<ul>\n<li>Xcode WYSIWYG approach</li>\n</ul>\n<p>Drag and drop your <strong>Assets.xcassets</strong> into Xcode (7.1 or newer version).\nIn the opened window choose <strong>LaunchImage</strong> and add the proper image for each iOS version and device.\nClose Xcode and rebuild your NativeScript app to use the new launch images.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-004.png\" alt=\"LaunchImages setup in Xcode\" title=\"LaunchImages setup in Xcode\"></p>\n<blockquote>\n<p><strong>Important:</strong> Make sure you have provided all required images or your app wil be rejected from publishing in the App Store.     </p>\n</blockquote>\n<h3 id=\"Customizing-LaunchScreen-storyboard\"><a href=\"#Customizing-LaunchScreen-storyboard\" class=\"headerlink\" title=\"Customizing LaunchScreen.storyboard\"></a>Customizing LaunchScreen.storyboard</h3><p>The default template app in NativeScript comes with <strong>LaunchScreen.storyboard</strong>, which contains two image views.\nThe first one, named <strong>LaunchScreen.AspectFill.imageset</strong>, is used to visualize your background.\nThe second one, named <strong>LaunchScreen.Center.imageset</strong>, is used to visualize your centered logo.\nYour own storyboard can be customized to use your own logic with different images and styles.\nHowever, keep in mind that according to iOS Human Interface Guidelines, the LaunchScreen should be as light as possible\nwith minimal or no moving elements and text labels. It is meant to provide immediate UX rather than artistic presentation.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-010.png\" alt=\"LaunchScreen setup in Xcode\" title=\"LaunchScreen setup in Xcode\"></p>\n<h4 id=\"Customizing-LaunchScreen-AspectFill\"><a href=\"#Customizing-LaunchScreen-AspectFill\" class=\"headerlink\" title=\"Customizing LaunchScreen.AspectFill\"></a>Customizing LaunchScreen.AspectFill</h4><ul>\n<li>Manual approach </li>\n</ul>\n<p>Open <strong>LaunchScreen.AspectFill.imageset</strong> and change the default LaunchScreen.AspectFill images with your own using the proper scale for each image (1x, 2x and 3x).\nAs this is an image that will be used in your LaunchScreen.storyboard, your actual resolution may vary depending on your design.\nThe default NativeScript template ships a LaunchScreen-AspectFill.png and LaunchScreen-AspectFill@2x.png used as a sample background.\nIf your images have different file names then open Contents.json and change the key <code>filename</code> for each image.</p>\n<blockquote>\n<p><strong>Important:</strong> After each file change in the <strong>Assets.xcassets</strong> folder you should rebuild your project and restart your emulator to avoid visualising cached images.</p>\n</blockquote>\n<ul>\n<li>Xcode WYSIWYG approach</li>\n</ul>\n<p>Drag and drop your <strong>Assets.xcassets</strong> into Xcode (7.1 or newer version).\nIn the opened window choose <strong>LaunchScreen.AspectFill</strong> and add the properly scaled image for each entry (1x, 2x and 3x).\nClose Xcode and rebuild your NativeScript app to use the new LaunchScreen.AspectFill.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-008.png\" alt=\"LaunchScreen.AspectFill setup in Xcode\" title=\"LaunchScreen.AspectFill setup in Xcode\"></p>\n<h4 id=\"Customizing-LaunchScreen-Center\"><a href=\"#Customizing-LaunchScreen-Center\" class=\"headerlink\" title=\"Customizing LaunchScreen.Center\"></a>Customizing LaunchScreen.Center</h4><ul>\n<li>Manual approach </li>\n</ul>\n<p>Open <strong>LaunchScreen.Center.imageset</strong> and change the default LaunchScreen.Center images with your own using the proper scale for each image (1x, 2x and 3x).\nAs this is an image that will be used in your LaunchScreen.storyboard, your actual resolution may vary depending on your design.\nThe default NativeScript template ships a LaunchScreen-Center.png and LaunchScreen-Center@2x.png used as a sample center logo image.\nIf your images have different file names then open Contents.json and change the key <code>filename</code> for each image.</p>\n<blockquote>\n<p><strong>Important:</strong> After each file change in the <strong>Assets.xcassets</strong> folder you should rebuild your project and restart your emulator to avoid visualising cached images.</p>\n</blockquote>\n<ul>\n<li>Xcode WYSIWYG approach</li>\n</ul>\n<p>Drag and drop your <strong>Assets.xcassets</strong> into Xcode (7.1 or newer version).\nIn the opened window choose <strong>LaunchScreen.Center</strong> and add the properly scaled image for each entry (1x, 2x and 3x).\nClose Xcode and rebuild your NativeScript app to use the new LaunchScreen.Center.</p>\n<p><img src=\"../docs/img/launch-screen/ios/launch-screen-howto-009.png\" alt=\"LaunchScreen.Center setup in Xcode\" title=\"LaunchScreen.Center setup in Xcode\"></p>\n"},{"title":"Application Architecture","description":"Learn the basic application structure of NativeScript apps and how to navigate inside your app.","position":1,"slug":"architecture","previous_url":"/navigation","environment":"nativescript","_content":"\n# Architecture and Navigation\n\nNativeScript apps consist of pages that represent the separate application screens. Pages are instances of the [`page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) class of the [`Page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) module. To navigate between pages, you can use the methods of the [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) class of the [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) module.\n\n> **TIP:** Instead of multiple pages, you can have a single page with a [tab view](http://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabview.html) and different user interfaces for each tab.\n\n\n* [Page management](#page-management)\n    * [Define page](#define-page)\n    * [Set home page](#set-home-page)\n* [Navigation](#navigation)\n    * [The topmost frame](#the-topmost-frame)\n    * [Navigate by page name](#navigate-by-page-name)\n    * [Navigate using a function](#navigate-using-a-function)\n    * [Navigate and pass context](#navigate-and-pass-context)\n    * [Navigate without history](#navigate-without-history)\n    * [Clear history](#clear-history)\n    * [Navigation transitions](#navigation-transitions)\n    * [Navigate back](#navigate-back)\n    * [Modal pages](#modal-pages)\n* [Supporting multiple screens](#supporting-multiple-screens)\n    * [Screen size qualifiers](#screen-size-qualifiers)\n    * [Platform qualifiers](#platform-qualifiers)\n    * [Orientation qualifiers](#orientation-qualifiers)\n\n## Page management\n\n### Define page\n\nPages represent the separate screens of your application. Each page is an instance of the [`page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) class of the [`Page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) module. Each class instance inherits the [`content`](http://docs.nativescript.org/api-reference/classes/_ui_content_view_.contentview.html) property which holds the root visual element of the UI.\n\nNativeScript provides two approaches to instantiating your pages.\n\n**Create a page in XML**\n\nYou can define the UI declaration and the code for the page separately.\n\nTo apply this approach, create a `XML` file for each page to hold the layout of the page. Thus your code will be in a `JS` or a `TS` file. The names of the `XML` and the `JS` or `TS` file must match.\n\n### Example 1:  Create page with XML.\n``` XML\n<!-- main-page.xml-->\n<Page loaded=\"onPageLoaded\">\n  <Label text=\"Hello, world!\"/>\n</Page>\n```\n``` JavaScript\n// main-page.js\nfunction onPageLoaded(args) {\n    console.log(\"Page Loaded\");\n}\nexports.onPageLoaded = onPageLoaded;\n```\n``` TypeScript\n// main-page.ts\nimport observableModule = require(\"data/observable\");\n\nexport function onPageLoaded(args: observableModule.EventData) {\n    console.log(\"Page Loaded\");\n}\n```\n**Create a page in code**\n\nTo apply this approach, you need to create a function named `createPage` that will return an instance of your page. NativeScript considers `createPage` a factory function.\n\n### Example 2:  Create page via code.\n``` JavaScript\nvar pagesModule = require(\"ui/page\");\nvar labelModule = require(\"ui/label\");\nfunction createPage() {\n    var label = new labelModule.Label();\n    label.text = \"Hello, world!\";\n    var page = new pagesModule.Page();\n    page.content = label;\n    return page;\n}\nexports.createPage = createPage;\n```\n``` TypeScript\nimport pagesModule = require(\"ui/page\");\nimport labelModule = require(\"ui/label\");\n\nexport function createPage() {\n    var label = new labelModule.Label();\n    label.text = \"Hello, world!\";\n    var page = new pagesModule.Page();\n    page.content = label;\n    return page;\n}\n```\n\n### Set home page\n\nEach application must have a single entry point - the home page.\n\nTo load the home page for your app, you need to pass `NavigationEntry` with the desired `moduleName` to the start() method.  NativeScript looks for an XML file with the specified name, parses it and draws the UI described in the file. Afterwards, if NativeScript finds a `JS` or a `TS` file with the same name, it executes the business logic in the file.\n\n``` JavaScript\nvar application = require(\"application\");\napplication.start({ moduleName: \"main-page\" });\n```\n``` TypeScript\nimport application = require(\"application\");\napplication.start({ moduleName: \"main-page\" });\n```\n\n## Navigation\n\nThe [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) class represents the logical unit that is responsible for navigation between different pages. Typically, each app has one frame at the root level - the topmost frame.\n\nTo navigate between pages, you can use the [`navigate`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) method of the topmost frame instance.\n\nIn addition, each `Page` instance carries information about the frame object which navigated to it in the `frame` property. This lets you navigate with the `frame` property as well. \n\n\n### The topmost frame\n\nThe topmost frame is the root-level container for your app's UI and you can use it to navigate inside of your app. You can get a reference to this frame by using the `topmost()` method of the Frame module.\n\n\n``` JavaScript\nvar frameModule = require(\"ui/frame\");\nvar topmost = frameModule.topmost();\n```\n``` TypeScript\nimport frameModule = require(\"ui/frame\");\nvar topmost = frameModule.topmost();\n```\n\nThere are several ways to perform navigation; which one you use depends on the needs of your app.\n\n\n### Navigate by page name\n\nPerhaps the simplest way to navigate is by specifying the file name of the page to which you want to navigate.\n\n``` JavaScript\ntopmost.navigate(\"details-page\");\n```\n``` TypeScript\ntopmost.navigate(\"details-page\");\n```\n\n### Navigate using a function\n\nA more dynamic way of navigating can be done by providing a function that returns the instance of the page to which you want to navigate.\n\n### Example 3:  How to navigate to a page dynamically created via code.\n``` JavaScript\nvar factoryFunc = function () {\n    var label = new labelModule.Label();\n    label.text = \"Hello, world!\";\n    var page = new pagesModule.Page();\n    page.content = label;\n    return page;\n};\ntopmost.navigate(factoryFunc);\n```\n``` TypeScript\nvar topmost = frameModule.topmost();\nvar factoryFunc = function () {\n    var label = new labelModule.Label();\n    label.text = \"Hello, world!\";\n    var page = new pagesModule.Page();\n    page.content = label;\n    return page;\n};\ntopmost.navigate(factoryFunc);\n```\n\n### Navigate and pass context\n\nWhen you navigate to another page, you can pass context to the page with a [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html) object. This approach provides finer control over navigation compared to other navigation approaches. For example, with `NavigationEntry` you can also animate the navigation.\n\n### Example 4:  How to pass content between different pages.\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"details-page\",\n    context: {info: \"something you want to pass to your page\"},\n    animated: false\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"details-page\",\n    context: {info: \"something you want to pass to your page\"},\n    animated: false\n};\ntopmost.navigate(navigationEntry);\n```\n\n#### Example\n\nIn this example, this master-details app consists of two pages. The main page contains a list of entities. The details page shows information about the currently selected entity.\n\nWhen you navigate to the details page, you transfer a primary key or ID information about the selected entity. \n### Example 5:  Navigate to the details page and pass the content for selected item.\n``` JavaScript\nfunction listViewItemTap(args) {\n    // Navigate to the details page with context set to the data item for specified index\n    frames.topmost().navigate({\n        moduleName: \"cuteness.io/details-page\",\n        context: appViewModel.redditItems.getItem(args.index)\n    });\n}\n```\n``` TypeScript\nexport function listViewItemTap(args: listView.ItemEventData) {\n    // Navigate to the details page with context set to the data item for specified index\n    frames.topmost().navigate({\n        moduleName: \"details-page\",\n        context: appViewModel.redditItems.getItem(args.index)\n    });\n}\n```\n\nWith the **onNavigatedTo** callback, you show the details for the entity.\n### Example 6:  Bind the content received from main page.\n``` JavaScript\nfunction pageNavigatedTo(args) {\n    var page = args.object;\n    page.bindingContext = page.navigationContext;\n}\n```\n``` TypeScript\n// Event handler for Page \"navigatedTo\" event attached in details-page.xml\nexport function pageNavigatedTo(args: observable.EventData) {\n    // Get the event sender\n    var page = <pages.Page>args.object;\n    page.bindingContext = page.navigationContext;\n}\n```\n\n### Navigate without history\n\nYou can navigate to a page without adding this navigation to the history. Set the `backstackVisible` property of the [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html) to `false`. If this property is set to false, then the Page will be displayed, but once navigated from it will not be able to be navigated back to.\n### Example 7:  Page navigation, without saving navigation history.__>\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"login-page\",\n    backstackVisible: false\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"login-page\",\n    backstackVisible: false\n};\ntopmost.navigate(navigationEntry);\n```\n\n### Clear history\n\nYou can navigate to a new page and decide to completely clear the entire navigation history. Set the `clearHistory` property of the [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html) to `true`. This will prevent the user from going back to pages previously visited. This is extremely useful if you have a multiple-page authentication process and you want to clear the authentication pages once the user is successfully logged in and redirected to the start page of the application.\n### Example 8:  Prevent user from going back using `clearHistory` property.\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    clearHistory: true\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    clearHistory: true\n};\ntopmost.navigate(navigationEntry);\n```\n\n### Navigation transitions\n\nBy default, all navigation will be animated and will use the default transition for the respective platform (UINavigationController transitions for iOS and Fragment transitions for Android). To change the transition type, set the `navigationTransition` property of the [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html) to an object conforming to the [`NavigationTransition`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html) interface.\n\n### Example 9:  Set up a transition property on page navigation.\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transition: {\n        name: \"slide\",\n        duration: 380,\n        curve: \"easeIn\"\n    }\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transition: {\n        name: \"slide\",\n        duration: 380,\n        curve: \"easeIn\"\n    }\n};\ntopmost.navigate(navigationEntry);\n```\n\nTo use one of the built-in transitions, set the `name` property of the [`NavigationTransition`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html) to one of the following:\n - curl (same as curlUp) (iOS only)\n - curlUp (iOS only)\n - curlDown (iOS only)\n - explode (Android Lollipop and later)\n - fade\n - flip (same as flipRight)\n - flipRight\n - flipLeft\n - slide (same as slideLeft)\n - slideLeft\n - slideRight\n - slideTop\n - slideBottom\n \nThe `duration` property lets you specify the transition duration in milliseconds. If left undefined, the default duration for each platform will be used &mdash; `350` ms for iOS and `300` ms for Android. \n \nThe `curve` property lets you specify the animation curve of the transition. Possible values are contained in the [AnimationCurve enumeration](http://docs.nativescript.org/api-reference/modules/_ui_enums_.animationcurve.html). Alternatively, you can pass an instance of type [`UIViewAnimationCurve`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/c/tdef/UIViewAnimationCurve) for iOS or [`android.animation.TimeInterpolator`](http://developer.android.com/reference/android/animation/TimeInterpolator.html) for Android. If left undefined, and `easeInOut` curve will be used. \n \nTo specify a default transition for **all** frame navigations, set the `transition` property of the frame you are navigating with.\n\n ``` JavaScript\ntopmost.transition = { name: \"flip\" };\ntopmost.navigate(\"main-page\");\n```\n``` TypeScript\ntopmost.transition = { name: \"flip\" };\ntopmost.navigate(\"main-page\");\n```\n\nTo specify a default transition for **all** navigations across the entire app, set the **static** `defaultTransition` property of the `Frame` class.\n\n ``` JavaScript\nvar frameModule = require(\"ui/frame\");\nframeModule.Frame.defaultTransition = { name: \"fade\" };\n```\n``` TypeScript\nimport frameModule = require(\"ui/frame\");\nframeModule.Frame.defaultTransition = { name: \"fade\" };\n```\n\nTo specify different transitions for the different platforms use the `transitioniOS` and `transitionAndroid` properties of the [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html).\n### Example 10:  Set up platform specific transitions.\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transitioniOS: {\n        name: \"curl\",\n        duration: 380,\n        curve: \"easeIn\"\n    },\n    transitionAndroid: {\n        name: \"explode\",\n        duration: 300,\n        curve: \"easeOut\"\n    }\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transitioniOS: {\n        name: \"curl\",\n        duration: 380,\n        curve: \"easeIn\"\n    },\n    transitionAndroid: {\n        name: \"explode\",\n        duration: 300,\n        curve: \"easeOut\"\n    }\n};\ntopmost.navigate(navigationEntry);\n```\n\n### Custom transitions\nInstead of setting the `name` property to one of the predefined transitions, you can set the `instance` property of the [`NavigationTransition`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html) to an instance of a class that inherits from [`Transition`](http://docs.nativescript.org/api-reference/classes/_ui_transition_.transition.html). You can create your own custom user-defined transition by writing platform-specific code to animate the transition. To do that you need to inherit from the [`Transition`](http://docs.nativescript.org/api-reference/classes/_ui_transition_.transition.html) class and override one method for each platform. Since there will be platform-specific code, you need to separate your code into two separate files. Here is an example of a custom transition that shrinks the disappearing page while expanding the appearing page by using a scale affine transform.\n\n### Example 11:  Create your own custom transition.\n`custom-transition.android.js/ts`\n``` JavaScript\nvar transition = require(\"ui/transition\");\nvar floatType = java.lang.Float.class.getField(\"TYPE\").get(null);\nvar CustomTransition = (function (_super) {\n    __extends(CustomTransition, _super);\n    function CustomTransition() {\n        _super.apply(this, arguments);\n    }\n    CustomTransition.prototype.createAndroidAnimator = function (transitionType) {\n        var scaleValues = java.lang.reflect.Array.newInstance(floatType, 2);\n        switch (transitionType) {\n            case transition.AndroidTransitionType.enter:\n            case transition.AndroidTransitionType.popEnter:\n                scaleValues[0] = 0;\n                scaleValues[1] = 1;\n                break;\n            case transition.AndroidTransitionType.exit:\n            case transition.AndroidTransitionType.popExit:\n                scaleValues[0] = 1;\n                scaleValues[1] = 0;\n                break;\n        }\n        var objectAnimators = java.lang.reflect.Array.newInstance(android.animation.Animator.class, 2);\n        objectAnimators[0] = android.animation.ObjectAnimator.ofFloat(null, \"scaleX\", scaleValues);\n        objectAnimators[1] = android.animation.ObjectAnimator.ofFloat(null, \"scaleY\", scaleValues);\n        var animatorSet = new android.animation.AnimatorSet();\n        animatorSet.playTogether(objectAnimators);\n        var duration = this.getDuration();\n        if (duration !== undefined) {\n            animatorSet.setDuration(duration);\n        }\n        animatorSet.setInterpolator(this.getCurve());\n        return animatorSet;\n    };\n    return CustomTransition;\n})(transition.Transition);\nexports.CustomTransition = CustomTransition;\n```\n``` TypeScript\nimport transition = require(\"ui/transition\");\nimport platform = require(\"platform\");\n\nvar floatType = java.lang.Float.class.getField(\"TYPE\").get(null);\n\nexport class CustomTransition extends transition.Transition {\n    public createAndroidAnimator(transitionType: string): android.animation.Animator {\n        var scaleValues = java.lang.reflect.Array.newInstance(floatType, 2);\n        switch (transitionType) {\n            case transition.AndroidTransitionType.enter:\n            case transition.AndroidTransitionType.popEnter:\n                scaleValues[0] = 0;\n                scaleValues[1] = 1;\n                break;\n            case transition.AndroidTransitionType.exit:\n            case transition.AndroidTransitionType.popExit:\n                scaleValues[0] = 1;\n                scaleValues[1] = 0;\n                break;\n        }\n        var objectAnimators = java.lang.reflect.Array.newInstance(android.animation.Animator.class, 2);\n        objectAnimators[0] = android.animation.ObjectAnimator.ofFloat(null, \"scaleX\", scaleValues);\n        objectAnimators[1] = android.animation.ObjectAnimator.ofFloat(null, \"scaleY\", scaleValues);\n        var animatorSet = new android.animation.AnimatorSet();\n        animatorSet.playTogether(objectAnimators);\n\n        var duration = this.getDuration();\n        if (duration !== undefined) {\n            animatorSet.setDuration(duration);\n        }\n        animatorSet.setInterpolator(this.getCurve());\n\n        return animatorSet;\n    }\n}\n```\n\n`custom-transition.ios.js/ts`\n``` JavaScript\nvar transition = require(\"ui/transition\");\nvar CustomTransition = (function (_super) {\n    __extends(CustomTransition, _super);\n    function CustomTransition() {\n        _super.apply(this, arguments);\n    }\n    CustomTransition.prototype.animateIOSTransition = function (containerView, fromView, toView, operation, completion) {\n        toView.transform = CGAffineTransformMakeScale(0, 0);\n        fromView.transform = CGAffineTransformIdentity;\n        switch (operation) {\n            case UINavigationControllerOperation.UINavigationControllerOperationPush:\n                containerView.insertSubviewAboveSubview(toView, fromView);\n                break;\n            case UINavigationControllerOperation.UINavigationControllerOperationPop:\n                containerView.insertSubviewBelowSubview(toView, fromView);\n                break;\n        }\n        var duration = this.getDuration();\n        var curve = this.getCurve();\n        UIView.animateWithDurationAnimationsCompletion(duration, function () {\n            UIView.setAnimationCurve(curve);\n            toView.transform = CGAffineTransformIdentity;\n            fromView.transform = CGAffineTransformMakeScale(0, 0);\n        }, completion);\n    };\n    return CustomTransition;\n})(transition.Transition);\nexports.CustomTransition = CustomTransition;\n```\n``` TypeScript\nimport transition = require(\"ui/transition\");\nimport platform = require(\"platform\");\n\nexport class CustomTransition extends transition.Transition {\n    public animateIOSTransition(containerView: UIView, fromView: UIView, toView: UIView, operation: UINavigationControllerOperation, completion: (finished: boolean) => void): void {\n        toView.transform = CGAffineTransformMakeScale(0, 0);\n        fromView.transform = CGAffineTransformIdentity;\n\n        switch (operation) {\n            case UINavigationControllerOperation.UINavigationControllerOperationPush:\n                containerView.insertSubviewAboveSubview(toView, fromView);\n                break;\n            case UINavigationControllerOperation.UINavigationControllerOperationPop:\n                containerView.insertSubviewBelowSubview(toView, fromView);\n                break;\n        }\n\n        var duration = this.getDuration();\n        var curve = this.getCurve();\n        UIView.animateWithDurationAnimationsCompletion(duration, () => {\n            UIView.setAnimationCurve(curve);\n            toView.transform = CGAffineTransformIdentity;\n            fromView.transform = CGAffineTransformMakeScale(0, 0);\n        }, completion);\n    }\n}\n```\n\nOnce you have `custom-transition.android.js/ts` and `custom-transition.ios.js/ts` created, you need to require the module and instantiate your CustomTransition, optionally passing a duration and curve to the constructor.\n\n### Example 12:  Require the module and instantiate your custom transition.\n```JavaScript\nvar customTransition = new customTransitionModule.CustomTransition(300, \"easeIn\");\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transition: {instance: customTransition}\n};\ntopmost.navigate(navigationEntry);\n```\n```TypeScript\nvar customTransition = new customTransitionModule.CustomTransition(300, \"easeIn\");\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transition: {instance: customTransition}\n};\ntopmost.navigate(navigationEntry);\n```\n\n### Navigate back\n\nThe topmost frame tracks the pages the user has visited in a navigation stack. To go back to a previous page, you need to use the **goBackMethod** of the topmost frame instance.\n\n``` JavaScript\ntopmost.goBack();\n```\n``` TypeScript\ntopmost.goBack();\n```\n\n### Modal pages\n\nUse the **showModal** method of the page class to show another page as a modal dialog. You must specify the location of the modal page module. You can provide a context and a callback function that will be called when the modal page is closed. You can also optionally specify whether to show the modal page in fullscreen or not. To close the modal page, you need to subscribe to its `shownModally` event and store a reference to a close callback function provided through the event arguments. Call this function when you are ready to close the modal page, optionally passing some results to the master page. Here is an example with two pages &mdash; a main page and a login page. The main page shows the login page modally; the user enters their username and password and when ready clicks the Login button. This closes the modal login page and returns the username/password to the main page which can then log the user in.\n\n> **TIP:** By design on iPhone, a modal page appears only in fullscreen.\n\n### Example 13:  Receive data from the modal page.\n**main-page**\n``` JavaScript\n var modalPageModule = \"./modal-views-demo/login-page\";\n var context = \"some custom context\";\n var fullscreen = true;\n mainPage.showModal(modalPageModule, context, function closeCallback(username, password) {\n     // Log the user in...\n }, fullscreen);\n```\n``` TypeScript\n var modalPageModule = \"./modal-views-demo/login-page\";\n var context = \"some custom context\";\n var fullscreen = true;\n mainPage.showModal(modalPageModule, context, function closeCallback (username: string, password: string) {\n     // Log the user in...\n }, fullscreen);\n```\n\n**login-page**\n``` JavaScript\nvar context;\nvar closeCallback;\nfunction onShownModally(args) {\n    context = args.context;\n    closeCallback = args.closeCallback;\n}\nexports.onShownModally = onShownModally;\nfunction onLoginButtonTap() {\n    closeCallback(usernameTextField.text, passwordTextField.text);\n}\nexports.onLoginButtonTap = onLoginButtonTap;\n```\n``` TypeScript\nvar context: any;\nvar closeCallback: Function;\nexport function onShownModally(args: pages.ShownModallyData) {\n    context = args.context;\n    closeCallback = args.closeCallback;\n}\n\nexport function onLoginButtonTap() {\n    closeCallback(usernameTextField.text, passwordTextField.text);\n}\n```\n\nYou can find the complete source code [here](https://github.com/NativeScript/NativeScript/tree/master/apps/modal-views-demo).\n\n## Supporting multiple screens\nMobile applications run on different devices with different screen sizes and form factors. NativeScript provides a way to define different files (.js, .css, .xml, etc.) to be loaded based on the screen's size, platform and orientation of the current device. The approach is somewhat similar to [multi screen support in Android](http://developer.android.com/guide/practices/screens_support.html). There is a set of *qualifiers* that can be added inside the file that will be respected when the file is loaded. Here is how the file should look:\n\n`<file-name>[.<qualifier>]*.<extension>`\n\nIn the next section we will go trough the list of supported qualifiers.\n\n### Screen size qualifiers\nAll the values in screen size qualifiers are in density independent pixels(dp) &mdash; meaning it corresponds to the physical dimensions of the screen. The assumptions is that there are ~160 dp per inch. For example, according to Android guidelines, if the device's smaller dimension is more than 600 dp (~3.75 inches) it is probably a tablet.\n\n* `minWH<X>` - The smaller dimension (width or height) should be at least **X** dp.\n* `minW<X>` - Width should be at least **X** dp.\n* `minH<X>` - Height should be at least **X** dp.\n\n*Example (separate XML file for tablet and phone)*:\n\n* `main-page.minWH600.xml` - XML file to be used for tablet devices.\n* `main-page.xml` - XML to be used for phones. \n\n### Platform qualifiers\n\n* `android` – Android platform\n* `ios` – iOS platform\n* `windows` (coming soon) – Windows platform\n\n*Example (platform specific files)*:\n\n* `app.android.css` - CSS styles for Android.\n* `app.ios.css` - CSS styles for iOS. \n\nThe platform qualifiers are executed during build time, while the others are executed during run time. For example, the app.ios.css file will not be taken in consideration when building for the Android platform. Contrary, the screen size qualifiers will be considered just after the application runs on a device with a specific screen size. \n\n### Orientation qualifiers\n* `land` - orientation is in landscape mode.\n* `port` - orientation is in portrait mode.\n\n> Note: All qualifiers are taken into account when the page is loading. However, changing the device orientation will not trigger page reload and will not change the current page.\n","source":"core-concepts/navigation.md","raw":"---\ntitle: Application Architecture\ndescription: Learn the basic application structure of NativeScript apps and how to navigate inside your app.\nposition: 1\nslug: architecture\nprevious_url: /navigation\nenvironment: nativescript\n---\n\n# Architecture and Navigation\n\nNativeScript apps consist of pages that represent the separate application screens. Pages are instances of the [`page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) class of the [`Page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) module. To navigate between pages, you can use the methods of the [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) class of the [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) module.\n\n> **TIP:** Instead of multiple pages, you can have a single page with a [tab view](http://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabview.html) and different user interfaces for each tab.\n\n\n* [Page management](#page-management)\n    * [Define page](#define-page)\n    * [Set home page](#set-home-page)\n* [Navigation](#navigation)\n    * [The topmost frame](#the-topmost-frame)\n    * [Navigate by page name](#navigate-by-page-name)\n    * [Navigate using a function](#navigate-using-a-function)\n    * [Navigate and pass context](#navigate-and-pass-context)\n    * [Navigate without history](#navigate-without-history)\n    * [Clear history](#clear-history)\n    * [Navigation transitions](#navigation-transitions)\n    * [Navigate back](#navigate-back)\n    * [Modal pages](#modal-pages)\n* [Supporting multiple screens](#supporting-multiple-screens)\n    * [Screen size qualifiers](#screen-size-qualifiers)\n    * [Platform qualifiers](#platform-qualifiers)\n    * [Orientation qualifiers](#orientation-qualifiers)\n\n## Page management\n\n### Define page\n\nPages represent the separate screens of your application. Each page is an instance of the [`page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) class of the [`Page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) module. Each class instance inherits the [`content`](http://docs.nativescript.org/api-reference/classes/_ui_content_view_.contentview.html) property which holds the root visual element of the UI.\n\nNativeScript provides two approaches to instantiating your pages.\n\n**Create a page in XML**\n\nYou can define the UI declaration and the code for the page separately.\n\nTo apply this approach, create a `XML` file for each page to hold the layout of the page. Thus your code will be in a `JS` or a `TS` file. The names of the `XML` and the `JS` or `TS` file must match.\n\n### Example 1:  Create page with XML.\n``` XML\n<!-- main-page.xml-->\n<Page loaded=\"onPageLoaded\">\n  <Label text=\"Hello, world!\"/>\n</Page>\n```\n``` JavaScript\n// main-page.js\nfunction onPageLoaded(args) {\n    console.log(\"Page Loaded\");\n}\nexports.onPageLoaded = onPageLoaded;\n```\n``` TypeScript\n// main-page.ts\nimport observableModule = require(\"data/observable\");\n\nexport function onPageLoaded(args: observableModule.EventData) {\n    console.log(\"Page Loaded\");\n}\n```\n**Create a page in code**\n\nTo apply this approach, you need to create a function named `createPage` that will return an instance of your page. NativeScript considers `createPage` a factory function.\n\n### Example 2:  Create page via code.\n``` JavaScript\nvar pagesModule = require(\"ui/page\");\nvar labelModule = require(\"ui/label\");\nfunction createPage() {\n    var label = new labelModule.Label();\n    label.text = \"Hello, world!\";\n    var page = new pagesModule.Page();\n    page.content = label;\n    return page;\n}\nexports.createPage = createPage;\n```\n``` TypeScript\nimport pagesModule = require(\"ui/page\");\nimport labelModule = require(\"ui/label\");\n\nexport function createPage() {\n    var label = new labelModule.Label();\n    label.text = \"Hello, world!\";\n    var page = new pagesModule.Page();\n    page.content = label;\n    return page;\n}\n```\n\n### Set home page\n\nEach application must have a single entry point - the home page.\n\nTo load the home page for your app, you need to pass `NavigationEntry` with the desired `moduleName` to the start() method.  NativeScript looks for an XML file with the specified name, parses it and draws the UI described in the file. Afterwards, if NativeScript finds a `JS` or a `TS` file with the same name, it executes the business logic in the file.\n\n``` JavaScript\nvar application = require(\"application\");\napplication.start({ moduleName: \"main-page\" });\n```\n``` TypeScript\nimport application = require(\"application\");\napplication.start({ moduleName: \"main-page\" });\n```\n\n## Navigation\n\nThe [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) class represents the logical unit that is responsible for navigation between different pages. Typically, each app has one frame at the root level - the topmost frame.\n\nTo navigate between pages, you can use the [`navigate`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) method of the topmost frame instance.\n\nIn addition, each `Page` instance carries information about the frame object which navigated to it in the `frame` property. This lets you navigate with the `frame` property as well. \n\n\n### The topmost frame\n\nThe topmost frame is the root-level container for your app's UI and you can use it to navigate inside of your app. You can get a reference to this frame by using the `topmost()` method of the Frame module.\n\n\n``` JavaScript\nvar frameModule = require(\"ui/frame\");\nvar topmost = frameModule.topmost();\n```\n``` TypeScript\nimport frameModule = require(\"ui/frame\");\nvar topmost = frameModule.topmost();\n```\n\nThere are several ways to perform navigation; which one you use depends on the needs of your app.\n\n\n### Navigate by page name\n\nPerhaps the simplest way to navigate is by specifying the file name of the page to which you want to navigate.\n\n``` JavaScript\ntopmost.navigate(\"details-page\");\n```\n``` TypeScript\ntopmost.navigate(\"details-page\");\n```\n\n### Navigate using a function\n\nA more dynamic way of navigating can be done by providing a function that returns the instance of the page to which you want to navigate.\n\n### Example 3:  How to navigate to a page dynamically created via code.\n``` JavaScript\nvar factoryFunc = function () {\n    var label = new labelModule.Label();\n    label.text = \"Hello, world!\";\n    var page = new pagesModule.Page();\n    page.content = label;\n    return page;\n};\ntopmost.navigate(factoryFunc);\n```\n``` TypeScript\nvar topmost = frameModule.topmost();\nvar factoryFunc = function () {\n    var label = new labelModule.Label();\n    label.text = \"Hello, world!\";\n    var page = new pagesModule.Page();\n    page.content = label;\n    return page;\n};\ntopmost.navigate(factoryFunc);\n```\n\n### Navigate and pass context\n\nWhen you navigate to another page, you can pass context to the page with a [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html) object. This approach provides finer control over navigation compared to other navigation approaches. For example, with `NavigationEntry` you can also animate the navigation.\n\n### Example 4:  How to pass content between different pages.\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"details-page\",\n    context: {info: \"something you want to pass to your page\"},\n    animated: false\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"details-page\",\n    context: {info: \"something you want to pass to your page\"},\n    animated: false\n};\ntopmost.navigate(navigationEntry);\n```\n\n#### Example\n\nIn this example, this master-details app consists of two pages. The main page contains a list of entities. The details page shows information about the currently selected entity.\n\nWhen you navigate to the details page, you transfer a primary key or ID information about the selected entity. \n### Example 5:  Navigate to the details page and pass the content for selected item.\n``` JavaScript\nfunction listViewItemTap(args) {\n    // Navigate to the details page with context set to the data item for specified index\n    frames.topmost().navigate({\n        moduleName: \"cuteness.io/details-page\",\n        context: appViewModel.redditItems.getItem(args.index)\n    });\n}\n```\n``` TypeScript\nexport function listViewItemTap(args: listView.ItemEventData) {\n    // Navigate to the details page with context set to the data item for specified index\n    frames.topmost().navigate({\n        moduleName: \"details-page\",\n        context: appViewModel.redditItems.getItem(args.index)\n    });\n}\n```\n\nWith the **onNavigatedTo** callback, you show the details for the entity.\n### Example 6:  Bind the content received from main page.\n``` JavaScript\nfunction pageNavigatedTo(args) {\n    var page = args.object;\n    page.bindingContext = page.navigationContext;\n}\n```\n``` TypeScript\n// Event handler for Page \"navigatedTo\" event attached in details-page.xml\nexport function pageNavigatedTo(args: observable.EventData) {\n    // Get the event sender\n    var page = <pages.Page>args.object;\n    page.bindingContext = page.navigationContext;\n}\n```\n\n### Navigate without history\n\nYou can navigate to a page without adding this navigation to the history. Set the `backstackVisible` property of the [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html) to `false`. If this property is set to false, then the Page will be displayed, but once navigated from it will not be able to be navigated back to.\n### Example 7:  Page navigation, without saving navigation history.__>\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"login-page\",\n    backstackVisible: false\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"login-page\",\n    backstackVisible: false\n};\ntopmost.navigate(navigationEntry);\n```\n\n### Clear history\n\nYou can navigate to a new page and decide to completely clear the entire navigation history. Set the `clearHistory` property of the [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html) to `true`. This will prevent the user from going back to pages previously visited. This is extremely useful if you have a multiple-page authentication process and you want to clear the authentication pages once the user is successfully logged in and redirected to the start page of the application.\n### Example 8:  Prevent user from going back using `clearHistory` property.\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    clearHistory: true\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    clearHistory: true\n};\ntopmost.navigate(navigationEntry);\n```\n\n### Navigation transitions\n\nBy default, all navigation will be animated and will use the default transition for the respective platform (UINavigationController transitions for iOS and Fragment transitions for Android). To change the transition type, set the `navigationTransition` property of the [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html) to an object conforming to the [`NavigationTransition`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html) interface.\n\n### Example 9:  Set up a transition property on page navigation.\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transition: {\n        name: \"slide\",\n        duration: 380,\n        curve: \"easeIn\"\n    }\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transition: {\n        name: \"slide\",\n        duration: 380,\n        curve: \"easeIn\"\n    }\n};\ntopmost.navigate(navigationEntry);\n```\n\nTo use one of the built-in transitions, set the `name` property of the [`NavigationTransition`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html) to one of the following:\n - curl (same as curlUp) (iOS only)\n - curlUp (iOS only)\n - curlDown (iOS only)\n - explode (Android Lollipop and later)\n - fade\n - flip (same as flipRight)\n - flipRight\n - flipLeft\n - slide (same as slideLeft)\n - slideLeft\n - slideRight\n - slideTop\n - slideBottom\n \nThe `duration` property lets you specify the transition duration in milliseconds. If left undefined, the default duration for each platform will be used &mdash; `350` ms for iOS and `300` ms for Android. \n \nThe `curve` property lets you specify the animation curve of the transition. Possible values are contained in the [AnimationCurve enumeration](http://docs.nativescript.org/api-reference/modules/_ui_enums_.animationcurve.html). Alternatively, you can pass an instance of type [`UIViewAnimationCurve`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/c/tdef/UIViewAnimationCurve) for iOS or [`android.animation.TimeInterpolator`](http://developer.android.com/reference/android/animation/TimeInterpolator.html) for Android. If left undefined, and `easeInOut` curve will be used. \n \nTo specify a default transition for **all** frame navigations, set the `transition` property of the frame you are navigating with.\n\n ``` JavaScript\ntopmost.transition = { name: \"flip\" };\ntopmost.navigate(\"main-page\");\n```\n``` TypeScript\ntopmost.transition = { name: \"flip\" };\ntopmost.navigate(\"main-page\");\n```\n\nTo specify a default transition for **all** navigations across the entire app, set the **static** `defaultTransition` property of the `Frame` class.\n\n ``` JavaScript\nvar frameModule = require(\"ui/frame\");\nframeModule.Frame.defaultTransition = { name: \"fade\" };\n```\n``` TypeScript\nimport frameModule = require(\"ui/frame\");\nframeModule.Frame.defaultTransition = { name: \"fade\" };\n```\n\nTo specify different transitions for the different platforms use the `transitioniOS` and `transitionAndroid` properties of the [`NavigationEntry`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html).\n### Example 10:  Set up platform specific transitions.\n``` JavaScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transitioniOS: {\n        name: \"curl\",\n        duration: 380,\n        curve: \"easeIn\"\n    },\n    transitionAndroid: {\n        name: \"explode\",\n        duration: 300,\n        curve: \"easeOut\"\n    }\n};\ntopmost.navigate(navigationEntry);\n```\n``` TypeScript\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transitioniOS: {\n        name: \"curl\",\n        duration: 380,\n        curve: \"easeIn\"\n    },\n    transitionAndroid: {\n        name: \"explode\",\n        duration: 300,\n        curve: \"easeOut\"\n    }\n};\ntopmost.navigate(navigationEntry);\n```\n\n### Custom transitions\nInstead of setting the `name` property to one of the predefined transitions, you can set the `instance` property of the [`NavigationTransition`](http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html) to an instance of a class that inherits from [`Transition`](http://docs.nativescript.org/api-reference/classes/_ui_transition_.transition.html). You can create your own custom user-defined transition by writing platform-specific code to animate the transition. To do that you need to inherit from the [`Transition`](http://docs.nativescript.org/api-reference/classes/_ui_transition_.transition.html) class and override one method for each platform. Since there will be platform-specific code, you need to separate your code into two separate files. Here is an example of a custom transition that shrinks the disappearing page while expanding the appearing page by using a scale affine transform.\n\n### Example 11:  Create your own custom transition.\n`custom-transition.android.js/ts`\n``` JavaScript\nvar transition = require(\"ui/transition\");\nvar floatType = java.lang.Float.class.getField(\"TYPE\").get(null);\nvar CustomTransition = (function (_super) {\n    __extends(CustomTransition, _super);\n    function CustomTransition() {\n        _super.apply(this, arguments);\n    }\n    CustomTransition.prototype.createAndroidAnimator = function (transitionType) {\n        var scaleValues = java.lang.reflect.Array.newInstance(floatType, 2);\n        switch (transitionType) {\n            case transition.AndroidTransitionType.enter:\n            case transition.AndroidTransitionType.popEnter:\n                scaleValues[0] = 0;\n                scaleValues[1] = 1;\n                break;\n            case transition.AndroidTransitionType.exit:\n            case transition.AndroidTransitionType.popExit:\n                scaleValues[0] = 1;\n                scaleValues[1] = 0;\n                break;\n        }\n        var objectAnimators = java.lang.reflect.Array.newInstance(android.animation.Animator.class, 2);\n        objectAnimators[0] = android.animation.ObjectAnimator.ofFloat(null, \"scaleX\", scaleValues);\n        objectAnimators[1] = android.animation.ObjectAnimator.ofFloat(null, \"scaleY\", scaleValues);\n        var animatorSet = new android.animation.AnimatorSet();\n        animatorSet.playTogether(objectAnimators);\n        var duration = this.getDuration();\n        if (duration !== undefined) {\n            animatorSet.setDuration(duration);\n        }\n        animatorSet.setInterpolator(this.getCurve());\n        return animatorSet;\n    };\n    return CustomTransition;\n})(transition.Transition);\nexports.CustomTransition = CustomTransition;\n```\n``` TypeScript\nimport transition = require(\"ui/transition\");\nimport platform = require(\"platform\");\n\nvar floatType = java.lang.Float.class.getField(\"TYPE\").get(null);\n\nexport class CustomTransition extends transition.Transition {\n    public createAndroidAnimator(transitionType: string): android.animation.Animator {\n        var scaleValues = java.lang.reflect.Array.newInstance(floatType, 2);\n        switch (transitionType) {\n            case transition.AndroidTransitionType.enter:\n            case transition.AndroidTransitionType.popEnter:\n                scaleValues[0] = 0;\n                scaleValues[1] = 1;\n                break;\n            case transition.AndroidTransitionType.exit:\n            case transition.AndroidTransitionType.popExit:\n                scaleValues[0] = 1;\n                scaleValues[1] = 0;\n                break;\n        }\n        var objectAnimators = java.lang.reflect.Array.newInstance(android.animation.Animator.class, 2);\n        objectAnimators[0] = android.animation.ObjectAnimator.ofFloat(null, \"scaleX\", scaleValues);\n        objectAnimators[1] = android.animation.ObjectAnimator.ofFloat(null, \"scaleY\", scaleValues);\n        var animatorSet = new android.animation.AnimatorSet();\n        animatorSet.playTogether(objectAnimators);\n\n        var duration = this.getDuration();\n        if (duration !== undefined) {\n            animatorSet.setDuration(duration);\n        }\n        animatorSet.setInterpolator(this.getCurve());\n\n        return animatorSet;\n    }\n}\n```\n\n`custom-transition.ios.js/ts`\n``` JavaScript\nvar transition = require(\"ui/transition\");\nvar CustomTransition = (function (_super) {\n    __extends(CustomTransition, _super);\n    function CustomTransition() {\n        _super.apply(this, arguments);\n    }\n    CustomTransition.prototype.animateIOSTransition = function (containerView, fromView, toView, operation, completion) {\n        toView.transform = CGAffineTransformMakeScale(0, 0);\n        fromView.transform = CGAffineTransformIdentity;\n        switch (operation) {\n            case UINavigationControllerOperation.UINavigationControllerOperationPush:\n                containerView.insertSubviewAboveSubview(toView, fromView);\n                break;\n            case UINavigationControllerOperation.UINavigationControllerOperationPop:\n                containerView.insertSubviewBelowSubview(toView, fromView);\n                break;\n        }\n        var duration = this.getDuration();\n        var curve = this.getCurve();\n        UIView.animateWithDurationAnimationsCompletion(duration, function () {\n            UIView.setAnimationCurve(curve);\n            toView.transform = CGAffineTransformIdentity;\n            fromView.transform = CGAffineTransformMakeScale(0, 0);\n        }, completion);\n    };\n    return CustomTransition;\n})(transition.Transition);\nexports.CustomTransition = CustomTransition;\n```\n``` TypeScript\nimport transition = require(\"ui/transition\");\nimport platform = require(\"platform\");\n\nexport class CustomTransition extends transition.Transition {\n    public animateIOSTransition(containerView: UIView, fromView: UIView, toView: UIView, operation: UINavigationControllerOperation, completion: (finished: boolean) => void): void {\n        toView.transform = CGAffineTransformMakeScale(0, 0);\n        fromView.transform = CGAffineTransformIdentity;\n\n        switch (operation) {\n            case UINavigationControllerOperation.UINavigationControllerOperationPush:\n                containerView.insertSubviewAboveSubview(toView, fromView);\n                break;\n            case UINavigationControllerOperation.UINavigationControllerOperationPop:\n                containerView.insertSubviewBelowSubview(toView, fromView);\n                break;\n        }\n\n        var duration = this.getDuration();\n        var curve = this.getCurve();\n        UIView.animateWithDurationAnimationsCompletion(duration, () => {\n            UIView.setAnimationCurve(curve);\n            toView.transform = CGAffineTransformIdentity;\n            fromView.transform = CGAffineTransformMakeScale(0, 0);\n        }, completion);\n    }\n}\n```\n\nOnce you have `custom-transition.android.js/ts` and `custom-transition.ios.js/ts` created, you need to require the module and instantiate your CustomTransition, optionally passing a duration and curve to the constructor.\n\n### Example 12:  Require the module and instantiate your custom transition.\n```JavaScript\nvar customTransition = new customTransitionModule.CustomTransition(300, \"easeIn\");\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transition: {instance: customTransition}\n};\ntopmost.navigate(navigationEntry);\n```\n```TypeScript\nvar customTransition = new customTransitionModule.CustomTransition(300, \"easeIn\");\nvar navigationEntry = {\n    moduleName: \"main-page\",\n    animated: true,\n    transition: {instance: customTransition}\n};\ntopmost.navigate(navigationEntry);\n```\n\n### Navigate back\n\nThe topmost frame tracks the pages the user has visited in a navigation stack. To go back to a previous page, you need to use the **goBackMethod** of the topmost frame instance.\n\n``` JavaScript\ntopmost.goBack();\n```\n``` TypeScript\ntopmost.goBack();\n```\n\n### Modal pages\n\nUse the **showModal** method of the page class to show another page as a modal dialog. You must specify the location of the modal page module. You can provide a context and a callback function that will be called when the modal page is closed. You can also optionally specify whether to show the modal page in fullscreen or not. To close the modal page, you need to subscribe to its `shownModally` event and store a reference to a close callback function provided through the event arguments. Call this function when you are ready to close the modal page, optionally passing some results to the master page. Here is an example with two pages &mdash; a main page and a login page. The main page shows the login page modally; the user enters their username and password and when ready clicks the Login button. This closes the modal login page and returns the username/password to the main page which can then log the user in.\n\n> **TIP:** By design on iPhone, a modal page appears only in fullscreen.\n\n### Example 13:  Receive data from the modal page.\n**main-page**\n``` JavaScript\n var modalPageModule = \"./modal-views-demo/login-page\";\n var context = \"some custom context\";\n var fullscreen = true;\n mainPage.showModal(modalPageModule, context, function closeCallback(username, password) {\n     // Log the user in...\n }, fullscreen);\n```\n``` TypeScript\n var modalPageModule = \"./modal-views-demo/login-page\";\n var context = \"some custom context\";\n var fullscreen = true;\n mainPage.showModal(modalPageModule, context, function closeCallback (username: string, password: string) {\n     // Log the user in...\n }, fullscreen);\n```\n\n**login-page**\n``` JavaScript\nvar context;\nvar closeCallback;\nfunction onShownModally(args) {\n    context = args.context;\n    closeCallback = args.closeCallback;\n}\nexports.onShownModally = onShownModally;\nfunction onLoginButtonTap() {\n    closeCallback(usernameTextField.text, passwordTextField.text);\n}\nexports.onLoginButtonTap = onLoginButtonTap;\n```\n``` TypeScript\nvar context: any;\nvar closeCallback: Function;\nexport function onShownModally(args: pages.ShownModallyData) {\n    context = args.context;\n    closeCallback = args.closeCallback;\n}\n\nexport function onLoginButtonTap() {\n    closeCallback(usernameTextField.text, passwordTextField.text);\n}\n```\n\nYou can find the complete source code [here](https://github.com/NativeScript/NativeScript/tree/master/apps/modal-views-demo).\n\n## Supporting multiple screens\nMobile applications run on different devices with different screen sizes and form factors. NativeScript provides a way to define different files (.js, .css, .xml, etc.) to be loaded based on the screen's size, platform and orientation of the current device. The approach is somewhat similar to [multi screen support in Android](http://developer.android.com/guide/practices/screens_support.html). There is a set of *qualifiers* that can be added inside the file that will be respected when the file is loaded. Here is how the file should look:\n\n`<file-name>[.<qualifier>]*.<extension>`\n\nIn the next section we will go trough the list of supported qualifiers.\n\n### Screen size qualifiers\nAll the values in screen size qualifiers are in density independent pixels(dp) &mdash; meaning it corresponds to the physical dimensions of the screen. The assumptions is that there are ~160 dp per inch. For example, according to Android guidelines, if the device's smaller dimension is more than 600 dp (~3.75 inches) it is probably a tablet.\n\n* `minWH<X>` - The smaller dimension (width or height) should be at least **X** dp.\n* `minW<X>` - Width should be at least **X** dp.\n* `minH<X>` - Height should be at least **X** dp.\n\n*Example (separate XML file for tablet and phone)*:\n\n* `main-page.minWH600.xml` - XML file to be used for tablet devices.\n* `main-page.xml` - XML to be used for phones. \n\n### Platform qualifiers\n\n* `android` – Android platform\n* `ios` – iOS platform\n* `windows` (coming soon) – Windows platform\n\n*Example (platform specific files)*:\n\n* `app.android.css` - CSS styles for Android.\n* `app.ios.css` - CSS styles for iOS. \n\nThe platform qualifiers are executed during build time, while the others are executed during run time. For example, the app.ios.css file will not be taken in consideration when building for the Android platform. Contrary, the screen size qualifiers will be considered just after the application runs on a device with a specific screen size. \n\n### Orientation qualifiers\n* `land` - orientation is in landscape mode.\n* `port` - orientation is in portrait mode.\n\n> Note: All qualifiers are taken into account when the page is loading. However, changing the device orientation will not trigger page reload and will not change the current page.\n","date":"2016-08-26T21:05:52.877Z","updated":"2016-08-26T21:05:52.877Z","path":"core-concepts/navigation.html","comments":1,"layout":"page","_id":"cisn95c6a0007wsl0hm7snwnw","content":"<h1 id=\"Architecture-and-Navigation\"><a href=\"#Architecture-and-Navigation\" class=\"headerlink\" title=\"Architecture and Navigation\"></a>Architecture and Navigation</h1><p>NativeScript apps consist of pages that represent the separate application screens. Pages are instances of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>page</code></a> class of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>Page</code></a> module. To navigate between pages, you can use the methods of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> class of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> module.</p>\n<blockquote>\n<p><strong>TIP:</strong> Instead of multiple pages, you can have a single page with a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabview.html\">tab view</a> and different user interfaces for each tab.</p>\n</blockquote>\n<ul>\n<li><a href=\"#page-management\">Page management</a><ul>\n<li><a href=\"#define-page\">Define page</a></li>\n<li><a href=\"#set-home-page\">Set home page</a></li>\n</ul>\n</li>\n<li><a href=\"#navigation\">Navigation</a><ul>\n<li><a href=\"#the-topmost-frame\">The topmost frame</a></li>\n<li><a href=\"#navigate-by-page-name\">Navigate by page name</a></li>\n<li><a href=\"#navigate-using-a-function\">Navigate using a function</a></li>\n<li><a href=\"#navigate-and-pass-context\">Navigate and pass context</a></li>\n<li><a href=\"#navigate-without-history\">Navigate without history</a></li>\n<li><a href=\"#clear-history\">Clear history</a></li>\n<li><a href=\"#navigation-transitions\">Navigation transitions</a></li>\n<li><a href=\"#navigate-back\">Navigate back</a></li>\n<li><a href=\"#modal-pages\">Modal pages</a></li>\n</ul>\n</li>\n<li><a href=\"#supporting-multiple-screens\">Supporting multiple screens</a><ul>\n<li><a href=\"#screen-size-qualifiers\">Screen size qualifiers</a></li>\n<li><a href=\"#platform-qualifiers\">Platform qualifiers</a></li>\n<li><a href=\"#orientation-qualifiers\">Orientation qualifiers</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Page-management\"><a href=\"#Page-management\" class=\"headerlink\" title=\"Page management\"></a>Page management</h2><h3 id=\"Define-page\"><a href=\"#Define-page\" class=\"headerlink\" title=\"Define page\"></a>Define page</h3><p>Pages represent the separate screens of your application. Each page is an instance of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>page</code></a> class of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>Page</code></a> module. Each class instance inherits the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_content_view_.contentview.html\"><code>content</code></a> property which holds the root visual element of the UI.</p>\n<p>NativeScript provides two approaches to instantiating your pages.</p>\n<p><strong>Create a page in XML</strong></p>\n<p>You can define the UI declaration and the code for the page separately.</p>\n<p>To apply this approach, create a <code>XML</code> file for each page to hold the layout of the page. Thus your code will be in a <code>JS</code> or a <code>TS</code> file. The names of the <code>XML</code> and the <code>JS</code> or <code>TS</code> file must match.</p>\n<h3 id=\"Example-1-Create-page-with-XML\"><a href=\"#Example-1-Create-page-with-XML\" class=\"headerlink\" title=\"Example 1:  Create page with XML.\"></a>Example 1:  Create page with XML.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- main-page.xml--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"onPageLoaded\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Hello, world!\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// main-page.js</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Page Loaded\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.onPageLoaded = onPageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// main-page.ts</span></div><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPageLoaded</span>(<span class=\"params\">args: observableModule.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Page Loaded\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Create a page in code</strong></p>\n<p>To apply this approach, you need to create a function named <code>createPage</code> that will return an instance of your page. NativeScript considers <code>createPage</code> a factory function.</p>\n<h3 id=\"Example-2-Create-page-via-code\"><a href=\"#Example-2-Create-page-via-code\" class=\"headerlink\" title=\"Example 2:  Create page via code.\"></a>Example 2:  Create page via code.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pagesModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> labelModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPage</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> labelModule.Label();</div><div class=\"line\">    label.text = <span class=\"string\">\"Hello, world!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pagesModule.Page();</div><div class=\"line\">    page.content = label;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.createPage = createPage;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pagesModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> labelModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPage</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> labelModule.Label();</div><div class=\"line\">    label.text = <span class=\"string\">\"Hello, world!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pagesModule.Page();</div><div class=\"line\">    page.content = label;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Set-home-page\"><a href=\"#Set-home-page\" class=\"headerlink\" title=\"Set home page\"></a>Set home page</h3><p>Each application must have a single entry point - the home page.</p>\n<p>To load the home page for your app, you need to pass <code>NavigationEntry</code> with the desired <code>moduleName</code> to the start() method.  NativeScript looks for an XML file with the specified name, parses it and draws the UI described in the file. Afterwards, if NativeScript finds a <code>JS</code> or a <code>TS</code> file with the same name, it executes the business logic in the file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"main-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"main-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a>Navigation</h2><p>The <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> class represents the logical unit that is responsible for navigation between different pages. Typically, each app has one frame at the root level - the topmost frame.</p>\n<p>To navigate between pages, you can use the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>navigate</code></a> method of the topmost frame instance.</p>\n<p>In addition, each <code>Page</code> instance carries information about the frame object which navigated to it in the <code>frame</code> property. This lets you navigate with the <code>frame</code> property as well. </p>\n<h3 id=\"The-topmost-frame\"><a href=\"#The-topmost-frame\" class=\"headerlink\" title=\"The topmost frame\"></a>The topmost frame</h3><p>The topmost frame is the root-level container for your app’s UI and you can use it to navigate inside of your app. You can get a reference to this frame by using the <code>topmost()</code> method of the Frame module.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> topmost = frameModule.topmost();</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> topmost = frameModule.topmost();</div></pre></td></tr></table></figure>\n<p>There are several ways to perform navigation; which one you use depends on the needs of your app.</p>\n<h3 id=\"Navigate-by-page-name\"><a href=\"#Navigate-by-page-name\" class=\"headerlink\" title=\"Navigate by page name\"></a>Navigate by page name</h3><p>Perhaps the simplest way to navigate is by specifying the file name of the page to which you want to navigate.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.navigate(<span class=\"string\">\"details-page\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.navigate(<span class=\"string\">\"details-page\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-using-a-function\"><a href=\"#Navigate-using-a-function\" class=\"headerlink\" title=\"Navigate using a function\"></a>Navigate using a function</h3><p>A more dynamic way of navigating can be done by providing a function that returns the instance of the page to which you want to navigate.</p>\n<h3 id=\"Example-3-How-to-navigate-to-a-page-dynamically-created-via-code\"><a href=\"#Example-3-How-to-navigate-to-a-page-dynamically-created-via-code\" class=\"headerlink\" title=\"Example 3:  How to navigate to a page dynamically created via code.\"></a>Example 3:  How to navigate to a page dynamically created via code.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> factoryFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> labelModule.Label();</div><div class=\"line\">    label.text = <span class=\"string\">\"Hello, world!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pagesModule.Page();</div><div class=\"line\">    page.content = label;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(factoryFunc);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> topmost = frameModule.topmost();</div><div class=\"line\"><span class=\"keyword\">var</span> factoryFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> labelModule.Label();</div><div class=\"line\">    label.text = <span class=\"string\">\"Hello, world!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pagesModule.Page();</div><div class=\"line\">    page.content = label;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(factoryFunc);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-and-pass-context\"><a href=\"#Navigate-and-pass-context\" class=\"headerlink\" title=\"Navigate and pass context\"></a>Navigate and pass context</h3><p>When you navigate to another page, you can pass context to the page with a <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a> object. This approach provides finer control over navigation compared to other navigation approaches. For example, with <code>NavigationEntry</code> you can also animate the navigation.</p>\n<h3 id=\"Example-4-How-to-pass-content-between-different-pages\"><a href=\"#Example-4-How-to-pass-content-between-different-pages\" class=\"headerlink\" title=\"Example 4:  How to pass content between different pages.\"></a>Example 4:  How to pass content between different pages.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"details-page\"</span>,</div><div class=\"line\">    context: &#123;info: <span class=\"string\">\"something you want to pass to your page\"</span>&#125;,</div><div class=\"line\">    animated: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"details-page\"</span>,</div><div class=\"line\">    context: &#123;info: <span class=\"string\">\"something you want to pass to your page\"</span>&#125;,</div><div class=\"line\">    animated: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>In this example, this master-details app consists of two pages. The main page contains a list of entities. The details page shows information about the currently selected entity.</p>\n<p>When you navigate to the details page, you transfer a primary key or ID information about the selected entity. </p>\n<h3 id=\"Example-5-Navigate-to-the-details-page-and-pass-the-content-for-selected-item\"><a href=\"#Example-5-Navigate-to-the-details-page-and-pass-the-content-for-selected-item\" class=\"headerlink\" title=\"Example 5:  Navigate to the details page and pass the content for selected item.\"></a>Example 5:  Navigate to the details page and pass the content for selected item.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listViewItemTap</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Navigate to the details page with context set to the data item for specified index</span></div><div class=\"line\">    frames.topmost().navigate(&#123;</div><div class=\"line\">        moduleName: <span class=\"string\">\"cuteness.io/details-page\"</span>,</div><div class=\"line\">        context: appViewModel.redditItems.getItem(args.index)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listViewItemTap</span>(<span class=\"params\">args: listView.ItemEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Navigate to the details page with context set to the data item for specified index</span></div><div class=\"line\">    frames.topmost().navigate(&#123;</div><div class=\"line\">        moduleName: <span class=\"string\">\"details-page\"</span>,</div><div class=\"line\">        context: appViewModel.redditItems.getItem(args.index)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>With the <strong>onNavigatedTo</strong> callback, you show the details for the entity.</p>\n<h3 id=\"Example-6-Bind-the-content-received-from-main-page\"><a href=\"#Example-6-Bind-the-content-received-from-main-page\" class=\"headerlink\" title=\"Example 6:  Bind the content received from main page.\"></a>Example 6:  Bind the content received from main page.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageNavigatedTo</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    page.bindingContext = page.navigationContext;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Event handler for Page \"navigatedTo\" event attached in details-page.xml</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageNavigatedTo</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Get the event sender</span></div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    page.bindingContext = page.navigationContext;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-without-history\"><a href=\"#Navigate-without-history\" class=\"headerlink\" title=\"Navigate without history\"></a>Navigate without history</h3><p>You can navigate to a page without adding this navigation to the history. Set the <code>backstackVisible</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a> to <code>false</code>. If this property is set to false, then the Page will be displayed, but once navigated from it will not be able to be navigated back to.</p>\n<h3 id=\"Example-7-Page-navigation-without-saving-navigation-history-gt\"><a href=\"#Example-7-Page-navigation-without-saving-navigation-history-gt\" class=\"headerlink\" title=\"Example 7:  Page navigation, without saving navigation history.__&gt;\"></a>Example 7:  Page navigation, without saving navigation history.__&gt;</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"login-page\"</span>,</div><div class=\"line\">    backstackVisible: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"login-page\"</span>,</div><div class=\"line\">    backstackVisible: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h3 id=\"Clear-history\"><a href=\"#Clear-history\" class=\"headerlink\" title=\"Clear history\"></a>Clear history</h3><p>You can navigate to a new page and decide to completely clear the entire navigation history. Set the <code>clearHistory</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a> to <code>true</code>. This will prevent the user from going back to pages previously visited. This is extremely useful if you have a multiple-page authentication process and you want to clear the authentication pages once the user is successfully logged in and redirected to the start page of the application.</p>\n<h3 id=\"Example-8-Prevent-user-from-going-back-using-clearHistory-property\"><a href=\"#Example-8-Prevent-user-from-going-back-using-clearHistory-property\" class=\"headerlink\" title=\"Example 8:  Prevent user from going back using clearHistory property.\"></a>Example 8:  Prevent user from going back using <code>clearHistory</code> property.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    clearHistory: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    clearHistory: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigation-transitions\"><a href=\"#Navigation-transitions\" class=\"headerlink\" title=\"Navigation transitions\"></a>Navigation transitions</h3><p>By default, all navigation will be animated and will use the default transition for the respective platform (UINavigationController transitions for iOS and Fragment transitions for Android). To change the transition type, set the <code>navigationTransition</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a> to an object conforming to the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html\"><code>NavigationTransition</code></a> interface.</p>\n<h3 id=\"Example-9-Set-up-a-transition-property-on-page-navigation\"><a href=\"#Example-9-Set-up-a-transition-property-on-page-navigation\" class=\"headerlink\" title=\"Example 9:  Set up a transition property on page navigation.\"></a>Example 9:  Set up a transition property on page navigation.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transition: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"slide\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">380</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeIn\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transition: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"slide\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">380</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeIn\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<p>To use one of the built-in transitions, set the <code>name</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html\"><code>NavigationTransition</code></a> to one of the following:</p>\n<ul>\n<li>curl (same as curlUp) (iOS only)</li>\n<li>curlUp (iOS only)</li>\n<li>curlDown (iOS only)</li>\n<li>explode (Android Lollipop and later)</li>\n<li>fade</li>\n<li>flip (same as flipRight)</li>\n<li>flipRight</li>\n<li>flipLeft</li>\n<li>slide (same as slideLeft)</li>\n<li>slideLeft</li>\n<li>slideRight</li>\n<li>slideTop</li>\n<li>slideBottom</li>\n</ul>\n<p>The <code>duration</code> property lets you specify the transition duration in milliseconds. If left undefined, the default duration for each platform will be used &mdash; <code>350</code> ms for iOS and <code>300</code> ms for Android. </p>\n<p>The <code>curve</code> property lets you specify the animation curve of the transition. Possible values are contained in the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.animationcurve.html\">AnimationCurve enumeration</a>. Alternatively, you can pass an instance of type <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/c/tdef/UIViewAnimationCurve\" target=\"_blank\" rel=\"external\"><code>UIViewAnimationCurve</code></a> for iOS or <a href=\"http://developer.android.com/reference/android/animation/TimeInterpolator.html\" target=\"_blank\" rel=\"external\"><code>android.animation.TimeInterpolator</code></a> for Android. If left undefined, and <code>easeInOut</code> curve will be used. </p>\n<p>To specify a default transition for <strong>all</strong> frame navigations, set the <code>transition</code> property of the frame you are navigating with.</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.transition = &#123; name: <span class=\"string\">\"flip\"</span> &#125;;</div><div class=\"line\">topmost.navigate(<span class=\"string\">\"main-page\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.transition = &#123; name: <span class=\"string\">\"flip\"</span> &#125;;</div><div class=\"line\">topmost.navigate(<span class=\"string\">\"main-page\"</span>);</div></pre></td></tr></table></figure>\n<p>To specify a default transition for <strong>all</strong> navigations across the entire app, set the <strong>static</strong> <code>defaultTransition</code> property of the <code>Frame</code> class.</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\">frameModule.Frame.defaultTransition = &#123; name: <span class=\"string\">\"fade\"</span> &#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\">frameModule.Frame.defaultTransition = &#123; name: <span class=\"string\">\"fade\"</span> &#125;;</div></pre></td></tr></table></figure>\n<p>To specify different transitions for the different platforms use the <code>transitioniOS</code> and <code>transitionAndroid</code> properties of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a>.</p>\n<h3 id=\"Example-10-Set-up-platform-specific-transitions\"><a href=\"#Example-10-Set-up-platform-specific-transitions\" class=\"headerlink\" title=\"Example 10:  Set up platform specific transitions.\"></a>Example 10:  Set up platform specific transitions.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transitioniOS: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"curl\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">380</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeIn\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    transitionAndroid: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"explode\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">300</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeOut\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transitioniOS: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"curl\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">380</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeIn\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    transitionAndroid: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"explode\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">300</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeOut\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h3 id=\"Custom-transitions\"><a href=\"#Custom-transitions\" class=\"headerlink\" title=\"Custom transitions\"></a>Custom transitions</h3><p>Instead of setting the <code>name</code> property to one of the predefined transitions, you can set the <code>instance</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html\"><code>NavigationTransition</code></a> to an instance of a class that inherits from <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_transition_.transition.html\"><code>Transition</code></a>. You can create your own custom user-defined transition by writing platform-specific code to animate the transition. To do that you need to inherit from the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_transition_.transition.html\"><code>Transition</code></a> class and override one method for each platform. Since there will be platform-specific code, you need to separate your code into two separate files. Here is an example of a custom transition that shrinks the disappearing page while expanding the appearing page by using a scale affine transform.</p>\n<h3 id=\"Example-11-Create-your-own-custom-transition\"><a href=\"#Example-11-Create-your-own-custom-transition\" class=\"headerlink\" title=\"Example 11:  Create your own custom transition.\"></a>Example 11:  Create your own custom transition.</h3><p><code>custom-transition.android.js/ts</code>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> transition = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/transition\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> floatType = java.lang.Float.class.getField(<span class=\"string\">\"TYPE\"</span>).get(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> CustomTransition = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    __extends(CustomTransition, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTransition</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    CustomTransition.prototype.createAndroidAnimator = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">transitionType</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> scaleValues = java.lang.reflect.Array.newInstance(floatType, <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (transitionType) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.enter:</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.popEnter:</div><div class=\"line\">                scaleValues[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">                scaleValues[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.exit:</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.popExit:</div><div class=\"line\">                scaleValues[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                scaleValues[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> objectAnimators = java.lang.reflect.Array.newInstance(android.animation.Animator.class, <span class=\"number\">2</span>);</div><div class=\"line\">        objectAnimators[<span class=\"number\">0</span>] = android.animation.ObjectAnimator.ofFloat(<span class=\"literal\">null</span>, <span class=\"string\">\"scaleX\"</span>, scaleValues);</div><div class=\"line\">        objectAnimators[<span class=\"number\">1</span>] = android.animation.ObjectAnimator.ofFloat(<span class=\"literal\">null</span>, <span class=\"string\">\"scaleY\"</span>, scaleValues);</div><div class=\"line\">        <span class=\"keyword\">var</span> animatorSet = <span class=\"keyword\">new</span> android.animation.AnimatorSet();</div><div class=\"line\">        animatorSet.playTogether(objectAnimators);</div><div class=\"line\">        <span class=\"keyword\">var</span> duration = <span class=\"keyword\">this</span>.getDuration();</div><div class=\"line\">        <span class=\"keyword\">if</span> (duration !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            animatorSet.setDuration(duration);</div><div class=\"line\">        &#125;</div><div class=\"line\">        animatorSet.setInterpolator(<span class=\"keyword\">this</span>.getCurve());</div><div class=\"line\">        <span class=\"keyword\">return</span> animatorSet;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> CustomTransition;</div><div class=\"line\">&#125;)(transition.Transition);</div><div class=\"line\">exports.CustomTransition = CustomTransition;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> transition = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/transition\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> platform = <span class=\"built_in\">require</span>(<span class=\"string\">\"platform\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> floatType = java.lang.Float.class.getField(<span class=\"string\">\"TYPE\"</span>).get(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CustomTransition extends transition.Transition &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> createAndroidAnimator(transitionType: <span class=\"built_in\">string</span>): android.animation.Animator &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> scaleValues = java.lang.reflect.Array.newInstance(floatType, <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (transitionType) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.enter:</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.popEnter:</div><div class=\"line\">                scaleValues[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">                scaleValues[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.exit:</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.popExit:</div><div class=\"line\">                scaleValues[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                scaleValues[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> objectAnimators = java.lang.reflect.Array.newInstance(android.animation.Animator.class, <span class=\"number\">2</span>);</div><div class=\"line\">        objectAnimators[<span class=\"number\">0</span>] = android.animation.ObjectAnimator.ofFloat(<span class=\"literal\">null</span>, <span class=\"string\">\"scaleX\"</span>, scaleValues);</div><div class=\"line\">        objectAnimators[<span class=\"number\">1</span>] = android.animation.ObjectAnimator.ofFloat(<span class=\"literal\">null</span>, <span class=\"string\">\"scaleY\"</span>, scaleValues);</div><div class=\"line\">        <span class=\"keyword\">var</span> animatorSet = <span class=\"keyword\">new</span> android.animation.AnimatorSet();</div><div class=\"line\">        animatorSet.playTogether(objectAnimators);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> duration = <span class=\"keyword\">this</span>.getDuration();</div><div class=\"line\">        <span class=\"keyword\">if</span> (duration !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            animatorSet.setDuration(duration);</div><div class=\"line\">        &#125;</div><div class=\"line\">        animatorSet.setInterpolator(<span class=\"keyword\">this</span>.getCurve());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> animatorSet;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>custom-transition.ios.js/ts</code>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> transition = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/transition\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> CustomTransition = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    __extends(CustomTransition, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTransition</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    CustomTransition.prototype.animateIOSTransition = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">containerView, fromView, toView, operation, completion</span>) </span>&#123;</div><div class=\"line\">        toView.transform = CGAffineTransformMakeScale(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        fromView.transform = CGAffineTransformIdentity;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (operation) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> UINavigationControllerOperation.UINavigationControllerOperationPush:</div><div class=\"line\">                containerView.insertSubviewAboveSubview(toView, fromView);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> UINavigationControllerOperation.UINavigationControllerOperationPop:</div><div class=\"line\">                containerView.insertSubviewBelowSubview(toView, fromView);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> duration = <span class=\"keyword\">this</span>.getDuration();</div><div class=\"line\">        <span class=\"keyword\">var</span> curve = <span class=\"keyword\">this</span>.getCurve();</div><div class=\"line\">        UIView.animateWithDurationAnimationsCompletion(duration, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            UIView.setAnimationCurve(curve);</div><div class=\"line\">            toView.transform = CGAffineTransformIdentity;</div><div class=\"line\">            fromView.transform = CGAffineTransformMakeScale(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;, completion);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> CustomTransition;</div><div class=\"line\">&#125;)(transition.Transition);</div><div class=\"line\">exports.CustomTransition = CustomTransition;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> transition = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/transition\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> platform = <span class=\"built_in\">require</span>(<span class=\"string\">\"platform\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CustomTransition extends transition.Transition &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> animateIOSTransition(containerView: UIView, fromView: UIView, toView: UIView, operation: UINavigationControllerOperation, completion: (finished: <span class=\"built_in\">boolean</span>) =&gt; <span class=\"built_in\">void</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        toView.transform = CGAffineTransformMakeScale(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        fromView.transform = CGAffineTransformIdentity;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (operation) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> UINavigationControllerOperation.UINavigationControllerOperationPush:</div><div class=\"line\">                containerView.insertSubviewAboveSubview(toView, fromView);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> UINavigationControllerOperation.UINavigationControllerOperationPop:</div><div class=\"line\">                containerView.insertSubviewBelowSubview(toView, fromView);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> duration = <span class=\"keyword\">this</span>.getDuration();</div><div class=\"line\">        <span class=\"keyword\">var</span> curve = <span class=\"keyword\">this</span>.getCurve();</div><div class=\"line\">        UIView.animateWithDurationAnimationsCompletion(duration, () =&gt; &#123;</div><div class=\"line\">            UIView.setAnimationCurve(curve);</div><div class=\"line\">            toView.transform = CGAffineTransformIdentity;</div><div class=\"line\">            fromView.transform = CGAffineTransformMakeScale(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;, completion);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Once you have <code>custom-transition.android.js/ts</code> and <code>custom-transition.ios.js/ts</code> created, you need to require the module and instantiate your CustomTransition, optionally passing a duration and curve to the constructor.</p>\n<h3 id=\"Example-12-Require-the-module-and-instantiate-your-custom-transition\"><a href=\"#Example-12-Require-the-module-and-instantiate-your-custom-transition\" class=\"headerlink\" title=\"Example 12:  Require the module and instantiate your custom transition.\"></a>Example 12:  Require the module and instantiate your custom transition.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> customTransition = <span class=\"keyword\">new</span> customTransitionModule.CustomTransition(<span class=\"number\">300</span>, <span class=\"string\">\"easeIn\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transition: &#123;instance: customTransition&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> customTransition = <span class=\"keyword\">new</span> customTransitionModule.CustomTransition(<span class=\"number\">300</span>, <span class=\"string\">\"easeIn\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transition: &#123;instance: customTransition&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-back\"><a href=\"#Navigate-back\" class=\"headerlink\" title=\"Navigate back\"></a>Navigate back</h3><p>The topmost frame tracks the pages the user has visited in a navigation stack. To go back to a previous page, you need to use the <strong>goBackMethod</strong> of the topmost frame instance.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.goBack();</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.goBack();</div></pre></td></tr></table></figure>\n<h3 id=\"Modal-pages\"><a href=\"#Modal-pages\" class=\"headerlink\" title=\"Modal pages\"></a>Modal pages</h3><p>Use the <strong>showModal</strong> method of the page class to show another page as a modal dialog. You must specify the location of the modal page module. You can provide a context and a callback function that will be called when the modal page is closed. You can also optionally specify whether to show the modal page in fullscreen or not. To close the modal page, you need to subscribe to its <code>shownModally</code> event and store a reference to a close callback function provided through the event arguments. Call this function when you are ready to close the modal page, optionally passing some results to the master page. Here is an example with two pages &mdash; a main page and a login page. The main page shows the login page modally; the user enters their username and password and when ready clicks the Login button. This closes the modal login page and returns the username/password to the main page which can then log the user in.</p>\n<blockquote>\n<p><strong>TIP:</strong> By design on iPhone, a modal page appears only in fullscreen.</p>\n</blockquote>\n<h3 id=\"Example-13-Receive-data-from-the-modal-page\"><a href=\"#Example-13-Receive-data-from-the-modal-page\" class=\"headerlink\" title=\"Example 13:  Receive data from the modal page.\"></a>Example 13:  Receive data from the modal page.</h3><p><strong>main-page</strong>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> modalPageModule = <span class=\"string\">\"./modal-views-demo/login-page\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"string\">\"some custom context\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> fullscreen = <span class=\"literal\">true</span>;</div><div class=\"line\">mainPage.showModal(modalPageModule, context, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeCallback</span>(<span class=\"params\">username, password</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Log the user in...</span></div><div class=\"line\">&#125;, fullscreen);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> modalPageModule = <span class=\"string\">\"./modal-views-demo/login-page\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"string\">\"some custom context\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> fullscreen = <span class=\"literal\">true</span>;</div><div class=\"line\">mainPage.showModal(modalPageModule, context, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeCallback</span> (<span class=\"params\">username: <span class=\"built_in\">string</span>, password: <span class=\"built_in\">string</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Log the user in...</span></div><div class=\"line\">&#125;, fullscreen);</div></pre></td></tr></table></figure>\n<p><strong>login-page</strong>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> context;</div><div class=\"line\"><span class=\"keyword\">var</span> closeCallback;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onShownModally</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    context = args.context;</div><div class=\"line\">    closeCallback = args.closeCallback;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.onShownModally = onShownModally;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onLoginButtonTap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    closeCallback(usernameTextField.text, passwordTextField.text);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.onLoginButtonTap = onLoginButtonTap;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> context: <span class=\"built_in\">any</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> closeCallback: <span class=\"built_in\">Function</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onShownModally</span>(<span class=\"params\">args: pages.ShownModallyData</span>) </span>&#123;</div><div class=\"line\">    context = args.context;</div><div class=\"line\">    closeCallback = args.closeCallback;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onLoginButtonTap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    closeCallback(usernameTextField.text, passwordTextField.text);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can find the complete source code <a href=\"https://github.com/NativeScript/NativeScript/tree/master/apps/modal-views-demo\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Supporting-multiple-screens\"><a href=\"#Supporting-multiple-screens\" class=\"headerlink\" title=\"Supporting multiple screens\"></a>Supporting multiple screens</h2><p>Mobile applications run on different devices with different screen sizes and form factors. NativeScript provides a way to define different files (.js, .css, .xml, etc.) to be loaded based on the screen’s size, platform and orientation of the current device. The approach is somewhat similar to <a href=\"http://developer.android.com/guide/practices/screens_support.html\" target=\"_blank\" rel=\"external\">multi screen support in Android</a>. There is a set of <em>qualifiers</em> that can be added inside the file that will be respected when the file is loaded. Here is how the file should look:</p>\n<p><code>&lt;file-name&gt;[.&lt;qualifier&gt;]*.&lt;extension&gt;</code></p>\n<p>In the next section we will go trough the list of supported qualifiers.</p>\n<h3 id=\"Screen-size-qualifiers\"><a href=\"#Screen-size-qualifiers\" class=\"headerlink\" title=\"Screen size qualifiers\"></a>Screen size qualifiers</h3><p>All the values in screen size qualifiers are in density independent pixels(dp) &mdash; meaning it corresponds to the physical dimensions of the screen. The assumptions is that there are ~160 dp per inch. For example, according to Android guidelines, if the device’s smaller dimension is more than 600 dp (~3.75 inches) it is probably a tablet.</p>\n<ul>\n<li><code>minWH&lt;X&gt;</code> - The smaller dimension (width or height) should be at least <strong>X</strong> dp.</li>\n<li><code>minW&lt;X&gt;</code> - Width should be at least <strong>X</strong> dp.</li>\n<li><code>minH&lt;X&gt;</code> - Height should be at least <strong>X</strong> dp.</li>\n</ul>\n<p><em>Example (separate XML file for tablet and phone)</em>:</p>\n<ul>\n<li><code>main-page.minWH600.xml</code> - XML file to be used for tablet devices.</li>\n<li><code>main-page.xml</code> - XML to be used for phones. </li>\n</ul>\n<h3 id=\"Platform-qualifiers\"><a href=\"#Platform-qualifiers\" class=\"headerlink\" title=\"Platform qualifiers\"></a>Platform qualifiers</h3><ul>\n<li><code>android</code> – Android platform</li>\n<li><code>ios</code> – iOS platform</li>\n<li><code>windows</code> (coming soon) – Windows platform</li>\n</ul>\n<p><em>Example (platform specific files)</em>:</p>\n<ul>\n<li><code>app.android.css</code> - CSS styles for Android.</li>\n<li><code>app.ios.css</code> - CSS styles for iOS. </li>\n</ul>\n<p>The platform qualifiers are executed during build time, while the others are executed during run time. For example, the app.ios.css file will not be taken in consideration when building for the Android platform. Contrary, the screen size qualifiers will be considered just after the application runs on a device with a specific screen size. </p>\n<h3 id=\"Orientation-qualifiers\"><a href=\"#Orientation-qualifiers\" class=\"headerlink\" title=\"Orientation qualifiers\"></a>Orientation qualifiers</h3><ul>\n<li><code>land</code> - orientation is in landscape mode.</li>\n<li><code>port</code> - orientation is in portrait mode.</li>\n</ul>\n<blockquote>\n<p>Note: All qualifiers are taken into account when the page is loading. However, changing the device orientation will not trigger page reload and will not change the current page.</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"Architecture-and-Navigation\"><a href=\"#Architecture-and-Navigation\" class=\"headerlink\" title=\"Architecture and Navigation\"></a>Architecture and Navigation</h1><p>NativeScript apps consist of pages that represent the separate application screens. Pages are instances of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>page</code></a> class of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>Page</code></a> module. To navigate between pages, you can use the methods of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> class of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> module.</p>\n<blockquote>\n<p><strong>TIP:</strong> Instead of multiple pages, you can have a single page with a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabview.html\">tab view</a> and different user interfaces for each tab.</p>\n</blockquote>\n<ul>\n<li><a href=\"#page-management\">Page management</a><ul>\n<li><a href=\"#define-page\">Define page</a></li>\n<li><a href=\"#set-home-page\">Set home page</a></li>\n</ul>\n</li>\n<li><a href=\"#navigation\">Navigation</a><ul>\n<li><a href=\"#the-topmost-frame\">The topmost frame</a></li>\n<li><a href=\"#navigate-by-page-name\">Navigate by page name</a></li>\n<li><a href=\"#navigate-using-a-function\">Navigate using a function</a></li>\n<li><a href=\"#navigate-and-pass-context\">Navigate and pass context</a></li>\n<li><a href=\"#navigate-without-history\">Navigate without history</a></li>\n<li><a href=\"#clear-history\">Clear history</a></li>\n<li><a href=\"#navigation-transitions\">Navigation transitions</a></li>\n<li><a href=\"#navigate-back\">Navigate back</a></li>\n<li><a href=\"#modal-pages\">Modal pages</a></li>\n</ul>\n</li>\n<li><a href=\"#supporting-multiple-screens\">Supporting multiple screens</a><ul>\n<li><a href=\"#screen-size-qualifiers\">Screen size qualifiers</a></li>\n<li><a href=\"#platform-qualifiers\">Platform qualifiers</a></li>\n<li><a href=\"#orientation-qualifiers\">Orientation qualifiers</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Page-management\"><a href=\"#Page-management\" class=\"headerlink\" title=\"Page management\"></a>Page management</h2><h3 id=\"Define-page\"><a href=\"#Define-page\" class=\"headerlink\" title=\"Define page\"></a>Define page</h3><p>Pages represent the separate screens of your application. Each page is an instance of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>page</code></a> class of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>Page</code></a> module. Each class instance inherits the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_content_view_.contentview.html\"><code>content</code></a> property which holds the root visual element of the UI.</p>\n<p>NativeScript provides two approaches to instantiating your pages.</p>\n<p><strong>Create a page in XML</strong></p>\n<p>You can define the UI declaration and the code for the page separately.</p>\n<p>To apply this approach, create a <code>XML</code> file for each page to hold the layout of the page. Thus your code will be in a <code>JS</code> or a <code>TS</code> file. The names of the <code>XML</code> and the <code>JS</code> or <code>TS</code> file must match.</p>\n<h3 id=\"Example-1-Create-page-with-XML\"><a href=\"#Example-1-Create-page-with-XML\" class=\"headerlink\" title=\"Example 1:  Create page with XML.\"></a>Example 1:  Create page with XML.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- main-page.xml--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"onPageLoaded\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Hello, world!\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// main-page.js</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Page Loaded\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.onPageLoaded = onPageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// main-page.ts</span></div><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPageLoaded</span>(<span class=\"params\">args: observableModule.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Page Loaded\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Create a page in code</strong></p>\n<p>To apply this approach, you need to create a function named <code>createPage</code> that will return an instance of your page. NativeScript considers <code>createPage</code> a factory function.</p>\n<h3 id=\"Example-2-Create-page-via-code\"><a href=\"#Example-2-Create-page-via-code\" class=\"headerlink\" title=\"Example 2:  Create page via code.\"></a>Example 2:  Create page via code.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pagesModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> labelModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPage</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> labelModule.Label();</div><div class=\"line\">    label.text = <span class=\"string\">\"Hello, world!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pagesModule.Page();</div><div class=\"line\">    page.content = label;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.createPage = createPage;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pagesModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> labelModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPage</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> labelModule.Label();</div><div class=\"line\">    label.text = <span class=\"string\">\"Hello, world!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pagesModule.Page();</div><div class=\"line\">    page.content = label;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Set-home-page\"><a href=\"#Set-home-page\" class=\"headerlink\" title=\"Set home page\"></a>Set home page</h3><p>Each application must have a single entry point - the home page.</p>\n<p>To load the home page for your app, you need to pass <code>NavigationEntry</code> with the desired <code>moduleName</code> to the start() method.  NativeScript looks for an XML file with the specified name, parses it and draws the UI described in the file. Afterwards, if NativeScript finds a <code>JS</code> or a <code>TS</code> file with the same name, it executes the business logic in the file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"main-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"main-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a>Navigation</h2><p>The <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> class represents the logical unit that is responsible for navigation between different pages. Typically, each app has one frame at the root level - the topmost frame.</p>\n<p>To navigate between pages, you can use the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>navigate</code></a> method of the topmost frame instance.</p>\n<p>In addition, each <code>Page</code> instance carries information about the frame object which navigated to it in the <code>frame</code> property. This lets you navigate with the <code>frame</code> property as well. </p>\n<h3 id=\"The-topmost-frame\"><a href=\"#The-topmost-frame\" class=\"headerlink\" title=\"The topmost frame\"></a>The topmost frame</h3><p>The topmost frame is the root-level container for your app’s UI and you can use it to navigate inside of your app. You can get a reference to this frame by using the <code>topmost()</code> method of the Frame module.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> topmost = frameModule.topmost();</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> topmost = frameModule.topmost();</div></pre></td></tr></table></figure>\n<p>There are several ways to perform navigation; which one you use depends on the needs of your app.</p>\n<h3 id=\"Navigate-by-page-name\"><a href=\"#Navigate-by-page-name\" class=\"headerlink\" title=\"Navigate by page name\"></a>Navigate by page name</h3><p>Perhaps the simplest way to navigate is by specifying the file name of the page to which you want to navigate.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.navigate(<span class=\"string\">\"details-page\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.navigate(<span class=\"string\">\"details-page\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-using-a-function\"><a href=\"#Navigate-using-a-function\" class=\"headerlink\" title=\"Navigate using a function\"></a>Navigate using a function</h3><p>A more dynamic way of navigating can be done by providing a function that returns the instance of the page to which you want to navigate.</p>\n<h3 id=\"Example-3-How-to-navigate-to-a-page-dynamically-created-via-code\"><a href=\"#Example-3-How-to-navigate-to-a-page-dynamically-created-via-code\" class=\"headerlink\" title=\"Example 3:  How to navigate to a page dynamically created via code.\"></a>Example 3:  How to navigate to a page dynamically created via code.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> factoryFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> labelModule.Label();</div><div class=\"line\">    label.text = <span class=\"string\">\"Hello, world!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pagesModule.Page();</div><div class=\"line\">    page.content = label;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(factoryFunc);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> topmost = frameModule.topmost();</div><div class=\"line\"><span class=\"keyword\">var</span> factoryFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> labelModule.Label();</div><div class=\"line\">    label.text = <span class=\"string\">\"Hello, world!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pagesModule.Page();</div><div class=\"line\">    page.content = label;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(factoryFunc);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-and-pass-context\"><a href=\"#Navigate-and-pass-context\" class=\"headerlink\" title=\"Navigate and pass context\"></a>Navigate and pass context</h3><p>When you navigate to another page, you can pass context to the page with a <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a> object. This approach provides finer control over navigation compared to other navigation approaches. For example, with <code>NavigationEntry</code> you can also animate the navigation.</p>\n<h3 id=\"Example-4-How-to-pass-content-between-different-pages\"><a href=\"#Example-4-How-to-pass-content-between-different-pages\" class=\"headerlink\" title=\"Example 4:  How to pass content between different pages.\"></a>Example 4:  How to pass content between different pages.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"details-page\"</span>,</div><div class=\"line\">    context: &#123;info: <span class=\"string\">\"something you want to pass to your page\"</span>&#125;,</div><div class=\"line\">    animated: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"details-page\"</span>,</div><div class=\"line\">    context: &#123;info: <span class=\"string\">\"something you want to pass to your page\"</span>&#125;,</div><div class=\"line\">    animated: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>In this example, this master-details app consists of two pages. The main page contains a list of entities. The details page shows information about the currently selected entity.</p>\n<p>When you navigate to the details page, you transfer a primary key or ID information about the selected entity. </p>\n<h3 id=\"Example-5-Navigate-to-the-details-page-and-pass-the-content-for-selected-item\"><a href=\"#Example-5-Navigate-to-the-details-page-and-pass-the-content-for-selected-item\" class=\"headerlink\" title=\"Example 5:  Navigate to the details page and pass the content for selected item.\"></a>Example 5:  Navigate to the details page and pass the content for selected item.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listViewItemTap</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Navigate to the details page with context set to the data item for specified index</span></div><div class=\"line\">    frames.topmost().navigate(&#123;</div><div class=\"line\">        moduleName: <span class=\"string\">\"cuteness.io/details-page\"</span>,</div><div class=\"line\">        context: appViewModel.redditItems.getItem(args.index)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listViewItemTap</span>(<span class=\"params\">args: listView.ItemEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Navigate to the details page with context set to the data item for specified index</span></div><div class=\"line\">    frames.topmost().navigate(&#123;</div><div class=\"line\">        moduleName: <span class=\"string\">\"details-page\"</span>,</div><div class=\"line\">        context: appViewModel.redditItems.getItem(args.index)</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>With the <strong>onNavigatedTo</strong> callback, you show the details for the entity.</p>\n<h3 id=\"Example-6-Bind-the-content-received-from-main-page\"><a href=\"#Example-6-Bind-the-content-received-from-main-page\" class=\"headerlink\" title=\"Example 6:  Bind the content received from main page.\"></a>Example 6:  Bind the content received from main page.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageNavigatedTo</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    page.bindingContext = page.navigationContext;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Event handler for Page \"navigatedTo\" event attached in details-page.xml</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageNavigatedTo</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Get the event sender</span></div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    page.bindingContext = page.navigationContext;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-without-history\"><a href=\"#Navigate-without-history\" class=\"headerlink\" title=\"Navigate without history\"></a>Navigate without history</h3><p>You can navigate to a page without adding this navigation to the history. Set the <code>backstackVisible</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a> to <code>false</code>. If this property is set to false, then the Page will be displayed, but once navigated from it will not be able to be navigated back to.</p>\n<h3 id=\"Example-7-Page-navigation-without-saving-navigation-history-gt\"><a href=\"#Example-7-Page-navigation-without-saving-navigation-history-gt\" class=\"headerlink\" title=\"Example 7:  Page navigation, without saving navigation history.__&gt;\"></a>Example 7:  Page navigation, without saving navigation history.__&gt;</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"login-page\"</span>,</div><div class=\"line\">    backstackVisible: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"login-page\"</span>,</div><div class=\"line\">    backstackVisible: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h3 id=\"Clear-history\"><a href=\"#Clear-history\" class=\"headerlink\" title=\"Clear history\"></a>Clear history</h3><p>You can navigate to a new page and decide to completely clear the entire navigation history. Set the <code>clearHistory</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a> to <code>true</code>. This will prevent the user from going back to pages previously visited. This is extremely useful if you have a multiple-page authentication process and you want to clear the authentication pages once the user is successfully logged in and redirected to the start page of the application.</p>\n<h3 id=\"Example-8-Prevent-user-from-going-back-using-clearHistory-property\"><a href=\"#Example-8-Prevent-user-from-going-back-using-clearHistory-property\" class=\"headerlink\" title=\"Example 8:  Prevent user from going back using clearHistory property.\"></a>Example 8:  Prevent user from going back using <code>clearHistory</code> property.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    clearHistory: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    clearHistory: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigation-transitions\"><a href=\"#Navigation-transitions\" class=\"headerlink\" title=\"Navigation transitions\"></a>Navigation transitions</h3><p>By default, all navigation will be animated and will use the default transition for the respective platform (UINavigationController transitions for iOS and Fragment transitions for Android). To change the transition type, set the <code>navigationTransition</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a> to an object conforming to the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html\"><code>NavigationTransition</code></a> interface.</p>\n<h3 id=\"Example-9-Set-up-a-transition-property-on-page-navigation\"><a href=\"#Example-9-Set-up-a-transition-property-on-page-navigation\" class=\"headerlink\" title=\"Example 9:  Set up a transition property on page navigation.\"></a>Example 9:  Set up a transition property on page navigation.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transition: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"slide\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">380</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeIn\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transition: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"slide\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">380</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeIn\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<p>To use one of the built-in transitions, set the <code>name</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html\"><code>NavigationTransition</code></a> to one of the following:</p>\n<ul>\n<li>curl (same as curlUp) (iOS only)</li>\n<li>curlUp (iOS only)</li>\n<li>curlDown (iOS only)</li>\n<li>explode (Android Lollipop and later)</li>\n<li>fade</li>\n<li>flip (same as flipRight)</li>\n<li>flipRight</li>\n<li>flipLeft</li>\n<li>slide (same as slideLeft)</li>\n<li>slideLeft</li>\n<li>slideRight</li>\n<li>slideTop</li>\n<li>slideBottom</li>\n</ul>\n<p>The <code>duration</code> property lets you specify the transition duration in milliseconds. If left undefined, the default duration for each platform will be used &mdash; <code>350</code> ms for iOS and <code>300</code> ms for Android. </p>\n<p>The <code>curve</code> property lets you specify the animation curve of the transition. Possible values are contained in the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.animationcurve.html\">AnimationCurve enumeration</a>. Alternatively, you can pass an instance of type <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/c/tdef/UIViewAnimationCurve\"><code>UIViewAnimationCurve</code></a> for iOS or <a href=\"http://developer.android.com/reference/android/animation/TimeInterpolator.html\"><code>android.animation.TimeInterpolator</code></a> for Android. If left undefined, and <code>easeInOut</code> curve will be used. </p>\n<p>To specify a default transition for <strong>all</strong> frame navigations, set the <code>transition</code> property of the frame you are navigating with.</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.transition = &#123; name: <span class=\"string\">\"flip\"</span> &#125;;</div><div class=\"line\">topmost.navigate(<span class=\"string\">\"main-page\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.transition = &#123; name: <span class=\"string\">\"flip\"</span> &#125;;</div><div class=\"line\">topmost.navigate(<span class=\"string\">\"main-page\"</span>);</div></pre></td></tr></table></figure>\n<p>To specify a default transition for <strong>all</strong> navigations across the entire app, set the <strong>static</strong> <code>defaultTransition</code> property of the <code>Frame</code> class.</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\">frameModule.Frame.defaultTransition = &#123; name: <span class=\"string\">\"fade\"</span> &#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\">frameModule.Frame.defaultTransition = &#123; name: <span class=\"string\">\"fade\"</span> &#125;;</div></pre></td></tr></table></figure>\n<p>To specify different transitions for the different platforms use the <code>transitioniOS</code> and <code>transitionAndroid</code> properties of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationentry.html\"><code>NavigationEntry</code></a>.</p>\n<h3 id=\"Example-10-Set-up-platform-specific-transitions\"><a href=\"#Example-10-Set-up-platform-specific-transitions\" class=\"headerlink\" title=\"Example 10:  Set up platform specific transitions.\"></a>Example 10:  Set up platform specific transitions.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transitioniOS: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"curl\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">380</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeIn\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    transitionAndroid: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"explode\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">300</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeOut\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transitioniOS: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"curl\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">380</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeIn\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    transitionAndroid: &#123;</div><div class=\"line\">        name: <span class=\"string\">\"explode\"</span>,</div><div class=\"line\">        duration: <span class=\"number\">300</span>,</div><div class=\"line\">        curve: <span class=\"string\">\"easeOut\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h3 id=\"Custom-transitions\"><a href=\"#Custom-transitions\" class=\"headerlink\" title=\"Custom transitions\"></a>Custom transitions</h3><p>Instead of setting the <code>name</code> property to one of the predefined transitions, you can set the <code>instance</code> property of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html\"><code>NavigationTransition</code></a> to an instance of a class that inherits from <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_transition_.transition.html\"><code>Transition</code></a>. You can create your own custom user-defined transition by writing platform-specific code to animate the transition. To do that you need to inherit from the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_transition_.transition.html\"><code>Transition</code></a> class and override one method for each platform. Since there will be platform-specific code, you need to separate your code into two separate files. Here is an example of a custom transition that shrinks the disappearing page while expanding the appearing page by using a scale affine transform.</p>\n<h3 id=\"Example-11-Create-your-own-custom-transition\"><a href=\"#Example-11-Create-your-own-custom-transition\" class=\"headerlink\" title=\"Example 11:  Create your own custom transition.\"></a>Example 11:  Create your own custom transition.</h3><p><code>custom-transition.android.js/ts</code>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> transition = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/transition\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> floatType = java.lang.Float.class.getField(<span class=\"string\">\"TYPE\"</span>).get(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> CustomTransition = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    __extends(CustomTransition, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTransition</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    CustomTransition.prototype.createAndroidAnimator = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">transitionType</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> scaleValues = java.lang.reflect.Array.newInstance(floatType, <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (transitionType) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.enter:</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.popEnter:</div><div class=\"line\">                scaleValues[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">                scaleValues[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.exit:</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.popExit:</div><div class=\"line\">                scaleValues[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                scaleValues[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> objectAnimators = java.lang.reflect.Array.newInstance(android.animation.Animator.class, <span class=\"number\">2</span>);</div><div class=\"line\">        objectAnimators[<span class=\"number\">0</span>] = android.animation.ObjectAnimator.ofFloat(<span class=\"literal\">null</span>, <span class=\"string\">\"scaleX\"</span>, scaleValues);</div><div class=\"line\">        objectAnimators[<span class=\"number\">1</span>] = android.animation.ObjectAnimator.ofFloat(<span class=\"literal\">null</span>, <span class=\"string\">\"scaleY\"</span>, scaleValues);</div><div class=\"line\">        <span class=\"keyword\">var</span> animatorSet = <span class=\"keyword\">new</span> android.animation.AnimatorSet();</div><div class=\"line\">        animatorSet.playTogether(objectAnimators);</div><div class=\"line\">        <span class=\"keyword\">var</span> duration = <span class=\"keyword\">this</span>.getDuration();</div><div class=\"line\">        <span class=\"keyword\">if</span> (duration !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            animatorSet.setDuration(duration);</div><div class=\"line\">        &#125;</div><div class=\"line\">        animatorSet.setInterpolator(<span class=\"keyword\">this</span>.getCurve());</div><div class=\"line\">        <span class=\"keyword\">return</span> animatorSet;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> CustomTransition;</div><div class=\"line\">&#125;)(transition.Transition);</div><div class=\"line\">exports.CustomTransition = CustomTransition;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> transition = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/transition\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> platform = <span class=\"built_in\">require</span>(<span class=\"string\">\"platform\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> floatType = java.lang.Float.class.getField(<span class=\"string\">\"TYPE\"</span>).get(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CustomTransition extends transition.Transition &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> createAndroidAnimator(transitionType: <span class=\"built_in\">string</span>): android.animation.Animator &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> scaleValues = java.lang.reflect.Array.newInstance(floatType, <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (transitionType) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.enter:</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.popEnter:</div><div class=\"line\">                scaleValues[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">                scaleValues[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.exit:</div><div class=\"line\">            <span class=\"keyword\">case</span> transition.AndroidTransitionType.popExit:</div><div class=\"line\">                scaleValues[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                scaleValues[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> objectAnimators = java.lang.reflect.Array.newInstance(android.animation.Animator.class, <span class=\"number\">2</span>);</div><div class=\"line\">        objectAnimators[<span class=\"number\">0</span>] = android.animation.ObjectAnimator.ofFloat(<span class=\"literal\">null</span>, <span class=\"string\">\"scaleX\"</span>, scaleValues);</div><div class=\"line\">        objectAnimators[<span class=\"number\">1</span>] = android.animation.ObjectAnimator.ofFloat(<span class=\"literal\">null</span>, <span class=\"string\">\"scaleY\"</span>, scaleValues);</div><div class=\"line\">        <span class=\"keyword\">var</span> animatorSet = <span class=\"keyword\">new</span> android.animation.AnimatorSet();</div><div class=\"line\">        animatorSet.playTogether(objectAnimators);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> duration = <span class=\"keyword\">this</span>.getDuration();</div><div class=\"line\">        <span class=\"keyword\">if</span> (duration !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            animatorSet.setDuration(duration);</div><div class=\"line\">        &#125;</div><div class=\"line\">        animatorSet.setInterpolator(<span class=\"keyword\">this</span>.getCurve());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> animatorSet;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>custom-transition.ios.js/ts</code>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> transition = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/transition\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> CustomTransition = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    __extends(CustomTransition, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomTransition</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    CustomTransition.prototype.animateIOSTransition = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">containerView, fromView, toView, operation, completion</span>) </span>&#123;</div><div class=\"line\">        toView.transform = CGAffineTransformMakeScale(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        fromView.transform = CGAffineTransformIdentity;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (operation) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> UINavigationControllerOperation.UINavigationControllerOperationPush:</div><div class=\"line\">                containerView.insertSubviewAboveSubview(toView, fromView);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> UINavigationControllerOperation.UINavigationControllerOperationPop:</div><div class=\"line\">                containerView.insertSubviewBelowSubview(toView, fromView);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">var</span> duration = <span class=\"keyword\">this</span>.getDuration();</div><div class=\"line\">        <span class=\"keyword\">var</span> curve = <span class=\"keyword\">this</span>.getCurve();</div><div class=\"line\">        UIView.animateWithDurationAnimationsCompletion(duration, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            UIView.setAnimationCurve(curve);</div><div class=\"line\">            toView.transform = CGAffineTransformIdentity;</div><div class=\"line\">            fromView.transform = CGAffineTransformMakeScale(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;, completion);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> CustomTransition;</div><div class=\"line\">&#125;)(transition.Transition);</div><div class=\"line\">exports.CustomTransition = CustomTransition;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> transition = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/transition\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> platform = <span class=\"built_in\">require</span>(<span class=\"string\">\"platform\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CustomTransition extends transition.Transition &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> animateIOSTransition(containerView: UIView, fromView: UIView, toView: UIView, operation: UINavigationControllerOperation, completion: (finished: <span class=\"built_in\">boolean</span>) =&gt; <span class=\"built_in\">void</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        toView.transform = CGAffineTransformMakeScale(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        fromView.transform = CGAffineTransformIdentity;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (operation) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> UINavigationControllerOperation.UINavigationControllerOperationPush:</div><div class=\"line\">                containerView.insertSubviewAboveSubview(toView, fromView);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> UINavigationControllerOperation.UINavigationControllerOperationPop:</div><div class=\"line\">                containerView.insertSubviewBelowSubview(toView, fromView);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> duration = <span class=\"keyword\">this</span>.getDuration();</div><div class=\"line\">        <span class=\"keyword\">var</span> curve = <span class=\"keyword\">this</span>.getCurve();</div><div class=\"line\">        UIView.animateWithDurationAnimationsCompletion(duration, () =&gt; &#123;</div><div class=\"line\">            UIView.setAnimationCurve(curve);</div><div class=\"line\">            toView.transform = CGAffineTransformIdentity;</div><div class=\"line\">            fromView.transform = CGAffineTransformMakeScale(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;, completion);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Once you have <code>custom-transition.android.js/ts</code> and <code>custom-transition.ios.js/ts</code> created, you need to require the module and instantiate your CustomTransition, optionally passing a duration and curve to the constructor.</p>\n<h3 id=\"Example-12-Require-the-module-and-instantiate-your-custom-transition\"><a href=\"#Example-12-Require-the-module-and-instantiate-your-custom-transition\" class=\"headerlink\" title=\"Example 12:  Require the module and instantiate your custom transition.\"></a>Example 12:  Require the module and instantiate your custom transition.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> customTransition = <span class=\"keyword\">new</span> customTransitionModule.CustomTransition(<span class=\"number\">300</span>, <span class=\"string\">\"easeIn\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transition: &#123;instance: customTransition&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> customTransition = <span class=\"keyword\">new</span> customTransitionModule.CustomTransition(<span class=\"number\">300</span>, <span class=\"string\">\"easeIn\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> navigationEntry = &#123;</div><div class=\"line\">    moduleName: <span class=\"string\">\"main-page\"</span>,</div><div class=\"line\">    animated: <span class=\"literal\">true</span>,</div><div class=\"line\">    transition: &#123;instance: customTransition&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">topmost.navigate(navigationEntry);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-back\"><a href=\"#Navigate-back\" class=\"headerlink\" title=\"Navigate back\"></a>Navigate back</h3><p>The topmost frame tracks the pages the user has visited in a navigation stack. To go back to a previous page, you need to use the <strong>goBackMethod</strong> of the topmost frame instance.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.goBack();</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">topmost.goBack();</div></pre></td></tr></table></figure>\n<h3 id=\"Modal-pages\"><a href=\"#Modal-pages\" class=\"headerlink\" title=\"Modal pages\"></a>Modal pages</h3><p>Use the <strong>showModal</strong> method of the page class to show another page as a modal dialog. You must specify the location of the modal page module. You can provide a context and a callback function that will be called when the modal page is closed. You can also optionally specify whether to show the modal page in fullscreen or not. To close the modal page, you need to subscribe to its <code>shownModally</code> event and store a reference to a close callback function provided through the event arguments. Call this function when you are ready to close the modal page, optionally passing some results to the master page. Here is an example with two pages &mdash; a main page and a login page. The main page shows the login page modally; the user enters their username and password and when ready clicks the Login button. This closes the modal login page and returns the username/password to the main page which can then log the user in.</p>\n<blockquote>\n<p><strong>TIP:</strong> By design on iPhone, a modal page appears only in fullscreen.</p>\n</blockquote>\n<h3 id=\"Example-13-Receive-data-from-the-modal-page\"><a href=\"#Example-13-Receive-data-from-the-modal-page\" class=\"headerlink\" title=\"Example 13:  Receive data from the modal page.\"></a>Example 13:  Receive data from the modal page.</h3><p><strong>main-page</strong>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> modalPageModule = <span class=\"string\">\"./modal-views-demo/login-page\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"string\">\"some custom context\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> fullscreen = <span class=\"literal\">true</span>;</div><div class=\"line\">mainPage.showModal(modalPageModule, context, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeCallback</span>(<span class=\"params\">username, password</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Log the user in...</span></div><div class=\"line\">&#125;, fullscreen);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> modalPageModule = <span class=\"string\">\"./modal-views-demo/login-page\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"string\">\"some custom context\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> fullscreen = <span class=\"literal\">true</span>;</div><div class=\"line\">mainPage.showModal(modalPageModule, context, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closeCallback</span> (<span class=\"params\">username: <span class=\"built_in\">string</span>, password: <span class=\"built_in\">string</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Log the user in...</span></div><div class=\"line\">&#125;, fullscreen);</div></pre></td></tr></table></figure>\n<p><strong>login-page</strong>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> context;</div><div class=\"line\"><span class=\"keyword\">var</span> closeCallback;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onShownModally</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    context = args.context;</div><div class=\"line\">    closeCallback = args.closeCallback;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.onShownModally = onShownModally;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onLoginButtonTap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    closeCallback(usernameTextField.text, passwordTextField.text);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.onLoginButtonTap = onLoginButtonTap;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> context: <span class=\"built_in\">any</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> closeCallback: <span class=\"built_in\">Function</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onShownModally</span>(<span class=\"params\">args: pages.ShownModallyData</span>) </span>&#123;</div><div class=\"line\">    context = args.context;</div><div class=\"line\">    closeCallback = args.closeCallback;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onLoginButtonTap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    closeCallback(usernameTextField.text, passwordTextField.text);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can find the complete source code <a href=\"https://github.com/NativeScript/NativeScript/tree/master/apps/modal-views-demo\">here</a>.</p>\n<h2 id=\"Supporting-multiple-screens\"><a href=\"#Supporting-multiple-screens\" class=\"headerlink\" title=\"Supporting multiple screens\"></a>Supporting multiple screens</h2><p>Mobile applications run on different devices with different screen sizes and form factors. NativeScript provides a way to define different files (.js, .css, .xml, etc.) to be loaded based on the screen’s size, platform and orientation of the current device. The approach is somewhat similar to <a href=\"http://developer.android.com/guide/practices/screens_support.html\">multi screen support in Android</a>. There is a set of <em>qualifiers</em> that can be added inside the file that will be respected when the file is loaded. Here is how the file should look:</p>\n<p><code>&lt;file-name&gt;[.&lt;qualifier&gt;]*.&lt;extension&gt;</code></p>\n<p>In the next section we will go trough the list of supported qualifiers.</p>\n<h3 id=\"Screen-size-qualifiers\"><a href=\"#Screen-size-qualifiers\" class=\"headerlink\" title=\"Screen size qualifiers\"></a>Screen size qualifiers</h3><p>All the values in screen size qualifiers are in density independent pixels(dp) &mdash; meaning it corresponds to the physical dimensions of the screen. The assumptions is that there are ~160 dp per inch. For example, according to Android guidelines, if the device’s smaller dimension is more than 600 dp (~3.75 inches) it is probably a tablet.</p>\n<ul>\n<li><code>minWH&lt;X&gt;</code> - The smaller dimension (width or height) should be at least <strong>X</strong> dp.</li>\n<li><code>minW&lt;X&gt;</code> - Width should be at least <strong>X</strong> dp.</li>\n<li><code>minH&lt;X&gt;</code> - Height should be at least <strong>X</strong> dp.</li>\n</ul>\n<p><em>Example (separate XML file for tablet and phone)</em>:</p>\n<ul>\n<li><code>main-page.minWH600.xml</code> - XML file to be used for tablet devices.</li>\n<li><code>main-page.xml</code> - XML to be used for phones. </li>\n</ul>\n<h3 id=\"Platform-qualifiers\"><a href=\"#Platform-qualifiers\" class=\"headerlink\" title=\"Platform qualifiers\"></a>Platform qualifiers</h3><ul>\n<li><code>android</code> – Android platform</li>\n<li><code>ios</code> – iOS platform</li>\n<li><code>windows</code> (coming soon) – Windows platform</li>\n</ul>\n<p><em>Example (platform specific files)</em>:</p>\n<ul>\n<li><code>app.android.css</code> - CSS styles for Android.</li>\n<li><code>app.ios.css</code> - CSS styles for iOS. </li>\n</ul>\n<p>The platform qualifiers are executed during build time, while the others are executed during run time. For example, the app.ios.css file will not be taken in consideration when building for the Android platform. Contrary, the screen size qualifiers will be considered just after the application runs on a device with a specific screen size. </p>\n<h3 id=\"Orientation-qualifiers\"><a href=\"#Orientation-qualifiers\" class=\"headerlink\" title=\"Orientation qualifiers\"></a>Orientation qualifiers</h3><ul>\n<li><code>land</code> - orientation is in landscape mode.</li>\n<li><code>port</code> - orientation is in portrait mode.</li>\n</ul>\n<blockquote>\n<p>Note: All qualifiers are taken into account when the page is loading. However, changing the device orientation will not trigger page reload and will not change the current page.</p>\n</blockquote>\n"},{"title":"Modules","description":"You can access the native device and platform capabilities of your target platform with the help of the NativeScript modules.","position":3,"slug":"modules","previous_url":"/modules","_content":"\n# Modules\n\nTo let you access the native device and platform capabilities of your target platform, NativeScript uses a modular design pattern. All device, platform or user interface functionalities reside in separate modules. To access the functionality provided by a module, you need to **require** the module.\n\nIn your project, the files for each module reside in a dedicated subdirectory in the `tns_modules` directory. Each default module comes along with a `package.json` file that declares how the module should be called within your call and which file contains its respective code.\n\n```JSON\n{ \"name\" : \"button\",\n  \"main\" : \"button.js\" }\n``` \n\n* [Core modules](#core-modules)\n* [Device functionality modules](#device-functionality-modules)\n* [Data modules](#data-modules)\n* [User interface modules](#user-interface-modules)\n\t* [Layouts](#layouts)\n\t* [Widgets](#widgets)\n* [WHATWG polyfills](#whatwg-polyfills)\n* \n### Core modules\n\n+ [application]({%ns_cookbook application%}): Provides the application abstraction with all related methods.\n+ [console]({%ns_cookbook console%}): Lets you print messages to the device console.\n+ [application-settings]({%ns_cookbook application-settings%}): Lets you save and restore any information related to your application.\n+ [http]({%ns_cookbook http%}): Lets you send web requests and receive the responses.\n+ [image-source]({%ns_cookbook image-source%}): Provides the `ImageSource` class which encapsulates the common abstraction behind a platform-specific object that is used as a source for images (typically a Bitmap).\n+ [timer]({%ns_cookbook timer%}): Lets you to create, start, stop and react to timers.\n+ [trace]({%ns_cookbook trace%}): Lets you trace and print specific information based on categories.\n+ [ui/image-cache]({%ns_cookbook ui/image-cache%}): Provides the `Cache` class which handles image download requests and caches the already downloaded images.\n+ [connectivity]({%ns_cookbook connectivity%}): Lets you check the type of Internet connection and monitor its state changes.\n\n### Device functionality modules\n\n+ [camera]({%ns_cookbook camera%}): Lets you take pictures with the device camera.\n+ [location]({%ns_cookbook location%}): Lets you use the geolocation sensors of the device.\n+ [platform]({%ns_cookbook platform%}): Provides information about the device, its operating system and software.\n+ [fps-meter]({%ns_cookbook fps-meter%}): Lets you capture the frames-per-second metrics of your application.\n+ [file-system]({%ns_cookbook file-system%}): Lets you work with the device file system. Provides high-level abstractions for file system entities such as files, folders, known folders, paths, separators, etc.\n+ [ui/gestures]({%ns_cookbook ui/gestures%}): Provides the `GesturesObserver` class which lets you observe and respond to user gestures.\n\n### Data modules\n\n+ [data/observable]({%ns_cookbook data/observable%}): Provides the `Observable` class which represents an observable object or data in the MVVM paradigm.\n+ [data/observable-array]({%ns_cookbook data/observable-array%}): Provides the `ObservableArray` class which detects and responds to changes in a collection of objects.\n+ [data/virtual-array]({%ns_cookbook data/virtual-array%}): Provides the `VirtualArray` class which is an advanced array-like class that helps loading items on demand.\n\n### User interface modules\n\n+ [ui/frame]({%ns_cookbook ui/frame%}): Provides the `Frame` class which represents the logical `View` unit that is responsible for navigation within an application.\n+ [ui/page]({%ns_cookbook ui/page%}): Provides the `Page` class which represents a logical unit for navigation inside a `Frame`. NativeScript apps consist of pages.\n+ [color]({%ns_cookbook color%}): Lets you create colors which you can use when you style the UI.\n+ [text/formatted-string]({%ns_cookbook formatted-string%}): Provides the `FormattedString` and `Span` classes which you can use to create rich text formatted strings.\n+ [xml]({%ns_cookbook xml%}): Provides the `XmlParser` class which is a SAX parser using the easysax implementation.\n+ [ui/styling]({%ns_cookbook ui/styling%}): Provides the `Style` class which is responsible for the visual appearance of elements.\n+ [ui/animation]({%ns_cookbook ui/animation%}): Provides the `Animation` class which lets you animate view properties.\n\n\n#### Layouts\n\n+ [ui/layouts/stack-layout]({%ns_cookbook ui/layouts/stack-layout%}): Provides the `StackLayout` class which lets you arrange the children of the layout in a single line.\n+ [ui/layouts/grid-layout]({%ns_cookbook ui/layouts/grid-layout%}): Provides the `GridLayout` class which lets you arrange the children of the layout in a flexible grid area with columns and rows.\n+ [ui/layouts/absolute-layout]({%ns_cookbook ui/layouts/absolute-layout%}): Provides the `AbsoluteLayout` class which lets you arrange the children of the layout at arbitrary positions or draw them in multiple layers.\n+ [ui/layouts/wrap-layout]({%ns_cookbook ui/layouts/wrap-layout%}): Provides the `WrapLayout` class which lets you arrange the children of the layout at sequential positions from left to right and then wrap the lines of children from top to bottom.\n\n#### Widgets\n\n+ [ui/activity-indicator]({%ns_cookbook ui/activity-indicator%}): Provides the `ActivityIndicator` class which represents a widget for showing that a service is currently busy.\n+ [ui/button]({%ns_cookbook ui/button%}): Provides the `Button` class which is a standard button widget.\n+ [ui/label]({%ns_cookbook ui/label%}): Provides the `Label` class which is a standard label widget.\n+ [ui/text-field]({%ns_cookbook ui/text-field%}): Provides the `TextField` class which represents an editable single-line box.\n+ [ui/text-view]({%ns_cookbook ui/text-view%}): Provides the `TextView` class which represents an editable multi-line line box.\n+ [ui/list-view]({%ns_cookbook ui/list-view%}): Provides the `ListView` class which represents a standard list view widget.\n+ [ui/image]({%ns_cookbook ui/image%}): Provides the `Image` class which represents an image widget.\n+ [ui/progress]({%ns_cookbook ui/progress%}): Provides the `Progress` class which represents a progress or loading indicator.\n+ [ui/scroll-view]({%ns_cookbook ui/scroll-view%}): Provides the `ScrollView` class which represents a scrollable area that can show content which is larger than the visible area.\n+ [ui/search-bar]({%ns_cookbook ui/search-bar%}): Provides the `SearchBar` class which represents a standard search bar component.\n+ [ui/slider]({%ns_cookbook ui/slider%}): Provides the `Slider` class which represents a standard slider component.\n+ [ui/switch]({%ns_cookbook ui/switch%}): Provides the `Switch` class which represents a standard switch component.\n+ [ui/tab-view]({%ns_cookbook ui/tab-view%}): Provides the `TabView` class which represents a standard content component with tabs.\n+ [ui/web-view]({%ns_cookbook ui/web-view%}): Provides the `WebView` class which represents a standard browser widget.\n+ [ui/html-view]({%ns_cookbook ui/html-view%}): Provides the `HtmlView` class which represents a standard html view widget.\n+ [ui/dialogs]({%ns_cookbook ui/dialogs%}): Lets you show various dialogs such as alerts, prompts, confirmations and others.\n+ [ui/list-picker]({%ns_cookbook ui/list-picker%}): Provides the `ListPicker` class which represents a standard list picker component.\n+ [ui/date-picker]({%ns_cookbook ui/date-picker%}): Provides the `DatePicker` class which represents a standard date picker component.\n+ [ui/time-picker]({%ns_cookbook ui/time-picker%}): Provides the `TimePicker` class which represents a standard time picker component.\n+ [ui/placeholder]({%slug placeholder %}): Provides the `Placeholder` class which lets you add a native widget to the visual tree.\n\n### WHATWG Polyfills\n\n+ [fetch]({%ns_cookbook fetch%}): The `Fetch` polyfill that provides requests, responses, and the process that binds them: fetching. https://fetch.spec.whatwg.org/\n","source":"core-concepts/modules.md","raw":"---\ntitle: Modules\ndescription: You can access the native device and platform capabilities of your target platform with the help of the NativeScript modules.\nposition: 3\nslug: modules\nprevious_url: /modules\n---\n\n# Modules\n\nTo let you access the native device and platform capabilities of your target platform, NativeScript uses a modular design pattern. All device, platform or user interface functionalities reside in separate modules. To access the functionality provided by a module, you need to **require** the module.\n\nIn your project, the files for each module reside in a dedicated subdirectory in the `tns_modules` directory. Each default module comes along with a `package.json` file that declares how the module should be called within your call and which file contains its respective code.\n\n```JSON\n{ \"name\" : \"button\",\n  \"main\" : \"button.js\" }\n``` \n\n* [Core modules](#core-modules)\n* [Device functionality modules](#device-functionality-modules)\n* [Data modules](#data-modules)\n* [User interface modules](#user-interface-modules)\n\t* [Layouts](#layouts)\n\t* [Widgets](#widgets)\n* [WHATWG polyfills](#whatwg-polyfills)\n* \n### Core modules\n\n+ [application]({%ns_cookbook application%}): Provides the application abstraction with all related methods.\n+ [console]({%ns_cookbook console%}): Lets you print messages to the device console.\n+ [application-settings]({%ns_cookbook application-settings%}): Lets you save and restore any information related to your application.\n+ [http]({%ns_cookbook http%}): Lets you send web requests and receive the responses.\n+ [image-source]({%ns_cookbook image-source%}): Provides the `ImageSource` class which encapsulates the common abstraction behind a platform-specific object that is used as a source for images (typically a Bitmap).\n+ [timer]({%ns_cookbook timer%}): Lets you to create, start, stop and react to timers.\n+ [trace]({%ns_cookbook trace%}): Lets you trace and print specific information based on categories.\n+ [ui/image-cache]({%ns_cookbook ui/image-cache%}): Provides the `Cache` class which handles image download requests and caches the already downloaded images.\n+ [connectivity]({%ns_cookbook connectivity%}): Lets you check the type of Internet connection and monitor its state changes.\n\n### Device functionality modules\n\n+ [camera]({%ns_cookbook camera%}): Lets you take pictures with the device camera.\n+ [location]({%ns_cookbook location%}): Lets you use the geolocation sensors of the device.\n+ [platform]({%ns_cookbook platform%}): Provides information about the device, its operating system and software.\n+ [fps-meter]({%ns_cookbook fps-meter%}): Lets you capture the frames-per-second metrics of your application.\n+ [file-system]({%ns_cookbook file-system%}): Lets you work with the device file system. Provides high-level abstractions for file system entities such as files, folders, known folders, paths, separators, etc.\n+ [ui/gestures]({%ns_cookbook ui/gestures%}): Provides the `GesturesObserver` class which lets you observe and respond to user gestures.\n\n### Data modules\n\n+ [data/observable]({%ns_cookbook data/observable%}): Provides the `Observable` class which represents an observable object or data in the MVVM paradigm.\n+ [data/observable-array]({%ns_cookbook data/observable-array%}): Provides the `ObservableArray` class which detects and responds to changes in a collection of objects.\n+ [data/virtual-array]({%ns_cookbook data/virtual-array%}): Provides the `VirtualArray` class which is an advanced array-like class that helps loading items on demand.\n\n### User interface modules\n\n+ [ui/frame]({%ns_cookbook ui/frame%}): Provides the `Frame` class which represents the logical `View` unit that is responsible for navigation within an application.\n+ [ui/page]({%ns_cookbook ui/page%}): Provides the `Page` class which represents a logical unit for navigation inside a `Frame`. NativeScript apps consist of pages.\n+ [color]({%ns_cookbook color%}): Lets you create colors which you can use when you style the UI.\n+ [text/formatted-string]({%ns_cookbook formatted-string%}): Provides the `FormattedString` and `Span` classes which you can use to create rich text formatted strings.\n+ [xml]({%ns_cookbook xml%}): Provides the `XmlParser` class which is a SAX parser using the easysax implementation.\n+ [ui/styling]({%ns_cookbook ui/styling%}): Provides the `Style` class which is responsible for the visual appearance of elements.\n+ [ui/animation]({%ns_cookbook ui/animation%}): Provides the `Animation` class which lets you animate view properties.\n\n\n#### Layouts\n\n+ [ui/layouts/stack-layout]({%ns_cookbook ui/layouts/stack-layout%}): Provides the `StackLayout` class which lets you arrange the children of the layout in a single line.\n+ [ui/layouts/grid-layout]({%ns_cookbook ui/layouts/grid-layout%}): Provides the `GridLayout` class which lets you arrange the children of the layout in a flexible grid area with columns and rows.\n+ [ui/layouts/absolute-layout]({%ns_cookbook ui/layouts/absolute-layout%}): Provides the `AbsoluteLayout` class which lets you arrange the children of the layout at arbitrary positions or draw them in multiple layers.\n+ [ui/layouts/wrap-layout]({%ns_cookbook ui/layouts/wrap-layout%}): Provides the `WrapLayout` class which lets you arrange the children of the layout at sequential positions from left to right and then wrap the lines of children from top to bottom.\n\n#### Widgets\n\n+ [ui/activity-indicator]({%ns_cookbook ui/activity-indicator%}): Provides the `ActivityIndicator` class which represents a widget for showing that a service is currently busy.\n+ [ui/button]({%ns_cookbook ui/button%}): Provides the `Button` class which is a standard button widget.\n+ [ui/label]({%ns_cookbook ui/label%}): Provides the `Label` class which is a standard label widget.\n+ [ui/text-field]({%ns_cookbook ui/text-field%}): Provides the `TextField` class which represents an editable single-line box.\n+ [ui/text-view]({%ns_cookbook ui/text-view%}): Provides the `TextView` class which represents an editable multi-line line box.\n+ [ui/list-view]({%ns_cookbook ui/list-view%}): Provides the `ListView` class which represents a standard list view widget.\n+ [ui/image]({%ns_cookbook ui/image%}): Provides the `Image` class which represents an image widget.\n+ [ui/progress]({%ns_cookbook ui/progress%}): Provides the `Progress` class which represents a progress or loading indicator.\n+ [ui/scroll-view]({%ns_cookbook ui/scroll-view%}): Provides the `ScrollView` class which represents a scrollable area that can show content which is larger than the visible area.\n+ [ui/search-bar]({%ns_cookbook ui/search-bar%}): Provides the `SearchBar` class which represents a standard search bar component.\n+ [ui/slider]({%ns_cookbook ui/slider%}): Provides the `Slider` class which represents a standard slider component.\n+ [ui/switch]({%ns_cookbook ui/switch%}): Provides the `Switch` class which represents a standard switch component.\n+ [ui/tab-view]({%ns_cookbook ui/tab-view%}): Provides the `TabView` class which represents a standard content component with tabs.\n+ [ui/web-view]({%ns_cookbook ui/web-view%}): Provides the `WebView` class which represents a standard browser widget.\n+ [ui/html-view]({%ns_cookbook ui/html-view%}): Provides the `HtmlView` class which represents a standard html view widget.\n+ [ui/dialogs]({%ns_cookbook ui/dialogs%}): Lets you show various dialogs such as alerts, prompts, confirmations and others.\n+ [ui/list-picker]({%ns_cookbook ui/list-picker%}): Provides the `ListPicker` class which represents a standard list picker component.\n+ [ui/date-picker]({%ns_cookbook ui/date-picker%}): Provides the `DatePicker` class which represents a standard date picker component.\n+ [ui/time-picker]({%ns_cookbook ui/time-picker%}): Provides the `TimePicker` class which represents a standard time picker component.\n+ [ui/placeholder]({%slug placeholder %}): Provides the `Placeholder` class which lets you add a native widget to the visual tree.\n\n### WHATWG Polyfills\n\n+ [fetch]({%ns_cookbook fetch%}): The `Fetch` polyfill that provides requests, responses, and the process that binds them: fetching. https://fetch.spec.whatwg.org/\n","date":"2016-08-26T21:05:52.874Z","updated":"2016-08-26T21:05:52.874Z","path":"core-concepts/modules.html","comments":1,"layout":"page","_id":"cisn95c6c0008wsl01fzefa72","content":"<h1 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h1><p>To let you access the native device and platform capabilities of your target platform, NativeScript uses a modular design pattern. All device, platform or user interface functionalities reside in separate modules. To access the functionality provided by a module, you need to <strong>require</strong> the module.</p>\n<p>In your project, the files for each module reside in a dedicated subdirectory in the <code>tns_modules</code> directory. Each default module comes along with a <code>package.json</code> file that declares how the module should be called within your call and which file contains its respective code.</p>\n<pre><code class=\"JSON\">{ <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"button\"</span>,\n  <span class=\"attr\">\"main\"</span> : <span class=\"string\">\"button.js\"</span> }\n</code></pre>\n<ul>\n<li><a href=\"#core-modules\">Core modules</a></li>\n<li><a href=\"#device-functionality-modules\">Device functionality modules</a></li>\n<li><a href=\"#data-modules\">Data modules</a></li>\n<li><a href=\"#user-interface-modules\">User interface modules</a><ul>\n<li><a href=\"#layouts\">Layouts</a></li>\n<li><a href=\"#widgets\">Widgets</a></li>\n</ul>\n</li>\n<li><a href=\"#whatwg-polyfills\">WHATWG polyfills</a></li>\n<li><h3 id=\"Core-modules\"><a href=\"#Core-modules\" class=\"headerlink\" title=\"Core modules\"></a>Core modules</h3></li>\n</ul>\n<ul>\n<li><a href=\"!--￼0--\">application</a>: Provides the application abstraction with all related methods.</li>\n<li><a href=\"!--￼1--\">console</a>: Lets you print messages to the device console.</li>\n<li><a href=\"!--￼2--\">application-settings</a>: Lets you save and restore any information related to your application.</li>\n<li><a href=\"!--￼3--\">http</a>: Lets you send web requests and receive the responses.</li>\n<li><a href=\"!--￼4--\">image-source</a>: Provides the <code>ImageSource</code> class which encapsulates the common abstraction behind a platform-specific object that is used as a source for images (typically a Bitmap).</li>\n<li><a href=\"!--￼5--\">timer</a>: Lets you to create, start, stop and react to timers.</li>\n<li><a href=\"!--￼6--\">trace</a>: Lets you trace and print specific information based on categories.</li>\n<li><a href=\"!--￼7--\">ui/image-cache</a>: Provides the <code>Cache</code> class which handles image download requests and caches the already downloaded images.</li>\n<li><a href=\"!--￼8--\">connectivity</a>: Lets you check the type of Internet connection and monitor its state changes.</li>\n</ul>\n<h3 id=\"Device-functionality-modules\"><a href=\"#Device-functionality-modules\" class=\"headerlink\" title=\"Device functionality modules\"></a>Device functionality modules</h3><ul>\n<li><a href=\"!--￼9--\">camera</a>: Lets you take pictures with the device camera.</li>\n<li><a href=\"!--￼10--\">location</a>: Lets you use the geolocation sensors of the device.</li>\n<li><a href=\"!--￼11--\">platform</a>: Provides information about the device, its operating system and software.</li>\n<li><a href=\"!--￼12--\">fps-meter</a>: Lets you capture the frames-per-second metrics of your application.</li>\n<li><a href=\"!--￼13--\">file-system</a>: Lets you work with the device file system. Provides high-level abstractions for file system entities such as files, folders, known folders, paths, separators, etc.</li>\n<li><a href=\"!--￼14--\">ui/gestures</a>: Provides the <code>GesturesObserver</code> class which lets you observe and respond to user gestures.</li>\n</ul>\n<h3 id=\"Data-modules\"><a href=\"#Data-modules\" class=\"headerlink\" title=\"Data modules\"></a>Data modules</h3><ul>\n<li><a href=\"!--￼15--\">data/observable</a>: Provides the <code>Observable</code> class which represents an observable object or data in the MVVM paradigm.</li>\n<li><a href=\"!--￼16--\">data/observable-array</a>: Provides the <code>ObservableArray</code> class which detects and responds to changes in a collection of objects.</li>\n<li><a href=\"!--￼17--\">data/virtual-array</a>: Provides the <code>VirtualArray</code> class which is an advanced array-like class that helps loading items on demand.</li>\n</ul>\n<h3 id=\"User-interface-modules\"><a href=\"#User-interface-modules\" class=\"headerlink\" title=\"User interface modules\"></a>User interface modules</h3><ul>\n<li><a href=\"!--￼18--\">ui/frame</a>: Provides the <code>Frame</code> class which represents the logical <code>View</code> unit that is responsible for navigation within an application.</li>\n<li><a href=\"!--￼19--\">ui/page</a>: Provides the <code>Page</code> class which represents a logical unit for navigation inside a <code>Frame</code>. NativeScript apps consist of pages.</li>\n<li><a href=\"!--￼20--\">color</a>: Lets you create colors which you can use when you style the UI.</li>\n<li><a href=\"!--￼21--\">text/formatted-string</a>: Provides the <code>FormattedString</code> and <code>Span</code> classes which you can use to create rich text formatted strings.</li>\n<li><a href=\"!--￼22--\">xml</a>: Provides the <code>XmlParser</code> class which is a SAX parser using the easysax implementation.</li>\n<li><a href=\"!--￼23--\">ui/styling</a>: Provides the <code>Style</code> class which is responsible for the visual appearance of elements.</li>\n<li><a href=\"!--￼24--\">ui/animation</a>: Provides the <code>Animation</code> class which lets you animate view properties.</li>\n</ul>\n<h4 id=\"Layouts\"><a href=\"#Layouts\" class=\"headerlink\" title=\"Layouts\"></a>Layouts</h4><ul>\n<li><a href=\"!--￼25--\">ui/layouts/stack-layout</a>: Provides the <code>StackLayout</code> class which lets you arrange the children of the layout in a single line.</li>\n<li><a href=\"!--￼26--\">ui/layouts/grid-layout</a>: Provides the <code>GridLayout</code> class which lets you arrange the children of the layout in a flexible grid area with columns and rows.</li>\n<li><a href=\"!--￼27--\">ui/layouts/absolute-layout</a>: Provides the <code>AbsoluteLayout</code> class which lets you arrange the children of the layout at arbitrary positions or draw them in multiple layers.</li>\n<li><a href=\"!--￼28--\">ui/layouts/wrap-layout</a>: Provides the <code>WrapLayout</code> class which lets you arrange the children of the layout at sequential positions from left to right and then wrap the lines of children from top to bottom.</li>\n</ul>\n<h4 id=\"Widgets\"><a href=\"#Widgets\" class=\"headerlink\" title=\"Widgets\"></a>Widgets</h4><ul>\n<li><a href=\"!--￼29--\">ui/activity-indicator</a>: Provides the <code>ActivityIndicator</code> class which represents a widget for showing that a service is currently busy.</li>\n<li><a href=\"!--￼30--\">ui/button</a>: Provides the <code>Button</code> class which is a standard button widget.</li>\n<li><a href=\"!--￼31--\">ui/label</a>: Provides the <code>Label</code> class which is a standard label widget.</li>\n<li><a href=\"!--￼32--\">ui/text-field</a>: Provides the <code>TextField</code> class which represents an editable single-line box.</li>\n<li><a href=\"!--￼33--\">ui/text-view</a>: Provides the <code>TextView</code> class which represents an editable multi-line line box.</li>\n<li><a href=\"!--￼34--\">ui/list-view</a>: Provides the <code>ListView</code> class which represents a standard list view widget.</li>\n<li><a href=\"!--￼35--\">ui/image</a>: Provides the <code>Image</code> class which represents an image widget.</li>\n<li><a href=\"!--￼36--\">ui/progress</a>: Provides the <code>Progress</code> class which represents a progress or loading indicator.</li>\n<li><a href=\"!--￼37--\">ui/scroll-view</a>: Provides the <code>ScrollView</code> class which represents a scrollable area that can show content which is larger than the visible area.</li>\n<li><a href=\"!--￼38--\">ui/search-bar</a>: Provides the <code>SearchBar</code> class which represents a standard search bar component.</li>\n<li><a href=\"!--￼39--\">ui/slider</a>: Provides the <code>Slider</code> class which represents a standard slider component.</li>\n<li><a href=\"!--￼40--\">ui/switch</a>: Provides the <code>Switch</code> class which represents a standard switch component.</li>\n<li><a href=\"!--￼41--\">ui/tab-view</a>: Provides the <code>TabView</code> class which represents a standard content component with tabs.</li>\n<li><a href=\"!--￼42--\">ui/web-view</a>: Provides the <code>WebView</code> class which represents a standard browser widget.</li>\n<li><a href=\"!--￼43--\">ui/html-view</a>: Provides the <code>HtmlView</code> class which represents a standard html view widget.</li>\n<li><a href=\"!--￼44--\">ui/dialogs</a>: Lets you show various dialogs such as alerts, prompts, confirmations and others.</li>\n<li><a href=\"!--￼45--\">ui/list-picker</a>: Provides the <code>ListPicker</code> class which represents a standard list picker component.</li>\n<li><a href=\"!--￼46--\">ui/date-picker</a>: Provides the <code>DatePicker</code> class which represents a standard date picker component.</li>\n<li><a href=\"!--￼47--\">ui/time-picker</a>: Provides the <code>TimePicker</code> class which represents a standard time picker component.</li>\n<li><a href=\"!--￼48--\">ui/placeholder</a>: Provides the <code>Placeholder</code> class which lets you add a native widget to the visual tree.</li>\n</ul>\n<h3 id=\"WHATWG-Polyfills\"><a href=\"#WHATWG-Polyfills\" class=\"headerlink\" title=\"WHATWG Polyfills\"></a>WHATWG Polyfills</h3><ul>\n<li><a href=\"!--￼49--\">fetch</a>: The <code>Fetch</code> polyfill that provides requests, responses, and the process that binds them: fetching. <a href=\"https://fetch.spec.whatwg.org/\" target=\"_blank\" rel=\"external\">https://fetch.spec.whatwg.org/</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h1><p>To let you access the native device and platform capabilities of your target platform, NativeScript uses a modular design pattern. All device, platform or user interface functionalities reside in separate modules. To access the functionality provided by a module, you need to <strong>require</strong> the module.</p>\n<p>In your project, the files for each module reside in a dedicated subdirectory in the <code>tns_modules</code> directory. Each default module comes along with a <code>package.json</code> file that declares how the module should be called within your call and which file contains its respective code.</p>\n<pre><code class=\"JSON\">{ <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"button\"</span>,\n  <span class=\"attr\">\"main\"</span> : <span class=\"string\">\"button.js\"</span> }\n</code></pre>\n<ul>\n<li><a href=\"#core-modules\">Core modules</a></li>\n<li><a href=\"#device-functionality-modules\">Device functionality modules</a></li>\n<li><a href=\"#data-modules\">Data modules</a></li>\n<li><a href=\"#user-interface-modules\">User interface modules</a><ul>\n<li><a href=\"#layouts\">Layouts</a></li>\n<li><a href=\"#widgets\">Widgets</a></li>\n</ul>\n</li>\n<li><a href=\"#whatwg-polyfills\">WHATWG polyfills</a></li>\n<li><h3 id=\"Core-modules\"><a href=\"#Core-modules\" class=\"headerlink\" title=\"Core modules\"></a>Core modules</h3></li>\n</ul>\n<ul>\n<li><a href=\"!--￼0--\">application</a>: Provides the application abstraction with all related methods.</li>\n<li><a href=\"!--￼1--\">console</a>: Lets you print messages to the device console.</li>\n<li><a href=\"!--￼2--\">application-settings</a>: Lets you save and restore any information related to your application.</li>\n<li><a href=\"!--￼3--\">http</a>: Lets you send web requests and receive the responses.</li>\n<li><a href=\"!--￼4--\">image-source</a>: Provides the <code>ImageSource</code> class which encapsulates the common abstraction behind a platform-specific object that is used as a source for images (typically a Bitmap).</li>\n<li><a href=\"!--￼5--\">timer</a>: Lets you to create, start, stop and react to timers.</li>\n<li><a href=\"!--￼6--\">trace</a>: Lets you trace and print specific information based on categories.</li>\n<li><a href=\"!--￼7--\">ui/image-cache</a>: Provides the <code>Cache</code> class which handles image download requests and caches the already downloaded images.</li>\n<li><a href=\"!--￼8--\">connectivity</a>: Lets you check the type of Internet connection and monitor its state changes.</li>\n</ul>\n<h3 id=\"Device-functionality-modules\"><a href=\"#Device-functionality-modules\" class=\"headerlink\" title=\"Device functionality modules\"></a>Device functionality modules</h3><ul>\n<li><a href=\"!--￼9--\">camera</a>: Lets you take pictures with the device camera.</li>\n<li><a href=\"!--￼10--\">location</a>: Lets you use the geolocation sensors of the device.</li>\n<li><a href=\"!--￼11--\">platform</a>: Provides information about the device, its operating system and software.</li>\n<li><a href=\"!--￼12--\">fps-meter</a>: Lets you capture the frames-per-second metrics of your application.</li>\n<li><a href=\"!--￼13--\">file-system</a>: Lets you work with the device file system. Provides high-level abstractions for file system entities such as files, folders, known folders, paths, separators, etc.</li>\n<li><a href=\"!--￼14--\">ui/gestures</a>: Provides the <code>GesturesObserver</code> class which lets you observe and respond to user gestures.</li>\n</ul>\n<h3 id=\"Data-modules\"><a href=\"#Data-modules\" class=\"headerlink\" title=\"Data modules\"></a>Data modules</h3><ul>\n<li><a href=\"!--￼15--\">data/observable</a>: Provides the <code>Observable</code> class which represents an observable object or data in the MVVM paradigm.</li>\n<li><a href=\"!--￼16--\">data/observable-array</a>: Provides the <code>ObservableArray</code> class which detects and responds to changes in a collection of objects.</li>\n<li><a href=\"!--￼17--\">data/virtual-array</a>: Provides the <code>VirtualArray</code> class which is an advanced array-like class that helps loading items on demand.</li>\n</ul>\n<h3 id=\"User-interface-modules\"><a href=\"#User-interface-modules\" class=\"headerlink\" title=\"User interface modules\"></a>User interface modules</h3><ul>\n<li><a href=\"!--￼18--\">ui/frame</a>: Provides the <code>Frame</code> class which represents the logical <code>View</code> unit that is responsible for navigation within an application.</li>\n<li><a href=\"!--￼19--\">ui/page</a>: Provides the <code>Page</code> class which represents a logical unit for navigation inside a <code>Frame</code>. NativeScript apps consist of pages.</li>\n<li><a href=\"!--￼20--\">color</a>: Lets you create colors which you can use when you style the UI.</li>\n<li><a href=\"!--￼21--\">text/formatted-string</a>: Provides the <code>FormattedString</code> and <code>Span</code> classes which you can use to create rich text formatted strings.</li>\n<li><a href=\"!--￼22--\">xml</a>: Provides the <code>XmlParser</code> class which is a SAX parser using the easysax implementation.</li>\n<li><a href=\"!--￼23--\">ui/styling</a>: Provides the <code>Style</code> class which is responsible for the visual appearance of elements.</li>\n<li><a href=\"!--￼24--\">ui/animation</a>: Provides the <code>Animation</code> class which lets you animate view properties.</li>\n</ul>\n<h4 id=\"Layouts\"><a href=\"#Layouts\" class=\"headerlink\" title=\"Layouts\"></a>Layouts</h4><ul>\n<li><a href=\"!--￼25--\">ui/layouts/stack-layout</a>: Provides the <code>StackLayout</code> class which lets you arrange the children of the layout in a single line.</li>\n<li><a href=\"!--￼26--\">ui/layouts/grid-layout</a>: Provides the <code>GridLayout</code> class which lets you arrange the children of the layout in a flexible grid area with columns and rows.</li>\n<li><a href=\"!--￼27--\">ui/layouts/absolute-layout</a>: Provides the <code>AbsoluteLayout</code> class which lets you arrange the children of the layout at arbitrary positions or draw them in multiple layers.</li>\n<li><a href=\"!--￼28--\">ui/layouts/wrap-layout</a>: Provides the <code>WrapLayout</code> class which lets you arrange the children of the layout at sequential positions from left to right and then wrap the lines of children from top to bottom.</li>\n</ul>\n<h4 id=\"Widgets\"><a href=\"#Widgets\" class=\"headerlink\" title=\"Widgets\"></a>Widgets</h4><ul>\n<li><a href=\"!--￼29--\">ui/activity-indicator</a>: Provides the <code>ActivityIndicator</code> class which represents a widget for showing that a service is currently busy.</li>\n<li><a href=\"!--￼30--\">ui/button</a>: Provides the <code>Button</code> class which is a standard button widget.</li>\n<li><a href=\"!--￼31--\">ui/label</a>: Provides the <code>Label</code> class which is a standard label widget.</li>\n<li><a href=\"!--￼32--\">ui/text-field</a>: Provides the <code>TextField</code> class which represents an editable single-line box.</li>\n<li><a href=\"!--￼33--\">ui/text-view</a>: Provides the <code>TextView</code> class which represents an editable multi-line line box.</li>\n<li><a href=\"!--￼34--\">ui/list-view</a>: Provides the <code>ListView</code> class which represents a standard list view widget.</li>\n<li><a href=\"!--￼35--\">ui/image</a>: Provides the <code>Image</code> class which represents an image widget.</li>\n<li><a href=\"!--￼36--\">ui/progress</a>: Provides the <code>Progress</code> class which represents a progress or loading indicator.</li>\n<li><a href=\"!--￼37--\">ui/scroll-view</a>: Provides the <code>ScrollView</code> class which represents a scrollable area that can show content which is larger than the visible area.</li>\n<li><a href=\"!--￼38--\">ui/search-bar</a>: Provides the <code>SearchBar</code> class which represents a standard search bar component.</li>\n<li><a href=\"!--￼39--\">ui/slider</a>: Provides the <code>Slider</code> class which represents a standard slider component.</li>\n<li><a href=\"!--￼40--\">ui/switch</a>: Provides the <code>Switch</code> class which represents a standard switch component.</li>\n<li><a href=\"!--￼41--\">ui/tab-view</a>: Provides the <code>TabView</code> class which represents a standard content component with tabs.</li>\n<li><a href=\"!--￼42--\">ui/web-view</a>: Provides the <code>WebView</code> class which represents a standard browser widget.</li>\n<li><a href=\"!--￼43--\">ui/html-view</a>: Provides the <code>HtmlView</code> class which represents a standard html view widget.</li>\n<li><a href=\"!--￼44--\">ui/dialogs</a>: Lets you show various dialogs such as alerts, prompts, confirmations and others.</li>\n<li><a href=\"!--￼45--\">ui/list-picker</a>: Provides the <code>ListPicker</code> class which represents a standard list picker component.</li>\n<li><a href=\"!--￼46--\">ui/date-picker</a>: Provides the <code>DatePicker</code> class which represents a standard date picker component.</li>\n<li><a href=\"!--￼47--\">ui/time-picker</a>: Provides the <code>TimePicker</code> class which represents a standard time picker component.</li>\n<li><a href=\"!--￼48--\">ui/placeholder</a>: Provides the <code>Placeholder</code> class which lets you add a native widget to the visual tree.</li>\n</ul>\n<h3 id=\"WHATWG-Polyfills\"><a href=\"#WHATWG-Polyfills\" class=\"headerlink\" title=\"WHATWG Polyfills\"></a>WHATWG Polyfills</h3><ul>\n<li><a href=\"!--￼49--\">fetch</a>: The <code>Fetch</code> polyfill that provides requests, responses, and the process that binds them: fetching. <a href=\"https://fetch.spec.whatwg.org/\">https://fetch.spec.whatwg.org/</a></li>\n</ul>\n"},{"title":"Data Binding","description":"NativeScript Documentation - Data Binding","position":4,"slug":"binding","previous_url":"/bindings","environment":"nativescript","_content":"\n#Data Binding\n\nData binding is the process of connecting application user interface (UI) to a data object (code). It enables changes propagation by reflecting UI modifications in the code and vise versa.\n\n> In the following article, **source** is used as any object in the code and **target** as any UI control (like TextField).\n\n* [Data flow direction](#data-flow-direction)\n* [Basic binding concepts](#basic-binding-concepts)\n* [How to create a binding](#how-to-create-a-binding)\n    * [Two-way binding in code](#two-way-binding-in-code)\n    * [Binding in XML](#binding-in-xml)\n* [Binding source](#binding-source)\n\t* [Binding to a property](#binding-to-a-property)\n\t* [Binding to an event in XML](#binding-to-an-event-in-xml)\n\t* [Binding to a plain object](#binding-to-a-plain-object)\n\t* [Binding to a parent binding context](#binding-to-a-parent-binding-context)\n* [Using expressions for bindings](#using-expressions-for-bindings)\n* [Using converters in bindings](#using-converters-in-bindings)\n* [Stop binding](#stop-binding)\n\n##Data flow direction\n\nPart of the data binding settings is the way data flows. NativeScript data binding supports the following data transmissions.\n\n* **One-Way**: This is the default setting, which ensures that the target property updates when a change in the source property occurs. However, UI modification will not update the code and it will stop the binding connection.\n\n* **Two-Way**: This setting ensures the reflection of changes in both directions &mdash; from target to source and source to target. You can use two-way data binding when you need to handle user input.\n\n##Basic binding concepts\n\nGenerally, almost every UI control could be bound to a data object (all NativeScript controls are created with data binding in mind). After your code has met the following requirements, you can use data-binding out of the box.\n\n* The target object has to be a successor of the **Bindable** class. All NativeScript UI controls already inherit from this class.\n* For **two-way** data binding, the target property should be to a **dependency property**.\n* For **one-way** binding, using a plain property is sufficient.\n* The data object should raise a **propertyChange** event for every change in the value of its property in order to notify all of the listeners interested in the change.\n\n##How to create a binding\n\n###Two-way binding in code\n\nThe example below consists of a `Label`, `TextField` and a source property to which the UI controls are bound. The purpose will be, when the user enters an input in the `TextField`, to update the property in the code and the `Label` text.\n\nFirst, the **source** object is created with a **textSource** property. A constant flow of propagating changes from the source property to the Label is necessary. Thus, the property in the code has to raise a **propertyChange** event in order to notify the `Label` for the changes. To raise this event, a built-in class is used, which provides this functionality - `Observable`.\n\n``` JavaScript\nvar observableModule = require(\"data/observable\");\nvar source = new observableModule.Observable();\nsource.textSource = \"Text set via twoWay binding\";\n```\n``` TypeScript\nimport observableModule = require(\"data/observable\");\nvar source = new observableModule.Observable();\nsource.textSource = \"Text set via twoWay binding\";\n```\n\nNext, **target** objects are created to bind to the source property. In this case, these will be a `Label` and a `TextField`, which inherit from the `Bindable` class (as all of the UI controls do).\n\n``` JavaScript\n//create the TextField\nvar textFieldModule = require(\"ui/text-field\");\nvar targetTextField = new textFieldModule.TextField();\n\n//create the Label\nvar labelModule = require(\"ui/label\");\nvar targetLabel = new labelModule.Label();\n```\n``` TypeScript\n//create the TextField\nimport textFieldModule = require(\"ui/text-field\");\nvar targetTextField = new textFieldModule.TextField();\n\n//create the Label\nimport labelModule = require(\"ui/label\");\nvar targetLabel = new labelModule.Label();\n```\nAfter that, the target objects bind to the source object. The TextField uses a two-way binding, so the user input could change the property in the code. And the binding of the Label is set to one-way in order to propagate changes only from the code to the UI.\n\n### Example 1: Binding label text property.\n``` JavaScript\n//binding the TextField\nvar textFieldBindingOptions = {\n\tsourceProperty: \"textSource\",\n\ttargetProperty: \"text\",\n\ttwoWay: true\n};\ntargetTextField.bind(textFieldBindingOptions, source);\n\n//binding the Label\nvar labelBindingOptions = {\n\tsourceProperty: \"textSource\",\n\ttargetProperty: \"text\",\n\ttwoWay: false\n};\ntargetLabel.bind(labelBindingOptions, source);\n```\n``` TypeScript\n//binding the TextField\nvar textFieldBindingOptions = {\n\tsourceProperty: \"textSource\",\n\ttargetProperty: \"text\",\n\ttwoWay: true\n};\ntargetTextField.bind(textFieldBindingOptions, source);\n\n//binding the Label\nvar labelBindingOptions = {\n\tsourceProperty: \"textSource\",\n\ttargetProperty: \"text\",\n\ttwoWay: false\n};\ntargetLabel.bind(labelBindingOptions, source);\n```\n\n###Binding in XML\n\nTo create a binding in XML, a source object is needed, which will be created the same way, as in the example above ([Two-Way Binding in Code](#two-way-binding-in-code)). Then the binding is described in the XML (using a mustache syntax). With an XML declaration, only the names of the properties are set - for the target: text, and for source: textSource. The interesting thing here is that the source of the binding is not specified explicitly. More about this topic will be discussed in the [Binding source](#binding-source) article.\n\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<TextField text=\"{{ textSource }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n\n> Note: When creating UI elements with an XML declaration, the data binding is two-way by default.\n\n##Binding source\n\n###Binding to a property\n\nAn important part of the data binding is setting the source object. For a continuous flow of data changes, the source property needs to emit a **propertyChange** event. NativeScript data binding works with any object that emits this event. Adding a binding **source** happens by passing it as a second parameter in the method **bind(bindingOptions, source)**. This parameter is optional and could be omitted, in which case the source is used for a property named **bindingContext** of the `Bindable` class. What is special about this property is that it is inheritable across the visual tree. This means that a UI control can use the `bindingContext` of the first of its **parent** elements, which has an explicitly set **bindingContext**. In the example from [Two-Way Binding in Code](#two-way-binding-in-code), the `bindingContext` can be set either on a `Page` instance or a `StackLayout` instance and the `TextField` will inherit it as a proper source for the binding of its \"text\" property.\n\n``` JavaScript\npage.bindingContext = source;\n//or\nstackLayout.bindingContext = source;\n```\n``` TypeScript\npage.bindingContext = source;\n//or\nstackLayout.bindingContext = source;\n```\n###Binding to an event in XML\n\n\nThere is an option to bind a function to execute on a specific event (MVVM command like). This option is available only through an XML declaration. To implement such a functionality, the source object should have an event handler function.\n\n### Example 2: Binding function on button tap event.\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<Button text=\"Test Button For Binding\" tap=\"{{ onTap }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\nsource.set(\"onTap\", function(eventData) {\n\tconsole.log(\"button is tapped!\");\n});\npage.bindingContext = source;\n```\n``` TypeScript\nsource.set(\"onTap\", function(eventData) {\n\tconsole.log(\"button is tapped!\");\n});\npage.bindingContext = source;\n```\n\n> Note: Be aware that if there is a button with an event handler function **onTap** within the page code-behind ([more info about XML declarations]({%slug ui-basics %}), and **onTap** function within the **bindingContext** object, then there **will not** be two event handlers hooked up for that button. For executing the function in the code behind, the following syntax should be used in the XML - **tap=\"onTap\"** and for the function from the bindingContext - **tap=\"\\{\\{ onTap \\}\\}\"**.\n\n###Binding to a plain object\n\nA very common case is to provide a list (array) of plain elements (numbers, dates, strings) to a `ListView` items collection. All examples above demonstrate how to bind a UI element to a property of the bindingContext. If there is only plain data, there is no property to bind, so the binding should be to the entire object. Here comes another feature of NativeScript binding - object or value binding. To refer to the entire object, which is Date() in the example, the keyword `$value` should be used.\n\n### Example 3: Bind ListView to a property of the bindingContext .\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<ListView items=\"{{ items }}\" height=\"200\">\n\t\t\t<ListView.itemTemplate>\n\t\t\t\t<Label text=\"{{ $value }}\" />\n\t\t\t</ListView.itemTemplate>\n\t\t</ListView>\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\nvar appModule = require(\"application\");\nvar list = [];\nvar i;\nfor(i = 0; i < 5; i++) {\n\tlist.push(new Date());\n}\nsource.set(\"items\", list);\n```\n``` TypeScript\nimport appModule = require(\"application\");\nvar list = [];\nvar i;\nfor(i = 0; i < 5; i++) {\n\tlist.push(new Date());\n}\nsource.set(\"items\", list);\n``` \n###Binding to a parent binding context\n\nAnother common case in working with bindings is requesting access to the parent binding context. It is because it might be different from the bindingContext of the child and might contain information, which the child has to use. Generally, the bindingContext is inheritable, but not when the elements (items) are created dynamically based on some data source. For example, `ListView` creates its child items based on an `itemТemplate`, which describes what the `ListView` element will look like. When this element is added to the visual tree, it gets for binding context an element from a ListView `items` array (with the corresponding index). This process creates a new binding context chain for the child item and its inner UI elements. So, the inner UI element cannot access the binding context of the 'ListView'. In order to solve this problem, NativeScript binding infrastructure has two special keywords: `$parent` and `$parents`. While the first one denotes the binding context of the direct parent visual element, the second one can be used as an array (with a number or string index). This gives you the option to choose either `N` levels of UI nesting or get a parent UI element with a given type. Let's see how this works in a realistic example.\n\n### Example 4: Creating ListView child items based on the itemTemplate.\n``` XML\n<Page loaded=\"pageLoaded\">\n\t<GridLayout rows=\"*\" >{%raw%}\n\t\t<ListView items=\"{{ items }}\">\n\t\t\t<!--Describing how the element will look like-->\n\t\t\t<ListView.itemTemplate>\n\t\t\t\t<GridLayout columns=\"auto, *\">\n\t\t\t\t\t<Label text=\"{{ $value }}\" col=\"0\"/>\n\t\t\t\t\t<!--The TextField has a different bindingCotnext from the ListView, but has to use its properties. Thus the parents['ListView'] has to be used.-->\n\t\t\t\t\t<TextField text=\"{{ $parents['ListView'].test, $parents['ListView'].test }}\" col=\"1\"/>\n\t\t\t\t</GridLayout>\n\t\t\t</ListView.itemTemplate>\n\t\t</ListView>\n\t{%endraw%}</GridLayout>\n</Page>\n```\n``` JavaScript\nvar observable = require(\"data/observable\");\nvar pageModule = require(\"ui/page\");\n\nvar viewModel = new observable.Observable();\n\nfunction pageLoaded(args) {\n    var page = args.object;\n    viewModel.set(\"items\", [1, 2, 3]);\n    viewModel.set(\"test\", \"Test for parent binding!\");\n    page.bindingContext = viewModel;\n}\nexports.pageLoaded = pageLoaded;\n```\n``` TypeScript\nimport observable = require(\"data/observable\");\nimport pageModule = require(\"ui/page\");\n\nvar viewModel = new observable.Observable();\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pageModule.Page>args.object;\n    viewModel.set(\"items\", [1, 2, 3]);\n    viewModel.set(\"test\", \"Test for parent binding!\");\n    page.bindingContext = viewModel;\n}\n```\n##Using expressions for bindings\n\nYou can create a custom expression for bindings. Custom expressions could help in cases when a certain logic should be applied to the UI, while keeping the underlying business data and logic clear. To be more specific, let's see a basic binding expression example. The result should be a `TextField` element that will display the value of the `sourceProperty` followed by \" some static text\" string.\n\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<TextField text=\"{{ sourceProperty, sourceProperty + ' some static text' }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n\n> Note: Binding expression could be used without explicitly named `source property` ( TextField text=\"{{ sourceProperty + ' some static text' }}\" ). In that case `$value` is used as a `source property`. However this could lead to problems when a nested property should be observed for changes (e.g. `item.nestedProp`). `$value` represents `bindingContext` and when any property of the `bindingContext` is changed expression will be evaluated. Since `nestedProp` is not a property of the `bindingContext` in `item.nestedProp` then there will be no propertyChange listener attached and changes to `nestedProp` will not be populated to UI. So it is a good practice to specify which property should be used as `source property` in order to eliminate such issues.\n\nThe full binding syntax contains three parameters - the first parameter is the source property, which will be listened to for changes. The second parameter is the expression that will be evaluated. The third parameter states whether the binding is two-way or not. As mentioned earlier, XML declaration creates a two-way binding by default, so in the example, the third parameter could be omitted. Keeping the other two properties means that the custom expression will be evaluated only when the sourceProperty changes. The first parameter could also be omitted; if you do that, then the custom expression will be evaluated every time the bindingContext changes. Thus, the recommended syntax is to include two parameters in the XML declaration, as in our example - the property of interest and the expression, which has to be evaluated.\n\n\n###Supported expressions\nNativeScript supports different kind of expressions including:\n\n| Feature | Example | Description |\n|:--------|:--------|:------------|\n| property access | `obj1.obj2.prop1` | Resulting in the value of the `prop1` property of the object `obj2`. Expressions in binding are based on `polymer expressions`, which supports re-evaluation of expression when any value within the dot (.) chain is changed. NativeScript uses expressions only in context of bindings (for now), so a binding expression will be re-evaluated only when the binding `sourceProperty` is changed (due to performance considerations). The expression part will not observe and therefore will not initiate re-evaluation. |\n| array access | `arrayVar[indexVar]` | Taking the value of an element in an array (arrayVar) accessed by a valid index for that array (indexVar). |\n| logical operators | `!var1` | Reversing the logical state of the operand - logical not. |\n| unary operators | `+var1`, `-var2` | Converts var1 into a number. Converts var2 to a number and negates it. |\n| binary operators | `var1 + var2` | Adding the value of var2 to var1. Supported operators: `+, -, *, /, %`. |\n| comparison operators | `var1 > var2` | Comparing whether the value of var1 is more than the value of var2. Other supported operators - `<, >, <=, >=, ==, !=, ===, !==`. |\n| logical comparison operators | `var1>1 && var2>1`. | Evaluating whether the value of var1 is more than 1 AND the value of var2 is more than 2. Supported operators: `&&, ||`. |\n| ternary operator | `var1 ? var2 : var3` | Evaluating the value of `var1` and if true, returns `var2`, else returns `var3`. |\n| grouping parenthesis | `(a + b) * (c + d)` | |\n| function calls | `myFunc(var1, var2, ..., varN)`| Where myFunc is a function available in binding context (used as context for expression) or within `application level resources`. The value of the `var1` and `varN` will be used as parameter(s). |\n| filters | `expression \\| filter1(param1, ...) | filter 2` | A filter is an object or a function that is applied to the value of the expression. Within the context of binding, this feature is used as converters. For more information, see the dedicated topic [Using Converters in Bindings](#using-converters-in-bindings).|\n\n> Note: Special characters need to be escaped as follows:\n> - `\"   &quot;`\n> - `'   &apos;`\n> - `<   &lt;`\n> - `>   &gt;`\n> - `&   &amp;`\n\n##Using converters in bindings\n\nSpeaking of a two-way binding, there is a common problem - having different ways of storing and displaying data. Probably the best example here is the date and time objects. Date and time information is stored as a number or a sequence of numbers (very useful for indexing, searching and other database operations), but this is not the best possible option for displaying date to the application user. Also there is another problem when the user inputs a date (in the example below, the user types into a TextField). The result of the user input will be a string, which will be formatted in accordance with the user's preferences. This string should be converted to a correct date object. Let's see how this could be handled with NativeScript binding.\n\n### Example 5: Handle textField date input and formatted in accordance preferences.\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<TextField text=\"{{ testDate, testDate | dateConverter('DD.MM.YYYY') }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\nvar dateConverter = {\n\ttoView: function (value, format) {\n\t\tvar result = format;\n\t\tvar day = value.getDate();\n\t\tresult = result.replace(\"DD\", day < 10 ? \"0\" + day : day);\n\t\tvar month = value.getMonth() + 1;\n\t\tresult = result.replace(\"MM\", month < 10 ? \"0\" + month : month);\n\t\tresult = result.replace(\"YYYY\", value.getFullYear());\n\t\treturn result;\n\t},\n\ttoModel: function (value, format) {\n\t\tvar ddIndex = format.indexOf(\"DD\");\n\t\tvar day = parseInt(value.substr(ddIndex, 2));\n\t\tvar mmIndex = format.indexOf(\"MM\");\n\t\tvar month = parseInt(value.substr(mmIndex, 2));\n\t\tvar yyyyIndex = format.indexOf(\"YYYY\");\n\t\tvar year = parseInt(value.substr(yyyyIndex, 4));\n\t\tvar result = new Date(year, month - 1, day);\n\t\treturn result;\n\t}\n}\n\nsource.set(\"dateConverter\", dateConverter);\nsource.set(\"testDate\", new Date());\npage.bindingContext = source;\n```\n``` TypeScript\nvar dateConverter = {\n\ttoView: function (value, format) {\n\t\tvar result = format;\n\t\tvar day = value.getDate();\n\t\tresult = result.replace(\"DD\", day < 10 ? \"0\" + day : day);\n\t\tvar month = value.getMonth() + 1;\n\t\tresult = result.replace(\"MM\", month < 10 ? \"0\" + month : month);\n\t\tresult = result.replace(\"YYYY\", value.getFullYear());\n\t\treturn result;\n\t},\n\ttoModel: function (value, format) {\n\t\tvar ddIndex = format.indexOf(\"DD\");\n\t\tvar day = parseInt(value.substr(ddIndex, 2));\n\t\tvar mmIndex = format.indexOf(\"MM\");\n\t\tvar month = parseInt(value.substr(mmIndex, 2));\n\t\tvar yyyyIndex = format.indexOf(\"YYYY\");\n\t\tvar year = parseInt(value.substr(yyyyIndex, 4));\n\t\tvar result = new Date(year, month - 1, day);\n\t\treturn result;\n\t}\n}\n\nsource.set(\"dateConverter\", dateConverter);\nsource.set(\"testDate\", new Date());\npage.bindingContext = source;\n```\n\nNote the special operator (|) within the expression. The above code snippet (both XML and JavaScript) will display a date in a `DD.MM.YYYY` format (`toView` function), and when a new date is entered with the same format, it is converted to a valid `Date` object (`toModel` function). A `Converter` object should have one or two functions (`toView` and `toModel`) executed every time when a data should be converted. A `toView` function is called when data will be displayed to the end user as a value of any UI view, and a `toModel` function will be called when there is an editable element (like TextField) and the user enters a new value. In the case of one-way binding, the `Converter` object could have only a `toView` function or it should be a function. All converter functions have an array of parameters where the first parameter is the value that will be converted, and all other parameters are custom parameters defined in the converter definition.\n\n> Remarks: Any run-time error within the converter methods (`toView` and `toModel`) will be handled automatically and the application will not break, but the data in the view-model will not be altered (in case of error) and an error message with more information will be logged to the console. To enable it, use the built-in `trace` module with an `Error` category. A date converter is simplified just for the sake of the example and it is not supposed to be used as a fully functional converter from date to string and vice versa.\n\nA converter can accept not only static custom parameters, but any value from the `bindingContext`. For example:\n\n### Example 6: Converting the new date input to a valid Date object.\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<TextField text=\"{{ testDate, testDate | dateConverter(dateFormat) }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\n...\nsource.set(\"dateFormat\", \"DD.MM.YYYY\");\npage.bindingContext = source;\n```\n``` TypeScript\n...\nsource.set(\"dateFormat\", \"DD.MM.YYYY\");\npage.bindingContext = source;\n```\nSetting a converter function and a parameter within the bindingContext is very useful for ensuring proper conversion of data. However, this is not the case when `listview` items should be bound. The problem comes from the fact that the bindingContext of a `listview` item is a data item, which is a part of `any` collection (array), and to apply a converter - the converter and its parameters should be added to the data item, which will result in multiple converter instances. Tackling this problem with NativeScript is fairly simple. Binding infrastructure seeks for an application level resources to find a proper converter and parameters. So you could add the converters in the resources in the application module. To be more clear, examine the following example (both XML and JavaScript):\n\n### Example 7: Adding converters in the application module resources.\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<ListView items=\"{{ items }}\" height=\"200\">\n\t\t\t<ListView.itemTemplate>\n\t\t\t\t<Label text=\"{{ itemDate | dateConverter(dateFormat) }}\" />\n\t\t\t</ListView.itemTemplate>\n\t\t</ListView>\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\nvar appModule = require(\"application\");\nvar list = [];\nvar i;\nfor(i = 0; i < 5; i++) {\n\tlist.push({ itemDate: new Date()});\n}\nsource.set(\"items\", list);\n\nvar dateConverter = function(value, format) {\n\tvar result = format;\n\tvar day = value.getDate();\n\tresult = result.replace(\"DD\", day < 10 ? \"0\" + day : day);\n\tvar month = value.getMonth() + 1;\n\tresult = result.replace(\"MM\", month < 10 ? \"0\" + month : month);\n\tresult = result.replace(\"YYYY\", value.getFullYear());\n\treturn result;\n};\n\nappModule.resources[\"dateConverter\"] = dateConverter;\nappModule.resources[\"dateFormat\"] = \"DD.MM.YYYY\";\n```\n``` TypeScript\nimport appModule = require(\"application\");\nvar list = [];\nvar i;\nfor(i = 0; i < 5; i++) {\n\tlist.push({ itemDate: new Date()});\n}\nsource.set(\"items\", list);\n\nvar dateConverter = function(value, format) {\n\tvar result = format;\n\tvar day = value.getDate();\n\tresult = result.replace(\"DD\", day < 10 ? \"0\" + day : day);\n\tvar month = value.getMonth() + 1;\n\tresult = result.replace(\"MM\", month < 10 ? \"0\" + month : month);\n\tresult = result.replace(\"YYYY\", value.getFullYear());\n\treturn result;\n};\n\nappModule.resources[\"dateConverter\"] = dateConverter;\nappModule.resources[\"dateFormat\"] = \"DD.MM.YYYY\";\n```\n> Note: The application module is static and could be reached within the entire application; it just needs to be required. Another difference here is that `dateConverter` is a function instead of an object with two functions `toView` and `toModel`. Since the usual operation is converting data from model to view, if a function is provided as converter, it acts as a `toView` function.\n\n##Stop binding\n\nGenerally there is no need to stop binding explicitly since a Binding object uses weak references, which prevents any memory leaks. However, there are some scenarios where binding must be stopped. In order to stop an existing data binding, just call the **unbind** method with the target property name as the argument.\n\n``` JavaScript\ntargetTextField.unbind(\"text\");\n```\n``` TypeScript\ntargetTextField.unbind(\"text\");\n```\n\nYou can find more information about binding in [API-Ref](http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html). \n","source":"core-concepts/bindings.md","raw":"---\ntitle: Data Binding\ndescription: NativeScript Documentation - Data Binding\nposition: 4\nslug: binding\nprevious_url: /bindings\nenvironment: nativescript\n---\n\n#Data Binding\n\nData binding is the process of connecting application user interface (UI) to a data object (code). It enables changes propagation by reflecting UI modifications in the code and vise versa.\n\n> In the following article, **source** is used as any object in the code and **target** as any UI control (like TextField).\n\n* [Data flow direction](#data-flow-direction)\n* [Basic binding concepts](#basic-binding-concepts)\n* [How to create a binding](#how-to-create-a-binding)\n    * [Two-way binding in code](#two-way-binding-in-code)\n    * [Binding in XML](#binding-in-xml)\n* [Binding source](#binding-source)\n\t* [Binding to a property](#binding-to-a-property)\n\t* [Binding to an event in XML](#binding-to-an-event-in-xml)\n\t* [Binding to a plain object](#binding-to-a-plain-object)\n\t* [Binding to a parent binding context](#binding-to-a-parent-binding-context)\n* [Using expressions for bindings](#using-expressions-for-bindings)\n* [Using converters in bindings](#using-converters-in-bindings)\n* [Stop binding](#stop-binding)\n\n##Data flow direction\n\nPart of the data binding settings is the way data flows. NativeScript data binding supports the following data transmissions.\n\n* **One-Way**: This is the default setting, which ensures that the target property updates when a change in the source property occurs. However, UI modification will not update the code and it will stop the binding connection.\n\n* **Two-Way**: This setting ensures the reflection of changes in both directions &mdash; from target to source and source to target. You can use two-way data binding when you need to handle user input.\n\n##Basic binding concepts\n\nGenerally, almost every UI control could be bound to a data object (all NativeScript controls are created with data binding in mind). After your code has met the following requirements, you can use data-binding out of the box.\n\n* The target object has to be a successor of the **Bindable** class. All NativeScript UI controls already inherit from this class.\n* For **two-way** data binding, the target property should be to a **dependency property**.\n* For **one-way** binding, using a plain property is sufficient.\n* The data object should raise a **propertyChange** event for every change in the value of its property in order to notify all of the listeners interested in the change.\n\n##How to create a binding\n\n###Two-way binding in code\n\nThe example below consists of a `Label`, `TextField` and a source property to which the UI controls are bound. The purpose will be, when the user enters an input in the `TextField`, to update the property in the code and the `Label` text.\n\nFirst, the **source** object is created with a **textSource** property. A constant flow of propagating changes from the source property to the Label is necessary. Thus, the property in the code has to raise a **propertyChange** event in order to notify the `Label` for the changes. To raise this event, a built-in class is used, which provides this functionality - `Observable`.\n\n``` JavaScript\nvar observableModule = require(\"data/observable\");\nvar source = new observableModule.Observable();\nsource.textSource = \"Text set via twoWay binding\";\n```\n``` TypeScript\nimport observableModule = require(\"data/observable\");\nvar source = new observableModule.Observable();\nsource.textSource = \"Text set via twoWay binding\";\n```\n\nNext, **target** objects are created to bind to the source property. In this case, these will be a `Label` and a `TextField`, which inherit from the `Bindable` class (as all of the UI controls do).\n\n``` JavaScript\n//create the TextField\nvar textFieldModule = require(\"ui/text-field\");\nvar targetTextField = new textFieldModule.TextField();\n\n//create the Label\nvar labelModule = require(\"ui/label\");\nvar targetLabel = new labelModule.Label();\n```\n``` TypeScript\n//create the TextField\nimport textFieldModule = require(\"ui/text-field\");\nvar targetTextField = new textFieldModule.TextField();\n\n//create the Label\nimport labelModule = require(\"ui/label\");\nvar targetLabel = new labelModule.Label();\n```\nAfter that, the target objects bind to the source object. The TextField uses a two-way binding, so the user input could change the property in the code. And the binding of the Label is set to one-way in order to propagate changes only from the code to the UI.\n\n### Example 1: Binding label text property.\n``` JavaScript\n//binding the TextField\nvar textFieldBindingOptions = {\n\tsourceProperty: \"textSource\",\n\ttargetProperty: \"text\",\n\ttwoWay: true\n};\ntargetTextField.bind(textFieldBindingOptions, source);\n\n//binding the Label\nvar labelBindingOptions = {\n\tsourceProperty: \"textSource\",\n\ttargetProperty: \"text\",\n\ttwoWay: false\n};\ntargetLabel.bind(labelBindingOptions, source);\n```\n``` TypeScript\n//binding the TextField\nvar textFieldBindingOptions = {\n\tsourceProperty: \"textSource\",\n\ttargetProperty: \"text\",\n\ttwoWay: true\n};\ntargetTextField.bind(textFieldBindingOptions, source);\n\n//binding the Label\nvar labelBindingOptions = {\n\tsourceProperty: \"textSource\",\n\ttargetProperty: \"text\",\n\ttwoWay: false\n};\ntargetLabel.bind(labelBindingOptions, source);\n```\n\n###Binding in XML\n\nTo create a binding in XML, a source object is needed, which will be created the same way, as in the example above ([Two-Way Binding in Code](#two-way-binding-in-code)). Then the binding is described in the XML (using a mustache syntax). With an XML declaration, only the names of the properties are set - for the target: text, and for source: textSource. The interesting thing here is that the source of the binding is not specified explicitly. More about this topic will be discussed in the [Binding source](#binding-source) article.\n\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<TextField text=\"{{ textSource }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n\n> Note: When creating UI elements with an XML declaration, the data binding is two-way by default.\n\n##Binding source\n\n###Binding to a property\n\nAn important part of the data binding is setting the source object. For a continuous flow of data changes, the source property needs to emit a **propertyChange** event. NativeScript data binding works with any object that emits this event. Adding a binding **source** happens by passing it as a second parameter in the method **bind(bindingOptions, source)**. This parameter is optional and could be omitted, in which case the source is used for a property named **bindingContext** of the `Bindable` class. What is special about this property is that it is inheritable across the visual tree. This means that a UI control can use the `bindingContext` of the first of its **parent** elements, which has an explicitly set **bindingContext**. In the example from [Two-Way Binding in Code](#two-way-binding-in-code), the `bindingContext` can be set either on a `Page` instance or a `StackLayout` instance and the `TextField` will inherit it as a proper source for the binding of its \"text\" property.\n\n``` JavaScript\npage.bindingContext = source;\n//or\nstackLayout.bindingContext = source;\n```\n``` TypeScript\npage.bindingContext = source;\n//or\nstackLayout.bindingContext = source;\n```\n###Binding to an event in XML\n\n\nThere is an option to bind a function to execute on a specific event (MVVM command like). This option is available only through an XML declaration. To implement such a functionality, the source object should have an event handler function.\n\n### Example 2: Binding function on button tap event.\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<Button text=\"Test Button For Binding\" tap=\"{{ onTap }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\nsource.set(\"onTap\", function(eventData) {\n\tconsole.log(\"button is tapped!\");\n});\npage.bindingContext = source;\n```\n``` TypeScript\nsource.set(\"onTap\", function(eventData) {\n\tconsole.log(\"button is tapped!\");\n});\npage.bindingContext = source;\n```\n\n> Note: Be aware that if there is a button with an event handler function **onTap** within the page code-behind ([more info about XML declarations]({%slug ui-basics %}), and **onTap** function within the **bindingContext** object, then there **will not** be two event handlers hooked up for that button. For executing the function in the code behind, the following syntax should be used in the XML - **tap=\"onTap\"** and for the function from the bindingContext - **tap=\"\\{\\{ onTap \\}\\}\"**.\n\n###Binding to a plain object\n\nA very common case is to provide a list (array) of plain elements (numbers, dates, strings) to a `ListView` items collection. All examples above demonstrate how to bind a UI element to a property of the bindingContext. If there is only plain data, there is no property to bind, so the binding should be to the entire object. Here comes another feature of NativeScript binding - object or value binding. To refer to the entire object, which is Date() in the example, the keyword `$value` should be used.\n\n### Example 3: Bind ListView to a property of the bindingContext .\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<ListView items=\"{{ items }}\" height=\"200\">\n\t\t\t<ListView.itemTemplate>\n\t\t\t\t<Label text=\"{{ $value }}\" />\n\t\t\t</ListView.itemTemplate>\n\t\t</ListView>\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\nvar appModule = require(\"application\");\nvar list = [];\nvar i;\nfor(i = 0; i < 5; i++) {\n\tlist.push(new Date());\n}\nsource.set(\"items\", list);\n```\n``` TypeScript\nimport appModule = require(\"application\");\nvar list = [];\nvar i;\nfor(i = 0; i < 5; i++) {\n\tlist.push(new Date());\n}\nsource.set(\"items\", list);\n``` \n###Binding to a parent binding context\n\nAnother common case in working with bindings is requesting access to the parent binding context. It is because it might be different from the bindingContext of the child and might contain information, which the child has to use. Generally, the bindingContext is inheritable, but not when the elements (items) are created dynamically based on some data source. For example, `ListView` creates its child items based on an `itemТemplate`, which describes what the `ListView` element will look like. When this element is added to the visual tree, it gets for binding context an element from a ListView `items` array (with the corresponding index). This process creates a new binding context chain for the child item and its inner UI elements. So, the inner UI element cannot access the binding context of the 'ListView'. In order to solve this problem, NativeScript binding infrastructure has two special keywords: `$parent` and `$parents`. While the first one denotes the binding context of the direct parent visual element, the second one can be used as an array (with a number or string index). This gives you the option to choose either `N` levels of UI nesting or get a parent UI element with a given type. Let's see how this works in a realistic example.\n\n### Example 4: Creating ListView child items based on the itemTemplate.\n``` XML\n<Page loaded=\"pageLoaded\">\n\t<GridLayout rows=\"*\" >{%raw%}\n\t\t<ListView items=\"{{ items }}\">\n\t\t\t<!--Describing how the element will look like-->\n\t\t\t<ListView.itemTemplate>\n\t\t\t\t<GridLayout columns=\"auto, *\">\n\t\t\t\t\t<Label text=\"{{ $value }}\" col=\"0\"/>\n\t\t\t\t\t<!--The TextField has a different bindingCotnext from the ListView, but has to use its properties. Thus the parents['ListView'] has to be used.-->\n\t\t\t\t\t<TextField text=\"{{ $parents['ListView'].test, $parents['ListView'].test }}\" col=\"1\"/>\n\t\t\t\t</GridLayout>\n\t\t\t</ListView.itemTemplate>\n\t\t</ListView>\n\t{%endraw%}</GridLayout>\n</Page>\n```\n``` JavaScript\nvar observable = require(\"data/observable\");\nvar pageModule = require(\"ui/page\");\n\nvar viewModel = new observable.Observable();\n\nfunction pageLoaded(args) {\n    var page = args.object;\n    viewModel.set(\"items\", [1, 2, 3]);\n    viewModel.set(\"test\", \"Test for parent binding!\");\n    page.bindingContext = viewModel;\n}\nexports.pageLoaded = pageLoaded;\n```\n``` TypeScript\nimport observable = require(\"data/observable\");\nimport pageModule = require(\"ui/page\");\n\nvar viewModel = new observable.Observable();\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pageModule.Page>args.object;\n    viewModel.set(\"items\", [1, 2, 3]);\n    viewModel.set(\"test\", \"Test for parent binding!\");\n    page.bindingContext = viewModel;\n}\n```\n##Using expressions for bindings\n\nYou can create a custom expression for bindings. Custom expressions could help in cases when a certain logic should be applied to the UI, while keeping the underlying business data and logic clear. To be more specific, let's see a basic binding expression example. The result should be a `TextField` element that will display the value of the `sourceProperty` followed by \" some static text\" string.\n\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<TextField text=\"{{ sourceProperty, sourceProperty + ' some static text' }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n\n> Note: Binding expression could be used without explicitly named `source property` ( TextField text=\"{{ sourceProperty + ' some static text' }}\" ). In that case `$value` is used as a `source property`. However this could lead to problems when a nested property should be observed for changes (e.g. `item.nestedProp`). `$value` represents `bindingContext` and when any property of the `bindingContext` is changed expression will be evaluated. Since `nestedProp` is not a property of the `bindingContext` in `item.nestedProp` then there will be no propertyChange listener attached and changes to `nestedProp` will not be populated to UI. So it is a good practice to specify which property should be used as `source property` in order to eliminate such issues.\n\nThe full binding syntax contains three parameters - the first parameter is the source property, which will be listened to for changes. The second parameter is the expression that will be evaluated. The third parameter states whether the binding is two-way or not. As mentioned earlier, XML declaration creates a two-way binding by default, so in the example, the third parameter could be omitted. Keeping the other two properties means that the custom expression will be evaluated only when the sourceProperty changes. The first parameter could also be omitted; if you do that, then the custom expression will be evaluated every time the bindingContext changes. Thus, the recommended syntax is to include two parameters in the XML declaration, as in our example - the property of interest and the expression, which has to be evaluated.\n\n\n###Supported expressions\nNativeScript supports different kind of expressions including:\n\n| Feature | Example | Description |\n|:--------|:--------|:------------|\n| property access | `obj1.obj2.prop1` | Resulting in the value of the `prop1` property of the object `obj2`. Expressions in binding are based on `polymer expressions`, which supports re-evaluation of expression when any value within the dot (.) chain is changed. NativeScript uses expressions only in context of bindings (for now), so a binding expression will be re-evaluated only when the binding `sourceProperty` is changed (due to performance considerations). The expression part will not observe and therefore will not initiate re-evaluation. |\n| array access | `arrayVar[indexVar]` | Taking the value of an element in an array (arrayVar) accessed by a valid index for that array (indexVar). |\n| logical operators | `!var1` | Reversing the logical state of the operand - logical not. |\n| unary operators | `+var1`, `-var2` | Converts var1 into a number. Converts var2 to a number and negates it. |\n| binary operators | `var1 + var2` | Adding the value of var2 to var1. Supported operators: `+, -, *, /, %`. |\n| comparison operators | `var1 > var2` | Comparing whether the value of var1 is more than the value of var2. Other supported operators - `<, >, <=, >=, ==, !=, ===, !==`. |\n| logical comparison operators | `var1>1 && var2>1`. | Evaluating whether the value of var1 is more than 1 AND the value of var2 is more than 2. Supported operators: `&&, ||`. |\n| ternary operator | `var1 ? var2 : var3` | Evaluating the value of `var1` and if true, returns `var2`, else returns `var3`. |\n| grouping parenthesis | `(a + b) * (c + d)` | |\n| function calls | `myFunc(var1, var2, ..., varN)`| Where myFunc is a function available in binding context (used as context for expression) or within `application level resources`. The value of the `var1` and `varN` will be used as parameter(s). |\n| filters | `expression \\| filter1(param1, ...) | filter 2` | A filter is an object or a function that is applied to the value of the expression. Within the context of binding, this feature is used as converters. For more information, see the dedicated topic [Using Converters in Bindings](#using-converters-in-bindings).|\n\n> Note: Special characters need to be escaped as follows:\n> - `\"   &quot;`\n> - `'   &apos;`\n> - `<   &lt;`\n> - `>   &gt;`\n> - `&   &amp;`\n\n##Using converters in bindings\n\nSpeaking of a two-way binding, there is a common problem - having different ways of storing and displaying data. Probably the best example here is the date and time objects. Date and time information is stored as a number or a sequence of numbers (very useful for indexing, searching and other database operations), but this is not the best possible option for displaying date to the application user. Also there is another problem when the user inputs a date (in the example below, the user types into a TextField). The result of the user input will be a string, which will be formatted in accordance with the user's preferences. This string should be converted to a correct date object. Let's see how this could be handled with NativeScript binding.\n\n### Example 5: Handle textField date input and formatted in accordance preferences.\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<TextField text=\"{{ testDate, testDate | dateConverter('DD.MM.YYYY') }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\nvar dateConverter = {\n\ttoView: function (value, format) {\n\t\tvar result = format;\n\t\tvar day = value.getDate();\n\t\tresult = result.replace(\"DD\", day < 10 ? \"0\" + day : day);\n\t\tvar month = value.getMonth() + 1;\n\t\tresult = result.replace(\"MM\", month < 10 ? \"0\" + month : month);\n\t\tresult = result.replace(\"YYYY\", value.getFullYear());\n\t\treturn result;\n\t},\n\ttoModel: function (value, format) {\n\t\tvar ddIndex = format.indexOf(\"DD\");\n\t\tvar day = parseInt(value.substr(ddIndex, 2));\n\t\tvar mmIndex = format.indexOf(\"MM\");\n\t\tvar month = parseInt(value.substr(mmIndex, 2));\n\t\tvar yyyyIndex = format.indexOf(\"YYYY\");\n\t\tvar year = parseInt(value.substr(yyyyIndex, 4));\n\t\tvar result = new Date(year, month - 1, day);\n\t\treturn result;\n\t}\n}\n\nsource.set(\"dateConverter\", dateConverter);\nsource.set(\"testDate\", new Date());\npage.bindingContext = source;\n```\n``` TypeScript\nvar dateConverter = {\n\ttoView: function (value, format) {\n\t\tvar result = format;\n\t\tvar day = value.getDate();\n\t\tresult = result.replace(\"DD\", day < 10 ? \"0\" + day : day);\n\t\tvar month = value.getMonth() + 1;\n\t\tresult = result.replace(\"MM\", month < 10 ? \"0\" + month : month);\n\t\tresult = result.replace(\"YYYY\", value.getFullYear());\n\t\treturn result;\n\t},\n\ttoModel: function (value, format) {\n\t\tvar ddIndex = format.indexOf(\"DD\");\n\t\tvar day = parseInt(value.substr(ddIndex, 2));\n\t\tvar mmIndex = format.indexOf(\"MM\");\n\t\tvar month = parseInt(value.substr(mmIndex, 2));\n\t\tvar yyyyIndex = format.indexOf(\"YYYY\");\n\t\tvar year = parseInt(value.substr(yyyyIndex, 4));\n\t\tvar result = new Date(year, month - 1, day);\n\t\treturn result;\n\t}\n}\n\nsource.set(\"dateConverter\", dateConverter);\nsource.set(\"testDate\", new Date());\npage.bindingContext = source;\n```\n\nNote the special operator (|) within the expression. The above code snippet (both XML and JavaScript) will display a date in a `DD.MM.YYYY` format (`toView` function), and when a new date is entered with the same format, it is converted to a valid `Date` object (`toModel` function). A `Converter` object should have one or two functions (`toView` and `toModel`) executed every time when a data should be converted. A `toView` function is called when data will be displayed to the end user as a value of any UI view, and a `toModel` function will be called when there is an editable element (like TextField) and the user enters a new value. In the case of one-way binding, the `Converter` object could have only a `toView` function or it should be a function. All converter functions have an array of parameters where the first parameter is the value that will be converted, and all other parameters are custom parameters defined in the converter definition.\n\n> Remarks: Any run-time error within the converter methods (`toView` and `toModel`) will be handled automatically and the application will not break, but the data in the view-model will not be altered (in case of error) and an error message with more information will be logged to the console. To enable it, use the built-in `trace` module with an `Error` category. A date converter is simplified just for the sake of the example and it is not supposed to be used as a fully functional converter from date to string and vice versa.\n\nA converter can accept not only static custom parameters, but any value from the `bindingContext`. For example:\n\n### Example 6: Converting the new date input to a valid Date object.\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<TextField text=\"{{ testDate, testDate | dateConverter(dateFormat) }}\" />\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\n...\nsource.set(\"dateFormat\", \"DD.MM.YYYY\");\npage.bindingContext = source;\n```\n``` TypeScript\n...\nsource.set(\"dateFormat\", \"DD.MM.YYYY\");\npage.bindingContext = source;\n```\nSetting a converter function and a parameter within the bindingContext is very useful for ensuring proper conversion of data. However, this is not the case when `listview` items should be bound. The problem comes from the fact that the bindingContext of a `listview` item is a data item, which is a part of `any` collection (array), and to apply a converter - the converter and its parameters should be added to the data item, which will result in multiple converter instances. Tackling this problem with NativeScript is fairly simple. Binding infrastructure seeks for an application level resources to find a proper converter and parameters. So you could add the converters in the resources in the application module. To be more clear, examine the following example (both XML and JavaScript):\n\n### Example 7: Adding converters in the application module resources.\n``` XML\n<Page>\n\t<StackLayout>{%raw%}\n\t\t<ListView items=\"{{ items }}\" height=\"200\">\n\t\t\t<ListView.itemTemplate>\n\t\t\t\t<Label text=\"{{ itemDate | dateConverter(dateFormat) }}\" />\n\t\t\t</ListView.itemTemplate>\n\t\t</ListView>\n{%endraw%}\t</StackLayout>\n</Page>\n```\n``` JavaScript\nvar appModule = require(\"application\");\nvar list = [];\nvar i;\nfor(i = 0; i < 5; i++) {\n\tlist.push({ itemDate: new Date()});\n}\nsource.set(\"items\", list);\n\nvar dateConverter = function(value, format) {\n\tvar result = format;\n\tvar day = value.getDate();\n\tresult = result.replace(\"DD\", day < 10 ? \"0\" + day : day);\n\tvar month = value.getMonth() + 1;\n\tresult = result.replace(\"MM\", month < 10 ? \"0\" + month : month);\n\tresult = result.replace(\"YYYY\", value.getFullYear());\n\treturn result;\n};\n\nappModule.resources[\"dateConverter\"] = dateConverter;\nappModule.resources[\"dateFormat\"] = \"DD.MM.YYYY\";\n```\n``` TypeScript\nimport appModule = require(\"application\");\nvar list = [];\nvar i;\nfor(i = 0; i < 5; i++) {\n\tlist.push({ itemDate: new Date()});\n}\nsource.set(\"items\", list);\n\nvar dateConverter = function(value, format) {\n\tvar result = format;\n\tvar day = value.getDate();\n\tresult = result.replace(\"DD\", day < 10 ? \"0\" + day : day);\n\tvar month = value.getMonth() + 1;\n\tresult = result.replace(\"MM\", month < 10 ? \"0\" + month : month);\n\tresult = result.replace(\"YYYY\", value.getFullYear());\n\treturn result;\n};\n\nappModule.resources[\"dateConverter\"] = dateConverter;\nappModule.resources[\"dateFormat\"] = \"DD.MM.YYYY\";\n```\n> Note: The application module is static and could be reached within the entire application; it just needs to be required. Another difference here is that `dateConverter` is a function instead of an object with two functions `toView` and `toModel`. Since the usual operation is converting data from model to view, if a function is provided as converter, it acts as a `toView` function.\n\n##Stop binding\n\nGenerally there is no need to stop binding explicitly since a Binding object uses weak references, which prevents any memory leaks. However, there are some scenarios where binding must be stopped. In order to stop an existing data binding, just call the **unbind** method with the target property name as the argument.\n\n``` JavaScript\ntargetTextField.unbind(\"text\");\n```\n``` TypeScript\ntargetTextField.unbind(\"text\");\n```\n\nYou can find more information about binding in [API-Ref](http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html). \n","date":"2016-08-26T21:05:52.869Z","updated":"2016-08-26T21:05:52.869Z","path":"core-concepts/bindings.html","comments":1,"layout":"page","_id":"cisn95c6e0009wsl0vugaki81","content":"<p>#Data Binding</p>\n<p>Data binding is the process of connecting application user interface (UI) to a data object (code). It enables changes propagation by reflecting UI modifications in the code and vise versa.</p>\n<blockquote>\n<p>In the following article, <strong>source</strong> is used as any object in the code and <strong>target</strong> as any UI control (like TextField).</p>\n</blockquote>\n<ul>\n<li><a href=\"#data-flow-direction\">Data flow direction</a></li>\n<li><a href=\"#basic-binding-concepts\">Basic binding concepts</a></li>\n<li><a href=\"#how-to-create-a-binding\">How to create a binding</a><ul>\n<li><a href=\"#two-way-binding-in-code\">Two-way binding in code</a></li>\n<li><a href=\"#binding-in-xml\">Binding in XML</a></li>\n</ul>\n</li>\n<li><a href=\"#binding-source\">Binding source</a><ul>\n<li><a href=\"#binding-to-a-property\">Binding to a property</a></li>\n<li><a href=\"#binding-to-an-event-in-xml\">Binding to an event in XML</a></li>\n<li><a href=\"#binding-to-a-plain-object\">Binding to a plain object</a></li>\n<li><a href=\"#binding-to-a-parent-binding-context\">Binding to a parent binding context</a></li>\n</ul>\n</li>\n<li><a href=\"#using-expressions-for-bindings\">Using expressions for bindings</a></li>\n<li><a href=\"#using-converters-in-bindings\">Using converters in bindings</a></li>\n<li><a href=\"#stop-binding\">Stop binding</a></li>\n</ul>\n<p>##Data flow direction</p>\n<p>Part of the data binding settings is the way data flows. NativeScript data binding supports the following data transmissions.</p>\n<ul>\n<li><p><strong>One-Way</strong>: This is the default setting, which ensures that the target property updates when a change in the source property occurs. However, UI modification will not update the code and it will stop the binding connection.</p>\n</li>\n<li><p><strong>Two-Way</strong>: This setting ensures the reflection of changes in both directions &mdash; from target to source and source to target. You can use two-way data binding when you need to handle user input.</p>\n</li>\n</ul>\n<p>##Basic binding concepts</p>\n<p>Generally, almost every UI control could be bound to a data object (all NativeScript controls are created with data binding in mind). After your code has met the following requirements, you can use data-binding out of the box.</p>\n<ul>\n<li>The target object has to be a successor of the <strong>Bindable</strong> class. All NativeScript UI controls already inherit from this class.</li>\n<li>For <strong>two-way</strong> data binding, the target property should be to a <strong>dependency property</strong>.</li>\n<li>For <strong>one-way</strong> binding, using a plain property is sufficient.</li>\n<li>The data object should raise a <strong>propertyChange</strong> event for every change in the value of its property in order to notify all of the listeners interested in the change.</li>\n</ul>\n<p>##How to create a binding</p>\n<p>###Two-way binding in code</p>\n<p>The example below consists of a <code>Label</code>, <code>TextField</code> and a source property to which the UI controls are bound. The purpose will be, when the user enters an input in the <code>TextField</code>, to update the property in the code and the <code>Label</code> text.</p>\n<p>First, the <strong>source</strong> object is created with a <strong>textSource</strong> property. A constant flow of propagating changes from the source property to the Label is necessary. Thus, the property in the code has to raise a <strong>propertyChange</strong> event in order to notify the <code>Label</code> for the changes. To raise this event, a built-in class is used, which provides this functionality - <code>Observable</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\">source.textSource = <span class=\"string\">\"Text set via twoWay binding\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\">source.textSource = <span class=\"string\">\"Text set via twoWay binding\"</span>;</div></pre></td></tr></table></figure>\n<p>Next, <strong>target</strong> objects are created to bind to the source property. In this case, these will be a <code>Label</code> and a <code>TextField</code>, which inherit from the <code>Bindable</code> class (as all of the UI controls do).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//create the TextField</span></div><div class=\"line\"><span class=\"keyword\">var</span> textFieldModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/text-field\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> targetTextField = <span class=\"keyword\">new</span> textFieldModule.TextField();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//create the Label</span></div><div class=\"line\"><span class=\"keyword\">var</span> labelModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> targetLabel = <span class=\"keyword\">new</span> labelModule.Label();</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//create the TextField</span></div><div class=\"line\"><span class=\"keyword\">import</span> textFieldModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/text-field\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> targetTextField = <span class=\"keyword\">new</span> textFieldModule.TextField();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//create the Label</span></div><div class=\"line\"><span class=\"keyword\">import</span> labelModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> targetLabel = <span class=\"keyword\">new</span> labelModule.Label();</div></pre></td></tr></table></figure>\n<p>After that, the target objects bind to the source object. The TextField uses a two-way binding, so the user input could change the property in the code. And the binding of the Label is set to one-way in order to propagate changes only from the code to the UI.</p>\n<h3 id=\"Example-1-Binding-label-text-property\"><a href=\"#Example-1-Binding-label-text-property\" class=\"headerlink\" title=\"Example 1: Binding label text property.\"></a>Example 1: Binding label text property.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//binding the TextField</span></div><div class=\"line\"><span class=\"keyword\">var</span> textFieldBindingOptions = &#123;</div><div class=\"line\">\tsourceProperty: <span class=\"string\">\"textSource\"</span>,</div><div class=\"line\">\ttargetProperty: <span class=\"string\">\"text\"</span>,</div><div class=\"line\">\ttwoWay: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\">targetTextField.bind(textFieldBindingOptions, source);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//binding the Label</span></div><div class=\"line\"><span class=\"keyword\">var</span> labelBindingOptions = &#123;</div><div class=\"line\">\tsourceProperty: <span class=\"string\">\"textSource\"</span>,</div><div class=\"line\">\ttargetProperty: <span class=\"string\">\"text\"</span>,</div><div class=\"line\">\ttwoWay: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">targetLabel.bind(labelBindingOptions, source);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//binding the TextField</span></div><div class=\"line\"><span class=\"keyword\">var</span> textFieldBindingOptions = &#123;</div><div class=\"line\">\tsourceProperty: <span class=\"string\">\"textSource\"</span>,</div><div class=\"line\">\ttargetProperty: <span class=\"string\">\"text\"</span>,</div><div class=\"line\">\ttwoWay: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\">targetTextField.bind(textFieldBindingOptions, source);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//binding the Label</span></div><div class=\"line\"><span class=\"keyword\">var</span> labelBindingOptions = &#123;</div><div class=\"line\">\tsourceProperty: <span class=\"string\">\"textSource\"</span>,</div><div class=\"line\">\ttargetProperty: <span class=\"string\">\"text\"</span>,</div><div class=\"line\">\ttwoWay: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">targetLabel.bind(labelBindingOptions, source);</div></pre></td></tr></table></figure>\n<p>###Binding in XML</p>\n<p>To create a binding in XML, a source object is needed, which will be created the same way, as in the example above (<a href=\"#two-way-binding-in-code\">Two-Way Binding in Code</a>). Then the binding is described in the XML (using a mustache syntax). With an XML declaration, only the names of the properties are set - for the target: text, and for source: textSource. The interesting thing here is that the source of the binding is not specified explicitly. More about this topic will be discussed in the <a href=\"#binding-source\">Binding source</a> article.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; textSource &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: When creating UI elements with an XML declaration, the data binding is two-way by default.</p>\n</blockquote>\n<p>##Binding source</p>\n<p>###Binding to a property</p>\n<p>An important part of the data binding is setting the source object. For a continuous flow of data changes, the source property needs to emit a <strong>propertyChange</strong> event. NativeScript data binding works with any object that emits this event. Adding a binding <strong>source</strong> happens by passing it as a second parameter in the method <strong>bind(bindingOptions, source)</strong>. This parameter is optional and could be omitted, in which case the source is used for a property named <strong>bindingContext</strong> of the <code>Bindable</code> class. What is special about this property is that it is inheritable across the visual tree. This means that a UI control can use the <code>bindingContext</code> of the first of its <strong>parent</strong> elements, which has an explicitly set <strong>bindingContext</strong>. In the example from <a href=\"#two-way-binding-in-code\">Two-Way Binding in Code</a>, the <code>bindingContext</code> can be set either on a <code>Page</code> instance or a <code>StackLayout</code> instance and the <code>TextField</code> will inherit it as a proper source for the binding of its “text” property.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.bindingContext = source;</div><div class=\"line\"><span class=\"comment\">//or</span></div><div class=\"line\">stackLayout.bindingContext = source;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.bindingContext = source;</div><div class=\"line\"><span class=\"comment\">//or</span></div><div class=\"line\">stackLayout.bindingContext = source;</div></pre></td></tr></table></figure>\n<p>###Binding to an event in XML</p>\n<p>There is an option to bind a function to execute on a specific event (MVVM command like). This option is available only through an XML declaration. To implement such a functionality, the source object should have an event handler function.</p>\n<h3 id=\"Example-2-Binding-function-on-button-tap-event\"><a href=\"#Example-2-Binding-function-on-button-tap-event\" class=\"headerlink\" title=\"Example 2: Binding function on button tap event.\"></a>Example 2: Binding function on button tap event.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Test Button For Binding\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"&#123;&#123; onTap &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">source.set(<span class=\"string\">\"onTap\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"button is tapped!\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">source.set(<span class=\"string\">\"onTap\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"button is tapped!\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: Be aware that if there is a button with an event handler function <strong>onTap</strong> within the page code-behind (<a href=\"!--￼29--\">more info about XML declarations</a>, and <strong>onTap</strong> function within the <strong>bindingContext</strong> object, then there <strong>will not</strong> be two event handlers hooked up for that button. For executing the function in the code behind, the following syntax should be used in the XML - <strong>tap=”onTap”</strong> and for the function from the bindingContext - <strong>tap=”“</strong>.</p>\n</blockquote>\n<p>###Binding to a plain object</p>\n<p>A very common case is to provide a list (array) of plain elements (numbers, dates, strings) to a <code>ListView</code> items collection. All examples above demonstrate how to bind a UI element to a property of the bindingContext. If there is only plain data, there is no property to bind, so the binding should be to the entire object. Here comes another feature of NativeScript binding - object or value binding. To refer to the entire object, which is Date() in the example, the keyword <code>$value</code> should be used.</p>\n<h3 id=\"Example-3-Bind-ListView-to-a-property-of-the-bindingContext\"><a href=\"#Example-3-Bind-ListView-to-a-property-of-the-bindingContext\" class=\"headerlink\" title=\"Example 3: Bind ListView to a property of the bindingContext .\"></a>Example 3: Bind ListView to a property of the bindingContext .</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;&#123; items &#125;&#125;\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; $value &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> appModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i;</div><div class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\tlist.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">&#125;</div><div class=\"line\">source.set(<span class=\"string\">\"items\"</span>, list);</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">import appModule = require(\"application\");</div><div class=\"line\">var list = [];</div><div class=\"line\">var i;</div><div class=\"line\">for(i = 0; i &lt; 5; i++) &#123;</div><div class=\"line\">\tlist.push(new Date());</div><div class=\"line\">&#125;</div><div class=\"line\">source.set(\"items\", list);</div><div class=\"line\">``` </div><div class=\"line\">###Binding to a parent binding context</div><div class=\"line\"></div><div class=\"line\">Another common case in working with bindings is requesting access to the parent binding context. It is because it might be different from the bindingContext of the child and might contain information, which the child has to use. Generally, the bindingContext is inheritable, but not when the elements (items) are created dynamically based on some data source. For example, `ListView` creates its child items based on an `itemТemplate`, which describes what the `ListView` element will look like. When this element is added to the visual tree, it gets for binding context an element from a ListView `items` array (with the corresponding index). This process creates a new binding context chain for the child item and its inner UI elements. So, the inner UI element cannot access the binding context of the 'ListView'. In order to solve this problem, NativeScript binding infrastructure has two special keywords: `$parent` and `$parents`. While the first one denotes the binding context of the direct parent visual element, the second one can be used as an array (with a number or string index). This gives you the option to choose either `N` levels of UI nesting or get a parent UI element with a given type. Let's see how this works in a realistic example.</div><div class=\"line\"></div><div class=\"line\">### Example 4: Creating ListView child items based on the itemTemplate.</div><div class=\"line\">``` XML</div><div class=\"line\">&lt;Page loaded=\"pageLoaded\"&gt;</div><div class=\"line\">\t&lt;GridLayout rows=\"*\" &gt;&#123;%raw%&#125;</div><div class=\"line\">\t\t&lt;ListView items=\"&#123;&#123; items &#125;&#125;\"&gt;</div><div class=\"line\">\t\t\t&lt;!--Describing how the element will look like--&gt;</div><div class=\"line\">\t\t\t&lt;ListView.itemTemplate&gt;</div><div class=\"line\">\t\t\t\t&lt;GridLayout columns=\"auto, *\"&gt;</div><div class=\"line\">\t\t\t\t\t&lt;Label text=\"&#123;&#123; $value &#125;&#125;\" col=\"0\"/&gt;</div><div class=\"line\">\t\t\t\t\t&lt;!--The TextField has a different bindingCotnext from the ListView, but has to use its properties. Thus the parents['ListView'] has to be used.--&gt;</div><div class=\"line\">\t\t\t\t\t&lt;TextField text=\"&#123;&#123; $parents['ListView'].test, $parents['ListView'].test &#125;&#125;\" col=\"1\"/&gt;</div><div class=\"line\">\t\t\t\t&lt;/GridLayout&gt;</div><div class=\"line\">\t\t\t&lt;/ListView.itemTemplate&gt;</div><div class=\"line\">\t\t&lt;/ListView&gt;</div><div class=\"line\">\t&#123;%endraw%&#125;&lt;/GridLayout&gt;</div><div class=\"line\">&lt;/Page&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> viewModel = <span class=\"keyword\">new</span> observable.Observable();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    viewModel.set(<span class=\"string\">\"items\"</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\">    viewModel.set(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"Test for parent binding!\"</span>);</div><div class=\"line\">    page.bindingContext = viewModel;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> viewModel = <span class=\"keyword\">new</span> observable.Observable();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pageModule.Page&gt;args.object;</div><div class=\"line\">    viewModel.set(<span class=\"string\">\"items\"</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\">    viewModel.set(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"Test for parent binding!\"</span>);</div><div class=\"line\">    page.bindingContext = viewModel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##Using expressions for bindings</p>\n<p>You can create a custom expression for bindings. Custom expressions could help in cases when a certain logic should be applied to the UI, while keeping the underlying business data and logic clear. To be more specific, let’s see a basic binding expression example. The result should be a <code>TextField</code> element that will display the value of the <code>sourceProperty</code> followed by “ some static text” string.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; sourceProperty, sourceProperty + ' some static text' &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: Binding expression could be used without explicitly named <code>source property</code> ( TextField text=”undefined some static text“ ). In that case <code>$value</code> is used as a <code>source property</code>. However this could lead to problems when a nested property should be observed for changes (e.g. <code>item.nestedProp</code>). <code>$value</code> represents <code>bindingContext</code> and when any property of the <code>bindingContext</code> is changed expression will be evaluated. Since <code>nestedProp</code> is not a property of the <code>bindingContext</code> in <code>item.nestedProp</code> then there will be no propertyChange listener attached and changes to <code>nestedProp</code> will not be populated to UI. So it is a good practice to specify which property should be used as <code>source property</code> in order to eliminate such issues.</p>\n</blockquote>\n<p>The full binding syntax contains three parameters - the first parameter is the source property, which will be listened to for changes. The second parameter is the expression that will be evaluated. The third parameter states whether the binding is two-way or not. As mentioned earlier, XML declaration creates a two-way binding by default, so in the example, the third parameter could be omitted. Keeping the other two properties means that the custom expression will be evaluated only when the sourceProperty changes. The first parameter could also be omitted; if you do that, then the custom expression will be evaluated every time the bindingContext changes. Thus, the recommended syntax is to include two parameters in the XML declaration, as in our example - the property of interest and the expression, which has to be evaluated.</p>\n<p>###Supported expressions\nNativeScript supports different kind of expressions including:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Feature</th>\n<th style=\"text-align:left\">Example</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">property access</td>\n<td style=\"text-align:left\"><code>obj1.obj2.prop1</code></td>\n<td style=\"text-align:left\">Resulting in the value of the <code>prop1</code> property of the object <code>obj2</code>. Expressions in binding are based on <code>polymer expressions</code>, which supports re-evaluation of expression when any value within the dot (.) chain is changed. NativeScript uses expressions only in context of bindings (for now), so a binding expression will be re-evaluated only when the binding <code>sourceProperty</code> is changed (due to performance considerations). The expression part will not observe and therefore will not initiate re-evaluation.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">array access</td>\n<td style=\"text-align:left\"><code>arrayVar[indexVar]</code></td>\n<td style=\"text-align:left\">Taking the value of an element in an array (arrayVar) accessed by a valid index for that array (indexVar).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logical operators</td>\n<td style=\"text-align:left\"><code>!var1</code></td>\n<td style=\"text-align:left\">Reversing the logical state of the operand - logical not.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unary operators</td>\n<td style=\"text-align:left\"><code>+var1</code>, <code>-var2</code></td>\n<td style=\"text-align:left\">Converts var1 into a number. Converts var2 to a number and negates it.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">binary operators</td>\n<td style=\"text-align:left\"><code>var1 + var2</code></td>\n<td style=\"text-align:left\">Adding the value of var2 to var1. Supported operators: <code>+, -, *, /, %</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">comparison operators</td>\n<td style=\"text-align:left\"><code>var1 &gt; var2</code></td>\n<td style=\"text-align:left\">Comparing whether the value of var1 is more than the value of var2. Other supported operators - <code>&lt;, &gt;, &lt;=, &gt;=, ==, !=, ===, !==</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logical comparison operators</td>\n<td style=\"text-align:left\"><code>var1&gt;1 &amp;&amp; var2&gt;1</code>.</td>\n<td style=\"text-align:left\">Evaluating whether the value of var1 is more than 1 AND the value of var2 is more than 2. Supported operators: `&amp;&amp;,</td>\n<td></td>\n<td>`.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ternary operator</td>\n<td style=\"text-align:left\"><code>var1 ? var2 : var3</code></td>\n<td style=\"text-align:left\">Evaluating the value of <code>var1</code> and if true, returns <code>var2</code>, else returns <code>var3</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">grouping parenthesis</td>\n<td style=\"text-align:left\"><code>(a + b) * (c + d)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">function calls</td>\n<td style=\"text-align:left\"><code>myFunc(var1, var2, ..., varN)</code></td>\n<td style=\"text-align:left\">Where myFunc is a function available in binding context (used as context for expression) or within <code>application level resources</code>. The value of the <code>var1</code> and <code>varN</code> will be used as parameter(s).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">filters</td>\n<td style=\"text-align:left\">`expression \\</td>\n<td style=\"text-align:left\">filter1(param1, …)</td>\n<td>filter 2`</td>\n<td>A filter is an object or a function that is applied to the value of the expression. Within the context of binding, this feature is used as converters. For more information, see the dedicated topic <a href=\"#using-converters-in-bindings\">Using Converters in Bindings</a>.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Note: Special characters need to be escaped as follows:</p>\n<ul>\n<li><code>&quot;   &amp;quot;</code></li>\n<li><code>&#39;   &amp;apos;</code></li>\n<li><code>&lt;   &amp;lt;</code></li>\n<li><code>&gt;   &amp;gt;</code></li>\n<li><code>&amp;   &amp;amp;</code></li>\n</ul>\n</blockquote>\n<p>##Using converters in bindings</p>\n<p>Speaking of a two-way binding, there is a common problem - having different ways of storing and displaying data. Probably the best example here is the date and time objects. Date and time information is stored as a number or a sequence of numbers (very useful for indexing, searching and other database operations), but this is not the best possible option for displaying date to the application user. Also there is another problem when the user inputs a date (in the example below, the user types into a TextField). The result of the user input will be a string, which will be formatted in accordance with the user’s preferences. This string should be converted to a correct date object. Let’s see how this could be handled with NativeScript binding.</p>\n<h3 id=\"Example-5-Handle-textField-date-input-and-formatted-in-accordance-preferences\"><a href=\"#Example-5-Handle-textField-date-input-and-formatted-in-accordance-preferences\" class=\"headerlink\" title=\"Example 5: Handle textField date input and formatted in accordance preferences.\"></a>Example 5: Handle textField date input and formatted in accordance preferences.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; testDate, testDate | dateConverter('DD.MM.YYYY') &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dateConverter = &#123;</div><div class=\"line\">\ttoView: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> result = format;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> day = value.getDate();</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"DD\"</span>, day &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + day : day);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> month = value.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"MM\"</span>, month &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + month : month);</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"YYYY\"</span>, value.getFullYear());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\ttoModel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ddIndex = format.indexOf(<span class=\"string\">\"DD\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> day = <span class=\"built_in\">parseInt</span>(value.substr(ddIndex, <span class=\"number\">2</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> mmIndex = format.indexOf(<span class=\"string\">\"MM\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> month = <span class=\"built_in\">parseInt</span>(value.substr(mmIndex, <span class=\"number\">2</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> yyyyIndex = format.indexOf(<span class=\"string\">\"YYYY\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> year = <span class=\"built_in\">parseInt</span>(value.substr(yyyyIndex, <span class=\"number\">4</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month - <span class=\"number\">1</span>, day);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">source.set(<span class=\"string\">\"dateConverter\"</span>, dateConverter);</div><div class=\"line\">source.set(<span class=\"string\">\"testDate\"</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dateConverter = &#123;</div><div class=\"line\">\ttoView: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> result = format;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> day = value.getDate();</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"DD\"</span>, day &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + day : day);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> month = value.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"MM\"</span>, month &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + month : month);</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"YYYY\"</span>, value.getFullYear());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\ttoModel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ddIndex = format.indexOf(<span class=\"string\">\"DD\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> day = <span class=\"built_in\">parseInt</span>(value.substr(ddIndex, <span class=\"number\">2</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> mmIndex = format.indexOf(<span class=\"string\">\"MM\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> month = <span class=\"built_in\">parseInt</span>(value.substr(mmIndex, <span class=\"number\">2</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> yyyyIndex = format.indexOf(<span class=\"string\">\"YYYY\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> year = <span class=\"built_in\">parseInt</span>(value.substr(yyyyIndex, <span class=\"number\">4</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month - <span class=\"number\">1</span>, day);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">source.set(<span class=\"string\">\"dateConverter\"</span>, dateConverter);</div><div class=\"line\">source.set(<span class=\"string\">\"testDate\"</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<p>Note the special operator (|) within the expression. The above code snippet (both XML and JavaScript) will display a date in a <code>DD.MM.YYYY</code> format (<code>toView</code> function), and when a new date is entered with the same format, it is converted to a valid <code>Date</code> object (<code>toModel</code> function). A <code>Converter</code> object should have one or two functions (<code>toView</code> and <code>toModel</code>) executed every time when a data should be converted. A <code>toView</code> function is called when data will be displayed to the end user as a value of any UI view, and a <code>toModel</code> function will be called when there is an editable element (like TextField) and the user enters a new value. In the case of one-way binding, the <code>Converter</code> object could have only a <code>toView</code> function or it should be a function. All converter functions have an array of parameters where the first parameter is the value that will be converted, and all other parameters are custom parameters defined in the converter definition.</p>\n<blockquote>\n<p>Remarks: Any run-time error within the converter methods (<code>toView</code> and <code>toModel</code>) will be handled automatically and the application will not break, but the data in the view-model will not be altered (in case of error) and an error message with more information will be logged to the console. To enable it, use the built-in <code>trace</code> module with an <code>Error</code> category. A date converter is simplified just for the sake of the example and it is not supposed to be used as a fully functional converter from date to string and vice versa.</p>\n</blockquote>\n<p>A converter can accept not only static custom parameters, but any value from the <code>bindingContext</code>. For example:</p>\n<h3 id=\"Example-6-Converting-the-new-date-input-to-a-valid-Date-object\"><a href=\"#Example-6-Converting-the-new-date-input-to-a-valid-Date-object\" class=\"headerlink\" title=\"Example 6: Converting the new date input to a valid Date object.\"></a>Example 6: Converting the new date input to a valid Date object.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; testDate, testDate | dateConverter(dateFormat) &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">source.set(<span class=\"string\">\"dateFormat\"</span>, <span class=\"string\">\"DD.MM.YYYY\"</span>);</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">source.set(<span class=\"string\">\"dateFormat\"</span>, <span class=\"string\">\"DD.MM.YYYY\"</span>);</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<p>Setting a converter function and a parameter within the bindingContext is very useful for ensuring proper conversion of data. However, this is not the case when <code>listview</code> items should be bound. The problem comes from the fact that the bindingContext of a <code>listview</code> item is a data item, which is a part of <code>any</code> collection (array), and to apply a converter - the converter and its parameters should be added to the data item, which will result in multiple converter instances. Tackling this problem with NativeScript is fairly simple. Binding infrastructure seeks for an application level resources to find a proper converter and parameters. So you could add the converters in the resources in the application module. To be more clear, examine the following example (both XML and JavaScript):</p>\n<h3 id=\"Example-7-Adding-converters-in-the-application-module-resources\"><a href=\"#Example-7-Adding-converters-in-the-application-module-resources\" class=\"headerlink\" title=\"Example 7: Adding converters in the application module resources.\"></a>Example 7: Adding converters in the application module resources.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;&#123; items &#125;&#125;\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; itemDate | dateConverter(dateFormat) &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> appModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i;</div><div class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\tlist.push(&#123; itemDate: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">source.set(<span class=\"string\">\"items\"</span>, list);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> dateConverter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> result = format;</div><div class=\"line\">\t<span class=\"keyword\">var</span> day = value.getDate();</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"DD\"</span>, day &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + day : day);</div><div class=\"line\">\t<span class=\"keyword\">var</span> month = value.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"MM\"</span>, month &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + month : month);</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"YYYY\"</span>, value.getFullYear());</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">appModule.resources[<span class=\"string\">\"dateConverter\"</span>] = dateConverter;</div><div class=\"line\">appModule.resources[<span class=\"string\">\"dateFormat\"</span>] = <span class=\"string\">\"DD.MM.YYYY\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> appModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i;</div><div class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\tlist.push(&#123; itemDate: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">source.set(<span class=\"string\">\"items\"</span>, list);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> dateConverter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> result = format;</div><div class=\"line\">\t<span class=\"keyword\">var</span> day = value.getDate();</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"DD\"</span>, day &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + day : day);</div><div class=\"line\">\t<span class=\"keyword\">var</span> month = value.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"MM\"</span>, month &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + month : month);</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"YYYY\"</span>, value.getFullYear());</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">appModule.resources[<span class=\"string\">\"dateConverter\"</span>] = dateConverter;</div><div class=\"line\">appModule.resources[<span class=\"string\">\"dateFormat\"</span>] = <span class=\"string\">\"DD.MM.YYYY\"</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: The application module is static and could be reached within the entire application; it just needs to be required. Another difference here is that <code>dateConverter</code> is a function instead of an object with two functions <code>toView</code> and <code>toModel</code>. Since the usual operation is converting data from model to view, if a function is provided as converter, it acts as a <code>toView</code> function.</p>\n</blockquote>\n<p>##Stop binding</p>\n<p>Generally there is no need to stop binding explicitly since a Binding object uses weak references, which prevents any memory leaks. However, there are some scenarios where binding must be stopped. In order to stop an existing data binding, just call the <strong>unbind</strong> method with the target property name as the argument.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">targetTextField.unbind(<span class=\"string\">\"text\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">targetTextField.unbind(<span class=\"string\">\"text\"</span>);</div></pre></td></tr></table></figure>\n<p>You can find more information about binding in <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html\">API-Ref</a>. </p>\n","excerpt":"","more":"<p>#Data Binding</p>\n<p>Data binding is the process of connecting application user interface (UI) to a data object (code). It enables changes propagation by reflecting UI modifications in the code and vise versa.</p>\n<blockquote>\n<p>In the following article, <strong>source</strong> is used as any object in the code and <strong>target</strong> as any UI control (like TextField).</p>\n</blockquote>\n<ul>\n<li><a href=\"#data-flow-direction\">Data flow direction</a></li>\n<li><a href=\"#basic-binding-concepts\">Basic binding concepts</a></li>\n<li><a href=\"#how-to-create-a-binding\">How to create a binding</a><ul>\n<li><a href=\"#two-way-binding-in-code\">Two-way binding in code</a></li>\n<li><a href=\"#binding-in-xml\">Binding in XML</a></li>\n</ul>\n</li>\n<li><a href=\"#binding-source\">Binding source</a><ul>\n<li><a href=\"#binding-to-a-property\">Binding to a property</a></li>\n<li><a href=\"#binding-to-an-event-in-xml\">Binding to an event in XML</a></li>\n<li><a href=\"#binding-to-a-plain-object\">Binding to a plain object</a></li>\n<li><a href=\"#binding-to-a-parent-binding-context\">Binding to a parent binding context</a></li>\n</ul>\n</li>\n<li><a href=\"#using-expressions-for-bindings\">Using expressions for bindings</a></li>\n<li><a href=\"#using-converters-in-bindings\">Using converters in bindings</a></li>\n<li><a href=\"#stop-binding\">Stop binding</a></li>\n</ul>\n<p>##Data flow direction</p>\n<p>Part of the data binding settings is the way data flows. NativeScript data binding supports the following data transmissions.</p>\n<ul>\n<li><p><strong>One-Way</strong>: This is the default setting, which ensures that the target property updates when a change in the source property occurs. However, UI modification will not update the code and it will stop the binding connection.</p>\n</li>\n<li><p><strong>Two-Way</strong>: This setting ensures the reflection of changes in both directions &mdash; from target to source and source to target. You can use two-way data binding when you need to handle user input.</p>\n</li>\n</ul>\n<p>##Basic binding concepts</p>\n<p>Generally, almost every UI control could be bound to a data object (all NativeScript controls are created with data binding in mind). After your code has met the following requirements, you can use data-binding out of the box.</p>\n<ul>\n<li>The target object has to be a successor of the <strong>Bindable</strong> class. All NativeScript UI controls already inherit from this class.</li>\n<li>For <strong>two-way</strong> data binding, the target property should be to a <strong>dependency property</strong>.</li>\n<li>For <strong>one-way</strong> binding, using a plain property is sufficient.</li>\n<li>The data object should raise a <strong>propertyChange</strong> event for every change in the value of its property in order to notify all of the listeners interested in the change.</li>\n</ul>\n<p>##How to create a binding</p>\n<p>###Two-way binding in code</p>\n<p>The example below consists of a <code>Label</code>, <code>TextField</code> and a source property to which the UI controls are bound. The purpose will be, when the user enters an input in the <code>TextField</code>, to update the property in the code and the <code>Label</code> text.</p>\n<p>First, the <strong>source</strong> object is created with a <strong>textSource</strong> property. A constant flow of propagating changes from the source property to the Label is necessary. Thus, the property in the code has to raise a <strong>propertyChange</strong> event in order to notify the <code>Label</code> for the changes. To raise this event, a built-in class is used, which provides this functionality - <code>Observable</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\">source.textSource = <span class=\"string\">\"Text set via twoWay binding\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\">source.textSource = <span class=\"string\">\"Text set via twoWay binding\"</span>;</div></pre></td></tr></table></figure>\n<p>Next, <strong>target</strong> objects are created to bind to the source property. In this case, these will be a <code>Label</code> and a <code>TextField</code>, which inherit from the <code>Bindable</code> class (as all of the UI controls do).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//create the TextField</span></div><div class=\"line\"><span class=\"keyword\">var</span> textFieldModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/text-field\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> targetTextField = <span class=\"keyword\">new</span> textFieldModule.TextField();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//create the Label</span></div><div class=\"line\"><span class=\"keyword\">var</span> labelModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> targetLabel = <span class=\"keyword\">new</span> labelModule.Label();</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//create the TextField</span></div><div class=\"line\"><span class=\"keyword\">import</span> textFieldModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/text-field\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> targetTextField = <span class=\"keyword\">new</span> textFieldModule.TextField();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//create the Label</span></div><div class=\"line\"><span class=\"keyword\">import</span> labelModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> targetLabel = <span class=\"keyword\">new</span> labelModule.Label();</div></pre></td></tr></table></figure>\n<p>After that, the target objects bind to the source object. The TextField uses a two-way binding, so the user input could change the property in the code. And the binding of the Label is set to one-way in order to propagate changes only from the code to the UI.</p>\n<h3 id=\"Example-1-Binding-label-text-property\"><a href=\"#Example-1-Binding-label-text-property\" class=\"headerlink\" title=\"Example 1: Binding label text property.\"></a>Example 1: Binding label text property.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//binding the TextField</span></div><div class=\"line\"><span class=\"keyword\">var</span> textFieldBindingOptions = &#123;</div><div class=\"line\">\tsourceProperty: <span class=\"string\">\"textSource\"</span>,</div><div class=\"line\">\ttargetProperty: <span class=\"string\">\"text\"</span>,</div><div class=\"line\">\ttwoWay: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\">targetTextField.bind(textFieldBindingOptions, source);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//binding the Label</span></div><div class=\"line\"><span class=\"keyword\">var</span> labelBindingOptions = &#123;</div><div class=\"line\">\tsourceProperty: <span class=\"string\">\"textSource\"</span>,</div><div class=\"line\">\ttargetProperty: <span class=\"string\">\"text\"</span>,</div><div class=\"line\">\ttwoWay: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">targetLabel.bind(labelBindingOptions, source);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//binding the TextField</span></div><div class=\"line\"><span class=\"keyword\">var</span> textFieldBindingOptions = &#123;</div><div class=\"line\">\tsourceProperty: <span class=\"string\">\"textSource\"</span>,</div><div class=\"line\">\ttargetProperty: <span class=\"string\">\"text\"</span>,</div><div class=\"line\">\ttwoWay: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\">targetTextField.bind(textFieldBindingOptions, source);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//binding the Label</span></div><div class=\"line\"><span class=\"keyword\">var</span> labelBindingOptions = &#123;</div><div class=\"line\">\tsourceProperty: <span class=\"string\">\"textSource\"</span>,</div><div class=\"line\">\ttargetProperty: <span class=\"string\">\"text\"</span>,</div><div class=\"line\">\ttwoWay: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\">targetLabel.bind(labelBindingOptions, source);</div></pre></td></tr></table></figure>\n<p>###Binding in XML</p>\n<p>To create a binding in XML, a source object is needed, which will be created the same way, as in the example above (<a href=\"#two-way-binding-in-code\">Two-Way Binding in Code</a>). Then the binding is described in the XML (using a mustache syntax). With an XML declaration, only the names of the properties are set - for the target: text, and for source: textSource. The interesting thing here is that the source of the binding is not specified explicitly. More about this topic will be discussed in the <a href=\"#binding-source\">Binding source</a> article.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; textSource &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: When creating UI elements with an XML declaration, the data binding is two-way by default.</p>\n</blockquote>\n<p>##Binding source</p>\n<p>###Binding to a property</p>\n<p>An important part of the data binding is setting the source object. For a continuous flow of data changes, the source property needs to emit a <strong>propertyChange</strong> event. NativeScript data binding works with any object that emits this event. Adding a binding <strong>source</strong> happens by passing it as a second parameter in the method <strong>bind(bindingOptions, source)</strong>. This parameter is optional and could be omitted, in which case the source is used for a property named <strong>bindingContext</strong> of the <code>Bindable</code> class. What is special about this property is that it is inheritable across the visual tree. This means that a UI control can use the <code>bindingContext</code> of the first of its <strong>parent</strong> elements, which has an explicitly set <strong>bindingContext</strong>. In the example from <a href=\"#two-way-binding-in-code\">Two-Way Binding in Code</a>, the <code>bindingContext</code> can be set either on a <code>Page</code> instance or a <code>StackLayout</code> instance and the <code>TextField</code> will inherit it as a proper source for the binding of its “text” property.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.bindingContext = source;</div><div class=\"line\"><span class=\"comment\">//or</span></div><div class=\"line\">stackLayout.bindingContext = source;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.bindingContext = source;</div><div class=\"line\"><span class=\"comment\">//or</span></div><div class=\"line\">stackLayout.bindingContext = source;</div></pre></td></tr></table></figure>\n<p>###Binding to an event in XML</p>\n<p>There is an option to bind a function to execute on a specific event (MVVM command like). This option is available only through an XML declaration. To implement such a functionality, the source object should have an event handler function.</p>\n<h3 id=\"Example-2-Binding-function-on-button-tap-event\"><a href=\"#Example-2-Binding-function-on-button-tap-event\" class=\"headerlink\" title=\"Example 2: Binding function on button tap event.\"></a>Example 2: Binding function on button tap event.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Test Button For Binding\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"&#123;&#123; onTap &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">source.set(<span class=\"string\">\"onTap\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"button is tapped!\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">source.set(<span class=\"string\">\"onTap\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"button is tapped!\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: Be aware that if there is a button with an event handler function <strong>onTap</strong> within the page code-behind (<a href=\"!--￼29--\">more info about XML declarations</a>, and <strong>onTap</strong> function within the <strong>bindingContext</strong> object, then there <strong>will not</strong> be two event handlers hooked up for that button. For executing the function in the code behind, the following syntax should be used in the XML - <strong>tap=”onTap”</strong> and for the function from the bindingContext - <strong>tap=”“</strong>.</p>\n</blockquote>\n<p>###Binding to a plain object</p>\n<p>A very common case is to provide a list (array) of plain elements (numbers, dates, strings) to a <code>ListView</code> items collection. All examples above demonstrate how to bind a UI element to a property of the bindingContext. If there is only plain data, there is no property to bind, so the binding should be to the entire object. Here comes another feature of NativeScript binding - object or value binding. To refer to the entire object, which is Date() in the example, the keyword <code>$value</code> should be used.</p>\n<h3 id=\"Example-3-Bind-ListView-to-a-property-of-the-bindingContext\"><a href=\"#Example-3-Bind-ListView-to-a-property-of-the-bindingContext\" class=\"headerlink\" title=\"Example 3: Bind ListView to a property of the bindingContext .\"></a>Example 3: Bind ListView to a property of the bindingContext .</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;&#123; items &#125;&#125;\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; $value &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> appModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i;</div><div class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\tlist.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">&#125;</div><div class=\"line\">source.set(<span class=\"string\">\"items\"</span>, list);</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">import appModule = require(\"application\");</div><div class=\"line\">var list = [];</div><div class=\"line\">var i;</div><div class=\"line\">for(i = 0; i &lt; 5; i++) &#123;</div><div class=\"line\">\tlist.push(new Date());</div><div class=\"line\">&#125;</div><div class=\"line\">source.set(\"items\", list);</div><div class=\"line\">``` </div><div class=\"line\">###Binding to a parent binding context</div><div class=\"line\"></div><div class=\"line\">Another common case in working with bindings is requesting access to the parent binding context. It is because it might be different from the bindingContext of the child and might contain information, which the child has to use. Generally, the bindingContext is inheritable, but not when the elements (items) are created dynamically based on some data source. For example, `ListView` creates its child items based on an `itemТemplate`, which describes what the `ListView` element will look like. When this element is added to the visual tree, it gets for binding context an element from a ListView `items` array (with the corresponding index). This process creates a new binding context chain for the child item and its inner UI elements. So, the inner UI element cannot access the binding context of the 'ListView'. In order to solve this problem, NativeScript binding infrastructure has two special keywords: `$parent` and `$parents`. While the first one denotes the binding context of the direct parent visual element, the second one can be used as an array (with a number or string index). This gives you the option to choose either `N` levels of UI nesting or get a parent UI element with a given type. Let's see how this works in a realistic example.</div><div class=\"line\"></div><div class=\"line\">### Example 4: Creating ListView child items based on the itemTemplate.</div><div class=\"line\">``` XML</div><div class=\"line\">&lt;Page loaded=\"pageLoaded\"&gt;</div><div class=\"line\">\t&lt;GridLayout rows=\"*\" &gt;&#123;%raw%&#125;</div><div class=\"line\">\t\t&lt;ListView items=\"&#123;&#123; items &#125;&#125;\"&gt;</div><div class=\"line\">\t\t\t&lt;!--Describing how the element will look like--&gt;</div><div class=\"line\">\t\t\t&lt;ListView.itemTemplate&gt;</div><div class=\"line\">\t\t\t\t&lt;GridLayout columns=\"auto, *\"&gt;</div><div class=\"line\">\t\t\t\t\t&lt;Label text=\"&#123;&#123; $value &#125;&#125;\" col=\"0\"/&gt;</div><div class=\"line\">\t\t\t\t\t&lt;!--The TextField has a different bindingCotnext from the ListView, but has to use its properties. Thus the parents['ListView'] has to be used.--&gt;</div><div class=\"line\">\t\t\t\t\t&lt;TextField text=\"&#123;&#123; $parents['ListView'].test, $parents['ListView'].test &#125;&#125;\" col=\"1\"/&gt;</div><div class=\"line\">\t\t\t\t&lt;/GridLayout&gt;</div><div class=\"line\">\t\t\t&lt;/ListView.itemTemplate&gt;</div><div class=\"line\">\t\t&lt;/ListView&gt;</div><div class=\"line\">\t&#123;%endraw%&#125;&lt;/GridLayout&gt;</div><div class=\"line\">&lt;/Page&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> viewModel = <span class=\"keyword\">new</span> observable.Observable();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    viewModel.set(<span class=\"string\">\"items\"</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\">    viewModel.set(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"Test for parent binding!\"</span>);</div><div class=\"line\">    page.bindingContext = viewModel;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> viewModel = <span class=\"keyword\">new</span> observable.Observable();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pageModule.Page&gt;args.object;</div><div class=\"line\">    viewModel.set(<span class=\"string\">\"items\"</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\">    viewModel.set(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"Test for parent binding!\"</span>);</div><div class=\"line\">    page.bindingContext = viewModel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##Using expressions for bindings</p>\n<p>You can create a custom expression for bindings. Custom expressions could help in cases when a certain logic should be applied to the UI, while keeping the underlying business data and logic clear. To be more specific, let’s see a basic binding expression example. The result should be a <code>TextField</code> element that will display the value of the <code>sourceProperty</code> followed by “ some static text” string.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; sourceProperty, sourceProperty + ' some static text' &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: Binding expression could be used without explicitly named <code>source property</code> ( TextField text=”undefined some static text“ ). In that case <code>$value</code> is used as a <code>source property</code>. However this could lead to problems when a nested property should be observed for changes (e.g. <code>item.nestedProp</code>). <code>$value</code> represents <code>bindingContext</code> and when any property of the <code>bindingContext</code> is changed expression will be evaluated. Since <code>nestedProp</code> is not a property of the <code>bindingContext</code> in <code>item.nestedProp</code> then there will be no propertyChange listener attached and changes to <code>nestedProp</code> will not be populated to UI. So it is a good practice to specify which property should be used as <code>source property</code> in order to eliminate such issues.</p>\n</blockquote>\n<p>The full binding syntax contains three parameters - the first parameter is the source property, which will be listened to for changes. The second parameter is the expression that will be evaluated. The third parameter states whether the binding is two-way or not. As mentioned earlier, XML declaration creates a two-way binding by default, so in the example, the third parameter could be omitted. Keeping the other two properties means that the custom expression will be evaluated only when the sourceProperty changes. The first parameter could also be omitted; if you do that, then the custom expression will be evaluated every time the bindingContext changes. Thus, the recommended syntax is to include two parameters in the XML declaration, as in our example - the property of interest and the expression, which has to be evaluated.</p>\n<p>###Supported expressions\nNativeScript supports different kind of expressions including:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Feature</th>\n<th style=\"text-align:left\">Example</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">property access</td>\n<td style=\"text-align:left\"><code>obj1.obj2.prop1</code></td>\n<td style=\"text-align:left\">Resulting in the value of the <code>prop1</code> property of the object <code>obj2</code>. Expressions in binding are based on <code>polymer expressions</code>, which supports re-evaluation of expression when any value within the dot (.) chain is changed. NativeScript uses expressions only in context of bindings (for now), so a binding expression will be re-evaluated only when the binding <code>sourceProperty</code> is changed (due to performance considerations). The expression part will not observe and therefore will not initiate re-evaluation.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">array access</td>\n<td style=\"text-align:left\"><code>arrayVar[indexVar]</code></td>\n<td style=\"text-align:left\">Taking the value of an element in an array (arrayVar) accessed by a valid index for that array (indexVar).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logical operators</td>\n<td style=\"text-align:left\"><code>!var1</code></td>\n<td style=\"text-align:left\">Reversing the logical state of the operand - logical not.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unary operators</td>\n<td style=\"text-align:left\"><code>+var1</code>, <code>-var2</code></td>\n<td style=\"text-align:left\">Converts var1 into a number. Converts var2 to a number and negates it.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">binary operators</td>\n<td style=\"text-align:left\"><code>var1 + var2</code></td>\n<td style=\"text-align:left\">Adding the value of var2 to var1. Supported operators: <code>+, -, *, /, %</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">comparison operators</td>\n<td style=\"text-align:left\"><code>var1 &gt; var2</code></td>\n<td style=\"text-align:left\">Comparing whether the value of var1 is more than the value of var2. Other supported operators - <code>&lt;, &gt;, &lt;=, &gt;=, ==, !=, ===, !==</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logical comparison operators</td>\n<td style=\"text-align:left\"><code>var1&gt;1 &amp;&amp; var2&gt;1</code>.</td>\n<td style=\"text-align:left\">Evaluating whether the value of var1 is more than 1 AND the value of var2 is more than 2. Supported operators: `&amp;&amp;,</td>\n<td></td>\n<td>`.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ternary operator</td>\n<td style=\"text-align:left\"><code>var1 ? var2 : var3</code></td>\n<td style=\"text-align:left\">Evaluating the value of <code>var1</code> and if true, returns <code>var2</code>, else returns <code>var3</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">grouping parenthesis</td>\n<td style=\"text-align:left\"><code>(a + b) * (c + d)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">function calls</td>\n<td style=\"text-align:left\"><code>myFunc(var1, var2, ..., varN)</code></td>\n<td style=\"text-align:left\">Where myFunc is a function available in binding context (used as context for expression) or within <code>application level resources</code>. The value of the <code>var1</code> and <code>varN</code> will be used as parameter(s).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">filters</td>\n<td style=\"text-align:left\">`expression \\</td>\n<td style=\"text-align:left\">filter1(param1, …)</td>\n<td>filter 2`</td>\n<td>A filter is an object or a function that is applied to the value of the expression. Within the context of binding, this feature is used as converters. For more information, see the dedicated topic <a href=\"#using-converters-in-bindings\">Using Converters in Bindings</a>.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Note: Special characters need to be escaped as follows:</p>\n<ul>\n<li><code>&quot;   &amp;quot;</code></li>\n<li><code>&#39;   &amp;apos;</code></li>\n<li><code>&lt;   &amp;lt;</code></li>\n<li><code>&gt;   &amp;gt;</code></li>\n<li><code>&amp;   &amp;amp;</code></li>\n</ul>\n</blockquote>\n<p>##Using converters in bindings</p>\n<p>Speaking of a two-way binding, there is a common problem - having different ways of storing and displaying data. Probably the best example here is the date and time objects. Date and time information is stored as a number or a sequence of numbers (very useful for indexing, searching and other database operations), but this is not the best possible option for displaying date to the application user. Also there is another problem when the user inputs a date (in the example below, the user types into a TextField). The result of the user input will be a string, which will be formatted in accordance with the user’s preferences. This string should be converted to a correct date object. Let’s see how this could be handled with NativeScript binding.</p>\n<h3 id=\"Example-5-Handle-textField-date-input-and-formatted-in-accordance-preferences\"><a href=\"#Example-5-Handle-textField-date-input-and-formatted-in-accordance-preferences\" class=\"headerlink\" title=\"Example 5: Handle textField date input and formatted in accordance preferences.\"></a>Example 5: Handle textField date input and formatted in accordance preferences.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; testDate, testDate | dateConverter('DD.MM.YYYY') &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dateConverter = &#123;</div><div class=\"line\">\ttoView: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> result = format;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> day = value.getDate();</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"DD\"</span>, day &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + day : day);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> month = value.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"MM\"</span>, month &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + month : month);</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"YYYY\"</span>, value.getFullYear());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\ttoModel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ddIndex = format.indexOf(<span class=\"string\">\"DD\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> day = <span class=\"built_in\">parseInt</span>(value.substr(ddIndex, <span class=\"number\">2</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> mmIndex = format.indexOf(<span class=\"string\">\"MM\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> month = <span class=\"built_in\">parseInt</span>(value.substr(mmIndex, <span class=\"number\">2</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> yyyyIndex = format.indexOf(<span class=\"string\">\"YYYY\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> year = <span class=\"built_in\">parseInt</span>(value.substr(yyyyIndex, <span class=\"number\">4</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month - <span class=\"number\">1</span>, day);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">source.set(<span class=\"string\">\"dateConverter\"</span>, dateConverter);</div><div class=\"line\">source.set(<span class=\"string\">\"testDate\"</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dateConverter = &#123;</div><div class=\"line\">\ttoView: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> result = format;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> day = value.getDate();</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"DD\"</span>, day &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + day : day);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> month = value.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"MM\"</span>, month &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + month : month);</div><div class=\"line\">\t\tresult = result.replace(<span class=\"string\">\"YYYY\"</span>, value.getFullYear());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\ttoModel: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ddIndex = format.indexOf(<span class=\"string\">\"DD\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> day = <span class=\"built_in\">parseInt</span>(value.substr(ddIndex, <span class=\"number\">2</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> mmIndex = format.indexOf(<span class=\"string\">\"MM\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> month = <span class=\"built_in\">parseInt</span>(value.substr(mmIndex, <span class=\"number\">2</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> yyyyIndex = format.indexOf(<span class=\"string\">\"YYYY\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> year = <span class=\"built_in\">parseInt</span>(value.substr(yyyyIndex, <span class=\"number\">4</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month - <span class=\"number\">1</span>, day);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">source.set(<span class=\"string\">\"dateConverter\"</span>, dateConverter);</div><div class=\"line\">source.set(<span class=\"string\">\"testDate\"</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<p>Note the special operator (|) within the expression. The above code snippet (both XML and JavaScript) will display a date in a <code>DD.MM.YYYY</code> format (<code>toView</code> function), and when a new date is entered with the same format, it is converted to a valid <code>Date</code> object (<code>toModel</code> function). A <code>Converter</code> object should have one or two functions (<code>toView</code> and <code>toModel</code>) executed every time when a data should be converted. A <code>toView</code> function is called when data will be displayed to the end user as a value of any UI view, and a <code>toModel</code> function will be called when there is an editable element (like TextField) and the user enters a new value. In the case of one-way binding, the <code>Converter</code> object could have only a <code>toView</code> function or it should be a function. All converter functions have an array of parameters where the first parameter is the value that will be converted, and all other parameters are custom parameters defined in the converter definition.</p>\n<blockquote>\n<p>Remarks: Any run-time error within the converter methods (<code>toView</code> and <code>toModel</code>) will be handled automatically and the application will not break, but the data in the view-model will not be altered (in case of error) and an error message with more information will be logged to the console. To enable it, use the built-in <code>trace</code> module with an <code>Error</code> category. A date converter is simplified just for the sake of the example and it is not supposed to be used as a fully functional converter from date to string and vice versa.</p>\n</blockquote>\n<p>A converter can accept not only static custom parameters, but any value from the <code>bindingContext</code>. For example:</p>\n<h3 id=\"Example-6-Converting-the-new-date-input-to-a-valid-Date-object\"><a href=\"#Example-6-Converting-the-new-date-input-to-a-valid-Date-object\" class=\"headerlink\" title=\"Example 6: Converting the new date input to a valid Date object.\"></a>Example 6: Converting the new date input to a valid Date object.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; testDate, testDate | dateConverter(dateFormat) &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">source.set(<span class=\"string\">\"dateFormat\"</span>, <span class=\"string\">\"DD.MM.YYYY\"</span>);</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">source.set(<span class=\"string\">\"dateFormat\"</span>, <span class=\"string\">\"DD.MM.YYYY\"</span>);</div><div class=\"line\">page.bindingContext = source;</div></pre></td></tr></table></figure>\n<p>Setting a converter function and a parameter within the bindingContext is very useful for ensuring proper conversion of data. However, this is not the case when <code>listview</code> items should be bound. The problem comes from the fact that the bindingContext of a <code>listview</code> item is a data item, which is a part of <code>any</code> collection (array), and to apply a converter - the converter and its parameters should be added to the data item, which will result in multiple converter instances. Tackling this problem with NativeScript is fairly simple. Binding infrastructure seeks for an application level resources to find a proper converter and parameters. So you could add the converters in the resources in the application module. To be more clear, examine the following example (both XML and JavaScript):</p>\n<h3 id=\"Example-7-Adding-converters-in-the-application-module-resources\"><a href=\"#Example-7-Adding-converters-in-the-application-module-resources\" class=\"headerlink\" title=\"Example 7: Adding converters in the application module resources.\"></a>Example 7: Adding converters in the application module resources.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span>&#123;%raw%&#125;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;&#123; items &#125;&#125;\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; itemDate | dateConverter(dateFormat) &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;\t<span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> appModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i;</div><div class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\tlist.push(&#123; itemDate: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">source.set(<span class=\"string\">\"items\"</span>, list);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> dateConverter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> result = format;</div><div class=\"line\">\t<span class=\"keyword\">var</span> day = value.getDate();</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"DD\"</span>, day &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + day : day);</div><div class=\"line\">\t<span class=\"keyword\">var</span> month = value.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"MM\"</span>, month &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + month : month);</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"YYYY\"</span>, value.getFullYear());</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">appModule.resources[<span class=\"string\">\"dateConverter\"</span>] = dateConverter;</div><div class=\"line\">appModule.resources[<span class=\"string\">\"dateFormat\"</span>] = <span class=\"string\">\"DD.MM.YYYY\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> appModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list = [];</div><div class=\"line\"><span class=\"keyword\">var</span> i;</div><div class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">\tlist.push(&#123; itemDate: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">source.set(<span class=\"string\">\"items\"</span>, list);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> dateConverter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, format</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> result = format;</div><div class=\"line\">\t<span class=\"keyword\">var</span> day = value.getDate();</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"DD\"</span>, day &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + day : day);</div><div class=\"line\">\t<span class=\"keyword\">var</span> month = value.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"MM\"</span>, month &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + month : month);</div><div class=\"line\">\tresult = result.replace(<span class=\"string\">\"YYYY\"</span>, value.getFullYear());</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">appModule.resources[<span class=\"string\">\"dateConverter\"</span>] = dateConverter;</div><div class=\"line\">appModule.resources[<span class=\"string\">\"dateFormat\"</span>] = <span class=\"string\">\"DD.MM.YYYY\"</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note: The application module is static and could be reached within the entire application; it just needs to be required. Another difference here is that <code>dateConverter</code> is a function instead of an object with two functions <code>toView</code> and <code>toModel</code>. Since the usual operation is converting data from model to view, if a function is provided as converter, it acts as a <code>toView</code> function.</p>\n</blockquote>\n<p>##Stop binding</p>\n<p>Generally there is no need to stop binding explicitly since a Binding object uses weak references, which prevents any memory leaks. However, there are some scenarios where binding must be stopped. In order to stop an existing data binding, just call the <strong>unbind</strong> method with the target property name as the argument.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">targetTextField.unbind(<span class=\"string\">\"text\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">targetTextField.unbind(<span class=\"string\">\"text\"</span>);</div></pre></td></tr></table></figure>\n<p>You can find more information about binding in <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html\">API-Ref</a>. </p>\n"},{"title":"Events","description":"How to handle events in NativeScript.","position":6,"slug":"events","environment":"nativescript","previous_url":"/events","_content":"\n# Events\n\nContents of this article:\n\n* [Overview](#overview)\n* [Adding an event handler](#adding-an-event-handler)\n* [Removing an event listener](#removing-an-event-listener)\n* [PropertyChange event](#propertychange-event)\n* [Creating a custom event](#creating-a-custom-event)\n* [Avoiding memory leaks](#avoiding-memory-leaks)\n* [Working with weak events](#working-with-weak-events)\n\n\n## Overview\n\nAn event is a message sent from an event emitter to signify the occurrence of a specific action. This action can be generated by a user action (such as a tap) or by program logic (for instance, to indicate that downloading an image from a server has completed). The object that raises the event is called an **event sender** (simply **sender**) or **event raiser**. The object that consumes the event is called an **event listener** (simply **listener**) or **event handler**.\n\nThe NativeScript framework provides a class `Observable` that powers the process of working with events. Find more information about it in the [API Reference](http://docs.nativescript.org/api-reference/classes/_data_observable_.observable.html). Because it is one of the base classes within the NativeScript framework, almost every NativeScript object (component) has an option for dealing with events.\n\n## Adding an Event Handler\n\nTo add an **event handler** means setting a function (method) that executes when the event is raised.\n\n__Example 1__ shows how to set a function that prints a \"Hello World!\" message in the console when a button is tapped. You can choose between the shorthand syntax and the full syntax or you can declare the event handler in XML.\n\n\nThe example below shows how to add an event listener by using the short and full syntax. There is a third optional parameter that represents the `this` argument.\n\n###Example 1 (JavaScript): Adding an event handler or an event listener using the short and full syntax.\n``` JavaScript\n//Adding a listener with the short syntax\nvar buttonModule = require(\"ui/button\");\nvar testButton = new buttonModule.Button();\ntestButton.text = \"Test\";\n\ntestButton.on(buttonModule.Button.tapEvent, function (eventData) {\n  console.log(\"Hello World!\");\n},this);\n\n//Adding a lister with the full syntax\nvar testButton2 = new buttonModule.Button();\ntestButton2.text = \"Test\";\n\nvar onTap = function (eventData) {\n  console.log(\"Hello World!\");\n};\n\ntestButton2.addEventListener(buttonModule.Button.tapEvent, onTap, this);\n```\n###Example 1 (TypeScript): Adding an event handler or an event listener using the short and full syntax.\n``` TypeScript\n//Adding a listener with the short syntax\nimport buttonModule = require(\"ui/button\");\nvar testButton = new buttonModule.Button();\ntestButton.text = \"Test\";\n\ntestButton.on(buttonModule.Button.tapEvent, function (eventData) {\n  console.log(\"Hello World!\");\n  },this);\n\n//Adding a lister with the full syntax\nvar testButton2 = new buttonModule.Button();\ntestButton2.text = \"Test\";\n\nvar onTap = function (eventData) {\n  console.log(\"Hello World!\");\n};\n\ntestButton2.addEventListener(buttonModule.Button.tapEvent, onTap, this);\n```\n\nAnother option to set an event handler is to use an XML declaration.\n\n###Example 1 (XML): Adding an event handler or an event listener using an XML declaration.\n``` XML\n<Page>\n  <StackLayout>\n    <Button tap=\"onTap\" />\n  </StackLayout>\n</Page>\n```\nYou need a code-behind file (see __Example 2__) to write the function body (the code-behind file has the same file name, but a different extension: .js or .ts depending on the language you are using). \n\n###Example 2: Hooking to a button tap event\n``` JavaScript\nfunction onTap(eventData) {\n  console.log(\"Hello World!\");\n}\nexports.onTap = onTap;\n```\n``` TypeScript\nexport function onTap(eventData) {\n  console.log(\"Hello World!\");\n}\n```\n\n## Removing an Event Listener\n\nUsually you don't need to remove the event listener. You might need to do it when you want to receive the event just once or to free up resources. In such cases, you can apply the methods in __Example 3__.\n\n> There is no syntax to remove an event listener through an XML declaration.\n\n### Removing an Event Listener Using the Shorthand or Full Syntax\n\n__Example 3__ uses the shorthand and full syntax to remove all listeners for the tap event of the testButton instance. If more than one object are listening for events, you can set a second parameter with the name of the callback function. This way only the referenced event listener is removed. When multiple event listeners with different `this` arguments are available, a third optional parameter is used.\n\n###Example 3: Removing a button tap event listener\n\n``` JavaScript\n//Removing a listener with short syntax\ntestButton.off(buttonModule.Button.tapEvent);\n\n//Removing a listener with short syntax\ntestButton2.removeEventListener(buttonModule.Button.tapEvent);\n```\n``` TypeScript\n//Removing a listener with short syntax\ntestButton.off(buttonModule.Button.tapEvent);\n\n//Removing a listener with short syntax\ntestButton2.removeEventListener(buttonModule.Button.tapEvent);\n```\n## PropertyChange Event\n\nThe `Observable` class provides a built-in event called `propertyChange` that is called when a property is changed. __Example 4__ shows how to subscribe to this event.\n\n###Example 4: Handle the propertyChange event\n\n``` JavaScript\nvar observableModule = require(\"data/observable\");\nvar observableObject = new observableModule.Observable();\n\nobservableObject.on(observableModule.Observable.propertyChangeEvent, function(propertyChangeData){\n  console.log(propertyChangeData.propertyName + \" has been changed and the new value is: \" + propertyChangeData.value);\n});\n```\n``` TypeScript\nimport observableModule = require(\"data/observable\");\nvar observableObject = new observableModule.Observable();\n\nobservableObject.on(observableModule.Observable.propertyChangeEvent, function(propertyChangeData){\n  console.log(propertyChangeData.propertyName + \" has been changed and the new value is: \" + propertyChangeData.value);\n});\n```\nIt is important to note that the `propertyChange` event is critical for the entire [data binding]({% slug binding %}) system. To take advantage of the data binding mechanism, all you have to do is make your business object **inherit** the `Observable` class. __Example 5__ demonstrates how to do that.\n\n###Example 5: Creating a custom class and inheriting `Observable` class\n``` JavaScript\nvar observableModule = require(\"data/observable\");\nvar MyClass = (function (_super) {\n  __extends(MyClass, _super);\n  function MyClass() {\n    _super.apply(this, arguments);\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._myProperty;\n      },\n      set: function (value) {\n        this._myProperty = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    return MyClass;\n  })(observableModule.Observable);\nexports.MyClass = MyClass;\n```\n``` TypeScript\nimport observableModule = require(\"data/observable\");\n\nexport class MyClass extends observableModule.Observable {\n  private _myProperty:number;\n  public get myProperty(): number {\n    return this._myProperty;\n  }\n\n  public set myProperty(value: number) {\n    this._myProperty = value;\n  }\n}\n```\nThe code snippet in __Example 5__ fires the `propertyChange` event when the property value is changed.\n\n## Creating a Custom Event\n\nIf your business logic demands it, you may want to fire (raise or emit) a custom event on a particular action (see __Example 6__). To do that, call the `Observable.notify()` method when the action is completed. This method takes any **implementer** of the [EventData interface](http://docs.nativescript.org/api-reference/interfaces/_data_observable_.eventdata.html) as event data. It includes basic information about an event&mdash;its name as `eventName` and an instance of the event sender as `object`).\n\n###Example 6: Creating a custom event.\n``` JavaScript\nvar eventData = {\n  eventName: \"myCustomEventName\",\n  object: this\n};\nthis.notify(eventData);\n```\n``` TypeScript\nvar eventData: observableModule.EventData = {\n  eventName: \"myCustomEventName\",\n  object: this\n}\nthis.notify(eventData);\n```\nThe minimum information needed to raise an event is the `eventName`&mdash;it will be used to execute all event handlers associated with this event.\n\nThe next step is to hook to this event:\n\n``` JavaScript\nvar myCustomObject = new MyClass();\nmyCustomObject.on(\"myCustomEventName\", function(eventData){\n  console.log(eventData.eventName + \" has been raised! by: \" + eventData.object);\n})\n```\nA similar logic is implemented for the `propertyChange` event, so if your business logic requires that, `propertyChange` can be emitted manually through the `notify()` method (without using the `Observable.set()` method that also fires the `propertyChange` event).\n\n## Avoiding Memory Leaks\n\nAlthough the radio station comparison is convenient for understanding the concept, events are a bit more complicated on the inside. To be able to notify the listener, the sender contains a pointer to the listener. Even if you set the listener object to `null` or `undefined`, it is not eligible for garbage collection, because the sender is alive and has a live reference to the listener object. This could result in a memory leak when the object lifetimes of the sender and the listener differ significantly.\n\nConsider this scenario: A UI element creates a lot of child controls, each of which hooks to an event of the parent. Then a child control is released (during a list view scrolling for instance), causing a memory leak.\n\nTo prevent these memory leaks, it is a good practice to remove your event listener handler before releasing the listener object. Unfortunately, sometimes you cannot determine the exact time to call the `off` or `removeEventListener` function. In such cases, use another option of the NativeScript framework: *weak events*.\n\n## Working with Weak Events\n\nA weak event, as its name suggests, creates an weak reference to the listener object, which helps you release the listener object without removing the event listener pointer.\n\n### Adding a Weak Event Listener\n\nUsing weak event listeners is very similar to normal events. __Example 7__ shows how to add a weak event listener (code comments are included for clarity):\n###Example 7: Creating a weak event and handling a property change event \n``` JavaScript\nvar weakEventListenerModule = require(\"ui/core/weakEventListener\");\nvar buttonModule = require(\"ui/button\");\nvar observableModule = require(\"data/observable\");\n\nvar testButton = new buttonModule.Button();\ntestButton.text = \"Test\";\ntestButton.on(buttonModule.Button.tapEvent, function () {\n  source.set(\"testProperty\", \"change\" + counter);\n  });\n\n  var source = new observableModule.Observable();\n\n  var counter = 0;\n  var handlePropertyChange = function () {\n    counter++;\n    this.text = counter + \"\";\n  };\n\n  var weakEL = weakEventListenerModule.WeakEventListener;\n  var weakEventListenerOptions: weakEventListenerModule.WeakEventListenerOptions = {\n    // create a weak reference to the event listener object\n    targetWeakRef: new WeakRef(this),\n    // create a weak reference to the event sender object\n    sourceWeakRef: new WeakRef(this.source),\n    // set the name of the event\n    eventName: observable.Observable.propertyChangeEvent,\n    // set the event handler\n    handler: handlePropertyChange,\n    // (optional) set the context in which to execute the handler \n    handlerContext: testButton,\n    // (optional) set a specialized property used for extra event recognition \n    key: this.options.targetProperty\n  }\n  weakEL.addWeakEventListener(this.weakEventListenerOptions);\n```\n``` TypeScript\nimport weakEventListenerModule = require(\"ui/core/weakEventListener\");\nimport buttonModule = require(\"ui/button\");\nimport observableModule = require(\"data/observable\");\n\nvar testButton = new buttonModule.Button();\ntestButton.text = \"Test\";\ntestButton.on(buttonModule.Button.tapEvent, function () {\n  source.set(\"testProperty\", \"change\" + counter);\n});\n\nvar source = new observableModule.Observable();\n\nvar counter = 0;\nvar handlePropertyChange = function () {\n  counter++;\n  this.text = counter + \"\";\n};\n\nvar weakEL = weakEventListenerModule.WeakEventListener;\nvar weakEventListenerOptions: weakEventListenerModule.WeakEventListenerOptions = {\n  // create a weak reference to the event listener object\n  targetWeakRef: new WeakRef(this),\n  // create a weak reference to the event sender object\n  sourceWeakRef: new WeakRef(this.source),\n  // set the name of the event\n  eventName: observable.Observable.propertyChangeEvent,\n  // set the event handler\n  handler: handlePropertyChange,\n  // specialized property used for extra event recognition\n  key: this.options.targetProperty,\n  // (optional) set the context in which to execute the handler\n  handlerContext: testButton\n}\nweakEL.addWeakEventListener(this.weakEventListenerOptions);\n```\n\n__Example 7__ shows how to attach a weak event listener to an observable object instance. A closer look at the `handlePropertyChange` function shows that `text` property of the `this` object is changed when the `propertyChange` event is raised (via the button tap event). The function demonstrates how to use the `handlerContext` property&mdash;its value is taken as an argument to `this` inside the event handler function.\n\n### Removing a Weak Event Listener\n\nThe `targetWeakRef` and `key` properties are optional when invoking a function on an event. However, they allow for removing an event listener. The properties are used as keys for a key-value pair that stores weak event listeners.\n\n``` JavaScript\nweakEL.removeWeakEventListener(this.weakEventListenerOptions);\n```\n``` TypeScript\nweakEL.removeWeakEventListener(this.weakEventListenerOptions);\n```\n","source":"core-concepts/events.md","raw":"---\ntitle: Events\ndescription: How to handle events in NativeScript.\nposition: 6\nslug: events\nenvironment: nativescript\nprevious_url: /events\n---\n\n# Events\n\nContents of this article:\n\n* [Overview](#overview)\n* [Adding an event handler](#adding-an-event-handler)\n* [Removing an event listener](#removing-an-event-listener)\n* [PropertyChange event](#propertychange-event)\n* [Creating a custom event](#creating-a-custom-event)\n* [Avoiding memory leaks](#avoiding-memory-leaks)\n* [Working with weak events](#working-with-weak-events)\n\n\n## Overview\n\nAn event is a message sent from an event emitter to signify the occurrence of a specific action. This action can be generated by a user action (such as a tap) or by program logic (for instance, to indicate that downloading an image from a server has completed). The object that raises the event is called an **event sender** (simply **sender**) or **event raiser**. The object that consumes the event is called an **event listener** (simply **listener**) or **event handler**.\n\nThe NativeScript framework provides a class `Observable` that powers the process of working with events. Find more information about it in the [API Reference](http://docs.nativescript.org/api-reference/classes/_data_observable_.observable.html). Because it is one of the base classes within the NativeScript framework, almost every NativeScript object (component) has an option for dealing with events.\n\n## Adding an Event Handler\n\nTo add an **event handler** means setting a function (method) that executes when the event is raised.\n\n__Example 1__ shows how to set a function that prints a \"Hello World!\" message in the console when a button is tapped. You can choose between the shorthand syntax and the full syntax or you can declare the event handler in XML.\n\n\nThe example below shows how to add an event listener by using the short and full syntax. There is a third optional parameter that represents the `this` argument.\n\n###Example 1 (JavaScript): Adding an event handler or an event listener using the short and full syntax.\n``` JavaScript\n//Adding a listener with the short syntax\nvar buttonModule = require(\"ui/button\");\nvar testButton = new buttonModule.Button();\ntestButton.text = \"Test\";\n\ntestButton.on(buttonModule.Button.tapEvent, function (eventData) {\n  console.log(\"Hello World!\");\n},this);\n\n//Adding a lister with the full syntax\nvar testButton2 = new buttonModule.Button();\ntestButton2.text = \"Test\";\n\nvar onTap = function (eventData) {\n  console.log(\"Hello World!\");\n};\n\ntestButton2.addEventListener(buttonModule.Button.tapEvent, onTap, this);\n```\n###Example 1 (TypeScript): Adding an event handler or an event listener using the short and full syntax.\n``` TypeScript\n//Adding a listener with the short syntax\nimport buttonModule = require(\"ui/button\");\nvar testButton = new buttonModule.Button();\ntestButton.text = \"Test\";\n\ntestButton.on(buttonModule.Button.tapEvent, function (eventData) {\n  console.log(\"Hello World!\");\n  },this);\n\n//Adding a lister with the full syntax\nvar testButton2 = new buttonModule.Button();\ntestButton2.text = \"Test\";\n\nvar onTap = function (eventData) {\n  console.log(\"Hello World!\");\n};\n\ntestButton2.addEventListener(buttonModule.Button.tapEvent, onTap, this);\n```\n\nAnother option to set an event handler is to use an XML declaration.\n\n###Example 1 (XML): Adding an event handler or an event listener using an XML declaration.\n``` XML\n<Page>\n  <StackLayout>\n    <Button tap=\"onTap\" />\n  </StackLayout>\n</Page>\n```\nYou need a code-behind file (see __Example 2__) to write the function body (the code-behind file has the same file name, but a different extension: .js or .ts depending on the language you are using). \n\n###Example 2: Hooking to a button tap event\n``` JavaScript\nfunction onTap(eventData) {\n  console.log(\"Hello World!\");\n}\nexports.onTap = onTap;\n```\n``` TypeScript\nexport function onTap(eventData) {\n  console.log(\"Hello World!\");\n}\n```\n\n## Removing an Event Listener\n\nUsually you don't need to remove the event listener. You might need to do it when you want to receive the event just once or to free up resources. In such cases, you can apply the methods in __Example 3__.\n\n> There is no syntax to remove an event listener through an XML declaration.\n\n### Removing an Event Listener Using the Shorthand or Full Syntax\n\n__Example 3__ uses the shorthand and full syntax to remove all listeners for the tap event of the testButton instance. If more than one object are listening for events, you can set a second parameter with the name of the callback function. This way only the referenced event listener is removed. When multiple event listeners with different `this` arguments are available, a third optional parameter is used.\n\n###Example 3: Removing a button tap event listener\n\n``` JavaScript\n//Removing a listener with short syntax\ntestButton.off(buttonModule.Button.tapEvent);\n\n//Removing a listener with short syntax\ntestButton2.removeEventListener(buttonModule.Button.tapEvent);\n```\n``` TypeScript\n//Removing a listener with short syntax\ntestButton.off(buttonModule.Button.tapEvent);\n\n//Removing a listener with short syntax\ntestButton2.removeEventListener(buttonModule.Button.tapEvent);\n```\n## PropertyChange Event\n\nThe `Observable` class provides a built-in event called `propertyChange` that is called when a property is changed. __Example 4__ shows how to subscribe to this event.\n\n###Example 4: Handle the propertyChange event\n\n``` JavaScript\nvar observableModule = require(\"data/observable\");\nvar observableObject = new observableModule.Observable();\n\nobservableObject.on(observableModule.Observable.propertyChangeEvent, function(propertyChangeData){\n  console.log(propertyChangeData.propertyName + \" has been changed and the new value is: \" + propertyChangeData.value);\n});\n```\n``` TypeScript\nimport observableModule = require(\"data/observable\");\nvar observableObject = new observableModule.Observable();\n\nobservableObject.on(observableModule.Observable.propertyChangeEvent, function(propertyChangeData){\n  console.log(propertyChangeData.propertyName + \" has been changed and the new value is: \" + propertyChangeData.value);\n});\n```\nIt is important to note that the `propertyChange` event is critical for the entire [data binding]({% slug binding %}) system. To take advantage of the data binding mechanism, all you have to do is make your business object **inherit** the `Observable` class. __Example 5__ demonstrates how to do that.\n\n###Example 5: Creating a custom class and inheriting `Observable` class\n``` JavaScript\nvar observableModule = require(\"data/observable\");\nvar MyClass = (function (_super) {\n  __extends(MyClass, _super);\n  function MyClass() {\n    _super.apply(this, arguments);\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._myProperty;\n      },\n      set: function (value) {\n        this._myProperty = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    return MyClass;\n  })(observableModule.Observable);\nexports.MyClass = MyClass;\n```\n``` TypeScript\nimport observableModule = require(\"data/observable\");\n\nexport class MyClass extends observableModule.Observable {\n  private _myProperty:number;\n  public get myProperty(): number {\n    return this._myProperty;\n  }\n\n  public set myProperty(value: number) {\n    this._myProperty = value;\n  }\n}\n```\nThe code snippet in __Example 5__ fires the `propertyChange` event when the property value is changed.\n\n## Creating a Custom Event\n\nIf your business logic demands it, you may want to fire (raise or emit) a custom event on a particular action (see __Example 6__). To do that, call the `Observable.notify()` method when the action is completed. This method takes any **implementer** of the [EventData interface](http://docs.nativescript.org/api-reference/interfaces/_data_observable_.eventdata.html) as event data. It includes basic information about an event&mdash;its name as `eventName` and an instance of the event sender as `object`).\n\n###Example 6: Creating a custom event.\n``` JavaScript\nvar eventData = {\n  eventName: \"myCustomEventName\",\n  object: this\n};\nthis.notify(eventData);\n```\n``` TypeScript\nvar eventData: observableModule.EventData = {\n  eventName: \"myCustomEventName\",\n  object: this\n}\nthis.notify(eventData);\n```\nThe minimum information needed to raise an event is the `eventName`&mdash;it will be used to execute all event handlers associated with this event.\n\nThe next step is to hook to this event:\n\n``` JavaScript\nvar myCustomObject = new MyClass();\nmyCustomObject.on(\"myCustomEventName\", function(eventData){\n  console.log(eventData.eventName + \" has been raised! by: \" + eventData.object);\n})\n```\nA similar logic is implemented for the `propertyChange` event, so if your business logic requires that, `propertyChange` can be emitted manually through the `notify()` method (without using the `Observable.set()` method that also fires the `propertyChange` event).\n\n## Avoiding Memory Leaks\n\nAlthough the radio station comparison is convenient for understanding the concept, events are a bit more complicated on the inside. To be able to notify the listener, the sender contains a pointer to the listener. Even if you set the listener object to `null` or `undefined`, it is not eligible for garbage collection, because the sender is alive and has a live reference to the listener object. This could result in a memory leak when the object lifetimes of the sender and the listener differ significantly.\n\nConsider this scenario: A UI element creates a lot of child controls, each of which hooks to an event of the parent. Then a child control is released (during a list view scrolling for instance), causing a memory leak.\n\nTo prevent these memory leaks, it is a good practice to remove your event listener handler before releasing the listener object. Unfortunately, sometimes you cannot determine the exact time to call the `off` or `removeEventListener` function. In such cases, use another option of the NativeScript framework: *weak events*.\n\n## Working with Weak Events\n\nA weak event, as its name suggests, creates an weak reference to the listener object, which helps you release the listener object without removing the event listener pointer.\n\n### Adding a Weak Event Listener\n\nUsing weak event listeners is very similar to normal events. __Example 7__ shows how to add a weak event listener (code comments are included for clarity):\n###Example 7: Creating a weak event and handling a property change event \n``` JavaScript\nvar weakEventListenerModule = require(\"ui/core/weakEventListener\");\nvar buttonModule = require(\"ui/button\");\nvar observableModule = require(\"data/observable\");\n\nvar testButton = new buttonModule.Button();\ntestButton.text = \"Test\";\ntestButton.on(buttonModule.Button.tapEvent, function () {\n  source.set(\"testProperty\", \"change\" + counter);\n  });\n\n  var source = new observableModule.Observable();\n\n  var counter = 0;\n  var handlePropertyChange = function () {\n    counter++;\n    this.text = counter + \"\";\n  };\n\n  var weakEL = weakEventListenerModule.WeakEventListener;\n  var weakEventListenerOptions: weakEventListenerModule.WeakEventListenerOptions = {\n    // create a weak reference to the event listener object\n    targetWeakRef: new WeakRef(this),\n    // create a weak reference to the event sender object\n    sourceWeakRef: new WeakRef(this.source),\n    // set the name of the event\n    eventName: observable.Observable.propertyChangeEvent,\n    // set the event handler\n    handler: handlePropertyChange,\n    // (optional) set the context in which to execute the handler \n    handlerContext: testButton,\n    // (optional) set a specialized property used for extra event recognition \n    key: this.options.targetProperty\n  }\n  weakEL.addWeakEventListener(this.weakEventListenerOptions);\n```\n``` TypeScript\nimport weakEventListenerModule = require(\"ui/core/weakEventListener\");\nimport buttonModule = require(\"ui/button\");\nimport observableModule = require(\"data/observable\");\n\nvar testButton = new buttonModule.Button();\ntestButton.text = \"Test\";\ntestButton.on(buttonModule.Button.tapEvent, function () {\n  source.set(\"testProperty\", \"change\" + counter);\n});\n\nvar source = new observableModule.Observable();\n\nvar counter = 0;\nvar handlePropertyChange = function () {\n  counter++;\n  this.text = counter + \"\";\n};\n\nvar weakEL = weakEventListenerModule.WeakEventListener;\nvar weakEventListenerOptions: weakEventListenerModule.WeakEventListenerOptions = {\n  // create a weak reference to the event listener object\n  targetWeakRef: new WeakRef(this),\n  // create a weak reference to the event sender object\n  sourceWeakRef: new WeakRef(this.source),\n  // set the name of the event\n  eventName: observable.Observable.propertyChangeEvent,\n  // set the event handler\n  handler: handlePropertyChange,\n  // specialized property used for extra event recognition\n  key: this.options.targetProperty,\n  // (optional) set the context in which to execute the handler\n  handlerContext: testButton\n}\nweakEL.addWeakEventListener(this.weakEventListenerOptions);\n```\n\n__Example 7__ shows how to attach a weak event listener to an observable object instance. A closer look at the `handlePropertyChange` function shows that `text` property of the `this` object is changed when the `propertyChange` event is raised (via the button tap event). The function demonstrates how to use the `handlerContext` property&mdash;its value is taken as an argument to `this` inside the event handler function.\n\n### Removing a Weak Event Listener\n\nThe `targetWeakRef` and `key` properties are optional when invoking a function on an event. However, they allow for removing an event listener. The properties are used as keys for a key-value pair that stores weak event listeners.\n\n``` JavaScript\nweakEL.removeWeakEventListener(this.weakEventListenerOptions);\n```\n``` TypeScript\nweakEL.removeWeakEventListener(this.weakEventListenerOptions);\n```\n","date":"2016-08-26T21:05:52.873Z","updated":"2016-08-26T21:05:52.873Z","path":"core-concepts/events.html","comments":1,"layout":"page","_id":"cisn95c6g000awsl0n3y5l1nb","content":"<h1 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h1><p>Contents of this article:</p>\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#adding-an-event-handler\">Adding an event handler</a></li>\n<li><a href=\"#removing-an-event-listener\">Removing an event listener</a></li>\n<li><a href=\"#propertychange-event\">PropertyChange event</a></li>\n<li><a href=\"#creating-a-custom-event\">Creating a custom event</a></li>\n<li><a href=\"#avoiding-memory-leaks\">Avoiding memory leaks</a></li>\n<li><a href=\"#working-with-weak-events\">Working with weak events</a></li>\n</ul>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>An event is a message sent from an event emitter to signify the occurrence of a specific action. This action can be generated by a user action (such as a tap) or by program logic (for instance, to indicate that downloading an image from a server has completed). The object that raises the event is called an <strong>event sender</strong> (simply <strong>sender</strong>) or <strong>event raiser</strong>. The object that consumes the event is called an <strong>event listener</strong> (simply <strong>listener</strong>) or <strong>event handler</strong>.</p>\n<p>The NativeScript framework provides a class <code>Observable</code> that powers the process of working with events. Find more information about it in the <a href=\"http://docs.nativescript.org/api-reference/classes/_data_observable_.observable.html\">API Reference</a>. Because it is one of the base classes within the NativeScript framework, almost every NativeScript object (component) has an option for dealing with events.</p>\n<h2 id=\"Adding-an-Event-Handler\"><a href=\"#Adding-an-Event-Handler\" class=\"headerlink\" title=\"Adding an Event Handler\"></a>Adding an Event Handler</h2><p>To add an <strong>event handler</strong> means setting a function (method) that executes when the event is raised.</p>\n<p><strong>Example 1</strong> shows how to set a function that prints a “Hello World!” message in the console when a button is tapped. You can choose between the shorthand syntax and the full syntax or you can declare the event handler in XML.</p>\n<p>The example below shows how to add an event listener by using the short and full syntax. There is a third optional parameter that represents the <code>this</code> argument.</p>\n<p>###Example 1 (JavaScript): Adding an event handler or an event listener using the short and full syntax.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Adding a listener with the short syntax</span></div><div class=\"line\"><span class=\"keyword\">var</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> testButton = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\"></div><div class=\"line\">testButton.on(buttonModule.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;,<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Adding a lister with the full syntax</span></div><div class=\"line\"><span class=\"keyword\">var</span> testButton2 = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton2.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> onTap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">testButton2.addEventListener(buttonModule.Button.tapEvent, onTap, <span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>###Example 1 (TypeScript): Adding an event handler or an event listener using the short and full syntax.\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Adding a listener with the short syntax</span></div><div class=\"line\"><span class=\"keyword\">import</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> testButton = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\"></div><div class=\"line\">testButton.on(buttonModule.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">  &#125;,<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Adding a lister with the full syntax</span></div><div class=\"line\"><span class=\"keyword\">var</span> testButton2 = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton2.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> onTap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">testButton2.addEventListener(buttonModule.Button.tapEvent, onTap, <span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>Another option to set an event handler is to use an XML declaration.</p>\n<p>###Example 1 (XML): Adding an event handler or an event listener using an XML declaration.\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"onTap\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>You need a code-behind file (see <strong>Example 2</strong>) to write the function body (the code-behind file has the same file name, but a different extension: .js or .ts depending on the language you are using). </p>\n<p>###Example 2: Hooking to a button tap event\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onTap</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.onTap = onTap;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onTap</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Removing-an-Event-Listener\"><a href=\"#Removing-an-Event-Listener\" class=\"headerlink\" title=\"Removing an Event Listener\"></a>Removing an Event Listener</h2><p>Usually you don’t need to remove the event listener. You might need to do it when you want to receive the event just once or to free up resources. In such cases, you can apply the methods in <strong>Example 3</strong>.</p>\n<blockquote>\n<p>There is no syntax to remove an event listener through an XML declaration.</p>\n</blockquote>\n<h3 id=\"Removing-an-Event-Listener-Using-the-Shorthand-or-Full-Syntax\"><a href=\"#Removing-an-Event-Listener-Using-the-Shorthand-or-Full-Syntax\" class=\"headerlink\" title=\"Removing an Event Listener Using the Shorthand or Full Syntax\"></a>Removing an Event Listener Using the Shorthand or Full Syntax</h3><p><strong>Example 3</strong> uses the shorthand and full syntax to remove all listeners for the tap event of the testButton instance. If more than one object are listening for events, you can set a second parameter with the name of the callback function. This way only the referenced event listener is removed. When multiple event listeners with different <code>this</code> arguments are available, a third optional parameter is used.</p>\n<p>###Example 3: Removing a button tap event listener</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Removing a listener with short syntax</span></div><div class=\"line\">testButton.off(buttonModule.Button.tapEvent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Removing a listener with short syntax</span></div><div class=\"line\">testButton2.removeEventListener(buttonModule.Button.tapEvent);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Removing a listener with short syntax</span></div><div class=\"line\">testButton.off(buttonModule.Button.tapEvent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Removing a listener with short syntax</span></div><div class=\"line\">testButton2.removeEventListener(buttonModule.Button.tapEvent);</div></pre></td></tr></table></figure>\n<h2 id=\"PropertyChange-Event\"><a href=\"#PropertyChange-Event\" class=\"headerlink\" title=\"PropertyChange Event\"></a>PropertyChange Event</h2><p>The <code>Observable</code> class provides a built-in event called <code>propertyChange</code> that is called when a property is changed. <strong>Example 4</strong> shows how to subscribe to this event.</p>\n<p>###Example 4: Handle the propertyChange event</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> observableObject = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\"></div><div class=\"line\">observableObject.on(observableModule.Observable.propertyChangeEvent, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propertyChangeData</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(propertyChangeData.propertyName + <span class=\"string\">\" has been changed and the new value is: \"</span> + propertyChangeData.value);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> observableObject = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\"></div><div class=\"line\">observableObject.on(observableModule.Observable.propertyChangeEvent, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propertyChangeData</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(propertyChangeData.propertyName + <span class=\"string\">\" has been changed and the new value is: \"</span> + propertyChangeData.value);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>It is important to note that the <code>propertyChange</code> event is critical for the entire <a href=\"!--￼18--\">data binding</a> system. To take advantage of the data binding mechanism, all you have to do is make your business object <strong>inherit</strong> the <code>Observable</code> class. <strong>Example 5</strong> demonstrates how to do that.</p>\n<p>###Example 5: Creating a custom class and inheriting <code>Observable</code> class\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">  __extends(MyClass, _super);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._myProperty;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._myProperty = value;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">      configurable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">  &#125;)(observableModule.Observable);</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends observableModule.Observable &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> _myProperty:<span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._myProperty;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._myProperty = value;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The code snippet in <strong>Example 5</strong> fires the <code>propertyChange</code> event when the property value is changed.</p>\n<h2 id=\"Creating-a-Custom-Event\"><a href=\"#Creating-a-Custom-Event\" class=\"headerlink\" title=\"Creating a Custom Event\"></a>Creating a Custom Event</h2><p>If your business logic demands it, you may want to fire (raise or emit) a custom event on a particular action (see <strong>Example 6</strong>). To do that, call the <code>Observable.notify()</code> method when the action is completed. This method takes any <strong>implementer</strong> of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_data_observable_.eventdata.html\">EventData interface</a> as event data. It includes basic information about an event&mdash;its name as <code>eventName</code> and an instance of the event sender as <code>object</code>).</p>\n<p>###Example 6: Creating a custom event.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eventData = &#123;</div><div class=\"line\">  eventName: <span class=\"string\">\"myCustomEventName\"</span>,</div><div class=\"line\">  object: <span class=\"keyword\">this</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">this</span>.notify(eventData);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eventData: observableModule.EventData = &#123;</div><div class=\"line\">  eventName: <span class=\"string\">\"myCustomEventName\"</span>,</div><div class=\"line\">  object: <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">this</span>.notify(eventData);</div></pre></td></tr></table></figure>\n<p>The minimum information needed to raise an event is the <code>eventName</code>&mdash;it will be used to execute all event handlers associated with this event.</p>\n<p>The next step is to hook to this event:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myCustomObject = <span class=\"keyword\">new</span> MyClass();</div><div class=\"line\">myCustomObject.on(<span class=\"string\">\"myCustomEventName\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventData</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(eventData.eventName + <span class=\"string\">\" has been raised! by: \"</span> + eventData.object);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>A similar logic is implemented for the <code>propertyChange</code> event, so if your business logic requires that, <code>propertyChange</code> can be emitted manually through the <code>notify()</code> method (without using the <code>Observable.set()</code> method that also fires the <code>propertyChange</code> event).</p>\n<h2 id=\"Avoiding-Memory-Leaks\"><a href=\"#Avoiding-Memory-Leaks\" class=\"headerlink\" title=\"Avoiding Memory Leaks\"></a>Avoiding Memory Leaks</h2><p>Although the radio station comparison is convenient for understanding the concept, events are a bit more complicated on the inside. To be able to notify the listener, the sender contains a pointer to the listener. Even if you set the listener object to <code>null</code> or <code>undefined</code>, it is not eligible for garbage collection, because the sender is alive and has a live reference to the listener object. This could result in a memory leak when the object lifetimes of the sender and the listener differ significantly.</p>\n<p>Consider this scenario: A UI element creates a lot of child controls, each of which hooks to an event of the parent. Then a child control is released (during a list view scrolling for instance), causing a memory leak.</p>\n<p>To prevent these memory leaks, it is a good practice to remove your event listener handler before releasing the listener object. Unfortunately, sometimes you cannot determine the exact time to call the <code>off</code> or <code>removeEventListener</code> function. In such cases, use another option of the NativeScript framework: <em>weak events</em>.</p>\n<h2 id=\"Working-with-Weak-Events\"><a href=\"#Working-with-Weak-Events\" class=\"headerlink\" title=\"Working with Weak Events\"></a>Working with Weak Events</h2><p>A weak event, as its name suggests, creates an weak reference to the listener object, which helps you release the listener object without removing the event listener pointer.</p>\n<h3 id=\"Adding-a-Weak-Event-Listener\"><a href=\"#Adding-a-Weak-Event-Listener\" class=\"headerlink\" title=\"Adding a Weak Event Listener\"></a>Adding a Weak Event Listener</h3><p>Using weak event listeners is very similar to normal events. <strong>Example 7</strong> shows how to add a weak event listener (code comments are included for clarity):</p>\n<p>###Example 7: Creating a weak event and handling a property change event \n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> weakEventListenerModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/weakEventListener\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testButton = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\">testButton.on(buttonModule.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  source.set(<span class=\"string\">\"testProperty\"</span>, <span class=\"string\">\"change\"</span> + counter);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> handlePropertyChange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    counter++;</div><div class=\"line\">    <span class=\"keyword\">this</span>.text = counter + <span class=\"string\">\"\"</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> weakEL = weakEventListenerModule.WeakEventListener;</div><div class=\"line\">  <span class=\"keyword\">var</span> weakEventListenerOptions: weakEventListenerModule.WeakEventListenerOptions = &#123;</div><div class=\"line\">    <span class=\"comment\">// create a weak reference to the event listener object</span></div><div class=\"line\">    targetWeakRef: <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>),</div><div class=\"line\">    <span class=\"comment\">// create a weak reference to the event sender object</span></div><div class=\"line\">    sourceWeakRef: <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>.source),</div><div class=\"line\">    <span class=\"comment\">// set the name of the event</span></div><div class=\"line\">    eventName: observable.Observable.propertyChangeEvent,</div><div class=\"line\">    <span class=\"comment\">// set the event handler</span></div><div class=\"line\">    handler: handlePropertyChange,</div><div class=\"line\">    <span class=\"comment\">// (optional) set the context in which to execute the handler </span></div><div class=\"line\">    handlerContext: testButton,</div><div class=\"line\">    <span class=\"comment\">// (optional) set a specialized property used for extra event recognition </span></div><div class=\"line\">    key: <span class=\"keyword\">this</span>.options.targetProperty</div><div class=\"line\">  &#125;</div><div class=\"line\">  weakEL.addWeakEventListener(<span class=\"keyword\">this</span>.weakEventListenerOptions);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> weakEventListenerModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/weakEventListener\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testButton = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\">testButton.on(buttonModule.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  source.set(<span class=\"string\">\"testProperty\"</span>, <span class=\"string\">\"change\"</span> + counter);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> handlePropertyChange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  counter++;</div><div class=\"line\">  <span class=\"keyword\">this</span>.text = counter + <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> weakEL = weakEventListenerModule.WeakEventListener;</div><div class=\"line\"><span class=\"keyword\">var</span> weakEventListenerOptions: weakEventListenerModule.WeakEventListenerOptions = &#123;</div><div class=\"line\">  <span class=\"comment\">// create a weak reference to the event listener object</span></div><div class=\"line\">  targetWeakRef: <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>),</div><div class=\"line\">  <span class=\"comment\">// create a weak reference to the event sender object</span></div><div class=\"line\">  sourceWeakRef: <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>.source),</div><div class=\"line\">  <span class=\"comment\">// set the name of the event</span></div><div class=\"line\">  eventName: observable.Observable.propertyChangeEvent,</div><div class=\"line\">  <span class=\"comment\">// set the event handler</span></div><div class=\"line\">  handler: handlePropertyChange,</div><div class=\"line\">  <span class=\"comment\">// specialized property used for extra event recognition</span></div><div class=\"line\">  key: <span class=\"keyword\">this</span>.options.targetProperty,</div><div class=\"line\">  <span class=\"comment\">// (optional) set the context in which to execute the handler</span></div><div class=\"line\">  handlerContext: testButton</div><div class=\"line\">&#125;</div><div class=\"line\">weakEL.addWeakEventListener(<span class=\"keyword\">this</span>.weakEventListenerOptions);</div></pre></td></tr></table></figure>\n<p><strong>Example 7</strong> shows how to attach a weak event listener to an observable object instance. A closer look at the <code>handlePropertyChange</code> function shows that <code>text</code> property of the <code>this</code> object is changed when the <code>propertyChange</code> event is raised (via the button tap event). The function demonstrates how to use the <code>handlerContext</code> property&mdash;its value is taken as an argument to <code>this</code> inside the event handler function.</p>\n<h3 id=\"Removing-a-Weak-Event-Listener\"><a href=\"#Removing-a-Weak-Event-Listener\" class=\"headerlink\" title=\"Removing a Weak Event Listener\"></a>Removing a Weak Event Listener</h3><p>The <code>targetWeakRef</code> and <code>key</code> properties are optional when invoking a function on an event. However, they allow for removing an event listener. The properties are used as keys for a key-value pair that stores weak event listeners.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weakEL.removeWeakEventListener(<span class=\"keyword\">this</span>.weakEventListenerOptions);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weakEL.removeWeakEventListener(<span class=\"keyword\">this</span>.weakEventListenerOptions);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h1><p>Contents of this article:</p>\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#adding-an-event-handler\">Adding an event handler</a></li>\n<li><a href=\"#removing-an-event-listener\">Removing an event listener</a></li>\n<li><a href=\"#propertychange-event\">PropertyChange event</a></li>\n<li><a href=\"#creating-a-custom-event\">Creating a custom event</a></li>\n<li><a href=\"#avoiding-memory-leaks\">Avoiding memory leaks</a></li>\n<li><a href=\"#working-with-weak-events\">Working with weak events</a></li>\n</ul>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>An event is a message sent from an event emitter to signify the occurrence of a specific action. This action can be generated by a user action (such as a tap) or by program logic (for instance, to indicate that downloading an image from a server has completed). The object that raises the event is called an <strong>event sender</strong> (simply <strong>sender</strong>) or <strong>event raiser</strong>. The object that consumes the event is called an <strong>event listener</strong> (simply <strong>listener</strong>) or <strong>event handler</strong>.</p>\n<p>The NativeScript framework provides a class <code>Observable</code> that powers the process of working with events. Find more information about it in the <a href=\"http://docs.nativescript.org/api-reference/classes/_data_observable_.observable.html\">API Reference</a>. Because it is one of the base classes within the NativeScript framework, almost every NativeScript object (component) has an option for dealing with events.</p>\n<h2 id=\"Adding-an-Event-Handler\"><a href=\"#Adding-an-Event-Handler\" class=\"headerlink\" title=\"Adding an Event Handler\"></a>Adding an Event Handler</h2><p>To add an <strong>event handler</strong> means setting a function (method) that executes when the event is raised.</p>\n<p><strong>Example 1</strong> shows how to set a function that prints a “Hello World!” message in the console when a button is tapped. You can choose between the shorthand syntax and the full syntax or you can declare the event handler in XML.</p>\n<p>The example below shows how to add an event listener by using the short and full syntax. There is a third optional parameter that represents the <code>this</code> argument.</p>\n<p>###Example 1 (JavaScript): Adding an event handler or an event listener using the short and full syntax.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Adding a listener with the short syntax</span></div><div class=\"line\"><span class=\"keyword\">var</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> testButton = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\"></div><div class=\"line\">testButton.on(buttonModule.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;,<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Adding a lister with the full syntax</span></div><div class=\"line\"><span class=\"keyword\">var</span> testButton2 = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton2.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> onTap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">testButton2.addEventListener(buttonModule.Button.tapEvent, onTap, <span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>###Example 1 (TypeScript): Adding an event handler or an event listener using the short and full syntax.\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Adding a listener with the short syntax</span></div><div class=\"line\"><span class=\"keyword\">import</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> testButton = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\"></div><div class=\"line\">testButton.on(buttonModule.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">  &#125;,<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Adding a lister with the full syntax</span></div><div class=\"line\"><span class=\"keyword\">var</span> testButton2 = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton2.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> onTap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">testButton2.addEventListener(buttonModule.Button.tapEvent, onTap, <span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>Another option to set an event handler is to use an XML declaration.</p>\n<p>###Example 1 (XML): Adding an event handler or an event listener using an XML declaration.\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"onTap\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>You need a code-behind file (see <strong>Example 2</strong>) to write the function body (the code-behind file has the same file name, but a different extension: .js or .ts depending on the language you are using). </p>\n<p>###Example 2: Hooking to a button tap event\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onTap</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.onTap = onTap;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onTap</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Removing-an-Event-Listener\"><a href=\"#Removing-an-Event-Listener\" class=\"headerlink\" title=\"Removing an Event Listener\"></a>Removing an Event Listener</h2><p>Usually you don’t need to remove the event listener. You might need to do it when you want to receive the event just once or to free up resources. In such cases, you can apply the methods in <strong>Example 3</strong>.</p>\n<blockquote>\n<p>There is no syntax to remove an event listener through an XML declaration.</p>\n</blockquote>\n<h3 id=\"Removing-an-Event-Listener-Using-the-Shorthand-or-Full-Syntax\"><a href=\"#Removing-an-Event-Listener-Using-the-Shorthand-or-Full-Syntax\" class=\"headerlink\" title=\"Removing an Event Listener Using the Shorthand or Full Syntax\"></a>Removing an Event Listener Using the Shorthand or Full Syntax</h3><p><strong>Example 3</strong> uses the shorthand and full syntax to remove all listeners for the tap event of the testButton instance. If more than one object are listening for events, you can set a second parameter with the name of the callback function. This way only the referenced event listener is removed. When multiple event listeners with different <code>this</code> arguments are available, a third optional parameter is used.</p>\n<p>###Example 3: Removing a button tap event listener</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Removing a listener with short syntax</span></div><div class=\"line\">testButton.off(buttonModule.Button.tapEvent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Removing a listener with short syntax</span></div><div class=\"line\">testButton2.removeEventListener(buttonModule.Button.tapEvent);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Removing a listener with short syntax</span></div><div class=\"line\">testButton.off(buttonModule.Button.tapEvent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Removing a listener with short syntax</span></div><div class=\"line\">testButton2.removeEventListener(buttonModule.Button.tapEvent);</div></pre></td></tr></table></figure>\n<h2 id=\"PropertyChange-Event\"><a href=\"#PropertyChange-Event\" class=\"headerlink\" title=\"PropertyChange Event\"></a>PropertyChange Event</h2><p>The <code>Observable</code> class provides a built-in event called <code>propertyChange</code> that is called when a property is changed. <strong>Example 4</strong> shows how to subscribe to this event.</p>\n<p>###Example 4: Handle the propertyChange event</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> observableObject = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\"></div><div class=\"line\">observableObject.on(observableModule.Observable.propertyChangeEvent, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propertyChangeData</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(propertyChangeData.propertyName + <span class=\"string\">\" has been changed and the new value is: \"</span> + propertyChangeData.value);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> observableObject = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\"></div><div class=\"line\">observableObject.on(observableModule.Observable.propertyChangeEvent, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propertyChangeData</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(propertyChangeData.propertyName + <span class=\"string\">\" has been changed and the new value is: \"</span> + propertyChangeData.value);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>It is important to note that the <code>propertyChange</code> event is critical for the entire <a href=\"!--￼18--\">data binding</a> system. To take advantage of the data binding mechanism, all you have to do is make your business object <strong>inherit</strong> the <code>Observable</code> class. <strong>Example 5</strong> demonstrates how to do that.</p>\n<p>###Example 5: Creating a custom class and inheriting <code>Observable</code> class\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">  __extends(MyClass, _super);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._myProperty;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._myProperty = value;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">      configurable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">  &#125;)(observableModule.Observable);</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends observableModule.Observable &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> _myProperty:<span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._myProperty;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._myProperty = value;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The code snippet in <strong>Example 5</strong> fires the <code>propertyChange</code> event when the property value is changed.</p>\n<h2 id=\"Creating-a-Custom-Event\"><a href=\"#Creating-a-Custom-Event\" class=\"headerlink\" title=\"Creating a Custom Event\"></a>Creating a Custom Event</h2><p>If your business logic demands it, you may want to fire (raise or emit) a custom event on a particular action (see <strong>Example 6</strong>). To do that, call the <code>Observable.notify()</code> method when the action is completed. This method takes any <strong>implementer</strong> of the <a href=\"http://docs.nativescript.org/api-reference/interfaces/_data_observable_.eventdata.html\">EventData interface</a> as event data. It includes basic information about an event&mdash;its name as <code>eventName</code> and an instance of the event sender as <code>object</code>).</p>\n<p>###Example 6: Creating a custom event.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eventData = &#123;</div><div class=\"line\">  eventName: <span class=\"string\">\"myCustomEventName\"</span>,</div><div class=\"line\">  object: <span class=\"keyword\">this</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">this</span>.notify(eventData);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eventData: observableModule.EventData = &#123;</div><div class=\"line\">  eventName: <span class=\"string\">\"myCustomEventName\"</span>,</div><div class=\"line\">  object: <span class=\"keyword\">this</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">this</span>.notify(eventData);</div></pre></td></tr></table></figure>\n<p>The minimum information needed to raise an event is the <code>eventName</code>&mdash;it will be used to execute all event handlers associated with this event.</p>\n<p>The next step is to hook to this event:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myCustomObject = <span class=\"keyword\">new</span> MyClass();</div><div class=\"line\">myCustomObject.on(<span class=\"string\">\"myCustomEventName\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventData</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(eventData.eventName + <span class=\"string\">\" has been raised! by: \"</span> + eventData.object);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>A similar logic is implemented for the <code>propertyChange</code> event, so if your business logic requires that, <code>propertyChange</code> can be emitted manually through the <code>notify()</code> method (without using the <code>Observable.set()</code> method that also fires the <code>propertyChange</code> event).</p>\n<h2 id=\"Avoiding-Memory-Leaks\"><a href=\"#Avoiding-Memory-Leaks\" class=\"headerlink\" title=\"Avoiding Memory Leaks\"></a>Avoiding Memory Leaks</h2><p>Although the radio station comparison is convenient for understanding the concept, events are a bit more complicated on the inside. To be able to notify the listener, the sender contains a pointer to the listener. Even if you set the listener object to <code>null</code> or <code>undefined</code>, it is not eligible for garbage collection, because the sender is alive and has a live reference to the listener object. This could result in a memory leak when the object lifetimes of the sender and the listener differ significantly.</p>\n<p>Consider this scenario: A UI element creates a lot of child controls, each of which hooks to an event of the parent. Then a child control is released (during a list view scrolling for instance), causing a memory leak.</p>\n<p>To prevent these memory leaks, it is a good practice to remove your event listener handler before releasing the listener object. Unfortunately, sometimes you cannot determine the exact time to call the <code>off</code> or <code>removeEventListener</code> function. In such cases, use another option of the NativeScript framework: <em>weak events</em>.</p>\n<h2 id=\"Working-with-Weak-Events\"><a href=\"#Working-with-Weak-Events\" class=\"headerlink\" title=\"Working with Weak Events\"></a>Working with Weak Events</h2><p>A weak event, as its name suggests, creates an weak reference to the listener object, which helps you release the listener object without removing the event listener pointer.</p>\n<h3 id=\"Adding-a-Weak-Event-Listener\"><a href=\"#Adding-a-Weak-Event-Listener\" class=\"headerlink\" title=\"Adding a Weak Event Listener\"></a>Adding a Weak Event Listener</h3><p>Using weak event listeners is very similar to normal events. <strong>Example 7</strong> shows how to add a weak event listener (code comments are included for clarity):</p>\n<p>###Example 7: Creating a weak event and handling a property change event \n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> weakEventListenerModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/weakEventListener\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testButton = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\">testButton.on(buttonModule.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  source.set(<span class=\"string\">\"testProperty\"</span>, <span class=\"string\">\"change\"</span> + counter);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> handlePropertyChange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    counter++;</div><div class=\"line\">    <span class=\"keyword\">this</span>.text = counter + <span class=\"string\">\"\"</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> weakEL = weakEventListenerModule.WeakEventListener;</div><div class=\"line\">  <span class=\"keyword\">var</span> weakEventListenerOptions: weakEventListenerModule.WeakEventListenerOptions = &#123;</div><div class=\"line\">    <span class=\"comment\">// create a weak reference to the event listener object</span></div><div class=\"line\">    targetWeakRef: <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>),</div><div class=\"line\">    <span class=\"comment\">// create a weak reference to the event sender object</span></div><div class=\"line\">    sourceWeakRef: <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>.source),</div><div class=\"line\">    <span class=\"comment\">// set the name of the event</span></div><div class=\"line\">    eventName: observable.Observable.propertyChangeEvent,</div><div class=\"line\">    <span class=\"comment\">// set the event handler</span></div><div class=\"line\">    handler: handlePropertyChange,</div><div class=\"line\">    <span class=\"comment\">// (optional) set the context in which to execute the handler </span></div><div class=\"line\">    handlerContext: testButton,</div><div class=\"line\">    <span class=\"comment\">// (optional) set a specialized property used for extra event recognition </span></div><div class=\"line\">    key: <span class=\"keyword\">this</span>.options.targetProperty</div><div class=\"line\">  &#125;</div><div class=\"line\">  weakEL.addWeakEventListener(<span class=\"keyword\">this</span>.weakEventListenerOptions);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> weakEventListenerModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/weakEventListener\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> observableModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testButton = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">testButton.text = <span class=\"string\">\"Test\"</span>;</div><div class=\"line\">testButton.on(buttonModule.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  source.set(<span class=\"string\">\"testProperty\"</span>, <span class=\"string\">\"change\"</span> + counter);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> observableModule.Observable();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> handlePropertyChange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  counter++;</div><div class=\"line\">  <span class=\"keyword\">this</span>.text = counter + <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> weakEL = weakEventListenerModule.WeakEventListener;</div><div class=\"line\"><span class=\"keyword\">var</span> weakEventListenerOptions: weakEventListenerModule.WeakEventListenerOptions = &#123;</div><div class=\"line\">  <span class=\"comment\">// create a weak reference to the event listener object</span></div><div class=\"line\">  targetWeakRef: <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>),</div><div class=\"line\">  <span class=\"comment\">// create a weak reference to the event sender object</span></div><div class=\"line\">  sourceWeakRef: <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>.source),</div><div class=\"line\">  <span class=\"comment\">// set the name of the event</span></div><div class=\"line\">  eventName: observable.Observable.propertyChangeEvent,</div><div class=\"line\">  <span class=\"comment\">// set the event handler</span></div><div class=\"line\">  handler: handlePropertyChange,</div><div class=\"line\">  <span class=\"comment\">// specialized property used for extra event recognition</span></div><div class=\"line\">  key: <span class=\"keyword\">this</span>.options.targetProperty,</div><div class=\"line\">  <span class=\"comment\">// (optional) set the context in which to execute the handler</span></div><div class=\"line\">  handlerContext: testButton</div><div class=\"line\">&#125;</div><div class=\"line\">weakEL.addWeakEventListener(<span class=\"keyword\">this</span>.weakEventListenerOptions);</div></pre></td></tr></table></figure>\n<p><strong>Example 7</strong> shows how to attach a weak event listener to an observable object instance. A closer look at the <code>handlePropertyChange</code> function shows that <code>text</code> property of the <code>this</code> object is changed when the <code>propertyChange</code> event is raised (via the button tap event). The function demonstrates how to use the <code>handlerContext</code> property&mdash;its value is taken as an argument to <code>this</code> inside the event handler function.</p>\n<h3 id=\"Removing-a-Weak-Event-Listener\"><a href=\"#Removing-a-Weak-Event-Listener\" class=\"headerlink\" title=\"Removing a Weak Event Listener\"></a>Removing a Weak Event Listener</h3><p>The <code>targetWeakRef</code> and <code>key</code> properties are optional when invoking a function on an event. However, they allow for removing an event listener. The properties are used as keys for a key-value pair that stores weak event listeners.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weakEL.removeWeakEventListener(<span class=\"keyword\">this</span>.weakEventListenerOptions);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weakEL.removeWeakEventListener(<span class=\"keyword\">this</span>.weakEventListenerOptions);</div></pre></td></tr></table></figure>\n"},{"title":"Supporting Multiple Screens","description":"Learn how to tailor you application for different screen sizes.","position":8,"slug":"multiple-screen-sizes","_content":"\n# Supporting Multiple Screens\nMobile application run on different devices with different screen sizes and form factors. NativeScript provides a way to define different files(.js, .css, .xml etc.) to be loaded based on the screens size, platform and orientation of the current device. The approach is somewhat similar to [multi screen support in android](http://developer.android.com/guide/practices/screens_support.html). There is a set of *qualifiers* that can be added inside the file that will be respected when the file is loaded. Here is how the file should look like:\n\n`<file-name>[.<qualifier>]*.<extension>`\n\nWe will go trough the list of supported qualifiers.\n\n## Screen Size Qualifiers\nAll the values in screen size qualifiers are in density independent pixels(dp) - meaning it corresponds to the physical dimensions of the screen. The assumptions is that there are ~160 dp per inch. For example, according to android guidelines if the device's smaller dimension is more than 600dp(~3.75 inches) it is probably tablet.\n\n* `minWH<X>` - The smaller dimension(width or height) should be at least **X** dp.\n* `minW<X>` - Width should be at least **X** dp.\n* `minH<X>` - Height should be at least **X** dp.\n\n*Example(separate XML file for tablet and phone)*:\n\n* `main-page.minWH600.xml` - XML file to be used for tablet devices.\n* `main-page.xml` - XML to be used for phones \n\n## Platform Qualifiers\n\n* `android` – android platform\n* `ios` – iOS platform\n* `windows` (coming soon) – windows platform\n\n*Example(platform specific files)*:\n\n* `app.android.css` - CSS styles for Android.\n* `app.ios.css` - CSS styles for iOS. \n\nThe platform qualifiers are executed during build time, while the others - during run time. For example, the app.ios.css file will not be taken in consideration when building for android platform. Contrary, the screen size qualifiers will be considered just after the application runs on a device with specific screen size.\n\n## Orientation Qualifiers\n* `land` - orientation is in landscape mode\n* `port` - orientation is in portrait mode\n\n> Note: All qualifiers are taken into account when the page is loading. However, changing the device orientation will not trigger page reload and will not change the current page.\n","source":"core-concepts/supporting-multiple-screens.md","raw":"---\ntitle: Supporting Multiple Screens\ndescription: Learn how to tailor you application for different screen sizes.\nposition: 8\nslug: multiple-screen-sizes\n---\n\n# Supporting Multiple Screens\nMobile application run on different devices with different screen sizes and form factors. NativeScript provides a way to define different files(.js, .css, .xml etc.) to be loaded based on the screens size, platform and orientation of the current device. The approach is somewhat similar to [multi screen support in android](http://developer.android.com/guide/practices/screens_support.html). There is a set of *qualifiers* that can be added inside the file that will be respected when the file is loaded. Here is how the file should look like:\n\n`<file-name>[.<qualifier>]*.<extension>`\n\nWe will go trough the list of supported qualifiers.\n\n## Screen Size Qualifiers\nAll the values in screen size qualifiers are in density independent pixels(dp) - meaning it corresponds to the physical dimensions of the screen. The assumptions is that there are ~160 dp per inch. For example, according to android guidelines if the device's smaller dimension is more than 600dp(~3.75 inches) it is probably tablet.\n\n* `minWH<X>` - The smaller dimension(width or height) should be at least **X** dp.\n* `minW<X>` - Width should be at least **X** dp.\n* `minH<X>` - Height should be at least **X** dp.\n\n*Example(separate XML file for tablet and phone)*:\n\n* `main-page.minWH600.xml` - XML file to be used for tablet devices.\n* `main-page.xml` - XML to be used for phones \n\n## Platform Qualifiers\n\n* `android` – android platform\n* `ios` – iOS platform\n* `windows` (coming soon) – windows platform\n\n*Example(platform specific files)*:\n\n* `app.android.css` - CSS styles for Android.\n* `app.ios.css` - CSS styles for iOS. \n\nThe platform qualifiers are executed during build time, while the others - during run time. For example, the app.ios.css file will not be taken in consideration when building for android platform. Contrary, the screen size qualifiers will be considered just after the application runs on a device with specific screen size.\n\n## Orientation Qualifiers\n* `land` - orientation is in landscape mode\n* `port` - orientation is in portrait mode\n\n> Note: All qualifiers are taken into account when the page is loading. However, changing the device orientation will not trigger page reload and will not change the current page.\n","date":"2016-08-26T21:05:52.879Z","updated":"2016-08-26T21:05:52.879Z","path":"core-concepts/supporting-multiple-screens.html","comments":1,"layout":"page","_id":"cisn95c6h000bwsl0n03cayer","content":"<h1 id=\"Supporting-Multiple-Screens\"><a href=\"#Supporting-Multiple-Screens\" class=\"headerlink\" title=\"Supporting Multiple Screens\"></a>Supporting Multiple Screens</h1><p>Mobile application run on different devices with different screen sizes and form factors. NativeScript provides a way to define different files(.js, .css, .xml etc.) to be loaded based on the screens size, platform and orientation of the current device. The approach is somewhat similar to <a href=\"http://developer.android.com/guide/practices/screens_support.html\" target=\"_blank\" rel=\"external\">multi screen support in android</a>. There is a set of <em>qualifiers</em> that can be added inside the file that will be respected when the file is loaded. Here is how the file should look like:</p>\n<p><code>&lt;file-name&gt;[.&lt;qualifier&gt;]*.&lt;extension&gt;</code></p>\n<p>We will go trough the list of supported qualifiers.</p>\n<h2 id=\"Screen-Size-Qualifiers\"><a href=\"#Screen-Size-Qualifiers\" class=\"headerlink\" title=\"Screen Size Qualifiers\"></a>Screen Size Qualifiers</h2><p>All the values in screen size qualifiers are in density independent pixels(dp) - meaning it corresponds to the physical dimensions of the screen. The assumptions is that there are ~160 dp per inch. For example, according to android guidelines if the device’s smaller dimension is more than 600dp(~3.75 inches) it is probably tablet.</p>\n<ul>\n<li><code>minWH&lt;X&gt;</code> - The smaller dimension(width or height) should be at least <strong>X</strong> dp.</li>\n<li><code>minW&lt;X&gt;</code> - Width should be at least <strong>X</strong> dp.</li>\n<li><code>minH&lt;X&gt;</code> - Height should be at least <strong>X</strong> dp.</li>\n</ul>\n<p><em>Example(separate XML file for tablet and phone)</em>:</p>\n<ul>\n<li><code>main-page.minWH600.xml</code> - XML file to be used for tablet devices.</li>\n<li><code>main-page.xml</code> - XML to be used for phones </li>\n</ul>\n<h2 id=\"Platform-Qualifiers\"><a href=\"#Platform-Qualifiers\" class=\"headerlink\" title=\"Platform Qualifiers\"></a>Platform Qualifiers</h2><ul>\n<li><code>android</code> – android platform</li>\n<li><code>ios</code> – iOS platform</li>\n<li><code>windows</code> (coming soon) – windows platform</li>\n</ul>\n<p><em>Example(platform specific files)</em>:</p>\n<ul>\n<li><code>app.android.css</code> - CSS styles for Android.</li>\n<li><code>app.ios.css</code> - CSS styles for iOS. </li>\n</ul>\n<p>The platform qualifiers are executed during build time, while the others - during run time. For example, the app.ios.css file will not be taken in consideration when building for android platform. Contrary, the screen size qualifiers will be considered just after the application runs on a device with specific screen size.</p>\n<h2 id=\"Orientation-Qualifiers\"><a href=\"#Orientation-Qualifiers\" class=\"headerlink\" title=\"Orientation Qualifiers\"></a>Orientation Qualifiers</h2><ul>\n<li><code>land</code> - orientation is in landscape mode</li>\n<li><code>port</code> - orientation is in portrait mode</li>\n</ul>\n<blockquote>\n<p>Note: All qualifiers are taken into account when the page is loading. However, changing the device orientation will not trigger page reload and will not change the current page.</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"Supporting-Multiple-Screens\"><a href=\"#Supporting-Multiple-Screens\" class=\"headerlink\" title=\"Supporting Multiple Screens\"></a>Supporting Multiple Screens</h1><p>Mobile application run on different devices with different screen sizes and form factors. NativeScript provides a way to define different files(.js, .css, .xml etc.) to be loaded based on the screens size, platform and orientation of the current device. The approach is somewhat similar to <a href=\"http://developer.android.com/guide/practices/screens_support.html\">multi screen support in android</a>. There is a set of <em>qualifiers</em> that can be added inside the file that will be respected when the file is loaded. Here is how the file should look like:</p>\n<p><code>&lt;file-name&gt;[.&lt;qualifier&gt;]*.&lt;extension&gt;</code></p>\n<p>We will go trough the list of supported qualifiers.</p>\n<h2 id=\"Screen-Size-Qualifiers\"><a href=\"#Screen-Size-Qualifiers\" class=\"headerlink\" title=\"Screen Size Qualifiers\"></a>Screen Size Qualifiers</h2><p>All the values in screen size qualifiers are in density independent pixels(dp) - meaning it corresponds to the physical dimensions of the screen. The assumptions is that there are ~160 dp per inch. For example, according to android guidelines if the device’s smaller dimension is more than 600dp(~3.75 inches) it is probably tablet.</p>\n<ul>\n<li><code>minWH&lt;X&gt;</code> - The smaller dimension(width or height) should be at least <strong>X</strong> dp.</li>\n<li><code>minW&lt;X&gt;</code> - Width should be at least <strong>X</strong> dp.</li>\n<li><code>minH&lt;X&gt;</code> - Height should be at least <strong>X</strong> dp.</li>\n</ul>\n<p><em>Example(separate XML file for tablet and phone)</em>:</p>\n<ul>\n<li><code>main-page.minWH600.xml</code> - XML file to be used for tablet devices.</li>\n<li><code>main-page.xml</code> - XML to be used for phones </li>\n</ul>\n<h2 id=\"Platform-Qualifiers\"><a href=\"#Platform-Qualifiers\" class=\"headerlink\" title=\"Platform Qualifiers\"></a>Platform Qualifiers</h2><ul>\n<li><code>android</code> – android platform</li>\n<li><code>ios</code> – iOS platform</li>\n<li><code>windows</code> (coming soon) – windows platform</li>\n</ul>\n<p><em>Example(platform specific files)</em>:</p>\n<ul>\n<li><code>app.android.css</code> - CSS styles for Android.</li>\n<li><code>app.ios.css</code> - CSS styles for iOS. </li>\n</ul>\n<p>The platform qualifiers are executed during build time, while the others - during run time. For example, the app.ios.css file will not be taken in consideration when building for android platform. Contrary, the screen size qualifiers will be considered just after the application runs on a device with specific screen size.</p>\n<h2 id=\"Orientation-Qualifiers\"><a href=\"#Orientation-Qualifiers\" class=\"headerlink\" title=\"Orientation Qualifiers\"></a>Orientation Qualifiers</h2><ul>\n<li><code>land</code> - orientation is in landscape mode</li>\n<li><code>port</code> - orientation is in portrait mode</li>\n</ul>\n<blockquote>\n<p>Note: All qualifiers are taken into account when the page is loading. However, changing the device orientation will not trigger page reload and will not change the current page.</p>\n</blockquote>\n"},{"title":"Location","description":"How to work with geographical location data in NativeScript.","position":1,"slug":"location","previous_url":"/location","_content":"\n# Location\n\n> **IMPORTANT:** Starting with NativeScript 1.5.0, the built-in Location module is deprecated. To implement geolocation in your apps, use the `nativescript-geolocation` plugin, available via npm. This plugin provides an API similar to the [WC3 Geolocation API](http://dev.w3.org/geo/api/spec-source.html). \n\nThe most important difference between the deprecated module and the new plugin is that location monitoring via the plugin returns an `id` which you can use to stop location monitoring. The `nativescript-geolocation` plugin also uses an accuracy criteria approach to deliver geolocation. This means that getting a location is powered by the most accurate location provider that is available. For example, if GPS signal is available and the GPS provider is enabled, the plugin uses GPS; if GPS is not connected, the device falls back to other available providers such as Wi-Fi networks or cell towers).\n\nThis approach does not limit location monitoring only to a specific location provider; it can still work with all of them.\n\nYou might want to start with this [example](https://github.com/nsndeck/locationtest) which demonstrates how to use the `nativescript-geolocation` plugin.\n\nTo make the plugin available in your app, run the following command:\n\n\n``` \ntns plugin add nativescript-geolocation \n```\n\n\nTo import the module in your code use:\n\n{% nativescript %}\n{% codeblock JavaScript lang:JavaScript %}\n\nvar geolocation = require(\"nativescript-geolocation\");\n{% endcodeblock %}\n{% endnativescript %}\n\n\n```TypeScript\nimport geolocation = require(\"nativescript-geolocation\");\n```\n\n## Getting Information About a Location Service\n\nNativeScript has an universal way to check if location services are turned on - the `isEnabled` method. The method returns a boolean value (true if the location service is enabled).\n\n> **NOTE:** For Android, `isEnabled` checks if the location service is enabled (any accuracy level). For iOS, the method checks if the location service is enabled for the application in foreground or background mode.\n\n> **NOTE:** Keep in mind that location services do not work in emulators. You can test them only on a real devices.\n\n## Requesting Permissions to Use Location Services\n\nBy default, the `nativescript-geolocation` plugin adds the required permissions in `AndroidManiest.xml` for Android and `Info.plist` for iOS. For iOS, the plugin adds two dummy string values which serve as message when the platform asks for permission to use location services. You can edit this message later. \n\nAfter you install the plugin, you can request to use location services in the app with the following code:\n{% nativescript %}\n\n#XML\n<Page> \n    <StackLayout>\n        <Button text=\"enable Location\" tap=\"enableLocationTap\"/>\n    </StackLayout>\n</Page>\n\n#JavaScript\nfunction enableLocationTap(args) {\n    if (!geolocation.isEnabled()) {\n        geolocation.enableLocationRequest();\n    }\n}\nexports.enableLocationTap = enableLocationTap;\n\n{% endnativescript %}\n{% angular %}\n\n#XML\n<StackLayout>\n    <Button text=\"enable Location\" (tap)=\"enableLocationTap()\"></Button>\n</StackLayout>\n\n{% endangular %}\n\n#TypeScript\n{% nativescript %}export function {% endnativescript %}public {% angular %}{% endangular %}enableLocationTap() { \n    if (!geolocation.isEnabled()) {\n        geolocation.enableLocationRequest();\n    }\n}\n\n## Getting Location\n\nYou can get location with `getCurrentLocation` or with `watchLocation`. Using `distance`, you can obtain the distance between two locations.\n\n* [getCurrentLocation](#getcurrentlocation)\n* [watchLocation](#watchlocation)\n* [distance](#distance)\n\n### `getCurrentLocation`\n\nThis method gets a single location. It accepts the `location options` parameter. \n\n`getCurrentLocation` returns a `Promise<Location>` where `Location` and `location options` are defined as follows.\n\n#### Class: Location  \nA data class that encapsulates common properties for a geolocation.\n\n##### Instance Properties\n\nProperty | Type | Description\n---|---|---\n`latitude` | Number | The latitude of the geolocation, in degrees.\n`longitude` | Number | The longitude of the geolocation, in degrees.\n`altitude` | Number | The altitude (if available), in meters above sea level.\n`horizontalAccuracy` | Number | The horizontal accuracy, in meters.\n`verticalAccuracy` | Number | The vertical accuracy, in meters.\n`speed` | Number | The speed, in meters/second over ground.\n`direction` | Number | The direction (course), in degrees.\n`timestamp` | Object | The time at which this location was determined.\n`android` | Object | The Android-specific [location](http://developer.android.com/reference/android/location/Location.html) object.\n `ios` | CLLocation | The iOS-specific [CLLocation](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocation_Class/) object.\n\n#### Interface: Options  \nProvides options for location monitoring.\n\n##### Properties\n\nProperty | Type | Description\n---|---|---\n`desiredAccuracy` | Number | (Optional) Specifies desired accuracy in meters. Defaults to `DesiredAccuracy.HIGH`\n`updateDistance` | Number | (Optional) Updates distance filter in meters. Specifies how often to update. Default on iOS is no filter, on Android it is 0 meters.\n`minimumUpdateTime` | Number | (Optional) Specifies the minimum time interval between location updates, in milliseconds. Ignored on iOS.\n`maximumAge` | Number | (Optional) Filters locations by how long ago they were received, in milliseconds. For example, if the `maximumAge` is 5000, you will get locations only from the last 5 seconds. \n`timeout` | Number | (Optional) Specifies how long to wait for a location, in milliseconds.\n\n\n{% nativescript %}\n#XML\n<Page>\n    <StackLayout>\n        <Button text=\"Get Current Location\" tap=\"buttonGetLocationTap\"/>\n    </StackLayout>\n</Page>\n\n#JavaScript\nfunction buttonGetLocationTap(args) {\n\tvar location = geolocation.getCurrentLocation({desiredAccuracy: 3, updateDistance: 10, maximumAge: 20000, timeout: 20000}).\n\tthen(function(loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Current location is: \" + loc);\n\t\t}\n\t}, function(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t});\n}\nexports.buttonGetLocationTap = buttonGetLocationTap;\n\n{% endnativescript %}\n{% angular %}\n\n#XML\n<StackLayout>\n    <Button text=\"Get Current Location\" (tap)=\"buttonGetLocationTap()\"></Button>\n</StackLayout>\n\n{% endangular %}\n\n#TypeScript\n{% nativescript %}export function {% endnativescript %}public {% angular %}{% endangular %}buttonGetLocationTap() {\n\tvar location = geolocation.getCurrentLocation({desiredAccuracy: 3, updateDistance: 10, maximumAge: 20000, timeout: 20000}).\n\tthen(function(loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Current location is: \" + loc);\n\t\t}\n\t}, function(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t});\n}\n\n\n### `watchLocation`\n\nWith this method, location watching does not stop automatically until `clearWatch` method is called. You might need to use this method in apps which require a GPS log or active location tracking.  \n{% nativescript %}\n\n#XML\n<Page>\n    <StackLayout>\n\t\t<Button row=\"2\" text=\"start monitoring\" tap=\"buttonStartTap\"/>\n\t\t<Button row=\"3\" text=\"stop monitoring\" tap=\"buttonStopTap\"/>\n    </StackLayout>\n</Page>\n\n\n# JavaScript\nfunction buttonStartTap() {\n\twatchId = geolocation.watchLocation(\n\tfunction (loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Received location: \" + loc);\n\t\t}\n\t}, \n\tfunction(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t}, \n\t{desiredAccuracy: 3, updateDistance: 10, updateTime: 1000 * 20}); // should update every 20 sec according to google documentation this is not so sure.\n}\nexports.buttonStartTap = buttonStartTap;\n\nfunction buttonStopTap() {\n\tif (watchId) {\n\t\tgeolocation.clearWatch(watchId);\n\t}\n}\nexports.buttonStopTap = buttonStopTap;\n\n{% endnativescript %}\n{% angular %}\n\n# XML\n<StackLayout>\n    <Button row=\"2\" text=\"start monitoring\" (tap)=\"buttonStartTap()\"></Button>\n    <Button row=\"3\" text=\"stop monitoring\" (tap)=\"buttonStopTap()\"></Button>\n</StackLayout>\n\n{% endangular %}\n\n# TypeScript\n{% nativescript %}export function {% endnativescript %}public {% angular %}{% endangular %}buttonStartTap() {\n\twatchId = geolocation.watchLocation(\n\tfunction (loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Received location: \" + loc);\n\t\t}\n\t}, \n\tfunction(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t}, \n\t{desiredAccuracy: 3, updateDistance: 10, updateTime: 1000 * 20}); // Should update every 20 seconds according to Googe documentation. Not verified.\n}\n\n{% nativescript %}export function {% endnativescript %}public {% angular %}{% endangular %}buttonStopTap() {\n\tif (watchId) {\n\t\tgeolocation.clearWatch(watchId);\n\t}\n}\n\n\n### `distance`\n\nThis method lets you measure the distance between two locations in meters.\n\n{% nativescript %}\n\n# JavaScript\nfunction getDistance(loc1, loc2) {\n    console.log(\"Distance between loc1 and loc2 is: \" + geolocation.distance(loc1, loc2));\n}\n\n{% endnativescript %}\n```TypeScript\nfunction getDistance(loc1, loc2) {\n    console.log(\"Distance between loc1 and loc2 is: \" + geolocation.distance(loc1, loc2));\n}\n```\n\n## See Also\n\n* [NativeScript Plugins](http://docs.nativescript.org/plugins/plugins)\n* [Location Module (Deprecated)](http://docs.nativescript.org/api-reference/modules/_location_.html)\n* [NativeScript-Geolocation in NPM](https://www.npmjs.com/package/nativescript-geolocation)\n","source":"hardware/location.md","raw":"---\ntitle: Location\ndescription: How to work with geographical location data in NativeScript.\nposition: 1\nslug: location\nprevious_url: /location\n---\n\n# Location\n\n> **IMPORTANT:** Starting with NativeScript 1.5.0, the built-in Location module is deprecated. To implement geolocation in your apps, use the `nativescript-geolocation` plugin, available via npm. This plugin provides an API similar to the [WC3 Geolocation API](http://dev.w3.org/geo/api/spec-source.html). \n\nThe most important difference between the deprecated module and the new plugin is that location monitoring via the plugin returns an `id` which you can use to stop location monitoring. The `nativescript-geolocation` plugin also uses an accuracy criteria approach to deliver geolocation. This means that getting a location is powered by the most accurate location provider that is available. For example, if GPS signal is available and the GPS provider is enabled, the plugin uses GPS; if GPS is not connected, the device falls back to other available providers such as Wi-Fi networks or cell towers).\n\nThis approach does not limit location monitoring only to a specific location provider; it can still work with all of them.\n\nYou might want to start with this [example](https://github.com/nsndeck/locationtest) which demonstrates how to use the `nativescript-geolocation` plugin.\n\nTo make the plugin available in your app, run the following command:\n\n\n``` \ntns plugin add nativescript-geolocation \n```\n\n\nTo import the module in your code use:\n\n{% nativescript %}\n{% codeblock JavaScript lang:JavaScript %}\n\nvar geolocation = require(\"nativescript-geolocation\");\n{% endcodeblock %}\n{% endnativescript %}\n\n\n```TypeScript\nimport geolocation = require(\"nativescript-geolocation\");\n```\n\n## Getting Information About a Location Service\n\nNativeScript has an universal way to check if location services are turned on - the `isEnabled` method. The method returns a boolean value (true if the location service is enabled).\n\n> **NOTE:** For Android, `isEnabled` checks if the location service is enabled (any accuracy level). For iOS, the method checks if the location service is enabled for the application in foreground or background mode.\n\n> **NOTE:** Keep in mind that location services do not work in emulators. You can test them only on a real devices.\n\n## Requesting Permissions to Use Location Services\n\nBy default, the `nativescript-geolocation` plugin adds the required permissions in `AndroidManiest.xml` for Android and `Info.plist` for iOS. For iOS, the plugin adds two dummy string values which serve as message when the platform asks for permission to use location services. You can edit this message later. \n\nAfter you install the plugin, you can request to use location services in the app with the following code:\n{% nativescript %}\n\n#XML\n<Page> \n    <StackLayout>\n        <Button text=\"enable Location\" tap=\"enableLocationTap\"/>\n    </StackLayout>\n</Page>\n\n#JavaScript\nfunction enableLocationTap(args) {\n    if (!geolocation.isEnabled()) {\n        geolocation.enableLocationRequest();\n    }\n}\nexports.enableLocationTap = enableLocationTap;\n\n{% endnativescript %}\n{% angular %}\n\n#XML\n<StackLayout>\n    <Button text=\"enable Location\" (tap)=\"enableLocationTap()\"></Button>\n</StackLayout>\n\n{% endangular %}\n\n#TypeScript\n{% nativescript %}export function {% endnativescript %}public {% angular %}{% endangular %}enableLocationTap() { \n    if (!geolocation.isEnabled()) {\n        geolocation.enableLocationRequest();\n    }\n}\n\n## Getting Location\n\nYou can get location with `getCurrentLocation` or with `watchLocation`. Using `distance`, you can obtain the distance between two locations.\n\n* [getCurrentLocation](#getcurrentlocation)\n* [watchLocation](#watchlocation)\n* [distance](#distance)\n\n### `getCurrentLocation`\n\nThis method gets a single location. It accepts the `location options` parameter. \n\n`getCurrentLocation` returns a `Promise<Location>` where `Location` and `location options` are defined as follows.\n\n#### Class: Location  \nA data class that encapsulates common properties for a geolocation.\n\n##### Instance Properties\n\nProperty | Type | Description\n---|---|---\n`latitude` | Number | The latitude of the geolocation, in degrees.\n`longitude` | Number | The longitude of the geolocation, in degrees.\n`altitude` | Number | The altitude (if available), in meters above sea level.\n`horizontalAccuracy` | Number | The horizontal accuracy, in meters.\n`verticalAccuracy` | Number | The vertical accuracy, in meters.\n`speed` | Number | The speed, in meters/second over ground.\n`direction` | Number | The direction (course), in degrees.\n`timestamp` | Object | The time at which this location was determined.\n`android` | Object | The Android-specific [location](http://developer.android.com/reference/android/location/Location.html) object.\n `ios` | CLLocation | The iOS-specific [CLLocation](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocation_Class/) object.\n\n#### Interface: Options  \nProvides options for location monitoring.\n\n##### Properties\n\nProperty | Type | Description\n---|---|---\n`desiredAccuracy` | Number | (Optional) Specifies desired accuracy in meters. Defaults to `DesiredAccuracy.HIGH`\n`updateDistance` | Number | (Optional) Updates distance filter in meters. Specifies how often to update. Default on iOS is no filter, on Android it is 0 meters.\n`minimumUpdateTime` | Number | (Optional) Specifies the minimum time interval between location updates, in milliseconds. Ignored on iOS.\n`maximumAge` | Number | (Optional) Filters locations by how long ago they were received, in milliseconds. For example, if the `maximumAge` is 5000, you will get locations only from the last 5 seconds. \n`timeout` | Number | (Optional) Specifies how long to wait for a location, in milliseconds.\n\n\n{% nativescript %}\n#XML\n<Page>\n    <StackLayout>\n        <Button text=\"Get Current Location\" tap=\"buttonGetLocationTap\"/>\n    </StackLayout>\n</Page>\n\n#JavaScript\nfunction buttonGetLocationTap(args) {\n\tvar location = geolocation.getCurrentLocation({desiredAccuracy: 3, updateDistance: 10, maximumAge: 20000, timeout: 20000}).\n\tthen(function(loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Current location is: \" + loc);\n\t\t}\n\t}, function(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t});\n}\nexports.buttonGetLocationTap = buttonGetLocationTap;\n\n{% endnativescript %}\n{% angular %}\n\n#XML\n<StackLayout>\n    <Button text=\"Get Current Location\" (tap)=\"buttonGetLocationTap()\"></Button>\n</StackLayout>\n\n{% endangular %}\n\n#TypeScript\n{% nativescript %}export function {% endnativescript %}public {% angular %}{% endangular %}buttonGetLocationTap() {\n\tvar location = geolocation.getCurrentLocation({desiredAccuracy: 3, updateDistance: 10, maximumAge: 20000, timeout: 20000}).\n\tthen(function(loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Current location is: \" + loc);\n\t\t}\n\t}, function(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t});\n}\n\n\n### `watchLocation`\n\nWith this method, location watching does not stop automatically until `clearWatch` method is called. You might need to use this method in apps which require a GPS log or active location tracking.  \n{% nativescript %}\n\n#XML\n<Page>\n    <StackLayout>\n\t\t<Button row=\"2\" text=\"start monitoring\" tap=\"buttonStartTap\"/>\n\t\t<Button row=\"3\" text=\"stop monitoring\" tap=\"buttonStopTap\"/>\n    </StackLayout>\n</Page>\n\n\n# JavaScript\nfunction buttonStartTap() {\n\twatchId = geolocation.watchLocation(\n\tfunction (loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Received location: \" + loc);\n\t\t}\n\t}, \n\tfunction(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t}, \n\t{desiredAccuracy: 3, updateDistance: 10, updateTime: 1000 * 20}); // should update every 20 sec according to google documentation this is not so sure.\n}\nexports.buttonStartTap = buttonStartTap;\n\nfunction buttonStopTap() {\n\tif (watchId) {\n\t\tgeolocation.clearWatch(watchId);\n\t}\n}\nexports.buttonStopTap = buttonStopTap;\n\n{% endnativescript %}\n{% angular %}\n\n# XML\n<StackLayout>\n    <Button row=\"2\" text=\"start monitoring\" (tap)=\"buttonStartTap()\"></Button>\n    <Button row=\"3\" text=\"stop monitoring\" (tap)=\"buttonStopTap()\"></Button>\n</StackLayout>\n\n{% endangular %}\n\n# TypeScript\n{% nativescript %}export function {% endnativescript %}public {% angular %}{% endangular %}buttonStartTap() {\n\twatchId = geolocation.watchLocation(\n\tfunction (loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Received location: \" + loc);\n\t\t}\n\t}, \n\tfunction(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t}, \n\t{desiredAccuracy: 3, updateDistance: 10, updateTime: 1000 * 20}); // Should update every 20 seconds according to Googe documentation. Not verified.\n}\n\n{% nativescript %}export function {% endnativescript %}public {% angular %}{% endangular %}buttonStopTap() {\n\tif (watchId) {\n\t\tgeolocation.clearWatch(watchId);\n\t}\n}\n\n\n### `distance`\n\nThis method lets you measure the distance between two locations in meters.\n\n{% nativescript %}\n\n# JavaScript\nfunction getDistance(loc1, loc2) {\n    console.log(\"Distance between loc1 and loc2 is: \" + geolocation.distance(loc1, loc2));\n}\n\n{% endnativescript %}\n```TypeScript\nfunction getDistance(loc1, loc2) {\n    console.log(\"Distance between loc1 and loc2 is: \" + geolocation.distance(loc1, loc2));\n}\n```\n\n## See Also\n\n* [NativeScript Plugins](http://docs.nativescript.org/plugins/plugins)\n* [Location Module (Deprecated)](http://docs.nativescript.org/api-reference/modules/_location_.html)\n* [NativeScript-Geolocation in NPM](https://www.npmjs.com/package/nativescript-geolocation)\n","date":"2016-08-26T21:05:52.886Z","updated":"2016-08-26T21:05:52.886Z","path":"hardware/location.html","comments":1,"layout":"page","_id":"cisn95c6k000cwsl0k9n0d308","content":"<h1 id=\"Location\"><a href=\"#Location\" class=\"headerlink\" title=\"Location\"></a>Location</h1><blockquote>\n<p><strong>IMPORTANT:</strong> Starting with NativeScript 1.5.0, the built-in Location module is deprecated. To implement geolocation in your apps, use the <code>nativescript-geolocation</code> plugin, available via npm. This plugin provides an API similar to the <a href=\"http://dev.w3.org/geo/api/spec-source.html\" target=\"_blank\" rel=\"external\">WC3 Geolocation API</a>. </p>\n</blockquote>\n<p>The most important difference between the deprecated module and the new plugin is that location monitoring via the plugin returns an <code>id</code> which you can use to stop location monitoring. The <code>nativescript-geolocation</code> plugin also uses an accuracy criteria approach to deliver geolocation. This means that getting a location is powered by the most accurate location provider that is available. For example, if GPS signal is available and the GPS provider is enabled, the plugin uses GPS; if GPS is not connected, the device falls back to other available providers such as Wi-Fi networks or cell towers).</p>\n<p>This approach does not limit location monitoring only to a specific location provider; it can still work with all of them.</p>\n<p>You might want to start with this <a href=\"https://github.com/nsndeck/locationtest\" target=\"_blank\" rel=\"external\">example</a> which demonstrates how to use the <code>nativescript-geolocation</code> plugin.</p>\n<p>To make the plugin available in your app, run the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add nativescript-geolocation</div></pre></td></tr></table></figure>\n<p>To import the module in your code use:</p>\n<div class=\"codeblock n\"><figure class=\"highlight javascript\"><figcaption><span>JavaScript</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> geolocation = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;nativescript-geolocation&quot;</span>);</div></pre></td></tr></table></figure></div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> geolocation = <span class=\"built_in\">require</span>(<span class=\"string\">\"nativescript-geolocation\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Getting-Information-About-a-Location-Service\"><a href=\"#Getting-Information-About-a-Location-Service\" class=\"headerlink\" title=\"Getting Information About a Location Service\"></a>Getting Information About a Location Service</h2><p>NativeScript has an universal way to check if location services are turned on - the <code>isEnabled</code> method. The method returns a boolean value (true if the location service is enabled).</p>\n<blockquote>\n<p><strong>NOTE:</strong> For Android, <code>isEnabled</code> checks if the location service is enabled (any accuracy level). For iOS, the method checks if the location service is enabled for the application in foreground or background mode.</p>\n<p><strong>NOTE:</strong> Keep in mind that location services do not work in emulators. You can test them only on a real devices.</p>\n</blockquote>\n<h2 id=\"Requesting-Permissions-to-Use-Location-Services\"><a href=\"#Requesting-Permissions-to-Use-Location-Services\" class=\"headerlink\" title=\"Requesting Permissions to Use Location Services\"></a>Requesting Permissions to Use Location Services</h2><p>By default, the <code>nativescript-geolocation</code> plugin adds the required permissions in <code>AndroidManiest.xml</code> for Android and <code>Info.plist</code> for iOS. For iOS, the plugin adds two dummy string values which serve as message when the platform asks for permission to use location services. You can edit this message later. </p>\n<p>After you install the plugin, you can request to use location services in the app with the following code:\n<div class=\"codeblock n\"><p>#XML</p>\n<page> \n    <stacklayout>\n        <button text=\"enable Location\" tap=\"enableLocationTap\">\n    </button></stacklayout>\n</page>\n\n<p>#JavaScript\nfunction enableLocationTap(args) {\n    if (!geolocation.isEnabled()) {\n        geolocation.enableLocationRequest();\n    }\n}\nexports.enableLocationTap = enableLocationTap;</p>\n</div>\n<div class=\"codeblock ng\"><p>#XML</p>\n<stacklayout>\n    <button text=\"enable Location\" (tap)=\"enableLocationTap()\"></button>\n</stacklayout>\n</div></p>\n<p>#TypeScript\n<div class=\"codeblock n\"><p>export function </p>\n</div>public <div class=\"codeblock ng\"></div>enableLocationTap() { \n    if (!geolocation.isEnabled()) {\n        geolocation.enableLocationRequest();\n    }\n}\n\n## Getting Location\n\nYou can get location with `getCurrentLocation` or with `watchLocation`. Using `distance`, you can obtain the distance between two locations.\n\n* [getCurrentLocation](#getcurrentlocation)\n* [watchLocation](#watchlocation)\n* [distance](#distance)\n\n### `getCurrentLocation`\n\nThis method gets a single location. It accepts the `location options` parameter. \n\n`getCurrentLocation` returns a `Promise<location>` where `Location` and `location options` are defined as follows.\n\n#### Class: Location  \nA data class that encapsulates common properties for a geolocation.\n\n##### Instance Properties\n\nProperty | Type | Description\n---|---|---\n`latitude` | Number | The latitude of the geolocation, in degrees.\n`longitude` | Number | The longitude of the geolocation, in degrees.\n`altitude` | Number | The altitude (if available), in meters above sea level.\n`horizontalAccuracy` | Number | The horizontal accuracy, in meters.\n`verticalAccuracy` | Number | The vertical accuracy, in meters.\n`speed` | Number | The speed, in meters/second over ground.\n`direction` | Number | The direction (course), in degrees.\n`timestamp` | Object | The time at which this location was determined.\n`android` | Object | The Android-specific [location](http://developer.android.com/reference/android/location/Location.html) object.\n `ios` | CLLocation | The iOS-specific [CLLocation](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocation_Class/) object.\n\n#### Interface: Options  \nProvides options for location monitoring.\n\n##### Properties\n\nProperty | Type | Description\n---|---|---\n`desiredAccuracy` | Number | (Optional) Specifies desired accuracy in meters. Defaults to `DesiredAccuracy.HIGH`\n`updateDistance` | Number | (Optional) Updates distance filter in meters. Specifies how often to update. Default on iOS is no filter, on Android it is 0 meters.\n`minimumUpdateTime` | Number | (Optional) Specifies the minimum time interval between location updates, in milliseconds. Ignored on iOS.\n`maximumAge` | Number | (Optional) Filters locations by how long ago they were received, in milliseconds. For example, if the `maximumAge` is 5000, you will get locations only from the last 5 seconds. \n`timeout` | Number | (Optional) Specifies how long to wait for a location, in milliseconds.\n\n\n<div class=\"codeblock n\"><p>#XML</p>\n<page>\n    <stacklayout>\n        <button text=\"Get Current Location\" tap=\"buttonGetLocationTap\">\n    </button></stacklayout>\n</page>\n\n<p>#JavaScript\nfunction buttonGetLocationTap(args) {\n    var location = geolocation.getCurrentLocation({desiredAccuracy: 3, updateDistance: 10, maximumAge: 20000, timeout: 20000}).\n    then(function(loc) {\n        if (loc) {\n            console.log(&quot;Current location is: &quot; + loc);\n        }\n    }, function(e){\n        console.log(&quot;Error: &quot; + e.message);\n    });\n}\nexports.buttonGetLocationTap = buttonGetLocationTap;</p>\n</div>\n<div class=\"codeblock ng\"><p>#XML</p>\n<stacklayout>\n    <button text=\"Get Current Location\" (tap)=\"buttonGetLocationTap()\"></button>\n</stacklayout>\n</div></location></p>\n<p>#TypeScript\n<div class=\"codeblock n\"><p>export function </p>\n</div>public <div class=\"codeblock ng\"></div>buttonGetLocationTap() {\n\tvar location = geolocation.getCurrentLocation({desiredAccuracy: 3, updateDistance: 10, maximumAge: 20000, timeout: 20000}).\n\tthen(function(loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Current location is: \" + loc);\n\t\t}\n\t}, function(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t});\n}\n\n\n### `watchLocation`\n\nWith this method, location watching does not stop automatically until `clearWatch` method is called. You might need to use this method in apps which require a GPS log or active location tracking.  \n<div class=\"codeblock n\"><p>#XML</p>\n<page>\n    <stacklayout>\n        <button row=\"2\" text=\"start monitoring\" tap=\"buttonStartTap\">\n        </button><button row=\"3\" text=\"stop monitoring\" tap=\"buttonStopTap\">\n    </button></stacklayout>\n</page>\n\n\n<h1 id=\"javascript\">JavaScript</h1>\n<p>function buttonStartTap() {\n    watchId = geolocation.watchLocation(\n    function (loc) {\n        if (loc) {\n            console.log(&quot;Received location: &quot; + loc);\n        }\n    }, \n    function(e){\n        console.log(&quot;Error: &quot; + e.message);\n    }, \n    {desiredAccuracy: 3, updateDistance: 10, updateTime: 1000 * 20}); // should update every 20 sec according to google documentation this is not so sure.\n}\nexports.buttonStartTap = buttonStartTap;</p>\n<p>function buttonStopTap() {\n    if (watchId) {\n        geolocation.clearWatch(watchId);\n    }\n}\nexports.buttonStopTap = buttonStopTap;</p>\n</div>\n<div class=\"codeblock ng\"><h1 id=\"xml\">XML</h1>\n<stacklayout>\n    <button row=\"2\" text=\"start monitoring\" (tap)=\"buttonStartTap()\"></button>\n    <button row=\"3\" text=\"stop monitoring\" (tap)=\"buttonStopTap()\"></button>\n</stacklayout>\n</div></p>\n<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><div class=\"codeblock n\"><p>export function </p>\n</div>public <div class=\"codeblock ng\"></div>buttonStartTap() {\n\twatchId = geolocation.watchLocation(\n\tfunction (loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Received location: \" + loc);\n\t\t}\n\t}, \n\tfunction(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t}, \n\t{desiredAccuracy: 3, updateDistance: 10, updateTime: 1000 * 20}); // Should update every 20 seconds according to Googe documentation. Not verified.\n}\n\n<div class=\"codeblock n\"><p>export function </p>\n</div>public <div class=\"codeblock ng\"></div>buttonStopTap() {\n    if (watchId) {\n        geolocation.clearWatch(watchId);\n    }\n}\n\n\n### <code>distance</code>\n\nThis method lets you measure the distance between two locations in meters.\n\n<div class=\"codeblock n\"><h1 id=\"javascript\">JavaScript</h1>\n<p>function getDistance(loc1, loc2) {\n    console.log(&quot;Distance between loc1 and loc2 is: &quot; + geolocation.distance(loc1, loc2));\n}</p>\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDistance</span>(<span class=\"params\">loc1, loc2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Distance between loc1 and loc2 is: \"</span> + geolocation.distance(loc1, loc2));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"See-Also\"><a href=\"#See-Also\" class=\"headerlink\" title=\"See Also\"></a>See Also</h2><ul>\n<li><a href=\"http://docs.nativescript.org/plugins/plugins\">NativeScript Plugins</a></li>\n<li><a href=\"http://docs.nativescript.org/api-reference/modules/_location_.html\">Location Module (Deprecated)</a></li>\n<li><a href=\"https://www.npmjs.com/package/nativescript-geolocation\" target=\"_blank\" rel=\"external\">NativeScript-Geolocation in NPM</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Location\"><a href=\"#Location\" class=\"headerlink\" title=\"Location\"></a>Location</h1><blockquote>\n<p><strong>IMPORTANT:</strong> Starting with NativeScript 1.5.0, the built-in Location module is deprecated. To implement geolocation in your apps, use the <code>nativescript-geolocation</code> plugin, available via npm. This plugin provides an API similar to the <a href=\"http://dev.w3.org/geo/api/spec-source.html\">WC3 Geolocation API</a>. </p>\n</blockquote>\n<p>The most important difference between the deprecated module and the new plugin is that location monitoring via the plugin returns an <code>id</code> which you can use to stop location monitoring. The <code>nativescript-geolocation</code> plugin also uses an accuracy criteria approach to deliver geolocation. This means that getting a location is powered by the most accurate location provider that is available. For example, if GPS signal is available and the GPS provider is enabled, the plugin uses GPS; if GPS is not connected, the device falls back to other available providers such as Wi-Fi networks or cell towers).</p>\n<p>This approach does not limit location monitoring only to a specific location provider; it can still work with all of them.</p>\n<p>You might want to start with this <a href=\"https://github.com/nsndeck/locationtest\">example</a> which demonstrates how to use the <code>nativescript-geolocation</code> plugin.</p>\n<p>To make the plugin available in your app, run the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add nativescript-geolocation</div></pre></td></tr></table></figure>\n<p>To import the module in your code use:</p>\n<div class=\"codeblock n\"><figure class=\"highlight javascript\"><figcaption><span>JavaScript</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> geolocation = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;nativescript-geolocation&quot;</span>);</div></pre></td></tr></table></figure></div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> geolocation = <span class=\"built_in\">require</span>(<span class=\"string\">\"nativescript-geolocation\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Getting-Information-About-a-Location-Service\"><a href=\"#Getting-Information-About-a-Location-Service\" class=\"headerlink\" title=\"Getting Information About a Location Service\"></a>Getting Information About a Location Service</h2><p>NativeScript has an universal way to check if location services are turned on - the <code>isEnabled</code> method. The method returns a boolean value (true if the location service is enabled).</p>\n<blockquote>\n<p><strong>NOTE:</strong> For Android, <code>isEnabled</code> checks if the location service is enabled (any accuracy level). For iOS, the method checks if the location service is enabled for the application in foreground or background mode.</p>\n<p><strong>NOTE:</strong> Keep in mind that location services do not work in emulators. You can test them only on a real devices.</p>\n</blockquote>\n<h2 id=\"Requesting-Permissions-to-Use-Location-Services\"><a href=\"#Requesting-Permissions-to-Use-Location-Services\" class=\"headerlink\" title=\"Requesting Permissions to Use Location Services\"></a>Requesting Permissions to Use Location Services</h2><p>By default, the <code>nativescript-geolocation</code> plugin adds the required permissions in <code>AndroidManiest.xml</code> for Android and <code>Info.plist</code> for iOS. For iOS, the plugin adds two dummy string values which serve as message when the platform asks for permission to use location services. You can edit this message later. </p>\n<p>After you install the plugin, you can request to use location services in the app with the following code:\n<div class=\"codeblock n\"><p>#XML</p>\n<Page> \n    <StackLayout>\n        <Button text=\"enable Location\" tap=\"enableLocationTap\"/>\n    </StackLayout>\n</Page>\n\n<p>#JavaScript\nfunction enableLocationTap(args) {\n    if (!geolocation.isEnabled()) {\n        geolocation.enableLocationRequest();\n    }\n}\nexports.enableLocationTap = enableLocationTap;</p>\n</div>\n<div class=\"codeblock ng\"><p>#XML</p>\n<StackLayout>\n    <Button text=\"enable Location\" (tap)=\"enableLocationTap()\"></Button>\n</StackLayout>\n</div></p>\n<p>#TypeScript\n<div class=\"codeblock n\"><p>export function </p>\n</div>public <div class=\"codeblock ng\"></div>enableLocationTap() { \n    if (!geolocation.isEnabled()) {\n        geolocation.enableLocationRequest();\n    }\n}\n\n## Getting Location\n\nYou can get location with `getCurrentLocation` or with `watchLocation`. Using `distance`, you can obtain the distance between two locations.\n\n* [getCurrentLocation](#getcurrentlocation)\n* [watchLocation](#watchlocation)\n* [distance](#distance)\n\n### `getCurrentLocation`\n\nThis method gets a single location. It accepts the `location options` parameter. \n\n`getCurrentLocation` returns a `Promise<Location>` where `Location` and `location options` are defined as follows.\n\n#### Class: Location  \nA data class that encapsulates common properties for a geolocation.\n\n##### Instance Properties\n\nProperty | Type | Description\n---|---|---\n`latitude` | Number | The latitude of the geolocation, in degrees.\n`longitude` | Number | The longitude of the geolocation, in degrees.\n`altitude` | Number | The altitude (if available), in meters above sea level.\n`horizontalAccuracy` | Number | The horizontal accuracy, in meters.\n`verticalAccuracy` | Number | The vertical accuracy, in meters.\n`speed` | Number | The speed, in meters/second over ground.\n`direction` | Number | The direction (course), in degrees.\n`timestamp` | Object | The time at which this location was determined.\n`android` | Object | The Android-specific [location](http://developer.android.com/reference/android/location/Location.html) object.\n `ios` | CLLocation | The iOS-specific [CLLocation](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocation_Class/) object.\n\n#### Interface: Options  \nProvides options for location monitoring.\n\n##### Properties\n\nProperty | Type | Description\n---|---|---\n`desiredAccuracy` | Number | (Optional) Specifies desired accuracy in meters. Defaults to `DesiredAccuracy.HIGH`\n`updateDistance` | Number | (Optional) Updates distance filter in meters. Specifies how often to update. Default on iOS is no filter, on Android it is 0 meters.\n`minimumUpdateTime` | Number | (Optional) Specifies the minimum time interval between location updates, in milliseconds. Ignored on iOS.\n`maximumAge` | Number | (Optional) Filters locations by how long ago they were received, in milliseconds. For example, if the `maximumAge` is 5000, you will get locations only from the last 5 seconds. \n`timeout` | Number | (Optional) Specifies how long to wait for a location, in milliseconds.\n\n\n<div class=\"codeblock n\"><p>#XML</p>\n<Page>\n    <StackLayout>\n        <Button text=\"Get Current Location\" tap=\"buttonGetLocationTap\"/>\n    </StackLayout>\n</Page>\n\n<p>#JavaScript\nfunction buttonGetLocationTap(args) {\n    var location = geolocation.getCurrentLocation({desiredAccuracy: 3, updateDistance: 10, maximumAge: 20000, timeout: 20000}).\n    then(function(loc) {\n        if (loc) {\n            console.log(&quot;Current location is: &quot; + loc);\n        }\n    }, function(e){\n        console.log(&quot;Error: &quot; + e.message);\n    });\n}\nexports.buttonGetLocationTap = buttonGetLocationTap;</p>\n</div>\n<div class=\"codeblock ng\"><p>#XML</p>\n<StackLayout>\n    <Button text=\"Get Current Location\" (tap)=\"buttonGetLocationTap()\"></Button>\n</StackLayout>\n</div></p>\n<p>#TypeScript\n<div class=\"codeblock n\"><p>export function </p>\n</div>public <div class=\"codeblock ng\"></div>buttonGetLocationTap() {\n\tvar location = geolocation.getCurrentLocation({desiredAccuracy: 3, updateDistance: 10, maximumAge: 20000, timeout: 20000}).\n\tthen(function(loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Current location is: \" + loc);\n\t\t}\n\t}, function(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t});\n}\n\n\n### `watchLocation`\n\nWith this method, location watching does not stop automatically until `clearWatch` method is called. You might need to use this method in apps which require a GPS log or active location tracking.  \n<div class=\"codeblock n\"><p>#XML</p>\n<Page>\n    <StackLayout>\n        <Button row=\"2\" text=\"start monitoring\" tap=\"buttonStartTap\"/>\n        <Button row=\"3\" text=\"stop monitoring\" tap=\"buttonStopTap\"/>\n    </StackLayout>\n</Page>\n\n\n<h1 id=\"javascript\">JavaScript</h1>\n<p>function buttonStartTap() {\n    watchId = geolocation.watchLocation(\n    function (loc) {\n        if (loc) {\n            console.log(&quot;Received location: &quot; + loc);\n        }\n    }, \n    function(e){\n        console.log(&quot;Error: &quot; + e.message);\n    }, \n    {desiredAccuracy: 3, updateDistance: 10, updateTime: 1000 * 20}); // should update every 20 sec according to google documentation this is not so sure.\n}\nexports.buttonStartTap = buttonStartTap;</p>\n<p>function buttonStopTap() {\n    if (watchId) {\n        geolocation.clearWatch(watchId);\n    }\n}\nexports.buttonStopTap = buttonStopTap;</p>\n</div>\n<div class=\"codeblock ng\"><h1 id=\"xml\">XML</h1>\n<StackLayout>\n    <Button row=\"2\" text=\"start monitoring\" (tap)=\"buttonStartTap()\"></Button>\n    <Button row=\"3\" text=\"stop monitoring\" (tap)=\"buttonStopTap()\"></Button>\n</StackLayout>\n</div></p>\n<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><div class=\"codeblock n\"><p>export function </p>\n</div>public <div class=\"codeblock ng\"></div>buttonStartTap() {\n\twatchId = geolocation.watchLocation(\n\tfunction (loc) {\n\t\tif (loc) {\n\t\t\tconsole.log(\"Received location: \" + loc);\n\t\t}\n\t}, \n\tfunction(e){\n\t\tconsole.log(\"Error: \" + e.message);\n\t}, \n\t{desiredAccuracy: 3, updateDistance: 10, updateTime: 1000 * 20}); // Should update every 20 seconds according to Googe documentation. Not verified.\n}\n\n<div class=\"codeblock n\"><p>export function </p>\n</div>public <div class=\"codeblock ng\"></div>buttonStopTap() {\n    if (watchId) {\n        geolocation.clearWatch(watchId);\n    }\n}\n\n\n### <code>distance</code>\n\nThis method lets you measure the distance between two locations in meters.\n\n<div class=\"codeblock n\"><h1 id=\"javascript\">JavaScript</h1>\n<p>function getDistance(loc1, loc2) {\n    console.log(&quot;Distance between loc1 and loc2 is: &quot; + geolocation.distance(loc1, loc2));\n}</p>\n</div>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDistance</span>(<span class=\"params\">loc1, loc2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Distance between loc1 and loc2 is: \"</span> + geolocation.distance(loc1, loc2));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"See-Also\"><a href=\"#See-Also\" class=\"headerlink\" title=\"See Also\"></a>See Also</h2><ul>\n<li><a href=\"http://docs.nativescript.org/plugins/plugins\">NativeScript Plugins</a></li>\n<li><a href=\"http://docs.nativescript.org/api-reference/modules/_location_.html\">Location Module (Deprecated)</a></li>\n<li><a href=\"https://www.npmjs.com/package/nativescript-geolocation\">NativeScript-Geolocation in NPM</a></li>\n</ul>\n"},{"title":"Properties","description":"What is a property in NativeScript, what types of properties are available, and how to use them.","position":5,"slug":"properties","previous_url":"/properties","environment":"nativescript","_content":"\n# Properties\n\n\nThis article contents:\n\n* [Overview](#overview)\n* [Dependency properties](#dependency-properties)\n    * [Introduction](#intro1)\n    * [Declaring a dependency property](#declaring)\n    * [Adding a changed callback](#changedCallback)\n    * [Adding a validation callback](#validationCallback)\n    * [Creating an inheritable dependency property](#inheritable)\n* [Style properties](#style-properties)\n    * [Introduction](#intro2)\n    * [Setting a style property](#setting)\n\n## Overview\n\nBeing a TypeScript framework, NativeScript uses TypeScript properties. After transpilation, these result in ECMAScript v.5 compliant JavaScript with setter and getter methods to support working with class members, thus ensuring readable and manageable code. The code in __Example 1__ demonstrates how the TypeScript is transformed to JavaScript.\n\n### Example 1: How TypeScript is transformed to JavaScript.\n``` JavaScript\nvar MyClass = (function () {\n  function MyClass() {\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._myProperty;\n    },\n    set: function (value) {\n      this._myProperty = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MyClass;\n})();\nexports.MyClass = MyClass;\n```\n``` TypeScript\nexport class MyClass {\n  private _myProperty: number;\n  public get myProperty(): number {\n    return this._myProperty;\n  }\n\n  public set myProperty(value: number) {\n    this._myProperty = value;\n  }\n}\n```\n\nThe TypeScript transpiler is run by a grunt script.\n\nNativeScript features two types of properties: **dependency properties** and **style properties**. Each type is described in the next sections.\n\n\n## Dependency properties\n\nThis sections includes these topics:\n\n###<a id = \"intro1\"></a>Introduction\n\nDependency properties provide valuable features that simplify the creation of a rich User Interface (UI), including: \n\n* Memory optimization: The creation of a rich custom UI control is bound to creating a huge number of properties, most of which are used with default values. With the traditional approach you end up with a **private field** for every property. With dependency properties, you only store the instance properties that you modified. The default values are stored within the dependency property. Additionally, dependency properties are declared statically outside the class, which further helps optimize the memory footprint.\n* Value validation: Dependency properties offer business logic validation. It is implemented as a dedicated validation callback function that takes `newValue` as parameter and returns true or false if the value is valid or not, respectively.\n* Change notification: Another callback function is called when the property value changes. It is called with an [EventData](http://docs.nativescript.org/api-reference/interfaces/_data_observable_.eventdata.html) as parameter.\n* Inheritance: One of the most important features of dependency properties is inheritance. It is implemented through a dedicated UI element that allows it to get its property from a parent element in the visual tree. For example, a button can inherit its style (or theme) property value from the parent Window, Layout, or another container. This gives you the option to dramatically change the look of your entire application by only changing a single setting (Window.theme).\n\n###<a id = declaring></a>Declaring a dependency property\n\nOnly classes that derive from [DependencyObservable](http://docs.nativescript.org/api-reference/classes/_ui_core_dependency_observable_.dependencyobservable.html) can have a dependency property. This class has built-in methods that support the entire infrastructure of dependency properties.\n\nThe code in __Example 2__ creates a bare-bones property that adds a static part compared to a standard property implementation.\n\n### Example 2: How to create property that adds a static part compared to a standard property.\n``` JavaScript\nvar dependencyObservable = require(\"ui/core/dependency-observable\");\nexports.myPropertyProperty = new dependencyObservable.Property(\"myProperty\",\n          \"MyClass\",\n          new dependencyObservable.PropertyMetadata(\"\", dependencyObservable.PropertyMetadataSettings.None));\nvar MyClass = (function (_super) {\n  __extends(MyClass, _super);\n  function MyClass() {\n    _super.apply(this, arguments);\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._getValue(exports.myPropertyProperty);\n    },\n    set: function (value) {\n      this._setValue(exports.myPropertyProperty, value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MyClass;\n})(dependencyObservable.DependencyObservable);\nexports.MyClass = MyClass;\n```\n``` TypeScript\nimport dependencyObservable = require(\"ui/core/dependency-observable\");\n\nexport var myPropertyProperty = new dependencyObservable.Property(\n  \"myProperty\",\n  \"MyClass\",\n  new dependencyObservable.PropertyMetadata(\"\", dependencyObservable.PropertyMetadataSettings.None)\n);\n\nexport class MyClass extends dependencyObservable.DependencyObservable {\n  public get myProperty(): number {\n    return this._getValue(myPropertyProperty);\n  }\n\n  public set myProperty(value: number) {\n    this._setValue(myPropertyProperty, value);\n  }\n}\n```\n###<a id = \"changedCallback\"></a>Adding a changed callback\n\n__Example 3__ demonstrates how to implement the functionality of changing a notification. It adds a callback function, `onMyPropertyChanged`, that prints a message about a change in a property.\n\n### Example 3: How to handle onPropertyChange event.\n``` JavaScript\nvar dependencyObservable = require(\"ui/core/dependency-observable\");\nfunction onMyPropertyChanged(eventData) {\n  var myClassInstance = eventData.object;\n  var value = eventData.newValue;\n  console.log(\"myProperty of the object \" + myClassInstance.toString() + \" changed with \" + value);\n}\nexports.myPropertyProperty = new dependencyObservable.Property(\"myProperty\",\n      \"MyClass\",\n      new dependencyObservable.PropertyMetadata(\"\",\n                  dependencyObservable.PropertyMetadataSettings.None,\n                  onMyPropertyChanged));\nvar MyClass = (function (_super) {\n  __extends(MyClass, _super);\n  function MyClass() {\n    _super.apply(this, arguments);\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._getValue(exports.myPropertyProperty);\n    },\n    set: function (value) {\n      this._setValue(exports.myPropertyProperty, value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MyClass;\n})(dependencyObservable.DependencyObservable);\nexports.MyClass = MyClass;\n```\n``` TypeScript\nimport dependencyObservable = require(\"ui/core/dependency-observable\");\n\nfunction onMyPropertyChanged(eventData: dependencyObservable.PropertyChangeData) {\n  var myClassInstance = <MyClass>eventData.object;\n  var value = eventData.newValue;\n\n  console.log(\"myProperty of the object \" + myClassInstance.toString() + \" changed with \" + value);\n}\n\nexport var myPropertyProperty = new dependencyObservable.Property(\n  \"myProperty\",\n  \"MyClass\",\n  new dependencyObservable.PropertyMetadata(\"\",\n  dependencyObservable.PropertyMetadataSettings.None,\n  onMyPropertyChanged)\n);\n\nexport class MyClass extends dependencyObservable.DependencyObservable {\n  public get myProperty(): number {\n    return this._getValue(myPropertyProperty);\n  }\n\n  public set myProperty(value: number) {\n    this._setValue(myPropertyProperty, value);\n  }\n}\n```\n\n###<a id = \"validationCallback\"></a>Adding a validation callback\n\n__Example 4__ demonstrates how to implement value validation. It adds a callback function, `validateMyProperty`, that takes the new property value and validates it using a simple rule.\n\n### Example 4: How to implement value validation.\n\n``` JavaScript\nvar dependencyObservable = require(\"ui/core/dependency-observable\");\nfunction validateMyProperty(value) {\n  if (value > 0) {\n    return true;\n  }\n  return false;\n}\nexports.myPropertyProperty = new dependencyObservable.Property(\"myProperty\", \"MyClass\",\n    new dependencyObservable.PropertyMetadata(\"\",\n        dependencyObservable.PropertyMetadataSettings.None, null, validateMyProperty));\nvar MyClass = (function (_super) {\n...\n```\n``` TypeScript\nimport dependencyObservable = require(\"ui/core/dependency-observable\");\n\nfunction validateMyProperty(value) {\n  if (value > 0) {\n    return true;\n  }\n  return false;\n}\n\nexport var myPropertyProperty = new dependencyObservable.Property(\n  \"myProperty\",\n  \"MyClass\",\n  new dependencyObservable.PropertyMetadata(\"\",\n  dependencyObservable.PropertyMetadataSettings.None,\n  null,\n  validateMyProperty)\n  );\n\n  export class MyClass extends dependencyObservable.DependencyObservable {\n...\n```\n\n###<a id = \"inheritable\"></a>Creating an inheritable dependency property\n\n__Example 5__ demonstrates how to create an inheritable dependency property:\n\n### Example 5: How to create inheritable dependency property.\n``` JavaScript\nvar dependencyObservable = require(\"ui/core/dependency-observable\");\nexports.myPropertyProperty = new dependencyObservable.Property(\"myProperty\", \"MyClass\",\n    new dependencyObservable.PropertyMetadata(\"\",\n      dependencyObservable.PropertyMetadataSettings.Inheritable));\nvar MyClass = (function (_super) {\n  __extends(MyClass, _super);\n  function MyClass() {\n    _super.apply(this, arguments);\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._getValue(exports.myPropertyProperty);\n    },\n    set: function (value) {\n      this._setValue(exports.myPropertyProperty, value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MyClass;\n})(dependencyObservable.DependencyObservable);\nexports.MyClass = MyClass;\n```\n``` TypeScript\nimport dependencyObservable = require(\"ui/core/dependency-observable\");\n\nexport var myPropertyProperty = new dependencyObservable.Property(\n    \"myProperty\",\n    \"MyClass\",\n    new dependencyObservable.PropertyMetadata(\"\",\n        dependencyObservable.PropertyMetadataSettings.Inheritable)\n);\n\nexport class MyClass extends dependencyObservable.DependencyObservable {\n  public get myProperty(): number {\n    return this._getValue(myPropertyProperty);\n  }\n\n  public set myProperty(value: number) {\n    this._setValue(myPropertyProperty, value);\n  }\n}\n```\n\n> Creating an inheritable property is relatively simple (as seen in __Example 5__). However, keep in mind that inheritance only occurs down the visual tree. Setting a property to a non-visual element does not allow for inheritance.\n\n## Style properties\n\n###<a id = \"intro2\"></a>Introduction\n\nProbably the best use case for inheritable properties is applying different styles and themes to UI components. You only need to set a property (theme or style) to the base-most container and every single UI component inherits it through the visual tree.\n\n###<a id = \"setting\"></a>Setting a style property\n\nSetting a style property is similar to setting a regular property but you use the nested `style` object (that is a property of the View class, which means that every UI component has style).\n\n#### Setting in code\n\nTo set a style property in your code:\n\n``` JavaScript\nvar color = require(\"color\");\nsomeButton.style.backgroundColor = new color.Color(\"red\");\n```\n``` TypeScript\nimport color = require(\"color\");\nsomeButton.style.backgroundColor = new color.Color(\"red\");\n```\n\n#### Setting in CSS\n\nTo set a style property in your CSS:\n\n``` JavaScript\nsomeButton.id = \"someButton\";\nsomeButton.css = \"#someButtton {background-color: red}\";\n```\n``` TypeScript\nsomeButton.id = \"someButton\";\nsomeButton.css = \"#someButtton {background-color: red}\";\n```\n<!---\n### Creating a Custom Style Property\n\nIf you ever need to create a custom style property you can do so by taking these steps:\n\n#### Declare the Custom Style Property\n\n``` JavaScript\nvar styleProperty = require(\"ui/styling/style-property\");\nvar depObservable = require(\"ui/core/dependency-observable\");\n\nexports.fontFamilyProperty = new styleProperty.Property(\"fontFamily\", \"font-family\",\n    new depObservable.PropertyMetadata(undefined, depObservable.PropertyMetadataOptions.AffectsMeasure),\n    null);\n```\n``` TypeScript\nimport styleProperty = require(\"ui/styling/style-property\");\nimport depObservable = require(\"ui/core/dependency-observable\");\n\nexport var fontFamilyProperty = new styleProperty.Property(\"fontFamily\", \"font-family\",\n    new depObservable.PropertyMetadata(undefined, depObservable.PropertyMetadataOptions.AffectsMeasure),\n    null);\n```\n\nNotice that style properties differ from normal properties. In fact the `styleProperty.Property` class inherits from `depObservable.Property` and adds the option for setting the property using CSS (the constructor's second parameter).\n\n\n#### Register a Handler for the Custom Property\n\nThe second step is to register a handler object (`StylePropertyChangedHandler`) that synchronizes the property value and the underlying native object. To create the handler you provide methods for **setting**, **resetting**, and **getting the native object**. The set method sets a value to the native object. The reset method restores the default value of the native object. The final method takes the default value.\n\nFor convenience, the code can be wrapped in a class called `Styler` that inherits an interface (currently solely for better readability) also called `Styler`. It has a single method that implements `registerHandlers`, where you register handlers for all properties defined in Styler.\n\n``` JavaScript\nvar styles = require(\"ui/styling\");\n\nvar MyTextViewStyler = (function () {\n    function MyTextViewStyler() {\n    }\n    MyTextViewStyler.setFontFamilyProperty = function (view, newValue) {\n        if (view.android) {\n            view.android.setTypeface(android.graphics.Typeface.create(newValue,\n              android.graphics.Typeface.NORMAL));\n        }\n        else if (view.ios) {\n            var fontSize = view._nativeView.titleLabel.font.pointSize;\n            view._nativeView.titleLabel.font = UIFont.fontWithNameSize(newValue, fontSize);\n        }\n    };\n    MyTextViewStyler.resetFontFamilyProperty = function (view, nativeValue) {\n        if (view.android) {\n            view.android.setTypeface(android.graphics.Typeface.create(nativeValue,\n              android.graphics.Typeface.NORMAL));\n        }\n        else if (view.ios) {\n            var fontSize = view._nativeView.titleLabel.font.pointSize;\n            view._nativeView.titleLabel.font = UIFont.fontWithNameSize(nativeValue, fontSize);\n            ;\n        }\n    };\n    MyTextViewStyler.registerHandlers = function () {\n        styles.stylers.registerHandler(exports.fontFamilyProperty,\n          new styles.stylers.StylePropertyChangedHandler(MyTextViewStyler.setFontFamilyProperty,\n          MyTextViewStyler.resetFontFamilyProperty, MyTextViewStyler.getNativeFontFamilyValue), \"MyButton\");\n    };\n    MyTextViewStyler.getNativeFontFamilyValue = function (view) {\n        if (view.android) {\n            return view.android.getTypeface();\n        }\n        else if (view.ios) {\n            return view._nativeView.titleLabel.font.fontName;\n        }\n        return null;\n    };\n    return MyTextViewStyler;\n})();\nexports.MyTextViewStyler = MyTextViewStyler;\n```\n``` TypeScript\nimport styles = require(\"ui/styling\");\n\nexport class MyTextViewStyler implements styles.stylers.Styler {\n    public static setFontFamilyProperty(view: view.View, newValue: any) {\n        if (view.android) {\n            (<android.widget.TextView>view.android).setTypeface(android.graphics.Typeface.create(newValue,\n              android.graphics.Typeface.NORMAL));\n        }\n        else if (view.ios) {\n            var fontSize = (<UIButton>view._nativeView).titleLabel.font.pointSize;\n            (<UIButton>view._nativeView).titleLabel.font = UIFont.fontWithNameSize(newValue, fontSize);\n        }\n    }\n\n    public static resetFontFamilyProperty(view: view.View, nativeValue: any) {\n        if (view.android) {\n            (<android.widget.TextView>view.android).setTypeface(android.graphics.Typeface.create(nativeValue,\n              android.graphics.Typeface.NORMAL));\n        }\n        else if (view.ios) {\n            var fontSize = (<UIButton>view._nativeView).titleLabel.font.pointSize;\n            (<UIButton>view._nativeView).titleLabel.font = UIFont.fontWithNameSize(nativeValue, fontSize);;\n        }\n    }\n\n    public static getNativeFontFamilyValue = function (view: view.View): any {\n        if (view.android) {\n            return (<android.widget.TextView>view.android).getTypeface();\n        }\n        else if (view.ios) {\n            return (<UIButton>view._nativeView).titleLabel.font.fontName;\n        }\n        return null;\n    }\n\n    public static registerHandlers() {\n        styles.stylers.registerHandler(fontFamilyProperty, new styles.stylers.StylePropertyChangedHandler(\n            MyTextViewStyler.setFontFamilyProperty,\n            MyTextViewStyler.resetFontFamilyProperty,\n            MyTextViewStyler.getNativeFontFamilyValue), \"MyButton\");\n    }\n}\n```\n\nImportant part of this class is the call to the static method `styles.stylers.registerHandler` which registers `styles.stylers.StylePropertyChangedHandler` with a property. The third optional parameter indicates objects of what class is to react to a change in the property value. Derived classes also receive the same behaviour.\n\n#### Use the New Custom Property\n\n``` JavaScript\nvar stackLayoutDef = require(\"ui/layouts/stack-layout\");\nvar buttonModule = require(\"ui/button\");\nvar pages = require(\"ui/page\");\n\nvar MyButton = (function (_super) {\n    __extends(MyButton, _super);\n    function MyButton() {\n        _super.apply(this, arguments);\n    }\n    return MyButton;\n})(buttonModule.Button);\nexports.MyButton = MyButton;\nMyTextViewStyler.registerHandlers();\nfunction createPage() {\n    var layout = new stackLayoutDef.StackLayout();\n    var btn = new MyButton();\n    btn.text = \"The quick brown fox jumps over the lazy dog.\";\n    btn.id = \"btn\";\n    var btn1 = new MyButton();\n    btn1.text = \"The quick brown fox jumps over the lazy dog.\";\n    btn1.id = \"btn1\";\n    var btn2 = new buttonModule.Button();\n    btn2.text = \"The quick brown fox jumps over the lazy dog.\";\n    layout.addChild(btn);\n    layout.addChild(btn1);\n    layout.addChild(btn2);\n    var page = new pages.Page();\n    page.css = \"#btn {font-family: Courier New} #btn1 {font-family: Times New Roman} #btn2 {color: yellow}\";\n    page.content = layout;\n    return page;\n}\nexports.createPage = createPage;\n```\n``` TypeScript\nimport stackLayoutDef = require(\"ui/layouts/stack-layout\");\nimport buttonModule = require(\"ui/button\");\nimport pages = require(\"ui/page\");\n\nexport class MyButton extends buttonModule.Button {\n\n}\n\nMyTextViewStyler.registerHandlers();\n\nexport function createPage() {\n    var layout = new stackLayoutDef.StackLayout();\n\n    var btn = new MyButton();\n    btn.text = \"The quick brown fox jumps over the lazy dog.\";\n    btn.id = \"btn\";\n\n    var btn1 = new MyButton();\n    btn1.text = \"The quick brown fox jumps over the lazy dog.\";\n    btn1.id = \"btn1\";\n\n    var btn2 = new buttonModule.Button();\n    btn2.text = \"The quick brown fox jumps over the lazy dog.\";\n\n    layout.addChild(btn);\n    layout.addChild(btn1);\n    layout.addChild(btn2);\n\n    var page = new pages.Page();\n    page.css = \"#btn {font-family: Courier New} #btn1 {font-family: Times New Roman} #btn2 {color: yellow}\";\n    page.content = layout;\n    return page;\n}\n```\n-->\n","source":"core-concepts/properties.md","raw":"---\ntitle: Properties\ndescription: What is a property in NativeScript, what types of properties are available, and how to use them.\nposition: 5\nslug: properties\nprevious_url: /properties\nenvironment: nativescript\n---\n\n# Properties\n\n\nThis article contents:\n\n* [Overview](#overview)\n* [Dependency properties](#dependency-properties)\n    * [Introduction](#intro1)\n    * [Declaring a dependency property](#declaring)\n    * [Adding a changed callback](#changedCallback)\n    * [Adding a validation callback](#validationCallback)\n    * [Creating an inheritable dependency property](#inheritable)\n* [Style properties](#style-properties)\n    * [Introduction](#intro2)\n    * [Setting a style property](#setting)\n\n## Overview\n\nBeing a TypeScript framework, NativeScript uses TypeScript properties. After transpilation, these result in ECMAScript v.5 compliant JavaScript with setter and getter methods to support working with class members, thus ensuring readable and manageable code. The code in __Example 1__ demonstrates how the TypeScript is transformed to JavaScript.\n\n### Example 1: How TypeScript is transformed to JavaScript.\n``` JavaScript\nvar MyClass = (function () {\n  function MyClass() {\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._myProperty;\n    },\n    set: function (value) {\n      this._myProperty = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MyClass;\n})();\nexports.MyClass = MyClass;\n```\n``` TypeScript\nexport class MyClass {\n  private _myProperty: number;\n  public get myProperty(): number {\n    return this._myProperty;\n  }\n\n  public set myProperty(value: number) {\n    this._myProperty = value;\n  }\n}\n```\n\nThe TypeScript transpiler is run by a grunt script.\n\nNativeScript features two types of properties: **dependency properties** and **style properties**. Each type is described in the next sections.\n\n\n## Dependency properties\n\nThis sections includes these topics:\n\n###<a id = \"intro1\"></a>Introduction\n\nDependency properties provide valuable features that simplify the creation of a rich User Interface (UI), including: \n\n* Memory optimization: The creation of a rich custom UI control is bound to creating a huge number of properties, most of which are used with default values. With the traditional approach you end up with a **private field** for every property. With dependency properties, you only store the instance properties that you modified. The default values are stored within the dependency property. Additionally, dependency properties are declared statically outside the class, which further helps optimize the memory footprint.\n* Value validation: Dependency properties offer business logic validation. It is implemented as a dedicated validation callback function that takes `newValue` as parameter and returns true or false if the value is valid or not, respectively.\n* Change notification: Another callback function is called when the property value changes. It is called with an [EventData](http://docs.nativescript.org/api-reference/interfaces/_data_observable_.eventdata.html) as parameter.\n* Inheritance: One of the most important features of dependency properties is inheritance. It is implemented through a dedicated UI element that allows it to get its property from a parent element in the visual tree. For example, a button can inherit its style (or theme) property value from the parent Window, Layout, or another container. This gives you the option to dramatically change the look of your entire application by only changing a single setting (Window.theme).\n\n###<a id = declaring></a>Declaring a dependency property\n\nOnly classes that derive from [DependencyObservable](http://docs.nativescript.org/api-reference/classes/_ui_core_dependency_observable_.dependencyobservable.html) can have a dependency property. This class has built-in methods that support the entire infrastructure of dependency properties.\n\nThe code in __Example 2__ creates a bare-bones property that adds a static part compared to a standard property implementation.\n\n### Example 2: How to create property that adds a static part compared to a standard property.\n``` JavaScript\nvar dependencyObservable = require(\"ui/core/dependency-observable\");\nexports.myPropertyProperty = new dependencyObservable.Property(\"myProperty\",\n          \"MyClass\",\n          new dependencyObservable.PropertyMetadata(\"\", dependencyObservable.PropertyMetadataSettings.None));\nvar MyClass = (function (_super) {\n  __extends(MyClass, _super);\n  function MyClass() {\n    _super.apply(this, arguments);\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._getValue(exports.myPropertyProperty);\n    },\n    set: function (value) {\n      this._setValue(exports.myPropertyProperty, value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MyClass;\n})(dependencyObservable.DependencyObservable);\nexports.MyClass = MyClass;\n```\n``` TypeScript\nimport dependencyObservable = require(\"ui/core/dependency-observable\");\n\nexport var myPropertyProperty = new dependencyObservable.Property(\n  \"myProperty\",\n  \"MyClass\",\n  new dependencyObservable.PropertyMetadata(\"\", dependencyObservable.PropertyMetadataSettings.None)\n);\n\nexport class MyClass extends dependencyObservable.DependencyObservable {\n  public get myProperty(): number {\n    return this._getValue(myPropertyProperty);\n  }\n\n  public set myProperty(value: number) {\n    this._setValue(myPropertyProperty, value);\n  }\n}\n```\n###<a id = \"changedCallback\"></a>Adding a changed callback\n\n__Example 3__ demonstrates how to implement the functionality of changing a notification. It adds a callback function, `onMyPropertyChanged`, that prints a message about a change in a property.\n\n### Example 3: How to handle onPropertyChange event.\n``` JavaScript\nvar dependencyObservable = require(\"ui/core/dependency-observable\");\nfunction onMyPropertyChanged(eventData) {\n  var myClassInstance = eventData.object;\n  var value = eventData.newValue;\n  console.log(\"myProperty of the object \" + myClassInstance.toString() + \" changed with \" + value);\n}\nexports.myPropertyProperty = new dependencyObservable.Property(\"myProperty\",\n      \"MyClass\",\n      new dependencyObservable.PropertyMetadata(\"\",\n                  dependencyObservable.PropertyMetadataSettings.None,\n                  onMyPropertyChanged));\nvar MyClass = (function (_super) {\n  __extends(MyClass, _super);\n  function MyClass() {\n    _super.apply(this, arguments);\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._getValue(exports.myPropertyProperty);\n    },\n    set: function (value) {\n      this._setValue(exports.myPropertyProperty, value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MyClass;\n})(dependencyObservable.DependencyObservable);\nexports.MyClass = MyClass;\n```\n``` TypeScript\nimport dependencyObservable = require(\"ui/core/dependency-observable\");\n\nfunction onMyPropertyChanged(eventData: dependencyObservable.PropertyChangeData) {\n  var myClassInstance = <MyClass>eventData.object;\n  var value = eventData.newValue;\n\n  console.log(\"myProperty of the object \" + myClassInstance.toString() + \" changed with \" + value);\n}\n\nexport var myPropertyProperty = new dependencyObservable.Property(\n  \"myProperty\",\n  \"MyClass\",\n  new dependencyObservable.PropertyMetadata(\"\",\n  dependencyObservable.PropertyMetadataSettings.None,\n  onMyPropertyChanged)\n);\n\nexport class MyClass extends dependencyObservable.DependencyObservable {\n  public get myProperty(): number {\n    return this._getValue(myPropertyProperty);\n  }\n\n  public set myProperty(value: number) {\n    this._setValue(myPropertyProperty, value);\n  }\n}\n```\n\n###<a id = \"validationCallback\"></a>Adding a validation callback\n\n__Example 4__ demonstrates how to implement value validation. It adds a callback function, `validateMyProperty`, that takes the new property value and validates it using a simple rule.\n\n### Example 4: How to implement value validation.\n\n``` JavaScript\nvar dependencyObservable = require(\"ui/core/dependency-observable\");\nfunction validateMyProperty(value) {\n  if (value > 0) {\n    return true;\n  }\n  return false;\n}\nexports.myPropertyProperty = new dependencyObservable.Property(\"myProperty\", \"MyClass\",\n    new dependencyObservable.PropertyMetadata(\"\",\n        dependencyObservable.PropertyMetadataSettings.None, null, validateMyProperty));\nvar MyClass = (function (_super) {\n...\n```\n``` TypeScript\nimport dependencyObservable = require(\"ui/core/dependency-observable\");\n\nfunction validateMyProperty(value) {\n  if (value > 0) {\n    return true;\n  }\n  return false;\n}\n\nexport var myPropertyProperty = new dependencyObservable.Property(\n  \"myProperty\",\n  \"MyClass\",\n  new dependencyObservable.PropertyMetadata(\"\",\n  dependencyObservable.PropertyMetadataSettings.None,\n  null,\n  validateMyProperty)\n  );\n\n  export class MyClass extends dependencyObservable.DependencyObservable {\n...\n```\n\n###<a id = \"inheritable\"></a>Creating an inheritable dependency property\n\n__Example 5__ demonstrates how to create an inheritable dependency property:\n\n### Example 5: How to create inheritable dependency property.\n``` JavaScript\nvar dependencyObservable = require(\"ui/core/dependency-observable\");\nexports.myPropertyProperty = new dependencyObservable.Property(\"myProperty\", \"MyClass\",\n    new dependencyObservable.PropertyMetadata(\"\",\n      dependencyObservable.PropertyMetadataSettings.Inheritable));\nvar MyClass = (function (_super) {\n  __extends(MyClass, _super);\n  function MyClass() {\n    _super.apply(this, arguments);\n  }\n  Object.defineProperty(MyClass.prototype, \"myProperty\", {\n    get: function () {\n      return this._getValue(exports.myPropertyProperty);\n    },\n    set: function (value) {\n      this._setValue(exports.myPropertyProperty, value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MyClass;\n})(dependencyObservable.DependencyObservable);\nexports.MyClass = MyClass;\n```\n``` TypeScript\nimport dependencyObservable = require(\"ui/core/dependency-observable\");\n\nexport var myPropertyProperty = new dependencyObservable.Property(\n    \"myProperty\",\n    \"MyClass\",\n    new dependencyObservable.PropertyMetadata(\"\",\n        dependencyObservable.PropertyMetadataSettings.Inheritable)\n);\n\nexport class MyClass extends dependencyObservable.DependencyObservable {\n  public get myProperty(): number {\n    return this._getValue(myPropertyProperty);\n  }\n\n  public set myProperty(value: number) {\n    this._setValue(myPropertyProperty, value);\n  }\n}\n```\n\n> Creating an inheritable property is relatively simple (as seen in __Example 5__). However, keep in mind that inheritance only occurs down the visual tree. Setting a property to a non-visual element does not allow for inheritance.\n\n## Style properties\n\n###<a id = \"intro2\"></a>Introduction\n\nProbably the best use case for inheritable properties is applying different styles and themes to UI components. You only need to set a property (theme or style) to the base-most container and every single UI component inherits it through the visual tree.\n\n###<a id = \"setting\"></a>Setting a style property\n\nSetting a style property is similar to setting a regular property but you use the nested `style` object (that is a property of the View class, which means that every UI component has style).\n\n#### Setting in code\n\nTo set a style property in your code:\n\n``` JavaScript\nvar color = require(\"color\");\nsomeButton.style.backgroundColor = new color.Color(\"red\");\n```\n``` TypeScript\nimport color = require(\"color\");\nsomeButton.style.backgroundColor = new color.Color(\"red\");\n```\n\n#### Setting in CSS\n\nTo set a style property in your CSS:\n\n``` JavaScript\nsomeButton.id = \"someButton\";\nsomeButton.css = \"#someButtton {background-color: red}\";\n```\n``` TypeScript\nsomeButton.id = \"someButton\";\nsomeButton.css = \"#someButtton {background-color: red}\";\n```\n<!---\n### Creating a Custom Style Property\n\nIf you ever need to create a custom style property you can do so by taking these steps:\n\n#### Declare the Custom Style Property\n\n``` JavaScript\nvar styleProperty = require(\"ui/styling/style-property\");\nvar depObservable = require(\"ui/core/dependency-observable\");\n\nexports.fontFamilyProperty = new styleProperty.Property(\"fontFamily\", \"font-family\",\n    new depObservable.PropertyMetadata(undefined, depObservable.PropertyMetadataOptions.AffectsMeasure),\n    null);\n```\n``` TypeScript\nimport styleProperty = require(\"ui/styling/style-property\");\nimport depObservable = require(\"ui/core/dependency-observable\");\n\nexport var fontFamilyProperty = new styleProperty.Property(\"fontFamily\", \"font-family\",\n    new depObservable.PropertyMetadata(undefined, depObservable.PropertyMetadataOptions.AffectsMeasure),\n    null);\n```\n\nNotice that style properties differ from normal properties. In fact the `styleProperty.Property` class inherits from `depObservable.Property` and adds the option for setting the property using CSS (the constructor's second parameter).\n\n\n#### Register a Handler for the Custom Property\n\nThe second step is to register a handler object (`StylePropertyChangedHandler`) that synchronizes the property value and the underlying native object. To create the handler you provide methods for **setting**, **resetting**, and **getting the native object**. The set method sets a value to the native object. The reset method restores the default value of the native object. The final method takes the default value.\n\nFor convenience, the code can be wrapped in a class called `Styler` that inherits an interface (currently solely for better readability) also called `Styler`. It has a single method that implements `registerHandlers`, where you register handlers for all properties defined in Styler.\n\n``` JavaScript\nvar styles = require(\"ui/styling\");\n\nvar MyTextViewStyler = (function () {\n    function MyTextViewStyler() {\n    }\n    MyTextViewStyler.setFontFamilyProperty = function (view, newValue) {\n        if (view.android) {\n            view.android.setTypeface(android.graphics.Typeface.create(newValue,\n              android.graphics.Typeface.NORMAL));\n        }\n        else if (view.ios) {\n            var fontSize = view._nativeView.titleLabel.font.pointSize;\n            view._nativeView.titleLabel.font = UIFont.fontWithNameSize(newValue, fontSize);\n        }\n    };\n    MyTextViewStyler.resetFontFamilyProperty = function (view, nativeValue) {\n        if (view.android) {\n            view.android.setTypeface(android.graphics.Typeface.create(nativeValue,\n              android.graphics.Typeface.NORMAL));\n        }\n        else if (view.ios) {\n            var fontSize = view._nativeView.titleLabel.font.pointSize;\n            view._nativeView.titleLabel.font = UIFont.fontWithNameSize(nativeValue, fontSize);\n            ;\n        }\n    };\n    MyTextViewStyler.registerHandlers = function () {\n        styles.stylers.registerHandler(exports.fontFamilyProperty,\n          new styles.stylers.StylePropertyChangedHandler(MyTextViewStyler.setFontFamilyProperty,\n          MyTextViewStyler.resetFontFamilyProperty, MyTextViewStyler.getNativeFontFamilyValue), \"MyButton\");\n    };\n    MyTextViewStyler.getNativeFontFamilyValue = function (view) {\n        if (view.android) {\n            return view.android.getTypeface();\n        }\n        else if (view.ios) {\n            return view._nativeView.titleLabel.font.fontName;\n        }\n        return null;\n    };\n    return MyTextViewStyler;\n})();\nexports.MyTextViewStyler = MyTextViewStyler;\n```\n``` TypeScript\nimport styles = require(\"ui/styling\");\n\nexport class MyTextViewStyler implements styles.stylers.Styler {\n    public static setFontFamilyProperty(view: view.View, newValue: any) {\n        if (view.android) {\n            (<android.widget.TextView>view.android).setTypeface(android.graphics.Typeface.create(newValue,\n              android.graphics.Typeface.NORMAL));\n        }\n        else if (view.ios) {\n            var fontSize = (<UIButton>view._nativeView).titleLabel.font.pointSize;\n            (<UIButton>view._nativeView).titleLabel.font = UIFont.fontWithNameSize(newValue, fontSize);\n        }\n    }\n\n    public static resetFontFamilyProperty(view: view.View, nativeValue: any) {\n        if (view.android) {\n            (<android.widget.TextView>view.android).setTypeface(android.graphics.Typeface.create(nativeValue,\n              android.graphics.Typeface.NORMAL));\n        }\n        else if (view.ios) {\n            var fontSize = (<UIButton>view._nativeView).titleLabel.font.pointSize;\n            (<UIButton>view._nativeView).titleLabel.font = UIFont.fontWithNameSize(nativeValue, fontSize);;\n        }\n    }\n\n    public static getNativeFontFamilyValue = function (view: view.View): any {\n        if (view.android) {\n            return (<android.widget.TextView>view.android).getTypeface();\n        }\n        else if (view.ios) {\n            return (<UIButton>view._nativeView).titleLabel.font.fontName;\n        }\n        return null;\n    }\n\n    public static registerHandlers() {\n        styles.stylers.registerHandler(fontFamilyProperty, new styles.stylers.StylePropertyChangedHandler(\n            MyTextViewStyler.setFontFamilyProperty,\n            MyTextViewStyler.resetFontFamilyProperty,\n            MyTextViewStyler.getNativeFontFamilyValue), \"MyButton\");\n    }\n}\n```\n\nImportant part of this class is the call to the static method `styles.stylers.registerHandler` which registers `styles.stylers.StylePropertyChangedHandler` with a property. The third optional parameter indicates objects of what class is to react to a change in the property value. Derived classes also receive the same behaviour.\n\n#### Use the New Custom Property\n\n``` JavaScript\nvar stackLayoutDef = require(\"ui/layouts/stack-layout\");\nvar buttonModule = require(\"ui/button\");\nvar pages = require(\"ui/page\");\n\nvar MyButton = (function (_super) {\n    __extends(MyButton, _super);\n    function MyButton() {\n        _super.apply(this, arguments);\n    }\n    return MyButton;\n})(buttonModule.Button);\nexports.MyButton = MyButton;\nMyTextViewStyler.registerHandlers();\nfunction createPage() {\n    var layout = new stackLayoutDef.StackLayout();\n    var btn = new MyButton();\n    btn.text = \"The quick brown fox jumps over the lazy dog.\";\n    btn.id = \"btn\";\n    var btn1 = new MyButton();\n    btn1.text = \"The quick brown fox jumps over the lazy dog.\";\n    btn1.id = \"btn1\";\n    var btn2 = new buttonModule.Button();\n    btn2.text = \"The quick brown fox jumps over the lazy dog.\";\n    layout.addChild(btn);\n    layout.addChild(btn1);\n    layout.addChild(btn2);\n    var page = new pages.Page();\n    page.css = \"#btn {font-family: Courier New} #btn1 {font-family: Times New Roman} #btn2 {color: yellow}\";\n    page.content = layout;\n    return page;\n}\nexports.createPage = createPage;\n```\n``` TypeScript\nimport stackLayoutDef = require(\"ui/layouts/stack-layout\");\nimport buttonModule = require(\"ui/button\");\nimport pages = require(\"ui/page\");\n\nexport class MyButton extends buttonModule.Button {\n\n}\n\nMyTextViewStyler.registerHandlers();\n\nexport function createPage() {\n    var layout = new stackLayoutDef.StackLayout();\n\n    var btn = new MyButton();\n    btn.text = \"The quick brown fox jumps over the lazy dog.\";\n    btn.id = \"btn\";\n\n    var btn1 = new MyButton();\n    btn1.text = \"The quick brown fox jumps over the lazy dog.\";\n    btn1.id = \"btn1\";\n\n    var btn2 = new buttonModule.Button();\n    btn2.text = \"The quick brown fox jumps over the lazy dog.\";\n\n    layout.addChild(btn);\n    layout.addChild(btn1);\n    layout.addChild(btn2);\n\n    var page = new pages.Page();\n    page.css = \"#btn {font-family: Courier New} #btn1 {font-family: Times New Roman} #btn2 {color: yellow}\";\n    page.content = layout;\n    return page;\n}\n```\n-->\n","date":"2016-08-26T21:05:52.878Z","updated":"2016-08-26T21:05:52.878Z","path":"core-concepts/properties.html","comments":1,"layout":"page","_id":"cisn95c6o000dwsl0qh4n73zw","content":"<h1 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h1><p>This article contents:</p>\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#dependency-properties\">Dependency properties</a><ul>\n<li><a href=\"#intro1\">Introduction</a></li>\n<li><a href=\"#declaring\">Declaring a dependency property</a></li>\n<li><a href=\"#changedCallback\">Adding a changed callback</a></li>\n<li><a href=\"#validationCallback\">Adding a validation callback</a></li>\n<li><a href=\"#inheritable\">Creating an inheritable dependency property</a></li>\n</ul>\n</li>\n<li><a href=\"#style-properties\">Style properties</a><ul>\n<li><a href=\"#intro2\">Introduction</a></li>\n<li><a href=\"#setting\">Setting a style property</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>Being a TypeScript framework, NativeScript uses TypeScript properties. After transpilation, these result in ECMAScript v.5 compliant JavaScript with setter and getter methods to support working with class members, thus ensuring readable and manageable code. The code in <strong>Example 1</strong> demonstrates how the TypeScript is transformed to JavaScript.</p>\n<h3 id=\"Example-1-How-TypeScript-is-transformed-to-JavaScript\"><a href=\"#Example-1-How-TypeScript-is-transformed-to-JavaScript\" class=\"headerlink\" title=\"Example 1: How TypeScript is transformed to JavaScript.\"></a>Example 1: How TypeScript is transformed to JavaScript.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._myProperty;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._myProperty = value;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)();</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> _myProperty: <span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._myProperty;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._myProperty = value;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The TypeScript transpiler is run by a grunt script.</p>\n<p>NativeScript features two types of properties: <strong>dependency properties</strong> and <strong>style properties</strong>. Each type is described in the next sections.</p>\n<h2 id=\"Dependency-properties\"><a href=\"#Dependency-properties\" class=\"headerlink\" title=\"Dependency properties\"></a>Dependency properties</h2><p>This sections includes these topics:</p>\n<p>###<a id=\"intro1\"></a>Introduction</p>\n<p>Dependency properties provide valuable features that simplify the creation of a rich User Interface (UI), including: </p>\n<ul>\n<li>Memory optimization: The creation of a rich custom UI control is bound to creating a huge number of properties, most of which are used with default values. With the traditional approach you end up with a <strong>private field</strong> for every property. With dependency properties, you only store the instance properties that you modified. The default values are stored within the dependency property. Additionally, dependency properties are declared statically outside the class, which further helps optimize the memory footprint.</li>\n<li>Value validation: Dependency properties offer business logic validation. It is implemented as a dedicated validation callback function that takes <code>newValue</code> as parameter and returns true or false if the value is valid or not, respectively.</li>\n<li>Change notification: Another callback function is called when the property value changes. It is called with an <a href=\"http://docs.nativescript.org/api-reference/interfaces/_data_observable_.eventdata.html\">EventData</a> as parameter.</li>\n<li>Inheritance: One of the most important features of dependency properties is inheritance. It is implemented through a dedicated UI element that allows it to get its property from a parent element in the visual tree. For example, a button can inherit its style (or theme) property value from the parent Window, Layout, or another container. This gives you the option to dramatically change the look of your entire application by only changing a single setting (Window.theme).</li>\n</ul>\n<p>###<a id=\"declaring\"></a>Declaring a dependency property</p>\n<p>Only classes that derive from <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_dependency_observable_.dependencyobservable.html\">DependencyObservable</a> can have a dependency property. This class has built-in methods that support the entire infrastructure of dependency properties.</p>\n<p>The code in <strong>Example 2</strong> creates a bare-bones property that adds a static part compared to a standard property implementation.</p>\n<h3 id=\"Example-2-How-to-create-property-that-adds-a-static-part-compared-to-a-standard-property\"><a href=\"#Example-2-How-to-create-property-that-adds-a-static-part-compared-to-a-standard-property\" class=\"headerlink\" title=\"Example 2: How to create property that adds a static part compared to a standard property.\"></a>Example 2: How to create property that adds a static part compared to a standard property.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\">exports.myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(<span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">          <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">          <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>, dependencyObservable.PropertyMetadataSettings.None));</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">  __extends(MyClass, _super);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(exports.myPropertyProperty);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._setValue(exports.myPropertyProperty, value);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)(dependencyObservable.DependencyObservable);</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(</div><div class=\"line\">  <span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">  <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">  <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>, dependencyObservable.PropertyMetadataSettings.None)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends dependencyObservable.DependencyObservable &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(myPropertyProperty);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._setValue(myPropertyProperty, value);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###<a id=\"changedCallback\"></a>Adding a changed callback</p>\n<p><strong>Example 3</strong> demonstrates how to implement the functionality of changing a notification. It adds a callback function, <code>onMyPropertyChanged</code>, that prints a message about a change in a property.</p>\n<h3 id=\"Example-3-How-to-handle-onPropertyChange-event\"><a href=\"#Example-3-How-to-handle-onPropertyChange-event\" class=\"headerlink\" title=\"Example 3: How to handle onPropertyChange event.\"></a>Example 3: How to handle onPropertyChange event.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onMyPropertyChanged</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> myClassInstance = eventData.object;</div><div class=\"line\">  <span class=\"keyword\">var</span> value = eventData.newValue;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"myProperty of the object \"</span> + myClassInstance.toString() + <span class=\"string\">\" changed with \"</span> + value);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(<span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">      <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">      <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">                  dependencyObservable.PropertyMetadataSettings.None,</div><div class=\"line\">                  onMyPropertyChanged));</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">  __extends(MyClass, _super);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(exports.myPropertyProperty);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._setValue(exports.myPropertyProperty, value);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)(dependencyObservable.DependencyObservable);</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onMyPropertyChanged</span>(<span class=\"params\">eventData: dependencyObservable.PropertyChangeData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> myClassInstance = &lt;MyClass&gt;eventData.object;</div><div class=\"line\">  <span class=\"keyword\">var</span> value = eventData.newValue;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"myProperty of the object \"</span> + myClassInstance.toString() + <span class=\"string\">\" changed with \"</span> + value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(</div><div class=\"line\">  <span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">  <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">  <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">  dependencyObservable.PropertyMetadataSettings.None,</div><div class=\"line\">  onMyPropertyChanged)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends dependencyObservable.DependencyObservable &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(myPropertyProperty);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._setValue(myPropertyProperty, value);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###<a id=\"validationCallback\"></a>Adding a validation callback</p>\n<p><strong>Example 4</strong> demonstrates how to implement value validation. It adds a callback function, <code>validateMyProperty</code>, that takes the new property value and validates it using a simple rule.</p>\n<h3 id=\"Example-4-How-to-implement-value-validation\"><a href=\"#Example-4-How-to-implement-value-validation\" class=\"headerlink\" title=\"Example 4: How to implement value validation.\"></a>Example 4: How to implement value validation.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateMyProperty</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(<span class=\"string\">\"myProperty\"</span>, <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">        dependencyObservable.PropertyMetadataSettings.None, <span class=\"literal\">null</span>, validateMyProperty));</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateMyProperty</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(</div><div class=\"line\">  <span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">  <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">  <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">  dependencyObservable.PropertyMetadataSettings.None,</div><div class=\"line\">  <span class=\"literal\">null</span>,</div><div class=\"line\">  validateMyProperty)</div><div class=\"line\">  );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends dependencyObservable.DependencyObservable &#123;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>###<a id=\"inheritable\"></a>Creating an inheritable dependency property</p>\n<p><strong>Example 5</strong> demonstrates how to create an inheritable dependency property:</p>\n<h3 id=\"Example-5-How-to-create-inheritable-dependency-property\"><a href=\"#Example-5-How-to-create-inheritable-dependency-property\" class=\"headerlink\" title=\"Example 5: How to create inheritable dependency property.\"></a>Example 5: How to create inheritable dependency property.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\">exports.myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(<span class=\"string\">\"myProperty\"</span>, <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">      dependencyObservable.PropertyMetadataSettings.Inheritable));</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">  __extends(MyClass, _super);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(exports.myPropertyProperty);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._setValue(exports.myPropertyProperty, value);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)(dependencyObservable.DependencyObservable);</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(</div><div class=\"line\">    <span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">    <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">        dependencyObservable.PropertyMetadataSettings.Inheritable)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends dependencyObservable.DependencyObservable &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(myPropertyProperty);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._setValue(myPropertyProperty, value);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Creating an inheritable property is relatively simple (as seen in <strong>Example 5</strong>). However, keep in mind that inheritance only occurs down the visual tree. Setting a property to a non-visual element does not allow for inheritance.</p>\n</blockquote>\n<h2 id=\"Style-properties\"><a href=\"#Style-properties\" class=\"headerlink\" title=\"Style properties\"></a>Style properties</h2><p>###<a id=\"intro2\"></a>Introduction</p>\n<p>Probably the best use case for inheritable properties is applying different styles and themes to UI components. You only need to set a property (theme or style) to the base-most container and every single UI component inherits it through the visual tree.</p>\n<p>###<a id=\"setting\"></a>Setting a style property</p>\n<p>Setting a style property is similar to setting a regular property but you use the nested <code>style</code> object (that is a property of the View class, which means that every UI component has style).</p>\n<h4 id=\"Setting-in-code\"><a href=\"#Setting-in-code\" class=\"headerlink\" title=\"Setting in code\"></a>Setting in code</h4><p>To set a style property in your code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"built_in\">require</span>(<span class=\"string\">\"color\"</span>);</div><div class=\"line\">someButton.style.backgroundColor = <span class=\"keyword\">new</span> color.Color(<span class=\"string\">\"red\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> color = <span class=\"built_in\">require</span>(<span class=\"string\">\"color\"</span>);</div><div class=\"line\">someButton.style.backgroundColor = <span class=\"keyword\">new</span> color.Color(<span class=\"string\">\"red\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"Setting-in-CSS\"><a href=\"#Setting-in-CSS\" class=\"headerlink\" title=\"Setting in CSS\"></a>Setting in CSS</h4><p>To set a style property in your CSS:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">someButton.id = <span class=\"string\">\"someButton\"</span>;</div><div class=\"line\">someButton.css = <span class=\"string\">\"#someButtton &#123;background-color: red&#125;\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">someButton.id = <span class=\"string\">\"someButton\"</span>;</div><div class=\"line\">someButton.css = <span class=\"string\">\"#someButtton &#123;background-color: red&#125;\"</span>;</div></pre></td></tr></table></figure>\n<!---\n### Creating a Custom Style Property\n\nIf you ever need to create a custom style property you can do so by taking these steps:\n\n#### Declare the Custom Style Property\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> styleProperty = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling/style-property\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> depObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\">exports.fontFamilyProperty = <span class=\"keyword\">new</span> styleProperty.Property(<span class=\"string\">\"fontFamily\"</span>, <span class=\"string\">\"font-family\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> depObservable.PropertyMetadata(<span class=\"literal\">undefined</span>, depObservable.PropertyMetadataOptions.AffectsMeasure),</div><div class=\"line\">    <span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> styleProperty = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling/style-property\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> depObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> fontFamilyProperty = <span class=\"keyword\">new</span> styleProperty.Property(<span class=\"string\">\"fontFamily\"</span>, <span class=\"string\">\"font-family\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> depObservable.PropertyMetadata(<span class=\"literal\">undefined</span>, depObservable.PropertyMetadataOptions.AffectsMeasure),</div><div class=\"line\">    <span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<p>Notice that style properties differ from normal properties. In fact the <code>styleProperty.Property</code> class inherits from <code>depObservable.Property</code> and adds the option for setting the property using CSS (the constructor’s second parameter).</p>\n<h4 id=\"Register-a-Handler-for-the-Custom-Property\"><a href=\"#Register-a-Handler-for-the-Custom-Property\" class=\"headerlink\" title=\"Register a Handler for the Custom Property\"></a>Register a Handler for the Custom Property</h4><p>The second step is to register a handler object (<code>StylePropertyChangedHandler</code>) that synchronizes the property value and the underlying native object. To create the handler you provide methods for <strong>setting</strong>, <strong>resetting</strong>, and <strong>getting the native object</strong>. The set method sets a value to the native object. The reset method restores the default value of the native object. The final method takes the default value.</p>\n<p>For convenience, the code can be wrapped in a class called <code>Styler</code> that inherits an interface (currently solely for better readability) also called <code>Styler</code>. It has a single method that implements <code>registerHandlers</code>, where you register handlers for all properties defined in Styler.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> styles = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> MyTextViewStyler = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyTextViewStyler</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    MyTextViewStyler.setFontFamilyProperty = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view, newValue</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            view.android.setTypeface(android.graphics.Typeface.create(newValue,</div><div class=\"line\">              android.graphics.Typeface.NORMAL));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> fontSize = view._nativeView.titleLabel.font.pointSize;</div><div class=\"line\">            view._nativeView.titleLabel.font = UIFont.fontWithNameSize(newValue, fontSize);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    MyTextViewStyler.resetFontFamilyProperty = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view, nativeValue</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            view.android.setTypeface(android.graphics.Typeface.create(nativeValue,</div><div class=\"line\">              android.graphics.Typeface.NORMAL));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> fontSize = view._nativeView.titleLabel.font.pointSize;</div><div class=\"line\">            view._nativeView.titleLabel.font = UIFont.fontWithNameSize(nativeValue, fontSize);</div><div class=\"line\">            ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    MyTextViewStyler.registerHandlers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        styles.stylers.registerHandler(exports.fontFamilyProperty,</div><div class=\"line\">          <span class=\"keyword\">new</span> styles.stylers.StylePropertyChangedHandler(MyTextViewStyler.setFontFamilyProperty,</div><div class=\"line\">          MyTextViewStyler.resetFontFamilyProperty, MyTextViewStyler.getNativeFontFamilyValue), <span class=\"string\">\"MyButton\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    MyTextViewStyler.getNativeFontFamilyValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> view.android.getTypeface();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> view._nativeView.titleLabel.font.fontName;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> MyTextViewStyler;</div><div class=\"line\">&#125;)();</div><div class=\"line\">exports.MyTextViewStyler = MyTextViewStyler;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> styles = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyTextViewStyler <span class=\"keyword\">implements</span> styles.stylers.Styler &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> setFontFamilyProperty(view: view.View, newValue: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            (&lt;android.widget.TextView&gt;view.android).setTypeface(android.graphics.Typeface.create(newValue,</div><div class=\"line\">              android.graphics.Typeface.NORMAL));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> fontSize = (&lt;UIButton&gt;view._nativeView).titleLabel.font.pointSize;</div><div class=\"line\">            (&lt;UIButton&gt;view._nativeView).titleLabel.font = UIFont.fontWithNameSize(newValue, fontSize);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> resetFontFamilyProperty(view: view.View, nativeValue: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            (&lt;android.widget.TextView&gt;view.android).setTypeface(android.graphics.Typeface.create(nativeValue,</div><div class=\"line\">              android.graphics.Typeface.NORMAL));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> fontSize = (&lt;UIButton&gt;view._nativeView).titleLabel.font.pointSize;</div><div class=\"line\">            (&lt;UIButton&gt;view._nativeView).titleLabel.font = UIFont.fontWithNameSize(nativeValue, fontSize);;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> getNativeFontFamilyValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view: view.View</span>): <span class=\"title\">any</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (&lt;android.widget.TextView&gt;view.android).getTypeface();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (&lt;UIButton&gt;view._nativeView).titleLabel.font.fontName;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> registerHandlers() &#123;</div><div class=\"line\">        styles.stylers.registerHandler(fontFamilyProperty, <span class=\"keyword\">new</span> styles.stylers.StylePropertyChangedHandler(</div><div class=\"line\">            MyTextViewStyler.setFontFamilyProperty,</div><div class=\"line\">            MyTextViewStyler.resetFontFamilyProperty,</div><div class=\"line\">            MyTextViewStyler.getNativeFontFamilyValue), <span class=\"string\">\"MyButton\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Important part of this class is the call to the static method <code>styles.stylers.registerHandler</code> which registers <code>styles.stylers.StylePropertyChangedHandler</code> with a property. The third optional parameter indicates objects of what class is to react to a change in the property value. Derived classes also receive the same behaviour.</p>\n<h4 id=\"Use-the-New-Custom-Property\"><a href=\"#Use-the-New-Custom-Property\" class=\"headerlink\" title=\"Use the New Custom Property\"></a>Use the New Custom Property</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> stackLayoutDef = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/layouts/stack-layout\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> MyButton = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    __extends(MyButton, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyButton</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> MyButton;</div><div class=\"line\">&#125;)(buttonModule.Button);</div><div class=\"line\">exports.MyButton = MyButton;</div><div class=\"line\">MyTextViewStyler.registerHandlers();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPage</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> layout = <span class=\"keyword\">new</span> stackLayoutDef.StackLayout();</div><div class=\"line\">    <span class=\"keyword\">var</span> btn = <span class=\"keyword\">new</span> MyButton();</div><div class=\"line\">    btn.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    btn.id = <span class=\"string\">\"btn\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> btn1 = <span class=\"keyword\">new</span> MyButton();</div><div class=\"line\">    btn1.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    btn1.id = <span class=\"string\">\"btn1\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> btn2 = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">    btn2.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    layout.addChild(btn);</div><div class=\"line\">    layout.addChild(btn1);</div><div class=\"line\">    layout.addChild(btn2);</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pages.Page();</div><div class=\"line\">    page.css = <span class=\"string\">\"#btn &#123;font-family: Courier New&#125; #btn1 &#123;font-family: Times New Roman&#125; #btn2 &#123;color: yellow&#125;\"</span>;</div><div class=\"line\">    page.content = layout;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.createPage = createPage;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> stackLayoutDef = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/layouts/stack-layout\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyButton extends buttonModule.Button &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyTextViewStyler.registerHandlers();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPage</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> layout = <span class=\"keyword\">new</span> stackLayoutDef.StackLayout();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> btn = <span class=\"keyword\">new</span> MyButton();</div><div class=\"line\">    btn.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    btn.id = <span class=\"string\">\"btn\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> btn1 = <span class=\"keyword\">new</span> MyButton();</div><div class=\"line\">    btn1.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    btn1.id = <span class=\"string\">\"btn1\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> btn2 = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">    btn2.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\"></div><div class=\"line\">    layout.addChild(btn);</div><div class=\"line\">    layout.addChild(btn1);</div><div class=\"line\">    layout.addChild(btn2);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pages.Page();</div><div class=\"line\">    page.css = <span class=\"string\">\"#btn &#123;font-family: Courier New&#125; #btn1 &#123;font-family: Times New Roman&#125; #btn2 &#123;color: yellow&#125;\"</span>;</div><div class=\"line\">    page.content = layout;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>–&gt;</p>\n-->","excerpt":"","more":"<h1 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h1><p>This article contents:</p>\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#dependency-properties\">Dependency properties</a><ul>\n<li><a href=\"#intro1\">Introduction</a></li>\n<li><a href=\"#declaring\">Declaring a dependency property</a></li>\n<li><a href=\"#changedCallback\">Adding a changed callback</a></li>\n<li><a href=\"#validationCallback\">Adding a validation callback</a></li>\n<li><a href=\"#inheritable\">Creating an inheritable dependency property</a></li>\n</ul>\n</li>\n<li><a href=\"#style-properties\">Style properties</a><ul>\n<li><a href=\"#intro2\">Introduction</a></li>\n<li><a href=\"#setting\">Setting a style property</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>Being a TypeScript framework, NativeScript uses TypeScript properties. After transpilation, these result in ECMAScript v.5 compliant JavaScript with setter and getter methods to support working with class members, thus ensuring readable and manageable code. The code in <strong>Example 1</strong> demonstrates how the TypeScript is transformed to JavaScript.</p>\n<h3 id=\"Example-1-How-TypeScript-is-transformed-to-JavaScript\"><a href=\"#Example-1-How-TypeScript-is-transformed-to-JavaScript\" class=\"headerlink\" title=\"Example 1: How TypeScript is transformed to JavaScript.\"></a>Example 1: How TypeScript is transformed to JavaScript.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._myProperty;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._myProperty = value;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)();</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> _myProperty: <span class=\"built_in\">number</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._myProperty;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._myProperty = value;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The TypeScript transpiler is run by a grunt script.</p>\n<p>NativeScript features two types of properties: <strong>dependency properties</strong> and <strong>style properties</strong>. Each type is described in the next sections.</p>\n<h2 id=\"Dependency-properties\"><a href=\"#Dependency-properties\" class=\"headerlink\" title=\"Dependency properties\"></a>Dependency properties</h2><p>This sections includes these topics:</p>\n<p>###<a id = \"intro1\"></a>Introduction</p>\n<p>Dependency properties provide valuable features that simplify the creation of a rich User Interface (UI), including: </p>\n<ul>\n<li>Memory optimization: The creation of a rich custom UI control is bound to creating a huge number of properties, most of which are used with default values. With the traditional approach you end up with a <strong>private field</strong> for every property. With dependency properties, you only store the instance properties that you modified. The default values are stored within the dependency property. Additionally, dependency properties are declared statically outside the class, which further helps optimize the memory footprint.</li>\n<li>Value validation: Dependency properties offer business logic validation. It is implemented as a dedicated validation callback function that takes <code>newValue</code> as parameter and returns true or false if the value is valid or not, respectively.</li>\n<li>Change notification: Another callback function is called when the property value changes. It is called with an <a href=\"http://docs.nativescript.org/api-reference/interfaces/_data_observable_.eventdata.html\">EventData</a> as parameter.</li>\n<li>Inheritance: One of the most important features of dependency properties is inheritance. It is implemented through a dedicated UI element that allows it to get its property from a parent element in the visual tree. For example, a button can inherit its style (or theme) property value from the parent Window, Layout, or another container. This gives you the option to dramatically change the look of your entire application by only changing a single setting (Window.theme).</li>\n</ul>\n<p>###<a id = declaring></a>Declaring a dependency property</p>\n<p>Only classes that derive from <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_dependency_observable_.dependencyobservable.html\">DependencyObservable</a> can have a dependency property. This class has built-in methods that support the entire infrastructure of dependency properties.</p>\n<p>The code in <strong>Example 2</strong> creates a bare-bones property that adds a static part compared to a standard property implementation.</p>\n<h3 id=\"Example-2-How-to-create-property-that-adds-a-static-part-compared-to-a-standard-property\"><a href=\"#Example-2-How-to-create-property-that-adds-a-static-part-compared-to-a-standard-property\" class=\"headerlink\" title=\"Example 2: How to create property that adds a static part compared to a standard property.\"></a>Example 2: How to create property that adds a static part compared to a standard property.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\">exports.myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(<span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">          <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">          <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>, dependencyObservable.PropertyMetadataSettings.None));</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">  __extends(MyClass, _super);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(exports.myPropertyProperty);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._setValue(exports.myPropertyProperty, value);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)(dependencyObservable.DependencyObservable);</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(</div><div class=\"line\">  <span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">  <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">  <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>, dependencyObservable.PropertyMetadataSettings.None)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends dependencyObservable.DependencyObservable &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(myPropertyProperty);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._setValue(myPropertyProperty, value);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###<a id = \"changedCallback\"></a>Adding a changed callback</p>\n<p><strong>Example 3</strong> demonstrates how to implement the functionality of changing a notification. It adds a callback function, <code>onMyPropertyChanged</code>, that prints a message about a change in a property.</p>\n<h3 id=\"Example-3-How-to-handle-onPropertyChange-event\"><a href=\"#Example-3-How-to-handle-onPropertyChange-event\" class=\"headerlink\" title=\"Example 3: How to handle onPropertyChange event.\"></a>Example 3: How to handle onPropertyChange event.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onMyPropertyChanged</span>(<span class=\"params\">eventData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> myClassInstance = eventData.object;</div><div class=\"line\">  <span class=\"keyword\">var</span> value = eventData.newValue;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"myProperty of the object \"</span> + myClassInstance.toString() + <span class=\"string\">\" changed with \"</span> + value);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(<span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">      <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">      <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">                  dependencyObservable.PropertyMetadataSettings.None,</div><div class=\"line\">                  onMyPropertyChanged));</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">  __extends(MyClass, _super);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(exports.myPropertyProperty);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._setValue(exports.myPropertyProperty, value);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)(dependencyObservable.DependencyObservable);</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onMyPropertyChanged</span>(<span class=\"params\">eventData: dependencyObservable.PropertyChangeData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> myClassInstance = &lt;MyClass&gt;eventData.object;</div><div class=\"line\">  <span class=\"keyword\">var</span> value = eventData.newValue;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"myProperty of the object \"</span> + myClassInstance.toString() + <span class=\"string\">\" changed with \"</span> + value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(</div><div class=\"line\">  <span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">  <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">  <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">  dependencyObservable.PropertyMetadataSettings.None,</div><div class=\"line\">  onMyPropertyChanged)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends dependencyObservable.DependencyObservable &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(myPropertyProperty);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._setValue(myPropertyProperty, value);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###<a id = \"validationCallback\"></a>Adding a validation callback</p>\n<p><strong>Example 4</strong> demonstrates how to implement value validation. It adds a callback function, <code>validateMyProperty</code>, that takes the new property value and validates it using a simple rule.</p>\n<h3 id=\"Example-4-How-to-implement-value-validation\"><a href=\"#Example-4-How-to-implement-value-validation\" class=\"headerlink\" title=\"Example 4: How to implement value validation.\"></a>Example 4: How to implement value validation.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateMyProperty</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(<span class=\"string\">\"myProperty\"</span>, <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">        dependencyObservable.PropertyMetadataSettings.None, <span class=\"literal\">null</span>, validateMyProperty));</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateMyProperty</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(</div><div class=\"line\">  <span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">  <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">  <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">  dependencyObservable.PropertyMetadataSettings.None,</div><div class=\"line\">  <span class=\"literal\">null</span>,</div><div class=\"line\">  validateMyProperty)</div><div class=\"line\">  );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends dependencyObservable.DependencyObservable &#123;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>###<a id = \"inheritable\"></a>Creating an inheritable dependency property</p>\n<p><strong>Example 5</strong> demonstrates how to create an inheritable dependency property:</p>\n<h3 id=\"Example-5-How-to-create-inheritable-dependency-property\"><a href=\"#Example-5-How-to-create-inheritable-dependency-property\" class=\"headerlink\" title=\"Example 5: How to create inheritable dependency property.\"></a>Example 5: How to create inheritable dependency property.</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\">exports.myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(<span class=\"string\">\"myProperty\"</span>, <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">      dependencyObservable.PropertyMetadataSettings.Inheritable));</div><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">  __extends(MyClass, _super);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(MyClass.prototype, <span class=\"string\">\"myProperty\"</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(exports.myPropertyProperty);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._setValue(exports.myPropertyProperty, value);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)(dependencyObservable.DependencyObservable);</div><div class=\"line\">exports.MyClass = MyClass;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> myPropertyProperty = <span class=\"keyword\">new</span> dependencyObservable.Property(</div><div class=\"line\">    <span class=\"string\">\"myProperty\"</span>,</div><div class=\"line\">    <span class=\"string\">\"MyClass\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> dependencyObservable.PropertyMetadata(<span class=\"string\">\"\"</span>,</div><div class=\"line\">        dependencyObservable.PropertyMetadataSettings.Inheritable)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyClass extends dependencyObservable.DependencyObservable &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> myProperty(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(myPropertyProperty);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span> myProperty(value: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._setValue(myPropertyProperty, value);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Creating an inheritable property is relatively simple (as seen in <strong>Example 5</strong>). However, keep in mind that inheritance only occurs down the visual tree. Setting a property to a non-visual element does not allow for inheritance.</p>\n</blockquote>\n<h2 id=\"Style-properties\"><a href=\"#Style-properties\" class=\"headerlink\" title=\"Style properties\"></a>Style properties</h2><p>###<a id = \"intro2\"></a>Introduction</p>\n<p>Probably the best use case for inheritable properties is applying different styles and themes to UI components. You only need to set a property (theme or style) to the base-most container and every single UI component inherits it through the visual tree.</p>\n<p>###<a id = \"setting\"></a>Setting a style property</p>\n<p>Setting a style property is similar to setting a regular property but you use the nested <code>style</code> object (that is a property of the View class, which means that every UI component has style).</p>\n<h4 id=\"Setting-in-code\"><a href=\"#Setting-in-code\" class=\"headerlink\" title=\"Setting in code\"></a>Setting in code</h4><p>To set a style property in your code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"built_in\">require</span>(<span class=\"string\">\"color\"</span>);</div><div class=\"line\">someButton.style.backgroundColor = <span class=\"keyword\">new</span> color.Color(<span class=\"string\">\"red\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> color = <span class=\"built_in\">require</span>(<span class=\"string\">\"color\"</span>);</div><div class=\"line\">someButton.style.backgroundColor = <span class=\"keyword\">new</span> color.Color(<span class=\"string\">\"red\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"Setting-in-CSS\"><a href=\"#Setting-in-CSS\" class=\"headerlink\" title=\"Setting in CSS\"></a>Setting in CSS</h4><p>To set a style property in your CSS:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">someButton.id = <span class=\"string\">\"someButton\"</span>;</div><div class=\"line\">someButton.css = <span class=\"string\">\"#someButtton &#123;background-color: red&#125;\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">someButton.id = <span class=\"string\">\"someButton\"</span>;</div><div class=\"line\">someButton.css = <span class=\"string\">\"#someButtton &#123;background-color: red&#125;\"</span>;</div></pre></td></tr></table></figure>\n<!---\n### Creating a Custom Style Property\n\nIf you ever need to create a custom style property you can do so by taking these steps:\n\n#### Declare the Custom Style Property\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> styleProperty = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling/style-property\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> depObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\">exports.fontFamilyProperty = <span class=\"keyword\">new</span> styleProperty.Property(<span class=\"string\">\"fontFamily\"</span>, <span class=\"string\">\"font-family\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> depObservable.PropertyMetadata(<span class=\"literal\">undefined</span>, depObservable.PropertyMetadataOptions.AffectsMeasure),</div><div class=\"line\">    <span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> styleProperty = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling/style-property\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> depObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> fontFamilyProperty = <span class=\"keyword\">new</span> styleProperty.Property(<span class=\"string\">\"fontFamily\"</span>, <span class=\"string\">\"font-family\"</span>,</div><div class=\"line\">    <span class=\"keyword\">new</span> depObservable.PropertyMetadata(<span class=\"literal\">undefined</span>, depObservable.PropertyMetadataOptions.AffectsMeasure),</div><div class=\"line\">    <span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<p>Notice that style properties differ from normal properties. In fact the <code>styleProperty.Property</code> class inherits from <code>depObservable.Property</code> and adds the option for setting the property using CSS (the constructor’s second parameter).</p>\n<h4 id=\"Register-a-Handler-for-the-Custom-Property\"><a href=\"#Register-a-Handler-for-the-Custom-Property\" class=\"headerlink\" title=\"Register a Handler for the Custom Property\"></a>Register a Handler for the Custom Property</h4><p>The second step is to register a handler object (<code>StylePropertyChangedHandler</code>) that synchronizes the property value and the underlying native object. To create the handler you provide methods for <strong>setting</strong>, <strong>resetting</strong>, and <strong>getting the native object</strong>. The set method sets a value to the native object. The reset method restores the default value of the native object. The final method takes the default value.</p>\n<p>For convenience, the code can be wrapped in a class called <code>Styler</code> that inherits an interface (currently solely for better readability) also called <code>Styler</code>. It has a single method that implements <code>registerHandlers</code>, where you register handlers for all properties defined in Styler.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> styles = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> MyTextViewStyler = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyTextViewStyler</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    MyTextViewStyler.setFontFamilyProperty = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view, newValue</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            view.android.setTypeface(android.graphics.Typeface.create(newValue,</div><div class=\"line\">              android.graphics.Typeface.NORMAL));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> fontSize = view._nativeView.titleLabel.font.pointSize;</div><div class=\"line\">            view._nativeView.titleLabel.font = UIFont.fontWithNameSize(newValue, fontSize);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    MyTextViewStyler.resetFontFamilyProperty = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view, nativeValue</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            view.android.setTypeface(android.graphics.Typeface.create(nativeValue,</div><div class=\"line\">              android.graphics.Typeface.NORMAL));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> fontSize = view._nativeView.titleLabel.font.pointSize;</div><div class=\"line\">            view._nativeView.titleLabel.font = UIFont.fontWithNameSize(nativeValue, fontSize);</div><div class=\"line\">            ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    MyTextViewStyler.registerHandlers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        styles.stylers.registerHandler(exports.fontFamilyProperty,</div><div class=\"line\">          <span class=\"keyword\">new</span> styles.stylers.StylePropertyChangedHandler(MyTextViewStyler.setFontFamilyProperty,</div><div class=\"line\">          MyTextViewStyler.resetFontFamilyProperty, MyTextViewStyler.getNativeFontFamilyValue), <span class=\"string\">\"MyButton\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    MyTextViewStyler.getNativeFontFamilyValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> view.android.getTypeface();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> view._nativeView.titleLabel.font.fontName;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> MyTextViewStyler;</div><div class=\"line\">&#125;)();</div><div class=\"line\">exports.MyTextViewStyler = MyTextViewStyler;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> styles = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyTextViewStyler <span class=\"keyword\">implements</span> styles.stylers.Styler &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> setFontFamilyProperty(view: view.View, newValue: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            (&lt;android.widget.TextView&gt;view.android).setTypeface(android.graphics.Typeface.create(newValue,</div><div class=\"line\">              android.graphics.Typeface.NORMAL));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> fontSize = (&lt;UIButton&gt;view._nativeView).titleLabel.font.pointSize;</div><div class=\"line\">            (&lt;UIButton&gt;view._nativeView).titleLabel.font = UIFont.fontWithNameSize(newValue, fontSize);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> resetFontFamilyProperty(view: view.View, nativeValue: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            (&lt;android.widget.TextView&gt;view.android).setTypeface(android.graphics.Typeface.create(nativeValue,</div><div class=\"line\">              android.graphics.Typeface.NORMAL));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> fontSize = (&lt;UIButton&gt;view._nativeView).titleLabel.font.pointSize;</div><div class=\"line\">            (&lt;UIButton&gt;view._nativeView).titleLabel.font = UIFont.fontWithNameSize(nativeValue, fontSize);;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> getNativeFontFamilyValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view: view.View</span>): <span class=\"title\">any</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.android) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (&lt;android.widget.TextView&gt;view.android).getTypeface();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.ios) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (&lt;UIButton&gt;view._nativeView).titleLabel.font.fontName;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> registerHandlers() &#123;</div><div class=\"line\">        styles.stylers.registerHandler(fontFamilyProperty, <span class=\"keyword\">new</span> styles.stylers.StylePropertyChangedHandler(</div><div class=\"line\">            MyTextViewStyler.setFontFamilyProperty,</div><div class=\"line\">            MyTextViewStyler.resetFontFamilyProperty,</div><div class=\"line\">            MyTextViewStyler.getNativeFontFamilyValue), <span class=\"string\">\"MyButton\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Important part of this class is the call to the static method <code>styles.stylers.registerHandler</code> which registers <code>styles.stylers.StylePropertyChangedHandler</code> with a property. The third optional parameter indicates objects of what class is to react to a change in the property value. Derived classes also receive the same behaviour.</p>\n<h4 id=\"Use-the-New-Custom-Property\"><a href=\"#Use-the-New-Custom-Property\" class=\"headerlink\" title=\"Use the New Custom Property\"></a>Use the New Custom Property</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> stackLayoutDef = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/layouts/stack-layout\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> MyButton = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    __extends(MyButton, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyButton</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> MyButton;</div><div class=\"line\">&#125;)(buttonModule.Button);</div><div class=\"line\">exports.MyButton = MyButton;</div><div class=\"line\">MyTextViewStyler.registerHandlers();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPage</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> layout = <span class=\"keyword\">new</span> stackLayoutDef.StackLayout();</div><div class=\"line\">    <span class=\"keyword\">var</span> btn = <span class=\"keyword\">new</span> MyButton();</div><div class=\"line\">    btn.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    btn.id = <span class=\"string\">\"btn\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> btn1 = <span class=\"keyword\">new</span> MyButton();</div><div class=\"line\">    btn1.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    btn1.id = <span class=\"string\">\"btn1\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> btn2 = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">    btn2.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    layout.addChild(btn);</div><div class=\"line\">    layout.addChild(btn1);</div><div class=\"line\">    layout.addChild(btn2);</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pages.Page();</div><div class=\"line\">    page.css = <span class=\"string\">\"#btn &#123;font-family: Courier New&#125; #btn1 &#123;font-family: Times New Roman&#125; #btn2 &#123;color: yellow&#125;\"</span>;</div><div class=\"line\">    page.content = layout;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.createPage = createPage;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> stackLayoutDef = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/layouts/stack-layout\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> buttonModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyButton extends buttonModule.Button &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyTextViewStyler.registerHandlers();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPage</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> layout = <span class=\"keyword\">new</span> stackLayoutDef.StackLayout();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> btn = <span class=\"keyword\">new</span> MyButton();</div><div class=\"line\">    btn.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    btn.id = <span class=\"string\">\"btn\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> btn1 = <span class=\"keyword\">new</span> MyButton();</div><div class=\"line\">    btn1.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\">    btn1.id = <span class=\"string\">\"btn1\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> btn2 = <span class=\"keyword\">new</span> buttonModule.Button();</div><div class=\"line\">    btn2.text = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</div><div class=\"line\"></div><div class=\"line\">    layout.addChild(btn);</div><div class=\"line\">    layout.addChild(btn1);</div><div class=\"line\">    layout.addChild(btn2);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> pages.Page();</div><div class=\"line\">    page.css = <span class=\"string\">\"#btn &#123;font-family: Courier New&#125; #btn1 &#123;font-family: Times New Roman&#125; #btn2 &#123;color: yellow&#125;\"</span>;</div><div class=\"line\">    page.content = layout;</div><div class=\"line\">    <span class=\"keyword\">return</span> page;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>–&gt;</p>\n"},{"title":"Integrating Third-Party Components","description":"Integrating vanilla NativeScript UI components in Angular","position":1,"slug":"angular-third-party","environment":"angular","_content":"\n# Integrating Third-Party Components\n\n0. [Overview](#overview)\n1. [Simple Elements](#simple-elements)\n2. [Views and Templates](#views-and-templates)\n3. [Tips and Tricks](#tips-and-tricks)\n\n# Overview\n\nThe standard NativeScript abstraction for a visual component is the `View` class in the \"ui/core/view\" package. It can be used to integrate with:\n\n* Native Android and iOS UI components. Plugins for those typically create a `View` facade for JavaScript code.\n* UI widgets written in JavaScript. Those too are exposed as `View` instances.\n\nAngular applications do not typically use NativeScript `View` objects directly since visual tree manipulations are best left to the \"renderer\" abstraction. The renderer provides great flexibility in building platform-independent UIs, but that comes with a price; using advanced NativeScript components may require some glue code.\n\n# Simple Elements\n\nAngular templates look a lot like HTML. To extend the browser analogy, we can think of visual components as DOM elements that get parsed into a visual tree. Each element name is mapped to a `View` class. The renderer uses that mapping to create component instances and set their properties according to attribute values.\n\nMost visual components have a simple markup interface: just a tag with zero or more attribute values. NativeScript already provides mappings for frameworks classes shipped with the `tns-core-modules` package, and lets you register additional mappings for other components.\n\nNow, suppose you have a third-party component named `SimpleTag`:\n\n{% raw %}{%snippet third-party-simple-view%}{% endraw %}\n\nThis is a fully-functional \"vanilla\" NativeScript component. To register it as a valid tag for Angular templates, you need to use the element registry API:\n\n{% raw %}{%snippet third-party-simple-view-registration%}{% endraw %}\n\nThat maps the `SimpleTag` class to the \"third-party-view\" tag name. You can now use it in templates:\n\n{% raw %}{%snippet third-party-simple-view-container%}{% endraw %}\n\n# Views and Templates\n\nSome advanced NativeScript components do not fit the HTML DOM metaphor. Usually those are components that allow you to customize their appearance or structure by passing preconfigured `View` instances or templates that get instantiated multiple times. The canonical example for that is a rich list view component that allows you to customize item templates.\n\nThe problem with accepting `View` instances as a means of configuration is that it makes client code platform-bound. Angular apps usually limit direct manipulations to the underlying visual tree, and the recommended approach is to keep any modifications to that tree in templates (using bindings) and custom directives. Customization using template properties has a similar issue: both the NativeScript UI foundation and Angular provide templating services, and those two are incompatible. That requires translating from one templating service to another. That is why the best approach when integrating such components is to provide a wrapper component or directive that creates an **Angular** \"view\" from an **Angular** template, and then passes it to the underlying component.\n\nTo illustrate this approach, we'll assume that we have a `<document-form>` component that displays a document with a form-like UI. It allows you to customize its title by setting a preconfigured title `View` instance.\n\n{% raw %}{%snippet third-party-document-form-component%}{% endraw %}\n\nTo support that on the Angular side, we need an Angular template nested inside the `document-form` tag. To make template discovery and manipulation easier, we associate it with a directive named `DocumentTitleDirective`. Here is what the client code looks like:\n\n{% raw %}{%snippet third-party-document-form-container%}{% endraw %}\n\nNote the standard Angular asterisk syntax, which is just shorthand for creating a template.\n\nThe actual integration code is hosted in the directive implementation. It works with the Angular `TemplateRef` instance and uses the `ViewContainer` API to create and attach a view:\n\n{% raw %}{%snippet third-party-template-directive%}{% endraw %}\n\nTwo things in the code above need mentioning:\n\n1. Instantiated Angular views have a collection of root nodes that usually contain whitespace \"text\" nodes. We ignore those and get the first \"real\" element.\n2. Since our parent component is higher in the component tree, we can use the DI system and inject a reference to it in the directive constructor.\n\n# Tips and Tricks\n\nWhile the following two approaches are not usually the best solutions, they can help while debugging application issues and/or speed up prototyping.\n\n## Register a Wrapper Tag\n\nYou can register any class for a given tag, and that gives you a valuable injection mechanism. You can wrap certain components in your own View instance and pass that to the `registerElement` API. (Hint: for easy wrapping, just inherit from the real view.) Here is what people have used that for:\n\n* Quickly prototype complex integrations by doing all configuration in plain JavaScript code.\n* Stub missing or not-yet-implemented components.\n* Debug or mock component initialization by passing a recording object.\n\n## Attach a Directive\n\nThis approach is similar to the wrapper tag one since it is aimed at doing all component customization in code. Any directive can get a reference to its host tag by declaring an `ElementRef` constructor parameter and get the NativeScript `View` from that via the `ElementRef.nativeElement` property.\n\nThe directive approach is especially useful when trying to build a cross-platform solution that shares code with a web application since you can provide a different directive implementation in the web app. Directives compose really well too &mdash; you can split different parts of the integration code in different directives and apply more than one directive per component. \n\n# Summary\n\nThird-party NativeScript components are not automatically integrated in Angular applications, but doing that is a straightforward task. Most libraries need a couple of `registerElement` calls and some of them conveniently ship a module that client code can `require` and have the registration happen automatically.\n","source":"plugins/angular-third-party.md","raw":"---\ntitle: Integrating Third-Party Components\ndescription: Integrating vanilla NativeScript UI components in Angular\nposition: 1\nslug: angular-third-party\nenvironment: angular\n---\n\n# Integrating Third-Party Components\n\n0. [Overview](#overview)\n1. [Simple Elements](#simple-elements)\n2. [Views and Templates](#views-and-templates)\n3. [Tips and Tricks](#tips-and-tricks)\n\n# Overview\n\nThe standard NativeScript abstraction for a visual component is the `View` class in the \"ui/core/view\" package. It can be used to integrate with:\n\n* Native Android and iOS UI components. Plugins for those typically create a `View` facade for JavaScript code.\n* UI widgets written in JavaScript. Those too are exposed as `View` instances.\n\nAngular applications do not typically use NativeScript `View` objects directly since visual tree manipulations are best left to the \"renderer\" abstraction. The renderer provides great flexibility in building platform-independent UIs, but that comes with a price; using advanced NativeScript components may require some glue code.\n\n# Simple Elements\n\nAngular templates look a lot like HTML. To extend the browser analogy, we can think of visual components as DOM elements that get parsed into a visual tree. Each element name is mapped to a `View` class. The renderer uses that mapping to create component instances and set their properties according to attribute values.\n\nMost visual components have a simple markup interface: just a tag with zero or more attribute values. NativeScript already provides mappings for frameworks classes shipped with the `tns-core-modules` package, and lets you register additional mappings for other components.\n\nNow, suppose you have a third-party component named `SimpleTag`:\n\n{% raw %}{%snippet third-party-simple-view%}{% endraw %}\n\nThis is a fully-functional \"vanilla\" NativeScript component. To register it as a valid tag for Angular templates, you need to use the element registry API:\n\n{% raw %}{%snippet third-party-simple-view-registration%}{% endraw %}\n\nThat maps the `SimpleTag` class to the \"third-party-view\" tag name. You can now use it in templates:\n\n{% raw %}{%snippet third-party-simple-view-container%}{% endraw %}\n\n# Views and Templates\n\nSome advanced NativeScript components do not fit the HTML DOM metaphor. Usually those are components that allow you to customize their appearance or structure by passing preconfigured `View` instances or templates that get instantiated multiple times. The canonical example for that is a rich list view component that allows you to customize item templates.\n\nThe problem with accepting `View` instances as a means of configuration is that it makes client code platform-bound. Angular apps usually limit direct manipulations to the underlying visual tree, and the recommended approach is to keep any modifications to that tree in templates (using bindings) and custom directives. Customization using template properties has a similar issue: both the NativeScript UI foundation and Angular provide templating services, and those two are incompatible. That requires translating from one templating service to another. That is why the best approach when integrating such components is to provide a wrapper component or directive that creates an **Angular** \"view\" from an **Angular** template, and then passes it to the underlying component.\n\nTo illustrate this approach, we'll assume that we have a `<document-form>` component that displays a document with a form-like UI. It allows you to customize its title by setting a preconfigured title `View` instance.\n\n{% raw %}{%snippet third-party-document-form-component%}{% endraw %}\n\nTo support that on the Angular side, we need an Angular template nested inside the `document-form` tag. To make template discovery and manipulation easier, we associate it with a directive named `DocumentTitleDirective`. Here is what the client code looks like:\n\n{% raw %}{%snippet third-party-document-form-container%}{% endraw %}\n\nNote the standard Angular asterisk syntax, which is just shorthand for creating a template.\n\nThe actual integration code is hosted in the directive implementation. It works with the Angular `TemplateRef` instance and uses the `ViewContainer` API to create and attach a view:\n\n{% raw %}{%snippet third-party-template-directive%}{% endraw %}\n\nTwo things in the code above need mentioning:\n\n1. Instantiated Angular views have a collection of root nodes that usually contain whitespace \"text\" nodes. We ignore those and get the first \"real\" element.\n2. Since our parent component is higher in the component tree, we can use the DI system and inject a reference to it in the directive constructor.\n\n# Tips and Tricks\n\nWhile the following two approaches are not usually the best solutions, they can help while debugging application issues and/or speed up prototyping.\n\n## Register a Wrapper Tag\n\nYou can register any class for a given tag, and that gives you a valuable injection mechanism. You can wrap certain components in your own View instance and pass that to the `registerElement` API. (Hint: for easy wrapping, just inherit from the real view.) Here is what people have used that for:\n\n* Quickly prototype complex integrations by doing all configuration in plain JavaScript code.\n* Stub missing or not-yet-implemented components.\n* Debug or mock component initialization by passing a recording object.\n\n## Attach a Directive\n\nThis approach is similar to the wrapper tag one since it is aimed at doing all component customization in code. Any directive can get a reference to its host tag by declaring an `ElementRef` constructor parameter and get the NativeScript `View` from that via the `ElementRef.nativeElement` property.\n\nThe directive approach is especially useful when trying to build a cross-platform solution that shares code with a web application since you can provide a different directive implementation in the web app. Directives compose really well too &mdash; you can split different parts of the integration code in different directives and apply more than one directive per component. \n\n# Summary\n\nThird-party NativeScript components are not automatically integrated in Angular applications, but doing that is a straightforward task. Most libraries need a couple of `registerElement` calls and some of them conveniently ship a module that client code can `require` and have the registration happen automatically.\n","date":"2016-08-26T21:05:54.450Z","updated":"2016-08-26T21:05:54.450Z","path":"plugins/angular-third-party.html","comments":1,"layout":"page","_id":"cisn95c6r000ewsl0at5dm1wn","content":"<h1 id=\"Integrating-Third-Party-Components\"><a href=\"#Integrating-Third-Party-Components\" class=\"headerlink\" title=\"Integrating Third-Party Components\"></a>Integrating Third-Party Components</h1><ol>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#simple-elements\">Simple Elements</a></li>\n<li><a href=\"#views-and-templates\">Views and Templates</a></li>\n<li><a href=\"#tips-and-tricks\">Tips and Tricks</a></li>\n</ol>\n<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>The standard NativeScript abstraction for a visual component is the <code>View</code> class in the “ui/core/view” package. It can be used to integrate with:</p>\n<ul>\n<li>Native Android and iOS UI components. Plugins for those typically create a <code>View</code> facade for JavaScript code.</li>\n<li>UI widgets written in JavaScript. Those too are exposed as <code>View</code> instances.</li>\n</ul>\n<p>Angular applications do not typically use NativeScript <code>View</code> objects directly since visual tree manipulations are best left to the “renderer” abstraction. The renderer provides great flexibility in building platform-independent UIs, but that comes with a price; using advanced NativeScript components may require some glue code.</p>\n<h1 id=\"Simple-Elements\"><a href=\"#Simple-Elements\" class=\"headerlink\" title=\"Simple Elements\"></a>Simple Elements</h1><p>Angular templates look a lot like HTML. To extend the browser analogy, we can think of visual components as DOM elements that get parsed into a visual tree. Each element name is mapped to a <code>View</code> class. The renderer uses that mapping to create component instances and set their properties according to attribute values.</p>\n<p>Most visual components have a simple markup interface: just a tag with zero or more attribute values. NativeScript already provides mappings for frameworks classes shipped with the <code>tns-core-modules</code> package, and lets you register additional mappings for other components.</p>\n<p>Now, suppose you have a third-party component named <code>SimpleTag</code>:</p>\n{%snippet third-party-simple-view%}\n<p>This is a fully-functional “vanilla” NativeScript component. To register it as a valid tag for Angular templates, you need to use the element registry API:</p>\n{%snippet third-party-simple-view-registration%}\n<p>That maps the <code>SimpleTag</code> class to the “third-party-view” tag name. You can now use it in templates:</p>\n{%snippet third-party-simple-view-container%}\n<h1 id=\"Views-and-Templates\"><a href=\"#Views-and-Templates\" class=\"headerlink\" title=\"Views and Templates\"></a>Views and Templates</h1><p>Some advanced NativeScript components do not fit the HTML DOM metaphor. Usually those are components that allow you to customize their appearance or structure by passing preconfigured <code>View</code> instances or templates that get instantiated multiple times. The canonical example for that is a rich list view component that allows you to customize item templates.</p>\n<p>The problem with accepting <code>View</code> instances as a means of configuration is that it makes client code platform-bound. Angular apps usually limit direct manipulations to the underlying visual tree, and the recommended approach is to keep any modifications to that tree in templates (using bindings) and custom directives. Customization using template properties has a similar issue: both the NativeScript UI foundation and Angular provide templating services, and those two are incompatible. That requires translating from one templating service to another. That is why the best approach when integrating such components is to provide a wrapper component or directive that creates an <strong>Angular</strong> “view” from an <strong>Angular</strong> template, and then passes it to the underlying component.</p>\n<p>To illustrate this approach, we’ll assume that we have a <code>&lt;document-form&gt;</code> component that displays a document with a form-like UI. It allows you to customize its title by setting a preconfigured title <code>View</code> instance.</p>\n{%snippet third-party-document-form-component%}\n<p>To support that on the Angular side, we need an Angular template nested inside the <code>document-form</code> tag. To make template discovery and manipulation easier, we associate it with a directive named <code>DocumentTitleDirective</code>. Here is what the client code looks like:</p>\n{%snippet third-party-document-form-container%}\n<p>Note the standard Angular asterisk syntax, which is just shorthand for creating a template.</p>\n<p>The actual integration code is hosted in the directive implementation. It works with the Angular <code>TemplateRef</code> instance and uses the <code>ViewContainer</code> API to create and attach a view:</p>\n{%snippet third-party-template-directive%}\n<p>Two things in the code above need mentioning:</p>\n<ol>\n<li>Instantiated Angular views have a collection of root nodes that usually contain whitespace “text” nodes. We ignore those and get the first “real” element.</li>\n<li>Since our parent component is higher in the component tree, we can use the DI system and inject a reference to it in the directive constructor.</li>\n</ol>\n<h1 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h1><p>While the following two approaches are not usually the best solutions, they can help while debugging application issues and/or speed up prototyping.</p>\n<h2 id=\"Register-a-Wrapper-Tag\"><a href=\"#Register-a-Wrapper-Tag\" class=\"headerlink\" title=\"Register a Wrapper Tag\"></a>Register a Wrapper Tag</h2><p>You can register any class for a given tag, and that gives you a valuable injection mechanism. You can wrap certain components in your own View instance and pass that to the <code>registerElement</code> API. (Hint: for easy wrapping, just inherit from the real view.) Here is what people have used that for:</p>\n<ul>\n<li>Quickly prototype complex integrations by doing all configuration in plain JavaScript code.</li>\n<li>Stub missing or not-yet-implemented components.</li>\n<li>Debug or mock component initialization by passing a recording object.</li>\n</ul>\n<h2 id=\"Attach-a-Directive\"><a href=\"#Attach-a-Directive\" class=\"headerlink\" title=\"Attach a Directive\"></a>Attach a Directive</h2><p>This approach is similar to the wrapper tag one since it is aimed at doing all component customization in code. Any directive can get a reference to its host tag by declaring an <code>ElementRef</code> constructor parameter and get the NativeScript <code>View</code> from that via the <code>ElementRef.nativeElement</code> property.</p>\n<p>The directive approach is especially useful when trying to build a cross-platform solution that shares code with a web application since you can provide a different directive implementation in the web app. Directives compose really well too &mdash; you can split different parts of the integration code in different directives and apply more than one directive per component. </p>\n<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><p>Third-party NativeScript components are not automatically integrated in Angular applications, but doing that is a straightforward task. Most libraries need a couple of <code>registerElement</code> calls and some of them conveniently ship a module that client code can <code>require</code> and have the registration happen automatically.</p>\n","excerpt":"","more":"<h1 id=\"Integrating-Third-Party-Components\"><a href=\"#Integrating-Third-Party-Components\" class=\"headerlink\" title=\"Integrating Third-Party Components\"></a>Integrating Third-Party Components</h1><ol>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#simple-elements\">Simple Elements</a></li>\n<li><a href=\"#views-and-templates\">Views and Templates</a></li>\n<li><a href=\"#tips-and-tricks\">Tips and Tricks</a></li>\n</ol>\n<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>The standard NativeScript abstraction for a visual component is the <code>View</code> class in the “ui/core/view” package. It can be used to integrate with:</p>\n<ul>\n<li>Native Android and iOS UI components. Plugins for those typically create a <code>View</code> facade for JavaScript code.</li>\n<li>UI widgets written in JavaScript. Those too are exposed as <code>View</code> instances.</li>\n</ul>\n<p>Angular applications do not typically use NativeScript <code>View</code> objects directly since visual tree manipulations are best left to the “renderer” abstraction. The renderer provides great flexibility in building platform-independent UIs, but that comes with a price; using advanced NativeScript components may require some glue code.</p>\n<h1 id=\"Simple-Elements\"><a href=\"#Simple-Elements\" class=\"headerlink\" title=\"Simple Elements\"></a>Simple Elements</h1><p>Angular templates look a lot like HTML. To extend the browser analogy, we can think of visual components as DOM elements that get parsed into a visual tree. Each element name is mapped to a <code>View</code> class. The renderer uses that mapping to create component instances and set their properties according to attribute values.</p>\n<p>Most visual components have a simple markup interface: just a tag with zero or more attribute values. NativeScript already provides mappings for frameworks classes shipped with the <code>tns-core-modules</code> package, and lets you register additional mappings for other components.</p>\n<p>Now, suppose you have a third-party component named <code>SimpleTag</code>:</p>\n{%snippet third-party-simple-view%}\n<p>This is a fully-functional “vanilla” NativeScript component. To register it as a valid tag for Angular templates, you need to use the element registry API:</p>\n{%snippet third-party-simple-view-registration%}\n<p>That maps the <code>SimpleTag</code> class to the “third-party-view” tag name. You can now use it in templates:</p>\n{%snippet third-party-simple-view-container%}\n<h1 id=\"Views-and-Templates\"><a href=\"#Views-and-Templates\" class=\"headerlink\" title=\"Views and Templates\"></a>Views and Templates</h1><p>Some advanced NativeScript components do not fit the HTML DOM metaphor. Usually those are components that allow you to customize their appearance or structure by passing preconfigured <code>View</code> instances or templates that get instantiated multiple times. The canonical example for that is a rich list view component that allows you to customize item templates.</p>\n<p>The problem with accepting <code>View</code> instances as a means of configuration is that it makes client code platform-bound. Angular apps usually limit direct manipulations to the underlying visual tree, and the recommended approach is to keep any modifications to that tree in templates (using bindings) and custom directives. Customization using template properties has a similar issue: both the NativeScript UI foundation and Angular provide templating services, and those two are incompatible. That requires translating from one templating service to another. That is why the best approach when integrating such components is to provide a wrapper component or directive that creates an <strong>Angular</strong> “view” from an <strong>Angular</strong> template, and then passes it to the underlying component.</p>\n<p>To illustrate this approach, we’ll assume that we have a <code>&lt;document-form&gt;</code> component that displays a document with a form-like UI. It allows you to customize its title by setting a preconfigured title <code>View</code> instance.</p>\n{%snippet third-party-document-form-component%}\n<p>To support that on the Angular side, we need an Angular template nested inside the <code>document-form</code> tag. To make template discovery and manipulation easier, we associate it with a directive named <code>DocumentTitleDirective</code>. Here is what the client code looks like:</p>\n{%snippet third-party-document-form-container%}\n<p>Note the standard Angular asterisk syntax, which is just shorthand for creating a template.</p>\n<p>The actual integration code is hosted in the directive implementation. It works with the Angular <code>TemplateRef</code> instance and uses the <code>ViewContainer</code> API to create and attach a view:</p>\n{%snippet third-party-template-directive%}\n<p>Two things in the code above need mentioning:</p>\n<ol>\n<li>Instantiated Angular views have a collection of root nodes that usually contain whitespace “text” nodes. We ignore those and get the first “real” element.</li>\n<li>Since our parent component is higher in the component tree, we can use the DI system and inject a reference to it in the directive constructor.</li>\n</ol>\n<h1 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h1><p>While the following two approaches are not usually the best solutions, they can help while debugging application issues and/or speed up prototyping.</p>\n<h2 id=\"Register-a-Wrapper-Tag\"><a href=\"#Register-a-Wrapper-Tag\" class=\"headerlink\" title=\"Register a Wrapper Tag\"></a>Register a Wrapper Tag</h2><p>You can register any class for a given tag, and that gives you a valuable injection mechanism. You can wrap certain components in your own View instance and pass that to the <code>registerElement</code> API. (Hint: for easy wrapping, just inherit from the real view.) Here is what people have used that for:</p>\n<ul>\n<li>Quickly prototype complex integrations by doing all configuration in plain JavaScript code.</li>\n<li>Stub missing or not-yet-implemented components.</li>\n<li>Debug or mock component initialization by passing a recording object.</li>\n</ul>\n<h2 id=\"Attach-a-Directive\"><a href=\"#Attach-a-Directive\" class=\"headerlink\" title=\"Attach a Directive\"></a>Attach a Directive</h2><p>This approach is similar to the wrapper tag one since it is aimed at doing all component customization in code. Any directive can get a reference to its host tag by declaring an <code>ElementRef</code> constructor parameter and get the NativeScript <code>View</code> from that via the <code>ElementRef.nativeElement</code> property.</p>\n<p>The directive approach is especially useful when trying to build a cross-platform solution that shares code with a web application since you can provide a different directive implementation in the web app. Directives compose really well too &mdash; you can split different parts of the integration code in different directives and apply more than one directive per component. </p>\n<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><p>Third-party NativeScript components are not automatically integrated in Angular applications, but doing that is a straightforward task. Most libraries need a couple of <code>registerElement</code> calls and some of them conveniently ship a module that client code can <code>require</code> and have the registration happen automatically.</p>\n"},{"title":"Camera","description":"NativeScript Documentation: Camera","position":2,"slug":"camera","previous_url":"/camera","_content":"\n#Camera\n\n## Overview\n\nAlmost every mobile application need an option to capture an image and then share it. NativeScript camera module is dedicated for the first part of the job (taking picture).\n\n### Using the camera module to take a picture\n\nUsing camera module is relative simple, however there are some points that need a little bit more explanation.\n\nIn order to use the camera module just require it like that:\n\n``` JavaScript\nvar cameraModule = require(\"camera\");\n```\n``` TypeScript\nimport cameraModule = require(\"camera\");\n```\n\nThen we are ready to use it:\n\n``` JavaScript\nvar imageModule = require(\"ui/image\");\ncameraModule.takePicture().then(function(picture) {\n\tconsole.log(\"Result is an image source instance\");\n\tvar image = new imageModule.Image();\n\timage.imageSource = picture;\n});\n```\n``` TypeScript\nimport imageModule = require(\"ui/image\");\ncameraModule.takePicture().then(picture => {\n\tconsole.log(\"Result is an image source instance\");\n\tvar image = new imageModule.Image();\n\timage.imageSource = picture;\n});\n```\n\nThe above code will start the native platform camera application. After taking the picture and tapping the button `Save` (Android) or `use image` (iOS) the promise will resolve the `then` part and image source will be set as `imageSource` of the `ui/image` control.\n\n> Note: Android specific - Android native camera application actually uses a file to store the image and then anybody (with granted access) could read the file and load the picture. By default NativeScript camera application uses a external files directory given by `Context.getExternalFilesDir(null)` to store a picture with name similar to `cameraPicture_ddmmyyyyHHMMSS.jpg`. The actual path to these files is `/sdcard/Android/data/applicationName/files/cameraPicture_ddmmyyyyHHMMSS.jpg`. Keep in mind that this file will not be deleted by camera module automatically, so developer must clear it out (if it is a critical manner). By default this directory will be deleted when the application is uninstalled.\n\n### Taking a memory efficient picture\n\nPrevious example shows how to take a picture using the NativeScript camera module. However it takes a huge image (even mid-level devices has a 5MP camera which results in a image 2580x2048 which in bitmap means approximately 15 MB). In many cases we don't need such huge picture to show an image with 100x100 size, so taking a big picture is just a waste of memory. Camera module takePicture() method accepts an option parameter that could help in that case. With that option parameter we could set some properties like:\n\n* width - The desired width of the picture (in device independent pixels).\n* height - The desired height of the picture (in device independent pixels).\n* keepAspectRatio - A boolean parameter that indicates if aspect ratio should be kept.\n\nWhat does `device independent pixels` mean? NativeScript layout mechanism uses device independent pixels when measuring UI controls. This allows to declare one layout and this layout will look similar to all devices (no matter device display resolution). In order to get a proper image quality for high resolution devices (like iPhone retina and Android Full HD), camera module will return an image with bigger dimensions. For example if we request an image 100x100 on iPhone 6 actual image will be 200x200 (since its display density factor is 2 -> 100*2x100*2).\nSetting `keepAspectRatio` property could result in a different than requested width or height. Camera module will return an image with correct aspect ratio but generally only one (from width and height) will be same as requested, the other value will be calculated in order to preserve the aspect of the original image.\n\nUsing the options parameter:\n\n``` JavaScript\nvar imageModule = require(\"ui/image\");\ncameraModule.takePicture({width: 300, height: 300, keepAspectRatio: true}).then(function(picture) {\n\tconsole.log(\"Result is an image source instance\");\n\tvar image = new imageModule.Image();\n\timage.imageSource = picture;\n});\n```\n``` TypeScript\nimport imageModule = require(\"ui/image\");\ncameraModule.takePicture({width: 300, height: 300, keepAspectRatio: true}).then(picture => {\n\tconsole.log(\"Result is an image source instance\");\n\tvar image = new imageModule.Image();\n\timage.imageSource = picture;\n});\n```\n","source":"hardware/camera.md","raw":"---\ntitle: Camera\ndescription: \"NativeScript Documentation: Camera\"\nposition: 2\nslug: camera\nprevious_url: /camera\n---\n\n#Camera\n\n## Overview\n\nAlmost every mobile application need an option to capture an image and then share it. NativeScript camera module is dedicated for the first part of the job (taking picture).\n\n### Using the camera module to take a picture\n\nUsing camera module is relative simple, however there are some points that need a little bit more explanation.\n\nIn order to use the camera module just require it like that:\n\n``` JavaScript\nvar cameraModule = require(\"camera\");\n```\n``` TypeScript\nimport cameraModule = require(\"camera\");\n```\n\nThen we are ready to use it:\n\n``` JavaScript\nvar imageModule = require(\"ui/image\");\ncameraModule.takePicture().then(function(picture) {\n\tconsole.log(\"Result is an image source instance\");\n\tvar image = new imageModule.Image();\n\timage.imageSource = picture;\n});\n```\n``` TypeScript\nimport imageModule = require(\"ui/image\");\ncameraModule.takePicture().then(picture => {\n\tconsole.log(\"Result is an image source instance\");\n\tvar image = new imageModule.Image();\n\timage.imageSource = picture;\n});\n```\n\nThe above code will start the native platform camera application. After taking the picture and tapping the button `Save` (Android) or `use image` (iOS) the promise will resolve the `then` part and image source will be set as `imageSource` of the `ui/image` control.\n\n> Note: Android specific - Android native camera application actually uses a file to store the image and then anybody (with granted access) could read the file and load the picture. By default NativeScript camera application uses a external files directory given by `Context.getExternalFilesDir(null)` to store a picture with name similar to `cameraPicture_ddmmyyyyHHMMSS.jpg`. The actual path to these files is `/sdcard/Android/data/applicationName/files/cameraPicture_ddmmyyyyHHMMSS.jpg`. Keep in mind that this file will not be deleted by camera module automatically, so developer must clear it out (if it is a critical manner). By default this directory will be deleted when the application is uninstalled.\n\n### Taking a memory efficient picture\n\nPrevious example shows how to take a picture using the NativeScript camera module. However it takes a huge image (even mid-level devices has a 5MP camera which results in a image 2580x2048 which in bitmap means approximately 15 MB). In many cases we don't need such huge picture to show an image with 100x100 size, so taking a big picture is just a waste of memory. Camera module takePicture() method accepts an option parameter that could help in that case. With that option parameter we could set some properties like:\n\n* width - The desired width of the picture (in device independent pixels).\n* height - The desired height of the picture (in device independent pixels).\n* keepAspectRatio - A boolean parameter that indicates if aspect ratio should be kept.\n\nWhat does `device independent pixels` mean? NativeScript layout mechanism uses device independent pixels when measuring UI controls. This allows to declare one layout and this layout will look similar to all devices (no matter device display resolution). In order to get a proper image quality for high resolution devices (like iPhone retina and Android Full HD), camera module will return an image with bigger dimensions. For example if we request an image 100x100 on iPhone 6 actual image will be 200x200 (since its display density factor is 2 -> 100*2x100*2).\nSetting `keepAspectRatio` property could result in a different than requested width or height. Camera module will return an image with correct aspect ratio but generally only one (from width and height) will be same as requested, the other value will be calculated in order to preserve the aspect of the original image.\n\nUsing the options parameter:\n\n``` JavaScript\nvar imageModule = require(\"ui/image\");\ncameraModule.takePicture({width: 300, height: 300, keepAspectRatio: true}).then(function(picture) {\n\tconsole.log(\"Result is an image source instance\");\n\tvar image = new imageModule.Image();\n\timage.imageSource = picture;\n});\n```\n``` TypeScript\nimport imageModule = require(\"ui/image\");\ncameraModule.takePicture({width: 300, height: 300, keepAspectRatio: true}).then(picture => {\n\tconsole.log(\"Result is an image source instance\");\n\tvar image = new imageModule.Image();\n\timage.imageSource = picture;\n});\n```\n","date":"2016-08-26T21:05:52.885Z","updated":"2016-08-26T21:05:52.885Z","path":"hardware/camera.html","comments":1,"layout":"page","_id":"cisn95c6t000fwsl03dz3stw1","content":"<p>#Camera</p>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>Almost every mobile application need an option to capture an image and then share it. NativeScript camera module is dedicated for the first part of the job (taking picture).</p>\n<h3 id=\"Using-the-camera-module-to-take-a-picture\"><a href=\"#Using-the-camera-module-to-take-a-picture\" class=\"headerlink\" title=\"Using the camera module to take a picture\"></a>Using the camera module to take a picture</h3><p>Using camera module is relative simple, however there are some points that need a little bit more explanation.</p>\n<p>In order to use the camera module just require it like that:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cameraModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"camera\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> cameraModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"camera\"</span>);</div></pre></td></tr></table></figure>\n<p>Then we are ready to use it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> imageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/image\"</span>);</div><div class=\"line\">cameraModule.takePicture().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">picture</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result is an image source instance\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">\timage.imageSource = picture;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> imageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/image\"</span>);</div><div class=\"line\">cameraModule.takePicture().then(picture =&gt; &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result is an image source instance\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">\timage.imageSource = picture;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>The above code will start the native platform camera application. After taking the picture and tapping the button <code>Save</code> (Android) or <code>use image</code> (iOS) the promise will resolve the <code>then</code> part and image source will be set as <code>imageSource</code> of the <code>ui/image</code> control.</p>\n<blockquote>\n<p>Note: Android specific - Android native camera application actually uses a file to store the image and then anybody (with granted access) could read the file and load the picture. By default NativeScript camera application uses a external files directory given by <code>Context.getExternalFilesDir(null)</code> to store a picture with name similar to <code>cameraPicture_ddmmyyyyHHMMSS.jpg</code>. The actual path to these files is <code>/sdcard/Android/data/applicationName/files/cameraPicture_ddmmyyyyHHMMSS.jpg</code>. Keep in mind that this file will not be deleted by camera module automatically, so developer must clear it out (if it is a critical manner). By default this directory will be deleted when the application is uninstalled.</p>\n</blockquote>\n<h3 id=\"Taking-a-memory-efficient-picture\"><a href=\"#Taking-a-memory-efficient-picture\" class=\"headerlink\" title=\"Taking a memory efficient picture\"></a>Taking a memory efficient picture</h3><p>Previous example shows how to take a picture using the NativeScript camera module. However it takes a huge image (even mid-level devices has a 5MP camera which results in a image 2580x2048 which in bitmap means approximately 15 MB). In many cases we don’t need such huge picture to show an image with 100x100 size, so taking a big picture is just a waste of memory. Camera module takePicture() method accepts an option parameter that could help in that case. With that option parameter we could set some properties like:</p>\n<ul>\n<li>width - The desired width of the picture (in device independent pixels).</li>\n<li>height - The desired height of the picture (in device independent pixels).</li>\n<li>keepAspectRatio - A boolean parameter that indicates if aspect ratio should be kept.</li>\n</ul>\n<p>What does <code>device independent pixels</code> mean? NativeScript layout mechanism uses device independent pixels when measuring UI controls. This allows to declare one layout and this layout will look similar to all devices (no matter device display resolution). In order to get a proper image quality for high resolution devices (like iPhone retina and Android Full HD), camera module will return an image with bigger dimensions. For example if we request an image 100x100 on iPhone 6 actual image will be 200x200 (since its display density factor is 2 -&gt; 100<em>2x100</em>2).\nSetting <code>keepAspectRatio</code> property could result in a different than requested width or height. Camera module will return an image with correct aspect ratio but generally only one (from width and height) will be same as requested, the other value will be calculated in order to preserve the aspect of the original image.</p>\n<p>Using the options parameter:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> imageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/image\"</span>);</div><div class=\"line\">cameraModule.takePicture(&#123;width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>, keepAspectRatio: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">picture</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result is an image source instance\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">\timage.imageSource = picture;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> imageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/image\"</span>);</div><div class=\"line\">cameraModule.takePicture(&#123;width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>, keepAspectRatio: <span class=\"literal\">true</span>&#125;).then(picture =&gt; &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result is an image source instance\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">\timage.imageSource = picture;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>#Camera</p>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>Almost every mobile application need an option to capture an image and then share it. NativeScript camera module is dedicated for the first part of the job (taking picture).</p>\n<h3 id=\"Using-the-camera-module-to-take-a-picture\"><a href=\"#Using-the-camera-module-to-take-a-picture\" class=\"headerlink\" title=\"Using the camera module to take a picture\"></a>Using the camera module to take a picture</h3><p>Using camera module is relative simple, however there are some points that need a little bit more explanation.</p>\n<p>In order to use the camera module just require it like that:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cameraModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"camera\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> cameraModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"camera\"</span>);</div></pre></td></tr></table></figure>\n<p>Then we are ready to use it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> imageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/image\"</span>);</div><div class=\"line\">cameraModule.takePicture().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">picture</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result is an image source instance\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">\timage.imageSource = picture;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> imageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/image\"</span>);</div><div class=\"line\">cameraModule.takePicture().then(picture =&gt; &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result is an image source instance\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">\timage.imageSource = picture;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>The above code will start the native platform camera application. After taking the picture and tapping the button <code>Save</code> (Android) or <code>use image</code> (iOS) the promise will resolve the <code>then</code> part and image source will be set as <code>imageSource</code> of the <code>ui/image</code> control.</p>\n<blockquote>\n<p>Note: Android specific - Android native camera application actually uses a file to store the image and then anybody (with granted access) could read the file and load the picture. By default NativeScript camera application uses a external files directory given by <code>Context.getExternalFilesDir(null)</code> to store a picture with name similar to <code>cameraPicture_ddmmyyyyHHMMSS.jpg</code>. The actual path to these files is <code>/sdcard/Android/data/applicationName/files/cameraPicture_ddmmyyyyHHMMSS.jpg</code>. Keep in mind that this file will not be deleted by camera module automatically, so developer must clear it out (if it is a critical manner). By default this directory will be deleted when the application is uninstalled.</p>\n</blockquote>\n<h3 id=\"Taking-a-memory-efficient-picture\"><a href=\"#Taking-a-memory-efficient-picture\" class=\"headerlink\" title=\"Taking a memory efficient picture\"></a>Taking a memory efficient picture</h3><p>Previous example shows how to take a picture using the NativeScript camera module. However it takes a huge image (even mid-level devices has a 5MP camera which results in a image 2580x2048 which in bitmap means approximately 15 MB). In many cases we don’t need such huge picture to show an image with 100x100 size, so taking a big picture is just a waste of memory. Camera module takePicture() method accepts an option parameter that could help in that case. With that option parameter we could set some properties like:</p>\n<ul>\n<li>width - The desired width of the picture (in device independent pixels).</li>\n<li>height - The desired height of the picture (in device independent pixels).</li>\n<li>keepAspectRatio - A boolean parameter that indicates if aspect ratio should be kept.</li>\n</ul>\n<p>What does <code>device independent pixels</code> mean? NativeScript layout mechanism uses device independent pixels when measuring UI controls. This allows to declare one layout and this layout will look similar to all devices (no matter device display resolution). In order to get a proper image quality for high resolution devices (like iPhone retina and Android Full HD), camera module will return an image with bigger dimensions. For example if we request an image 100x100 on iPhone 6 actual image will be 200x200 (since its display density factor is 2 -&gt; 100<em>2x100</em>2).\nSetting <code>keepAspectRatio</code> property could result in a different than requested width or height. Camera module will return an image with correct aspect ratio but generally only one (from width and height) will be same as requested, the other value will be calculated in order to preserve the aspect of the original image.</p>\n<p>Using the options parameter:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> imageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/image\"</span>);</div><div class=\"line\">cameraModule.takePicture(&#123;width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>, keepAspectRatio: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">picture</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result is an image source instance\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">\timage.imageSource = picture;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> imageModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/image\"</span>);</div><div class=\"line\">cameraModule.takePicture(&#123;width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>, keepAspectRatio: <span class=\"literal\">true</span>&#125;).then(picture =&gt; &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result is an image source instance\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">\timage.imageSource = picture;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"Cocoapods","description":"How to work with geographical location data in NativeScript.","position":1,"slug":"location","previous_url":"/location","_content":"\n# Using CocoaPods\n\nWhen you develop for iOS, you can quickly add third-party libraries to your NativeScript projects via the [CocoaPods](https://cocoapods.org/) dependency manager.\n\nTo work with such libraries, you need to wrap them as a custom NativeScript plugin and add them to your project.\n\n * [Install CocoaPods](#install-cocoapods)\n * [Create CLI Project](#create-cli-project)\n * [Wrap the Library as NativeScript Plugin](#wrap-the-library-as-nativescript-plugin)\n * [Build the Project](#build-the-project)\n\n## Install CocoaPods\nYou need to install CocoaPods. If you haven't yet, you can do so by running:\n\n```bash\n$ sudo gem install cocoapods\n```\n> **NOTE:** All operations and code in this article are verified against CocoaPods 0.38.2.\n\nTo check your current version, run the following command.\n\n```bash\n$ pod --version\n```\n\nTo update CocoaPods, just run the installation command again.\n\n```\nsudo gem install cocoapods\n```\n\n## Create CLI Project\nTo start, create a project and add the iOS platform.\n\n```bash\n$ tns create MYCocoaPodsApp\n$ cd MYCocoaPodsApp\n$ tns platform add ios\n```\n\n## Wrap the Library as NativeScript Plugin\n\nFor more information about working with NativeScript plugins, click [here](PLUGINS.md).\n\n```bash\ncd ..\nmkdir my-plugin\ncd my-plugin\n```\n\nCreate a `package.json` file with the following content:\n\n```json\n{\n  \"name\": \"my-plugin\",\n  \"version\": \"0.0.1\",\n  \"nativescript\": {\n    \"platforms\": {\n      \"ios\": \"1.3.0\"\n    }\n  }\n}\n```\n\nCreate a [Podfile](https://guides.cocoapods.org/syntax/podfile.html) which describes the dependency to the library that you want to use. Move it to the `platforms/ios` folder.\n\n```\nmy-plugin/\n├── package.json\n└── platforms/\n    └── ios/\n        └── Podfile\n```\n\nPodfile:\n```\npod 'GoogleMaps'\n```\n\n## Install the Plugin\n\nNext, install the plugin:\n\n```bash\ntns plugin add ../my-plugin\n```\n\n> **NOTE:** Installing CocoaPods sets the deployment target of your app to iOS 8, if not already set to iOS 8 or later. This change is required because CocoaPods are installed as shared frameworks to ensure that all symbols are available at runtime.\n\n## Build the Project\n\n```bash\ntns build ios\n```\n\nThis modifies the `MYCocoaPodsApp.xcodeproj` and creates a workspace with the same name.\n\n> **IMPORTANT:** You will no longer be able to run the `xcodeproj` alone. NativeScript CLI will build the newly created workspace and produce the correct package.\n\n## Troubleshooting\n\nIn case of post-build linker errors, you might need to resolve missing dependencies to native frameworks required by the installed CocoaPod. For more information about how to create the required links, see the [build.xcconfig specification](PLUGINS.md#buildxcconfig-specification).\n","source":"plugins/cocoapods.md","raw":"---\ntitle: Cocoapods\ndescription: How to work with geographical location data in NativeScript.\nposition: 1\nslug: location\nprevious_url: /location\n---\n\n# Using CocoaPods\n\nWhen you develop for iOS, you can quickly add third-party libraries to your NativeScript projects via the [CocoaPods](https://cocoapods.org/) dependency manager.\n\nTo work with such libraries, you need to wrap them as a custom NativeScript plugin and add them to your project.\n\n * [Install CocoaPods](#install-cocoapods)\n * [Create CLI Project](#create-cli-project)\n * [Wrap the Library as NativeScript Plugin](#wrap-the-library-as-nativescript-plugin)\n * [Build the Project](#build-the-project)\n\n## Install CocoaPods\nYou need to install CocoaPods. If you haven't yet, you can do so by running:\n\n```bash\n$ sudo gem install cocoapods\n```\n> **NOTE:** All operations and code in this article are verified against CocoaPods 0.38.2.\n\nTo check your current version, run the following command.\n\n```bash\n$ pod --version\n```\n\nTo update CocoaPods, just run the installation command again.\n\n```\nsudo gem install cocoapods\n```\n\n## Create CLI Project\nTo start, create a project and add the iOS platform.\n\n```bash\n$ tns create MYCocoaPodsApp\n$ cd MYCocoaPodsApp\n$ tns platform add ios\n```\n\n## Wrap the Library as NativeScript Plugin\n\nFor more information about working with NativeScript plugins, click [here](PLUGINS.md).\n\n```bash\ncd ..\nmkdir my-plugin\ncd my-plugin\n```\n\nCreate a `package.json` file with the following content:\n\n```json\n{\n  \"name\": \"my-plugin\",\n  \"version\": \"0.0.1\",\n  \"nativescript\": {\n    \"platforms\": {\n      \"ios\": \"1.3.0\"\n    }\n  }\n}\n```\n\nCreate a [Podfile](https://guides.cocoapods.org/syntax/podfile.html) which describes the dependency to the library that you want to use. Move it to the `platforms/ios` folder.\n\n```\nmy-plugin/\n├── package.json\n└── platforms/\n    └── ios/\n        └── Podfile\n```\n\nPodfile:\n```\npod 'GoogleMaps'\n```\n\n## Install the Plugin\n\nNext, install the plugin:\n\n```bash\ntns plugin add ../my-plugin\n```\n\n> **NOTE:** Installing CocoaPods sets the deployment target of your app to iOS 8, if not already set to iOS 8 or later. This change is required because CocoaPods are installed as shared frameworks to ensure that all symbols are available at runtime.\n\n## Build the Project\n\n```bash\ntns build ios\n```\n\nThis modifies the `MYCocoaPodsApp.xcodeproj` and creates a workspace with the same name.\n\n> **IMPORTANT:** You will no longer be able to run the `xcodeproj` alone. NativeScript CLI will build the newly created workspace and produce the correct package.\n\n## Troubleshooting\n\nIn case of post-build linker errors, you might need to resolve missing dependencies to native frameworks required by the installed CocoaPod. For more information about how to create the required links, see the [build.xcconfig specification](PLUGINS.md#buildxcconfig-specification).\n","date":"2016-08-26T21:05:54.451Z","updated":"2016-08-26T21:05:54.451Z","path":"plugins/cocoapods.html","comments":1,"layout":"page","_id":"cisn95c6v000gwsl0etiefdrt","content":"<h1 id=\"Using-CocoaPods\"><a href=\"#Using-CocoaPods\" class=\"headerlink\" title=\"Using CocoaPods\"></a>Using CocoaPods</h1><p>When you develop for iOS, you can quickly add third-party libraries to your NativeScript projects via the <a href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"external\">CocoaPods</a> dependency manager.</p>\n<p>To work with such libraries, you need to wrap them as a custom NativeScript plugin and add them to your project.</p>\n<ul>\n<li><a href=\"#install-cocoapods\">Install CocoaPods</a></li>\n<li><a href=\"#create-cli-project\">Create CLI Project</a></li>\n<li><a href=\"#wrap-the-library-as-nativescript-plugin\">Wrap the Library as NativeScript Plugin</a></li>\n<li><a href=\"#build-the-project\">Build the Project</a></li>\n</ul>\n<h2 id=\"Install-CocoaPods\"><a href=\"#Install-CocoaPods\" class=\"headerlink\" title=\"Install CocoaPods\"></a>Install CocoaPods</h2><p>You need to install CocoaPods. If you haven’t yet, you can do so by running:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo gem install cocoapods</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>NOTE:</strong> All operations and code in this article are verified against CocoaPods 0.38.2.</p>\n</blockquote>\n<p>To check your current version, run the following command.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pod --version</div></pre></td></tr></table></figure>\n<p>To update CocoaPods, just run the installation command again.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods</div></pre></td></tr></table></figure>\n<h2 id=\"Create-CLI-Project\"><a href=\"#Create-CLI-Project\" class=\"headerlink\" title=\"Create CLI Project\"></a>Create CLI Project</h2><p>To start, create a project and add the iOS platform.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns create MYCocoaPodsApp</div><div class=\"line\">$ <span class=\"built_in\">cd</span> MYCocoaPodsApp</div><div class=\"line\">$ tns platform add ios</div></pre></td></tr></table></figure>\n<h2 id=\"Wrap-the-Library-as-NativeScript-Plugin\"><a href=\"#Wrap-the-Library-as-NativeScript-Plugin\" class=\"headerlink\" title=\"Wrap the Library as NativeScript Plugin\"></a>Wrap the Library as NativeScript Plugin</h2><p>For more information about working with NativeScript plugins, click <a href=\"PLUGINS.md\">here</a>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ..</div><div class=\"line\">mkdir my-plugin</div><div class=\"line\"><span class=\"built_in\">cd</span> my-plugin</div></pre></td></tr></table></figure>\n<p>Create a <code>package.json</code> file with the following content:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-plugin\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"nativescript\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"platforms\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"ios\"</span>: <span class=\"string\">\"1.3.0\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Create a <a href=\"https://guides.cocoapods.org/syntax/podfile.html\" target=\"_blank\" rel=\"external\">Podfile</a> which describes the dependency to the library that you want to use. Move it to the <code>platforms/ios</code> folder.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-plugin/</div><div class=\"line\">├── package.json</div><div class=\"line\">└── platforms/</div><div class=\"line\">    └── ios/</div><div class=\"line\">        └── Podfile</div></pre></td></tr></table></figure>\n<p>Podfile:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod &apos;GoogleMaps&apos;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Install-the-Plugin\"><a href=\"#Install-the-Plugin\" class=\"headerlink\" title=\"Install the Plugin\"></a>Install the Plugin</h2><p>Next, install the plugin:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add ../my-plugin</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>NOTE:</strong> Installing CocoaPods sets the deployment target of your app to iOS 8, if not already set to iOS 8 or later. This change is required because CocoaPods are installed as shared frameworks to ensure that all symbols are available at runtime.</p>\n</blockquote>\n<h2 id=\"Build-the-Project\"><a href=\"#Build-the-Project\" class=\"headerlink\" title=\"Build the Project\"></a>Build the Project</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns build ios</div></pre></td></tr></table></figure>\n<p>This modifies the <code>MYCocoaPodsApp.xcodeproj</code> and creates a workspace with the same name.</p>\n<blockquote>\n<p><strong>IMPORTANT:</strong> You will no longer be able to run the <code>xcodeproj</code> alone. NativeScript CLI will build the newly created workspace and produce the correct package.</p>\n</blockquote>\n<h2 id=\"Troubleshooting\"><a href=\"#Troubleshooting\" class=\"headerlink\" title=\"Troubleshooting\"></a>Troubleshooting</h2><p>In case of post-build linker errors, you might need to resolve missing dependencies to native frameworks required by the installed CocoaPod. For more information about how to create the required links, see the <a href=\"PLUGINS.md#buildxcconfig-specification\">build.xcconfig specification</a>.</p>\n","excerpt":"","more":"<h1 id=\"Using-CocoaPods\"><a href=\"#Using-CocoaPods\" class=\"headerlink\" title=\"Using CocoaPods\"></a>Using CocoaPods</h1><p>When you develop for iOS, you can quickly add third-party libraries to your NativeScript projects via the <a href=\"https://cocoapods.org/\">CocoaPods</a> dependency manager.</p>\n<p>To work with such libraries, you need to wrap them as a custom NativeScript plugin and add them to your project.</p>\n<ul>\n<li><a href=\"#install-cocoapods\">Install CocoaPods</a></li>\n<li><a href=\"#create-cli-project\">Create CLI Project</a></li>\n<li><a href=\"#wrap-the-library-as-nativescript-plugin\">Wrap the Library as NativeScript Plugin</a></li>\n<li><a href=\"#build-the-project\">Build the Project</a></li>\n</ul>\n<h2 id=\"Install-CocoaPods\"><a href=\"#Install-CocoaPods\" class=\"headerlink\" title=\"Install CocoaPods\"></a>Install CocoaPods</h2><p>You need to install CocoaPods. If you haven’t yet, you can do so by running:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo gem install cocoapods</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>NOTE:</strong> All operations and code in this article are verified against CocoaPods 0.38.2.</p>\n</blockquote>\n<p>To check your current version, run the following command.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pod --version</div></pre></td></tr></table></figure>\n<p>To update CocoaPods, just run the installation command again.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods</div></pre></td></tr></table></figure>\n<h2 id=\"Create-CLI-Project\"><a href=\"#Create-CLI-Project\" class=\"headerlink\" title=\"Create CLI Project\"></a>Create CLI Project</h2><p>To start, create a project and add the iOS platform.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns create MYCocoaPodsApp</div><div class=\"line\">$ <span class=\"built_in\">cd</span> MYCocoaPodsApp</div><div class=\"line\">$ tns platform add ios</div></pre></td></tr></table></figure>\n<h2 id=\"Wrap-the-Library-as-NativeScript-Plugin\"><a href=\"#Wrap-the-Library-as-NativeScript-Plugin\" class=\"headerlink\" title=\"Wrap the Library as NativeScript Plugin\"></a>Wrap the Library as NativeScript Plugin</h2><p>For more information about working with NativeScript plugins, click <a href=\"PLUGINS.md\">here</a>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ..</div><div class=\"line\">mkdir my-plugin</div><div class=\"line\"><span class=\"built_in\">cd</span> my-plugin</div></pre></td></tr></table></figure>\n<p>Create a <code>package.json</code> file with the following content:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-plugin\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"nativescript\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"platforms\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"ios\"</span>: <span class=\"string\">\"1.3.0\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Create a <a href=\"https://guides.cocoapods.org/syntax/podfile.html\">Podfile</a> which describes the dependency to the library that you want to use. Move it to the <code>platforms/ios</code> folder.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-plugin/</div><div class=\"line\">├── package.json</div><div class=\"line\">└── platforms/</div><div class=\"line\">    └── ios/</div><div class=\"line\">        └── Podfile</div></pre></td></tr></table></figure>\n<p>Podfile:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod &apos;GoogleMaps&apos;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Install-the-Plugin\"><a href=\"#Install-the-Plugin\" class=\"headerlink\" title=\"Install the Plugin\"></a>Install the Plugin</h2><p>Next, install the plugin:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add ../my-plugin</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>NOTE:</strong> Installing CocoaPods sets the deployment target of your app to iOS 8, if not already set to iOS 8 or later. This change is required because CocoaPods are installed as shared frameworks to ensure that all symbols are available at runtime.</p>\n</blockquote>\n<h2 id=\"Build-the-Project\"><a href=\"#Build-the-Project\" class=\"headerlink\" title=\"Build the Project\"></a>Build the Project</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns build ios</div></pre></td></tr></table></figure>\n<p>This modifies the <code>MYCocoaPodsApp.xcodeproj</code> and creates a workspace with the same name.</p>\n<blockquote>\n<p><strong>IMPORTANT:</strong> You will no longer be able to run the <code>xcodeproj</code> alone. NativeScript CLI will build the newly created workspace and produce the correct package.</p>\n</blockquote>\n<h2 id=\"Troubleshooting\"><a href=\"#Troubleshooting\" class=\"headerlink\" title=\"Troubleshooting\"></a>Troubleshooting</h2><p>In case of post-build linker errors, you might need to resolve missing dependencies to native frameworks required by the installed CocoaPod. For more information about how to create the required links, see the <a href=\"PLUGINS.md#buildxcconfig-specification\">build.xcconfig specification</a>.</p>\n"},{"title":"Using formatted string","description":"How to Use the FormattedString Class in an Angular App","position":2,"slug":"formatted-string","previous_url":"/formatted-string","environment":"angular","_content":"\n# How to Use the FormattedString Class in Text\n\nNativeScript has a special class called [FormattedString](http://docs.nativescript.org/api-reference/classes/_text_formatted_string_.formattedstring.html) to support various text transformations and decorations. The `FormattedString` class can be used with all text-related components including Label, TextView, TextField and even Button. Using `FormattedString` within an NativeScript-Angular app requires using a special syntax because of how Angular views get added to the native visual tree. Here’s what the correct syntax looks like:\n\n```HTML\n<Label>\n    <FormattedString>\n        <Span text=\"some text\" fontAttributes=\"Bold\"></Span>\n    </FormattedString>\n</Label>\n```\n\nThis syntax differs from the __FormattedString__’s full syntax, shown below, which does not work in Angular apps:\n\n```HTML\n<Label>\n    <Label.FormattedText>\n        <FormattedString>\n            <FormattedString.Spans>\n                <Span text=\"some text\" fontAttributes=\"Bold\"></Span>\n            </FormattedString.Spans>\n        </FormattedString>\n    </Label.FormattedText>\n</Label>\n```\n\n> Both syntaxes are supported in NativeScript applications that do not use Angular, so using the short one is a safe bet.\n","source":"cookbook/formatted-string-ng.md","raw":"---\ntitle: Using formatted string\ndescription: How to Use the FormattedString Class in an Angular App\nposition: 2\nslug: formatted-string\nprevious_url: /formatted-string\nenvironment: angular\n---\n\n# How to Use the FormattedString Class in Text\n\nNativeScript has a special class called [FormattedString](http://docs.nativescript.org/api-reference/classes/_text_formatted_string_.formattedstring.html) to support various text transformations and decorations. The `FormattedString` class can be used with all text-related components including Label, TextView, TextField and even Button. Using `FormattedString` within an NativeScript-Angular app requires using a special syntax because of how Angular views get added to the native visual tree. Here’s what the correct syntax looks like:\n\n```HTML\n<Label>\n    <FormattedString>\n        <Span text=\"some text\" fontAttributes=\"Bold\"></Span>\n    </FormattedString>\n</Label>\n```\n\nThis syntax differs from the __FormattedString__’s full syntax, shown below, which does not work in Angular apps:\n\n```HTML\n<Label>\n    <Label.FormattedText>\n        <FormattedString>\n            <FormattedString.Spans>\n                <Span text=\"some text\" fontAttributes=\"Bold\"></Span>\n            </FormattedString.Spans>\n        </FormattedString>\n    </Label.FormattedText>\n</Label>\n```\n\n> Both syntaxes are supported in NativeScript applications that do not use Angular, so using the short one is a safe bet.\n","date":"2016-08-26T21:05:52.861Z","updated":"2016-08-26T21:05:52.861Z","path":"cookbook/formatted-string-ng.html","comments":1,"layout":"page","_id":"cisn95c6x000hwsl0zt4qvfb1","content":"<h1 id=\"How-to-Use-the-FormattedString-Class-in-Text\"><a href=\"#How-to-Use-the-FormattedString-Class-in-Text\" class=\"headerlink\" title=\"How to Use the FormattedString Class in Text\"></a>How to Use the FormattedString Class in Text</h1><p>NativeScript has a special class called <a href=\"http://docs.nativescript.org/api-reference/classes/_text_formatted_string_.formattedstring.html\">FormattedString</a> to support various text transformations and decorations. The <code>FormattedString</code> class can be used with all text-related components including Label, TextView, TextField and even Button. Using <code>FormattedString</code> within an NativeScript-Angular app requires using a special syntax because of how Angular views get added to the native visual tree. Here’s what the correct syntax looks like:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FormattedString</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Span</span> <span class=\"attr\">text</span>=<span class=\"string\">\"some text\"</span> <span class=\"attr\">fontAttributes</span>=<span class=\"string\">\"Bold\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FormattedString</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This syntax differs from the <strong>FormattedString</strong>’s full syntax, shown below, which does not work in Angular apps:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label.FormattedText</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">FormattedString</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">FormattedString.Spans</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Span</span> <span class=\"attr\">text</span>=<span class=\"string\">\"some text\"</span> <span class=\"attr\">fontAttributes</span>=<span class=\"string\">\"Bold\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">FormattedString.Spans</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">FormattedString</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Label.FormattedText</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Both syntaxes are supported in NativeScript applications that do not use Angular, so using the short one is a safe bet.</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"How-to-Use-the-FormattedString-Class-in-Text\"><a href=\"#How-to-Use-the-FormattedString-Class-in-Text\" class=\"headerlink\" title=\"How to Use the FormattedString Class in Text\"></a>How to Use the FormattedString Class in Text</h1><p>NativeScript has a special class called <a href=\"http://docs.nativescript.org/api-reference/classes/_text_formatted_string_.formattedstring.html\">FormattedString</a> to support various text transformations and decorations. The <code>FormattedString</code> class can be used with all text-related components including Label, TextView, TextField and even Button. Using <code>FormattedString</code> within an NativeScript-Angular app requires using a special syntax because of how Angular views get added to the native visual tree. Here’s what the correct syntax looks like:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FormattedString</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Span</span> <span class=\"attr\">text</span>=<span class=\"string\">\"some text\"</span> <span class=\"attr\">fontAttributes</span>=<span class=\"string\">\"Bold\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FormattedString</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This syntax differs from the <strong>FormattedString</strong>’s full syntax, shown below, which does not work in Angular apps:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label.FormattedText</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">FormattedString</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">FormattedString.Spans</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Span</span> <span class=\"attr\">text</span>=<span class=\"string\">\"some text\"</span> <span class=\"attr\">fontAttributes</span>=<span class=\"string\">\"Bold\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">FormattedString.Spans</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">FormattedString</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Label.FormattedText</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Both syntaxes are supported in NativeScript applications that do not use Angular, so using the short one is a safe bet.</p>\n</blockquote>\n"},{"title":"Tab View","description":"NativeScript for Angular Documentation Using Tab View","position":5,"_content":"\n\n# Tab View\n\nUsing a `TabView` inside Angular 2 app requires some special attention how to provide title, iconSource and content (view) of the TabItem. In a pure NativeScript application `TabView` has an items property which could be set via XML to an array of TabViewItems (basically an array of objects with `title` and `view` properties). However NativeScript-angular does not support nested properties in its html template, so adding `TabViewItem` to TabView is a little bit different. NativeScript-angular provides a custom Angular 2 directive which simplifies the way native TabView should be used. Following is an example of how to add TabView to your page (with some clarifications later):\n\n```XML\n// tab-view-test.html\n<TabView>\n    <StackLayout *tabItem=\"{title: 'Profile', iconSource: '~/icon.png'}\" >\n        <ListView [items]='items'>\n            <template let-item='item'>\n                <Label [text]='item.itemDesc' ></Label>\n            </template>\n        </ListView>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Stats'}\">\n        <Label text=\"Second tab item\"></Label>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Settings'}\">\n        <Label text=\"Third tab item\"></Label>\n    </StackLayout>\n</TabView>\n```\n```TypeScript\nimport {Component, ElementRef} from 'angular2/core';\n\nexport class DataItem {\n    constructor(public itemDesc: string) {}\n}\n\n@Component({\n\tselector: 'tab-view-test',\n\ttemplateUrl: 'tab-view-test.html' \n})\nexport class TabViewTest {\n    public items: Array<DataItem>;\n    \n    constructor() {\n        this.items = new Array<DataItem>();\n        for (let i = 0; i < 5; i++) {\n            this.items.push(new DataItem(\"item \" + i));\n        }\n    }\n}\n```\n\n* tabItem - TabView directive uses a JSON object to transfer properties to the native object. Actually `TabViewItem` is a pretty simple object with just `title`, `iconSource` and `view` properties. Since `title` and `iconSource` are usually represented as text TabView directive uses a small JSON object (`{title: 'Profile', iconSource: '~/icon.png'}`) to define these properties easily in html. View however is not so simple therefore as TabViewItem.View TabView directive uses the tag where `tabItem` attribute is set.\n\nThis is a typical usage of the TabView directive however if business case requires there are a few options for customizations.\n\n### Customizing Tab View\n\nThe most common customization of TabView is customizing the background color of the selected tab item and using some other than first tab item for start up. Following is how to achive that by little modifications to the previous example.\n```XML\n// tab-view-test.html\n<TabView selectedIndex=\"1\" selectedColor=\"#FF0000\">\n    <StackLayout *tabItem=\"{title: 'Profile', iconSource: '~/icon.png'}\" >\n        <ListView [items]='items'>\n            <template let-item='item'>\n                <Label [text]='item.itemDesc' ></Label>\n            </template>\n        </ListView>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Stats'}\">\n        <Label text=\"Second tab item\"></Label>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Settings'}\">\n        <Label text=\"Third tab item\"></Label>\n    </StackLayout>\n</TabView>\n```\n\nAnd result is a TabView which selects second tab at start up and uses red color for color of the selected tab.\n\n### Binding (Two-way) TabView selectedIndex\n\nNativeScript-angular TabView `selectedIndex` property can be used in a two-way binding scenarios and using this kind of binding is relative simple. Just use standard `ngModel` syntax to a data model property (for the sake of example TabViewTest class is used as binding context) and set data model property `tabSelectedIndex` to desired value.\n \n```XML\n// tab-view-test.html\n<TabView [(ngModel)]=\"tabSelectedIndex\" selectedColor=\"#FF0000\">\n    <StackLayout *tabItem=\"{title: 'Profile', iconSource: '~/icon.png'}\" >\n        <ListView [items]='items'>\n            <template let-item='item'>\n            \t<Label [text]='item.itemDesc' ></Label>\n            </template>\n        </ListView>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Stats'}\">\n    \t<Label text=\"Second tab item\"></Label>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Settings'}\">\n    \t<Label text=\"Third tab item\"></Label>\n    </StackLayout>\n</TabView>\n```\n```TypeScript\nimport {Component, ElementRef} from 'angular2/core';\n\nexport class DataItem {\n    constructor(public itemDesc: string) {}\n}\n\n@Component({\n\tselector: 'tab-view-test',\n\ttemplateUrl: 'tab-view-test.html' \n})\nexport class TabViewTest {\n    public items: Array<DataItem>;\n    public tabSelectedIndex: number;\n    \n    constructor() {\n    \tthis.tabSelectedIndex = 1;\n        this.items = new Array<DataItem>();\n        for (let i = 0; i < 5; i++) {\n            this.items.push(new DataItem(\"item \" + i));\n        }\n    }\n}\n```","source":"cookbook/tab-view-ng.md","raw":"---\ntitle: Tab View\ndescription: NativeScript for Angular Documentation Using Tab View\nposition: 5\n---\n\n\n# Tab View\n\nUsing a `TabView` inside Angular 2 app requires some special attention how to provide title, iconSource and content (view) of the TabItem. In a pure NativeScript application `TabView` has an items property which could be set via XML to an array of TabViewItems (basically an array of objects with `title` and `view` properties). However NativeScript-angular does not support nested properties in its html template, so adding `TabViewItem` to TabView is a little bit different. NativeScript-angular provides a custom Angular 2 directive which simplifies the way native TabView should be used. Following is an example of how to add TabView to your page (with some clarifications later):\n\n```XML\n// tab-view-test.html\n<TabView>\n    <StackLayout *tabItem=\"{title: 'Profile', iconSource: '~/icon.png'}\" >\n        <ListView [items]='items'>\n            <template let-item='item'>\n                <Label [text]='item.itemDesc' ></Label>\n            </template>\n        </ListView>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Stats'}\">\n        <Label text=\"Second tab item\"></Label>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Settings'}\">\n        <Label text=\"Third tab item\"></Label>\n    </StackLayout>\n</TabView>\n```\n```TypeScript\nimport {Component, ElementRef} from 'angular2/core';\n\nexport class DataItem {\n    constructor(public itemDesc: string) {}\n}\n\n@Component({\n\tselector: 'tab-view-test',\n\ttemplateUrl: 'tab-view-test.html' \n})\nexport class TabViewTest {\n    public items: Array<DataItem>;\n    \n    constructor() {\n        this.items = new Array<DataItem>();\n        for (let i = 0; i < 5; i++) {\n            this.items.push(new DataItem(\"item \" + i));\n        }\n    }\n}\n```\n\n* tabItem - TabView directive uses a JSON object to transfer properties to the native object. Actually `TabViewItem` is a pretty simple object with just `title`, `iconSource` and `view` properties. Since `title` and `iconSource` are usually represented as text TabView directive uses a small JSON object (`{title: 'Profile', iconSource: '~/icon.png'}`) to define these properties easily in html. View however is not so simple therefore as TabViewItem.View TabView directive uses the tag where `tabItem` attribute is set.\n\nThis is a typical usage of the TabView directive however if business case requires there are a few options for customizations.\n\n### Customizing Tab View\n\nThe most common customization of TabView is customizing the background color of the selected tab item and using some other than first tab item for start up. Following is how to achive that by little modifications to the previous example.\n```XML\n// tab-view-test.html\n<TabView selectedIndex=\"1\" selectedColor=\"#FF0000\">\n    <StackLayout *tabItem=\"{title: 'Profile', iconSource: '~/icon.png'}\" >\n        <ListView [items]='items'>\n            <template let-item='item'>\n                <Label [text]='item.itemDesc' ></Label>\n            </template>\n        </ListView>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Stats'}\">\n        <Label text=\"Second tab item\"></Label>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Settings'}\">\n        <Label text=\"Third tab item\"></Label>\n    </StackLayout>\n</TabView>\n```\n\nAnd result is a TabView which selects second tab at start up and uses red color for color of the selected tab.\n\n### Binding (Two-way) TabView selectedIndex\n\nNativeScript-angular TabView `selectedIndex` property can be used in a two-way binding scenarios and using this kind of binding is relative simple. Just use standard `ngModel` syntax to a data model property (for the sake of example TabViewTest class is used as binding context) and set data model property `tabSelectedIndex` to desired value.\n \n```XML\n// tab-view-test.html\n<TabView [(ngModel)]=\"tabSelectedIndex\" selectedColor=\"#FF0000\">\n    <StackLayout *tabItem=\"{title: 'Profile', iconSource: '~/icon.png'}\" >\n        <ListView [items]='items'>\n            <template let-item='item'>\n            \t<Label [text]='item.itemDesc' ></Label>\n            </template>\n        </ListView>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Stats'}\">\n    \t<Label text=\"Second tab item\"></Label>\n    </StackLayout>\n    <StackLayout *tabItem=\"{title: 'Settings'}\">\n    \t<Label text=\"Third tab item\"></Label>\n    </StackLayout>\n</TabView>\n```\n```TypeScript\nimport {Component, ElementRef} from 'angular2/core';\n\nexport class DataItem {\n    constructor(public itemDesc: string) {}\n}\n\n@Component({\n\tselector: 'tab-view-test',\n\ttemplateUrl: 'tab-view-test.html' \n})\nexport class TabViewTest {\n    public items: Array<DataItem>;\n    public tabSelectedIndex: number;\n    \n    constructor() {\n    \tthis.tabSelectedIndex = 1;\n        this.items = new Array<DataItem>();\n        for (let i = 0; i < 5; i++) {\n            this.items.push(new DataItem(\"item \" + i));\n        }\n    }\n}\n```","date":"2016-08-26T21:05:52.862Z","updated":"2016-08-26T21:05:52.862Z","path":"cookbook/tab-view-ng.html","comments":1,"layout":"page","_id":"cisn95c6y000iwsl0zcs0cp69","content":"<h1 id=\"Tab-View\"><a href=\"#Tab-View\" class=\"headerlink\" title=\"Tab View\"></a>Tab View</h1><p>Using a <code>TabView</code> inside Angular 2 app requires some special attention how to provide title, iconSource and content (view) of the TabItem. In a pure NativeScript application <code>TabView</code> has an items property which could be set via XML to an array of TabViewItems (basically an array of objects with <code>title</code> and <code>view</code> properties). However NativeScript-angular does not support nested properties in its html template, so adding <code>TabViewItem</code> to TabView is a little bit different. NativeScript-angular provides a custom Angular 2 directive which simplifies the way native TabView should be used. Following is an example of how to add TabView to your page (with some clarifications later):</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// tab-view-test.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TabView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Profile', iconSource: '~/icon.png'&#125;\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">'items'</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">'item'</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'item.itemDesc'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Stats'&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Second tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Settings'&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Third tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TabView</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Component, ElementRef&#125; from <span class=\"string\">'angular2/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DataItem &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public itemDesc: string) &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">\tselector: <span class=\"string\">'tab-view-test'</span>,</div><div class=\"line\">\ttemplateUrl: <span class=\"string\">'tab-view-test.html'</span> </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TabViewTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> items: <span class=\"built_in\">Array</span>&lt;DataItem&gt;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;DataItem&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.items.push(<span class=\"keyword\">new</span> DataItem(<span class=\"string\">\"item \"</span> + i));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>tabItem - TabView directive uses a JSON object to transfer properties to the native object. Actually <code>TabViewItem</code> is a pretty simple object with just <code>title</code>, <code>iconSource</code> and <code>view</code> properties. Since <code>title</code> and <code>iconSource</code> are usually represented as text TabView directive uses a small JSON object (<code>{title: &#39;Profile&#39;, iconSource: &#39;~/icon.png&#39;}</code>) to define these properties easily in html. View however is not so simple therefore as TabViewItem.View TabView directive uses the tag where <code>tabItem</code> attribute is set.</li>\n</ul>\n<p>This is a typical usage of the TabView directive however if business case requires there are a few options for customizations.</p>\n<h3 id=\"Customizing-Tab-View\"><a href=\"#Customizing-Tab-View\" class=\"headerlink\" title=\"Customizing Tab View\"></a>Customizing Tab View</h3><p>The most common customization of TabView is customizing the background color of the selected tab item and using some other than first tab item for start up. Following is how to achive that by little modifications to the previous example.\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// tab-view-test.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TabView</span> <span class=\"attr\">selectedIndex</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">selectedColor</span>=<span class=\"string\">\"#FF0000\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Profile', iconSource: '~/icon.png'&#125;\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">'items'</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">'item'</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'item.itemDesc'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Stats'&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Second tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Settings'&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Third tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TabView</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>And result is a TabView which selects second tab at start up and uses red color for color of the selected tab.</p>\n<h3 id=\"Binding-Two-way-TabView-selectedIndex\"><a href=\"#Binding-Two-way-TabView-selectedIndex\" class=\"headerlink\" title=\"Binding (Two-way) TabView selectedIndex\"></a>Binding (Two-way) TabView selectedIndex</h3><p>NativeScript-angular TabView <code>selectedIndex</code> property can be used in a two-way binding scenarios and using this kind of binding is relative simple. Just use standard <code>ngModel</code> syntax to a data model property (for the sake of example TabViewTest class is used as binding context) and set data model property <code>tabSelectedIndex</code> to desired value.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// tab-view-test.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TabView</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"tabSelectedIndex\"</span> <span class=\"attr\">selectedColor</span>=<span class=\"string\">\"#FF0000\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Profile', iconSource: '~/icon.png'&#125;\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">'items'</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">'item'</span>&gt;</span></div><div class=\"line\">            \t<span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'item.itemDesc'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Stats'&#125;\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Second tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Settings'&#125;\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Third tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TabView</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Component, ElementRef&#125; from <span class=\"string\">'angular2/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DataItem &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public itemDesc: string) &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">\tselector: <span class=\"string\">'tab-view-test'</span>,</div><div class=\"line\">\ttemplateUrl: <span class=\"string\">'tab-view-test.html'</span> </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TabViewTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> items: <span class=\"built_in\">Array</span>&lt;DataItem&gt;;</div><div class=\"line\">    <span class=\"keyword\">public</span> tabSelectedIndex: <span class=\"built_in\">number</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    \t<span class=\"keyword\">this</span>.tabSelectedIndex = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;DataItem&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.items.push(<span class=\"keyword\">new</span> DataItem(<span class=\"string\">\"item \"</span> + i));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"Tab-View\"><a href=\"#Tab-View\" class=\"headerlink\" title=\"Tab View\"></a>Tab View</h1><p>Using a <code>TabView</code> inside Angular 2 app requires some special attention how to provide title, iconSource and content (view) of the TabItem. In a pure NativeScript application <code>TabView</code> has an items property which could be set via XML to an array of TabViewItems (basically an array of objects with <code>title</code> and <code>view</code> properties). However NativeScript-angular does not support nested properties in its html template, so adding <code>TabViewItem</code> to TabView is a little bit different. NativeScript-angular provides a custom Angular 2 directive which simplifies the way native TabView should be used. Following is an example of how to add TabView to your page (with some clarifications later):</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// tab-view-test.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TabView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Profile', iconSource: '~/icon.png'&#125;\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">'items'</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">'item'</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'item.itemDesc'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Stats'&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Second tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Settings'&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Third tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TabView</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Component, ElementRef&#125; from <span class=\"string\">'angular2/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DataItem &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public itemDesc: string) &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">\tselector: <span class=\"string\">'tab-view-test'</span>,</div><div class=\"line\">\ttemplateUrl: <span class=\"string\">'tab-view-test.html'</span> </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TabViewTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> items: <span class=\"built_in\">Array</span>&lt;DataItem&gt;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;DataItem&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.items.push(<span class=\"keyword\">new</span> DataItem(<span class=\"string\">\"item \"</span> + i));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>tabItem - TabView directive uses a JSON object to transfer properties to the native object. Actually <code>TabViewItem</code> is a pretty simple object with just <code>title</code>, <code>iconSource</code> and <code>view</code> properties. Since <code>title</code> and <code>iconSource</code> are usually represented as text TabView directive uses a small JSON object (<code>{title: &#39;Profile&#39;, iconSource: &#39;~/icon.png&#39;}</code>) to define these properties easily in html. View however is not so simple therefore as TabViewItem.View TabView directive uses the tag where <code>tabItem</code> attribute is set.</li>\n</ul>\n<p>This is a typical usage of the TabView directive however if business case requires there are a few options for customizations.</p>\n<h3 id=\"Customizing-Tab-View\"><a href=\"#Customizing-Tab-View\" class=\"headerlink\" title=\"Customizing Tab View\"></a>Customizing Tab View</h3><p>The most common customization of TabView is customizing the background color of the selected tab item and using some other than first tab item for start up. Following is how to achive that by little modifications to the previous example.\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// tab-view-test.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TabView</span> <span class=\"attr\">selectedIndex</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">selectedColor</span>=<span class=\"string\">\"#FF0000\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Profile', iconSource: '~/icon.png'&#125;\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">'items'</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">'item'</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'item.itemDesc'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Stats'&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Second tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Settings'&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Third tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TabView</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>And result is a TabView which selects second tab at start up and uses red color for color of the selected tab.</p>\n<h3 id=\"Binding-Two-way-TabView-selectedIndex\"><a href=\"#Binding-Two-way-TabView-selectedIndex\" class=\"headerlink\" title=\"Binding (Two-way) TabView selectedIndex\"></a>Binding (Two-way) TabView selectedIndex</h3><p>NativeScript-angular TabView <code>selectedIndex</code> property can be used in a two-way binding scenarios and using this kind of binding is relative simple. Just use standard <code>ngModel</code> syntax to a data model property (for the sake of example TabViewTest class is used as binding context) and set data model property <code>tabSelectedIndex</code> to desired value.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// tab-view-test.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TabView</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"tabSelectedIndex\"</span> <span class=\"attr\">selectedColor</span>=<span class=\"string\">\"#FF0000\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Profile', iconSource: '~/icon.png'&#125;\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">'items'</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">'item'</span>&gt;</span></div><div class=\"line\">            \t<span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'item.itemDesc'</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Stats'&#125;\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Second tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> *<span class=\"attr\">tabItem</span>=<span class=\"string\">\"&#123;title: 'Settings'&#125;\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Third tab item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TabView</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Component, ElementRef&#125; from <span class=\"string\">'angular2/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DataItem &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public itemDesc: string) &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">\tselector: <span class=\"string\">'tab-view-test'</span>,</div><div class=\"line\">\ttemplateUrl: <span class=\"string\">'tab-view-test.html'</span> </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TabViewTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> items: <span class=\"built_in\">Array</span>&lt;DataItem&gt;;</div><div class=\"line\">    <span class=\"keyword\">public</span> tabSelectedIndex: <span class=\"built_in\">number</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    \t<span class=\"keyword\">this</span>.tabSelectedIndex = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;DataItem&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.items.push(<span class=\"keyword\">new</span> DataItem(<span class=\"string\">\"item \"</span> + i));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Plugins","description":"How to work with geographical location data in NativeScript.","position":1,"slug":"location","previous_url":"/location","_content":"\nPlugins\n=========\n\nStarting with NativeScript CLI 1.1.0, you can develop or use plugins in your NativeScript projects.\n\n* [What Are NativeScript Plugins](#what-are-nativescript-plugins)\n* [Where Can You Find NativeScript Plugins](#where-can-you-find-nativescript-plugins)\n* [Create a Plugin](#create-a-plugin)\n  * [Directory Structure](#directory-structure)\n  * [`package.json` Specification](#packagejson-specification)\n  * [`include.gradle` Specification](#includegradle-specification)\n  * [`build.xcconfig` Specification](#buildxcconfig-specification)\n* [Install a Plugin](#install-a-plugin)\n  * [Valid Plugin Sources](#valid-plugin-sources)\n  * [Installation Specifics](#installation-specifics)\n  * [Manual Steps After Installation](#manual-steps-after-installation)\n* [Use a Plugin](#use-a-plugin)\n* [Remove a Plugin](#remove-a-plugin)\n  * [Removal Specifics](#removal-specifics)\n  * [Manual Steps After Removal](#manual-steps-after-removal)\n\n## What Are NativeScript Plugins\n\nA NativeScript plugin is any npm package, published or not, that exposes a native API via JavaScript and consists of the following elements.\n\n* A `package.json` file which contains the following metadata: name, version, supported runtime versions, dependencies and others. For more information, see the [`package.json` Specification](#packagejson-specification) section.\n* One or more CommonJS modules that expose a native API via a unified JavaScript API. For more information about Common JS modules, see the [CommonJS Wiki](http://wiki.commonjs.org/wiki/CommonJS).\n* (Optional) `AndroidManifest.xml` and `Info.plist` which describe the permissions, features or other configurations required or used by your app for Android and iOS, respectively.\n* (Optional) Native Android libraries and the native Android `include.gradle` configuration file which describes the native dependencies. For more information, see the [`include.gradle` Specification](#includegradle-specification) section.\n* (Optional) Native iOS libraries and the native `build.xcconfig` configuration file which describes the native dependencies. For more information, see the [`build.xcconfig` Specification](#buildxcconfig-specification) section.\n\nThe plugin must have the directory structure, described in the [Directory Structure](#directory-structure) section.\n\n## Where Can You Find NativeScript Plugins\n\nYou can find a list of Telerik-verified NativeScript plugins on the [Telerik Verified Plugin Marketplace](http://plugins.telerik.com/nativescript), and a list of community-written NativeScript plugins by [searching for “nativescript” on npm](https://www.npmjs.com/search?q=nativescript).\n\n## Create a Plugin\n\nIf the NativeScript framework does not expose a native API that you need, you can develop a plugin which exposes the required functionality. When you develop a plugin, keep in mind the following requirements.\n\n* The plugin must be a valid npm package.\n* The plugin must expose a built-in native API or a native API available via custom native libraries.\n* The plugin must be written in JavaScript and must comply with the CommonJS specification. If you are using a transpiler, make sure to include the transpiled JavaScript files in your plugin.\n* The plugin directory structure must comply with the specification described below.\n* The plugin must contain a valid `package.json` which complies with the specification described below.\n* If the plugin requires any permissions, features or other configuration specifics, it must contain `AndroidManifest.xml` or `Info.plist` file which describe them.\n* If the plugin depends on native libraries, it must contain a valid `include.gradle` or `build.xcconfig` file, which describes the dependencies.\n\n### Directory Structure\n\nNativeScript plugins which consist of one CommonJS module might have the following directory structure.\n\n```\nmy-plugin/\n├── index.js\n├── package.json\n└── platforms/\n    ├── android/\n    │   ├── res/\n    │   └── AndroidManifest.xml\n    └── ios/\n        └── Info.plist\n```\n\nNativeScript plugins which consist of multiple CommonJS modules might have the following directory structure.\n\n```\nmy-plugin/\n├── index.js\n├── package.json\n├── MyModule1/\n│   ├── index1.js\n│   └── package.json\n├── MyModule2/\n│   ├── index2.js\n│   └── package.json\n└── platforms/\n    ├── android/\n    │   ├── AndroidManifest.xml\n    │   └── res/\n    └── ios/\n        └── Info.plist\n```\n\n* `index.js`: This file is the CommonJS module which exposes the native API. You can use platform-specific `*.platform.js` files. For example: `index.ios.js` and `index.android.js`. During the plugin installation, the NativeScript CLI will copy the platform resources to the `tns_modules` subdirectory in the correct platform destination in the `platforms` directory of your project.<br/>Alternatively, you can give any name to this CommonJS module. In this case, however, you need to point to this file by setting the `main` key in the `package.json` for the plugin. For more information, see [Folders as Modules](https://nodejs.org/api/modules.html#modules_folders_as_modules).\n* `package.json`: This file contains the metadata for your plugin. It sets the supported runtimes, the plugin name and version and any dependencies. The `package.json` specification is described in detail below.\n* `platforms\\android\\AndroidManifest.xml`: This file describes any specific configuration changes required for your plugin to work. For example: required permissions. For more information about the format of `AndroidManifest.xml`, see [App Manifest](http://developer.android.com/guide/topics/manifest/manifest-intro.html).<br/>During build, gradle will merge the plugin `AndroidManifest.xml` with the `AndroidManifest.xml` for your project. The NativeScript CLI will not resolve any contradicting or duplicate entries during the merge. After the plugin is installed, you need to manually resolve such issues.\n* `platforms\\android\\res`:  (Optional) This directory contains resources declared by the `AndroidManifest.xml` file. You can look at the folder structure [here](http://developer.android.com/guide/topics/resources/providing-resources.html#ResourceTypes).\n* `platforms\\ios\\Info.plist`: This file describes any specific configuration changes required for your plugin to work. For example, required permissions. For more information about the format of `Info.plist`, see [About Information Property List Files](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html).<br/>During the plugin installation, the NativeScript CLI will merge the plugin `Info.plist` with the `Info.plist` for your project. The NativeScript CLI will not resolve any contradicting or duplicate entries during the merge. After the plugin is installed, you need to manually resolve such issues.\n\nNativeScript plugins which contain both native Android and iOS libraries might have the following directory structure.\n\n```\nmy-plugin/\n├── ...\n└── platforms/\n    ├── android/\n    │   ├── res/\n    │   ├── MyLibrary.jar\n    │   ├── MyLibrary.aar\n    │   ├── include.gradle\n    │   └── AndroidManifest.xml\n    └── ios/\n        ├── MyiOSFramework.framework\n        ├── build.xcconfig\n        ├── Podfile\n        ├── Info.plist\n        ├── MyStaticiOSLibrary.a\n        └── include/\n            └── MyStaticiOSLibrary/\n                └── ...\n```\n\n* `platforms\\android`: This directory contains any native Android libraries packaged as `*.jar` and `*.aar` packages. These native libraries can reside in the root of this directory or in a user-created sub-directory. During the plugin installation, the NativeScript CLI will configure the Android project in `platforms\\android` to work with the plugin.\n* `platforms\\android\\res`:  (Optional) This directory contains resources declared by the `AndroidManifest.xml` file. You can look at the folder structure [here](http://developer.android.com/guide/topics/resources/providing-resources.html#ResourceTypes).\n* `platforms\\android\\include.gradle`: This file modifies the native Android configuration of your NativeScript project such as native dependencies, build types and configurations. For more information about the format of `include.gradle`, see [`include.gradle` file](#includegradle-specification).\n* `platforms\\ios`: This directory contains native dynamic iOS Cocoa Touch Frameworks (`.framework`) and Cocoa Touch Static Libraries (`.a`). During the plugin installation, the NativeScript CLI will copy these files to `lib\\iOS` in your project and will configure the iOS project in `platforms\\ios` to work with the libraries.  If the library is written in Swift, only APIs exposed to Objective-C are exposed to NativeScript. In case the plugin contains a Cocoa Touch Static Library (`.a`), you must place all public headers (`.h`) under `include\\<Static Library Name>\\`. Make sure that the static libraries are built at least for the following processor architectures - armv7, arm64, i386.\n* `platforms\\ios\\build.xcconfig`: This file modifies the native iOS configuration of your NativeScript project such as native dependencies and configurations. For more information about the format of `build.xcconfig`, see [`build.xcconfig` file](#buildxcconfig-specification).\n* `platforms\\ios\\Podfile`: This file describes the dependency to the library that you want to use. For more information, see [the CocoaPods article](CocoaPods.md).\n\n### Package.json Specification\n\nEvery NativeScript plugin should contain a valid `package.json` file in its root. This `package.json` file must meet the following requirements.\n\n* It must comply with the [npm specification](https://docs.npmjs.com/files/package.json).<br/>The `package.json` must contain at least `name` and `version` pairs. You will later use the plugin in your code by requiring it by its `name`.\n* It must contain a `nativescript` section which describes the supported NativeScript runtimes and their versions. This section can be empty. If you want to define supported platforms and runtimes, you can nest a `platforms` section. In this `platforms` section, you can nest `ios` and `android` key-value pairs. The values in these pairs must be valid runtime versions or ranges of values specified by a valid semver(7) syntax.\n* If the plugin depends on other npm modules, it must contain a `dependencies` section as described [here](https://docs.npmjs.com/files/package.json#dependencies).<br/>The NativeScript CLI will resolve the dependencies during the plugin installation.\n\n#### Package.json Example\n\nThe following is an example of a `package.json` file for a NativeScript plugin which supports the 1.0.0 version of the iOS runtime and the 1.1.0 version of the Android runtime.\n\n```JSON\n{\n  \"name\": \"myplugin\",\n  \"version\": \"0.0.1\",\n  \"nativescript\": {\n    \"platforms\": {\n      \"ios\": \"1.0.0\",\n      \"android\": \"1.1.0\"\n    }\n  }\n}\n```\n\n### Include.gradle Specification\n\nEvery NativeScript plugin, which contains native Android dependencies, should also contain a valid `include.gradle` file in the root of its `platforms\\android` directory. This `include.gradle` file must meet the following requirements.\n\n* It must contain its own [configuration](http://developer.android.com/tools/building/configuring-gradle.html).\n* It might contain native dependencies required to build the plugin properly.\n* Any native dependencies should be available in [jcenter](https://bintray.com/bintray/jcenter) or from the Android SDK installed on your machine.\n\n> **IMPORTANT:** If you don't have an `include.gradle` file, at build time, gradle will create a default one containing all default elements.\n\n#### Include.gradle Example\n```gradle\n//default elements\nandroid {\n  productFlavors {\n    \"my-plugin\" {\n      dimension \"my-plugin\"\n    }\n  }\n}\n\n//optional elements\ndependencies {\n    compile \"groupName:pluginName:ver\"\n}\n```\n\n### Build.xcconfig Specification\nEvery NativeScript plugin, which contains native iOS dependencies, can also contain a [valid](https://pewpewthespells.com/blog/xcconfig_guide.html) `build.xcconfig` file in the root of its `platforms\\ios` directory. This `build.xcconfig` file might contain native dependencies required to build the plugin properly.\n\n#### Build.xcconfig Example\n```\nOTHER_LDFLAGS = $(inherited) -framework \"QuartzCore\" -l\"sqlite3\"\n```\n\n## Install a Plugin\n\nTo install a plugin for your project, inside your project, run the following command.\n\n```Shell\ntns plugin add <Plugin>\n```\n\n### Valid Plugin Sources\n\nYou can specify a plugin by name in the npm registry, local path or URL. The following are valid values for the `<Plugin>` attribute.\n\n* A `<Name>` or `<Name>@<Version>` for plugins published in the npm registry.\n* A `<Local Path>` to the directory which contains the plugin files and its `package.json` file.\n* A `<Local Path>` to a `.tar.gz` archive containing a directory with the plugin and its `package.json` file.\n* A `<URL>` which resolves to a `.tar.gz` archive containing a directory with the plugin and its `package.json` file.\n* A `<git Remote URL>` which resolves to a `.tar.gz` archive containing a directory with the plugin and its `package.json` file.\n\n### Installation Specifics\n\nThe installation of a NativeScript plugin mimics the installation of an npm module.\n\nThe NativeScript CLI takes the plugin and installs it to the `node_modules` directory in the root of your project. During this process, the NativeScript CLI resolves any dependencies described in the plugin `package.json` file and adds the plugin to the project `package.json` file in the project root.\n\nIf the NativeScript CLI detects any native iOS libraries in the plugin, it copies the library files to the `lib\\ios` folder in your project and configures the iOS-specific projects in `platforms\\ios` to work with the library.\n\nNext, the NativeScript CLI runs a partial `prepare` operation for the plugin for all platforms configured for the project. During this operation, the CLI copies only the plugin to the `tns_modules` subdirectories in the `platforms\\android` and `platforms\\ios` directories in your project. If your plugin contains platform-specific `JS` files, the CLI copies them to the respective platform subdirectory and renames them by removing the platform modifier.\n\n> **TIP:** If you have not configured any platforms, when you run `$ tns platform add`, the NativeScript CLI will automatically prepare all installed plugins for the newly added platform.\n\nFinally, the CLI merges the plugin `Info.plist` file with `platforms\\ios\\Info.plist` in your project. The plugin `AndroidManifest.xml` will be merged with `platforms\\android\\AndroidManifest.xml` later, at build time.\n\n> **IMPORTANT:** Currently, the merging of the platform configuration files does not resolve any contradicting or duplicate entries.\n\n#### AndroidManifest.xml Merge Example\n\nThe following is an example of a plugin `AndroidManifest`, project `AndroidManifest.xml` and the resulting merged file after the plugin installation.\n\n**The Plugin Manifest**\n\n```XML\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <uses-permission android:name=\"android.permission.READ_CONTACTS\"/>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\" />\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n    <uses-permission android:name=\"com.example.towntour.permission.MAPS_RECEIVE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n    <uses-permission android:name=\"com.google.android.providers.gsf.permission.READ_GSERVICES\" />\n\n</manifest>\n```\n\n**The Project Manifest Located in `platforms\\android\\`**\n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"org.nativescript.test\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\" >\n\n   <uses-sdk\n        android:minSdkVersion=\"17\"\n        android:targetSdkVersion=\"17\" />\n\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n\n    <application\n        android:name=\"com.tns.NativeScriptApplication\"\n        android:allowBackup=\"true\"\n        android:icon=\"@drawable/icon\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/AppTheme\" >\n        <activity\n            android:name=\"com.tns.NativeScriptActivity\"\n            android:label=\"@string/title_activity_kimera\"\n            android:configChanges=\"keyboardHidden|orientation|screenSize\">\n\n             <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\n**The Merged Manifest Located in `platforms\\android\\`**\n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\n  xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"org.nativescript.test\" android:versionCode=\"1\" android:versionName=\"1.0\">\n  <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"21\"/>\n  <uses-permission android:name=\"android.permission.READ_CONTACTS\"/>\n  <uses-permission android:name=\"android.permission.INTERNET\"/>\n  <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n  <uses-permission android:name=\"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\"/>\n  <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\n  <uses-permission android:name=\"com.example.towntour.permission.MAPS_RECEIVE\"/>\n  <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n  <uses-permission android:name=\"android.permission.CALL_PHONE\"/>\n  <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/>\n  <!--\n    Some comment here\n  -->\n  <uses-permission android:name=\"com.google.android.providers.gsf.permission.READ_GSERVICES\"/>\n  <application android:name=\"com.tns.NativeScriptApplication\" android:allowBackup=\"true\" android:icon=\"@drawable/icon\" android:label=\"@string/app_name\" android:theme=\"@style/AppTheme\">\n    <activity android:name=\"com.tns.NativeScriptActivity\" android:label=\"@string/title_activity_kimera\" android:configChanges=\"keyboardHidden|orientation|screenSize\">\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\"/>\n        <action android:name=\"android.intent.action.EDIT\"/>\n        <action android:name=\"android.intent.action.VIEW\"/>\n        <category android:name=\"android.intent.category.LAUNCHER\"/>\n      </intent-filter>\n    </activity>\n  </application>\n</manifest>\n```\n\n### Manual Steps After Installation\n\nAfter the installation is complete, you need to open `platforms\\android\\AndroidManifest.xml` and `platforms\\ios\\Info.plist` in your project and inspect them for duplicate or contradicting entries. Make sure to preserve the settings required by the plugin. Otherwise, your app might not build or it might not work as expected, when deployed on device.\n\n## Use a Plugin\n\nTo use a plugin inside your project, you need to add a `require` in your app.\n\n```JavaScript\nvar myPlugin = require(\"myplugin\");\n```\n\nThis will look for a `myplugin` module with a valid `package.json` file in the `tns_modules` directory. Note that you must require the plugin with the value for the `name` key in the plugin `package.json` file.\n\n## Remove a Plugin\n\nTo remove a plugin from your project, inside your project, run the following command.\n\n```Shell\ntns plugin remove <Plugin>\n```\n\nYou must specify the plugin by the value for the `name` key in the plugin `package.json` file.\n\n### Removal Specifics\n\nThe removal of a NativeScript plugin mimics the removal of an npm module.\n\nThe NativeScript CLI removes any plugin files from the `node_modules` directory in the root of your project. During this process, the NativeScript CLI removes any dependencies described in the plugin `package.json` file and removes the plugin from the project `package.json` file in the project root.\n\n> **IMPORTANT:** For iOS, this operation does not remove files from the `platforms\\ios` directories and native iOS libraries, and does not unmerge the `Info.plist` file. For Android, this operation unmerges the `AndroidManifest.xml` file and takes care of removing any plugin files located in `platforms\\android`.\n\n### Manual Steps After Removal\n\nAfter the plugin removal is complete, make sure to remove any leftover native iOS library files from the `lib\\ios` directory in the root of the project. Update the iOS-specific projects in `platforms\\ios` to remove any dependencies on the removed native libraries.\n\nNext, you need to run the following command.\n\n```Shell\ntns prepare <Platform>\n```\n\nMake sure to run the command for all platforms configured for the project. During this operation, the NativeScript CLI will remove any leftover plugin files from your `platforms\\ios` directory.\n\n> **TIP:** Instead of `$ tns prepare` you can run `$ tns build`, `$ tns run`, `$ tns deploy` or `$ tns emulate`. All these commands run `$ tns prepare`.\n\nNext, open your `platforms\\ios\\Info.plist` file and remove any leftover entries from the plugin `Info.plist` file.\n\nFinally, make sure to update your code not to use the uninstalled plugin.\n","source":"plugins/plugins.md","raw":"---\ntitle: Plugins\ndescription: How to work with geographical location data in NativeScript.\nposition: 1\nslug: location\nprevious_url: /location\n---\n\nPlugins\n=========\n\nStarting with NativeScript CLI 1.1.0, you can develop or use plugins in your NativeScript projects.\n\n* [What Are NativeScript Plugins](#what-are-nativescript-plugins)\n* [Where Can You Find NativeScript Plugins](#where-can-you-find-nativescript-plugins)\n* [Create a Plugin](#create-a-plugin)\n  * [Directory Structure](#directory-structure)\n  * [`package.json` Specification](#packagejson-specification)\n  * [`include.gradle` Specification](#includegradle-specification)\n  * [`build.xcconfig` Specification](#buildxcconfig-specification)\n* [Install a Plugin](#install-a-plugin)\n  * [Valid Plugin Sources](#valid-plugin-sources)\n  * [Installation Specifics](#installation-specifics)\n  * [Manual Steps After Installation](#manual-steps-after-installation)\n* [Use a Plugin](#use-a-plugin)\n* [Remove a Plugin](#remove-a-plugin)\n  * [Removal Specifics](#removal-specifics)\n  * [Manual Steps After Removal](#manual-steps-after-removal)\n\n## What Are NativeScript Plugins\n\nA NativeScript plugin is any npm package, published or not, that exposes a native API via JavaScript and consists of the following elements.\n\n* A `package.json` file which contains the following metadata: name, version, supported runtime versions, dependencies and others. For more information, see the [`package.json` Specification](#packagejson-specification) section.\n* One or more CommonJS modules that expose a native API via a unified JavaScript API. For more information about Common JS modules, see the [CommonJS Wiki](http://wiki.commonjs.org/wiki/CommonJS).\n* (Optional) `AndroidManifest.xml` and `Info.plist` which describe the permissions, features or other configurations required or used by your app for Android and iOS, respectively.\n* (Optional) Native Android libraries and the native Android `include.gradle` configuration file which describes the native dependencies. For more information, see the [`include.gradle` Specification](#includegradle-specification) section.\n* (Optional) Native iOS libraries and the native `build.xcconfig` configuration file which describes the native dependencies. For more information, see the [`build.xcconfig` Specification](#buildxcconfig-specification) section.\n\nThe plugin must have the directory structure, described in the [Directory Structure](#directory-structure) section.\n\n## Where Can You Find NativeScript Plugins\n\nYou can find a list of Telerik-verified NativeScript plugins on the [Telerik Verified Plugin Marketplace](http://plugins.telerik.com/nativescript), and a list of community-written NativeScript plugins by [searching for “nativescript” on npm](https://www.npmjs.com/search?q=nativescript).\n\n## Create a Plugin\n\nIf the NativeScript framework does not expose a native API that you need, you can develop a plugin which exposes the required functionality. When you develop a plugin, keep in mind the following requirements.\n\n* The plugin must be a valid npm package.\n* The plugin must expose a built-in native API or a native API available via custom native libraries.\n* The plugin must be written in JavaScript and must comply with the CommonJS specification. If you are using a transpiler, make sure to include the transpiled JavaScript files in your plugin.\n* The plugin directory structure must comply with the specification described below.\n* The plugin must contain a valid `package.json` which complies with the specification described below.\n* If the plugin requires any permissions, features or other configuration specifics, it must contain `AndroidManifest.xml` or `Info.plist` file which describe them.\n* If the plugin depends on native libraries, it must contain a valid `include.gradle` or `build.xcconfig` file, which describes the dependencies.\n\n### Directory Structure\n\nNativeScript plugins which consist of one CommonJS module might have the following directory structure.\n\n```\nmy-plugin/\n├── index.js\n├── package.json\n└── platforms/\n    ├── android/\n    │   ├── res/\n    │   └── AndroidManifest.xml\n    └── ios/\n        └── Info.plist\n```\n\nNativeScript plugins which consist of multiple CommonJS modules might have the following directory structure.\n\n```\nmy-plugin/\n├── index.js\n├── package.json\n├── MyModule1/\n│   ├── index1.js\n│   └── package.json\n├── MyModule2/\n│   ├── index2.js\n│   └── package.json\n└── platforms/\n    ├── android/\n    │   ├── AndroidManifest.xml\n    │   └── res/\n    └── ios/\n        └── Info.plist\n```\n\n* `index.js`: This file is the CommonJS module which exposes the native API. You can use platform-specific `*.platform.js` files. For example: `index.ios.js` and `index.android.js`. During the plugin installation, the NativeScript CLI will copy the platform resources to the `tns_modules` subdirectory in the correct platform destination in the `platforms` directory of your project.<br/>Alternatively, you can give any name to this CommonJS module. In this case, however, you need to point to this file by setting the `main` key in the `package.json` for the plugin. For more information, see [Folders as Modules](https://nodejs.org/api/modules.html#modules_folders_as_modules).\n* `package.json`: This file contains the metadata for your plugin. It sets the supported runtimes, the plugin name and version and any dependencies. The `package.json` specification is described in detail below.\n* `platforms\\android\\AndroidManifest.xml`: This file describes any specific configuration changes required for your plugin to work. For example: required permissions. For more information about the format of `AndroidManifest.xml`, see [App Manifest](http://developer.android.com/guide/topics/manifest/manifest-intro.html).<br/>During build, gradle will merge the plugin `AndroidManifest.xml` with the `AndroidManifest.xml` for your project. The NativeScript CLI will not resolve any contradicting or duplicate entries during the merge. After the plugin is installed, you need to manually resolve such issues.\n* `platforms\\android\\res`:  (Optional) This directory contains resources declared by the `AndroidManifest.xml` file. You can look at the folder structure [here](http://developer.android.com/guide/topics/resources/providing-resources.html#ResourceTypes).\n* `platforms\\ios\\Info.plist`: This file describes any specific configuration changes required for your plugin to work. For example, required permissions. For more information about the format of `Info.plist`, see [About Information Property List Files](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html).<br/>During the plugin installation, the NativeScript CLI will merge the plugin `Info.plist` with the `Info.plist` for your project. The NativeScript CLI will not resolve any contradicting or duplicate entries during the merge. After the plugin is installed, you need to manually resolve such issues.\n\nNativeScript plugins which contain both native Android and iOS libraries might have the following directory structure.\n\n```\nmy-plugin/\n├── ...\n└── platforms/\n    ├── android/\n    │   ├── res/\n    │   ├── MyLibrary.jar\n    │   ├── MyLibrary.aar\n    │   ├── include.gradle\n    │   └── AndroidManifest.xml\n    └── ios/\n        ├── MyiOSFramework.framework\n        ├── build.xcconfig\n        ├── Podfile\n        ├── Info.plist\n        ├── MyStaticiOSLibrary.a\n        └── include/\n            └── MyStaticiOSLibrary/\n                └── ...\n```\n\n* `platforms\\android`: This directory contains any native Android libraries packaged as `*.jar` and `*.aar` packages. These native libraries can reside in the root of this directory or in a user-created sub-directory. During the plugin installation, the NativeScript CLI will configure the Android project in `platforms\\android` to work with the plugin.\n* `platforms\\android\\res`:  (Optional) This directory contains resources declared by the `AndroidManifest.xml` file. You can look at the folder structure [here](http://developer.android.com/guide/topics/resources/providing-resources.html#ResourceTypes).\n* `platforms\\android\\include.gradle`: This file modifies the native Android configuration of your NativeScript project such as native dependencies, build types and configurations. For more information about the format of `include.gradle`, see [`include.gradle` file](#includegradle-specification).\n* `platforms\\ios`: This directory contains native dynamic iOS Cocoa Touch Frameworks (`.framework`) and Cocoa Touch Static Libraries (`.a`). During the plugin installation, the NativeScript CLI will copy these files to `lib\\iOS` in your project and will configure the iOS project in `platforms\\ios` to work with the libraries.  If the library is written in Swift, only APIs exposed to Objective-C are exposed to NativeScript. In case the plugin contains a Cocoa Touch Static Library (`.a`), you must place all public headers (`.h`) under `include\\<Static Library Name>\\`. Make sure that the static libraries are built at least for the following processor architectures - armv7, arm64, i386.\n* `platforms\\ios\\build.xcconfig`: This file modifies the native iOS configuration of your NativeScript project such as native dependencies and configurations. For more information about the format of `build.xcconfig`, see [`build.xcconfig` file](#buildxcconfig-specification).\n* `platforms\\ios\\Podfile`: This file describes the dependency to the library that you want to use. For more information, see [the CocoaPods article](CocoaPods.md).\n\n### Package.json Specification\n\nEvery NativeScript plugin should contain a valid `package.json` file in its root. This `package.json` file must meet the following requirements.\n\n* It must comply with the [npm specification](https://docs.npmjs.com/files/package.json).<br/>The `package.json` must contain at least `name` and `version` pairs. You will later use the plugin in your code by requiring it by its `name`.\n* It must contain a `nativescript` section which describes the supported NativeScript runtimes and their versions. This section can be empty. If you want to define supported platforms and runtimes, you can nest a `platforms` section. In this `platforms` section, you can nest `ios` and `android` key-value pairs. The values in these pairs must be valid runtime versions or ranges of values specified by a valid semver(7) syntax.\n* If the plugin depends on other npm modules, it must contain a `dependencies` section as described [here](https://docs.npmjs.com/files/package.json#dependencies).<br/>The NativeScript CLI will resolve the dependencies during the plugin installation.\n\n#### Package.json Example\n\nThe following is an example of a `package.json` file for a NativeScript plugin which supports the 1.0.0 version of the iOS runtime and the 1.1.0 version of the Android runtime.\n\n```JSON\n{\n  \"name\": \"myplugin\",\n  \"version\": \"0.0.1\",\n  \"nativescript\": {\n    \"platforms\": {\n      \"ios\": \"1.0.0\",\n      \"android\": \"1.1.0\"\n    }\n  }\n}\n```\n\n### Include.gradle Specification\n\nEvery NativeScript plugin, which contains native Android dependencies, should also contain a valid `include.gradle` file in the root of its `platforms\\android` directory. This `include.gradle` file must meet the following requirements.\n\n* It must contain its own [configuration](http://developer.android.com/tools/building/configuring-gradle.html).\n* It might contain native dependencies required to build the plugin properly.\n* Any native dependencies should be available in [jcenter](https://bintray.com/bintray/jcenter) or from the Android SDK installed on your machine.\n\n> **IMPORTANT:** If you don't have an `include.gradle` file, at build time, gradle will create a default one containing all default elements.\n\n#### Include.gradle Example\n```gradle\n//default elements\nandroid {\n  productFlavors {\n    \"my-plugin\" {\n      dimension \"my-plugin\"\n    }\n  }\n}\n\n//optional elements\ndependencies {\n    compile \"groupName:pluginName:ver\"\n}\n```\n\n### Build.xcconfig Specification\nEvery NativeScript plugin, which contains native iOS dependencies, can also contain a [valid](https://pewpewthespells.com/blog/xcconfig_guide.html) `build.xcconfig` file in the root of its `platforms\\ios` directory. This `build.xcconfig` file might contain native dependencies required to build the plugin properly.\n\n#### Build.xcconfig Example\n```\nOTHER_LDFLAGS = $(inherited) -framework \"QuartzCore\" -l\"sqlite3\"\n```\n\n## Install a Plugin\n\nTo install a plugin for your project, inside your project, run the following command.\n\n```Shell\ntns plugin add <Plugin>\n```\n\n### Valid Plugin Sources\n\nYou can specify a plugin by name in the npm registry, local path or URL. The following are valid values for the `<Plugin>` attribute.\n\n* A `<Name>` or `<Name>@<Version>` for plugins published in the npm registry.\n* A `<Local Path>` to the directory which contains the plugin files and its `package.json` file.\n* A `<Local Path>` to a `.tar.gz` archive containing a directory with the plugin and its `package.json` file.\n* A `<URL>` which resolves to a `.tar.gz` archive containing a directory with the plugin and its `package.json` file.\n* A `<git Remote URL>` which resolves to a `.tar.gz` archive containing a directory with the plugin and its `package.json` file.\n\n### Installation Specifics\n\nThe installation of a NativeScript plugin mimics the installation of an npm module.\n\nThe NativeScript CLI takes the plugin and installs it to the `node_modules` directory in the root of your project. During this process, the NativeScript CLI resolves any dependencies described in the plugin `package.json` file and adds the plugin to the project `package.json` file in the project root.\n\nIf the NativeScript CLI detects any native iOS libraries in the plugin, it copies the library files to the `lib\\ios` folder in your project and configures the iOS-specific projects in `platforms\\ios` to work with the library.\n\nNext, the NativeScript CLI runs a partial `prepare` operation for the plugin for all platforms configured for the project. During this operation, the CLI copies only the plugin to the `tns_modules` subdirectories in the `platforms\\android` and `platforms\\ios` directories in your project. If your plugin contains platform-specific `JS` files, the CLI copies them to the respective platform subdirectory and renames them by removing the platform modifier.\n\n> **TIP:** If you have not configured any platforms, when you run `$ tns platform add`, the NativeScript CLI will automatically prepare all installed plugins for the newly added platform.\n\nFinally, the CLI merges the plugin `Info.plist` file with `platforms\\ios\\Info.plist` in your project. The plugin `AndroidManifest.xml` will be merged with `platforms\\android\\AndroidManifest.xml` later, at build time.\n\n> **IMPORTANT:** Currently, the merging of the platform configuration files does not resolve any contradicting or duplicate entries.\n\n#### AndroidManifest.xml Merge Example\n\nThe following is an example of a plugin `AndroidManifest`, project `AndroidManifest.xml` and the resulting merged file after the plugin installation.\n\n**The Plugin Manifest**\n\n```XML\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <uses-permission android:name=\"android.permission.READ_CONTACTS\"/>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\" />\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n    <uses-permission android:name=\"com.example.towntour.permission.MAPS_RECEIVE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n    <uses-permission android:name=\"com.google.android.providers.gsf.permission.READ_GSERVICES\" />\n\n</manifest>\n```\n\n**The Project Manifest Located in `platforms\\android\\`**\n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"org.nativescript.test\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\" >\n\n   <uses-sdk\n        android:minSdkVersion=\"17\"\n        android:targetSdkVersion=\"17\" />\n\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n\n    <application\n        android:name=\"com.tns.NativeScriptApplication\"\n        android:allowBackup=\"true\"\n        android:icon=\"@drawable/icon\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/AppTheme\" >\n        <activity\n            android:name=\"com.tns.NativeScriptActivity\"\n            android:label=\"@string/title_activity_kimera\"\n            android:configChanges=\"keyboardHidden|orientation|screenSize\">\n\n             <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\n**The Merged Manifest Located in `platforms\\android\\`**\n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\n  xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"org.nativescript.test\" android:versionCode=\"1\" android:versionName=\"1.0\">\n  <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"21\"/>\n  <uses-permission android:name=\"android.permission.READ_CONTACTS\"/>\n  <uses-permission android:name=\"android.permission.INTERNET\"/>\n  <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n  <uses-permission android:name=\"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\"/>\n  <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\n  <uses-permission android:name=\"com.example.towntour.permission.MAPS_RECEIVE\"/>\n  <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n  <uses-permission android:name=\"android.permission.CALL_PHONE\"/>\n  <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/>\n  <!--\n    Some comment here\n  -->\n  <uses-permission android:name=\"com.google.android.providers.gsf.permission.READ_GSERVICES\"/>\n  <application android:name=\"com.tns.NativeScriptApplication\" android:allowBackup=\"true\" android:icon=\"@drawable/icon\" android:label=\"@string/app_name\" android:theme=\"@style/AppTheme\">\n    <activity android:name=\"com.tns.NativeScriptActivity\" android:label=\"@string/title_activity_kimera\" android:configChanges=\"keyboardHidden|orientation|screenSize\">\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\"/>\n        <action android:name=\"android.intent.action.EDIT\"/>\n        <action android:name=\"android.intent.action.VIEW\"/>\n        <category android:name=\"android.intent.category.LAUNCHER\"/>\n      </intent-filter>\n    </activity>\n  </application>\n</manifest>\n```\n\n### Manual Steps After Installation\n\nAfter the installation is complete, you need to open `platforms\\android\\AndroidManifest.xml` and `platforms\\ios\\Info.plist` in your project and inspect them for duplicate or contradicting entries. Make sure to preserve the settings required by the plugin. Otherwise, your app might not build or it might not work as expected, when deployed on device.\n\n## Use a Plugin\n\nTo use a plugin inside your project, you need to add a `require` in your app.\n\n```JavaScript\nvar myPlugin = require(\"myplugin\");\n```\n\nThis will look for a `myplugin` module with a valid `package.json` file in the `tns_modules` directory. Note that you must require the plugin with the value for the `name` key in the plugin `package.json` file.\n\n## Remove a Plugin\n\nTo remove a plugin from your project, inside your project, run the following command.\n\n```Shell\ntns plugin remove <Plugin>\n```\n\nYou must specify the plugin by the value for the `name` key in the plugin `package.json` file.\n\n### Removal Specifics\n\nThe removal of a NativeScript plugin mimics the removal of an npm module.\n\nThe NativeScript CLI removes any plugin files from the `node_modules` directory in the root of your project. During this process, the NativeScript CLI removes any dependencies described in the plugin `package.json` file and removes the plugin from the project `package.json` file in the project root.\n\n> **IMPORTANT:** For iOS, this operation does not remove files from the `platforms\\ios` directories and native iOS libraries, and does not unmerge the `Info.plist` file. For Android, this operation unmerges the `AndroidManifest.xml` file and takes care of removing any plugin files located in `platforms\\android`.\n\n### Manual Steps After Removal\n\nAfter the plugin removal is complete, make sure to remove any leftover native iOS library files from the `lib\\ios` directory in the root of the project. Update the iOS-specific projects in `platforms\\ios` to remove any dependencies on the removed native libraries.\n\nNext, you need to run the following command.\n\n```Shell\ntns prepare <Platform>\n```\n\nMake sure to run the command for all platforms configured for the project. During this operation, the NativeScript CLI will remove any leftover plugin files from your `platforms\\ios` directory.\n\n> **TIP:** Instead of `$ tns prepare` you can run `$ tns build`, `$ tns run`, `$ tns deploy` or `$ tns emulate`. All these commands run `$ tns prepare`.\n\nNext, open your `platforms\\ios\\Info.plist` file and remove any leftover entries from the plugin `Info.plist` file.\n\nFinally, make sure to update your code not to use the uninstalled plugin.\n","date":"2016-08-26T21:05:54.464Z","updated":"2016-08-26T21:05:54.464Z","path":"plugins/plugins.html","comments":1,"layout":"page","_id":"cisn95c6z000jwsl0826mja3s","content":"<h1 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h1><p>Starting with NativeScript CLI 1.1.0, you can develop or use plugins in your NativeScript projects.</p>\n<ul>\n<li><a href=\"#what-are-nativescript-plugins\">What Are NativeScript Plugins</a></li>\n<li><a href=\"#where-can-you-find-nativescript-plugins\">Where Can You Find NativeScript Plugins</a></li>\n<li><a href=\"#create-a-plugin\">Create a Plugin</a><ul>\n<li><a href=\"#directory-structure\">Directory Structure</a></li>\n<li><a href=\"#packagejson-specification\"><code>package.json</code> Specification</a></li>\n<li><a href=\"#includegradle-specification\"><code>include.gradle</code> Specification</a></li>\n<li><a href=\"#buildxcconfig-specification\"><code>build.xcconfig</code> Specification</a></li>\n</ul>\n</li>\n<li><a href=\"#install-a-plugin\">Install a Plugin</a><ul>\n<li><a href=\"#valid-plugin-sources\">Valid Plugin Sources</a></li>\n<li><a href=\"#installation-specifics\">Installation Specifics</a></li>\n<li><a href=\"#manual-steps-after-installation\">Manual Steps After Installation</a></li>\n</ul>\n</li>\n<li><a href=\"#use-a-plugin\">Use a Plugin</a></li>\n<li><a href=\"#remove-a-plugin\">Remove a Plugin</a><ul>\n<li><a href=\"#removal-specifics\">Removal Specifics</a></li>\n<li><a href=\"#manual-steps-after-removal\">Manual Steps After Removal</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"What-Are-NativeScript-Plugins\"><a href=\"#What-Are-NativeScript-Plugins\" class=\"headerlink\" title=\"What Are NativeScript Plugins\"></a>What Are NativeScript Plugins</h2><p>A NativeScript plugin is any npm package, published or not, that exposes a native API via JavaScript and consists of the following elements.</p>\n<ul>\n<li>A <code>package.json</code> file which contains the following metadata: name, version, supported runtime versions, dependencies and others. For more information, see the <a href=\"#packagejson-specification\"><code>package.json</code> Specification</a> section.</li>\n<li>One or more CommonJS modules that expose a native API via a unified JavaScript API. For more information about Common JS modules, see the <a href=\"http://wiki.commonjs.org/wiki/CommonJS\" target=\"_blank\" rel=\"external\">CommonJS Wiki</a>.</li>\n<li>(Optional) <code>AndroidManifest.xml</code> and <code>Info.plist</code> which describe the permissions, features or other configurations required or used by your app for Android and iOS, respectively.</li>\n<li>(Optional) Native Android libraries and the native Android <code>include.gradle</code> configuration file which describes the native dependencies. For more information, see the <a href=\"#includegradle-specification\"><code>include.gradle</code> Specification</a> section.</li>\n<li>(Optional) Native iOS libraries and the native <code>build.xcconfig</code> configuration file which describes the native dependencies. For more information, see the <a href=\"#buildxcconfig-specification\"><code>build.xcconfig</code> Specification</a> section.</li>\n</ul>\n<p>The plugin must have the directory structure, described in the <a href=\"#directory-structure\">Directory Structure</a> section.</p>\n<h2 id=\"Where-Can-You-Find-NativeScript-Plugins\"><a href=\"#Where-Can-You-Find-NativeScript-Plugins\" class=\"headerlink\" title=\"Where Can You Find NativeScript Plugins\"></a>Where Can You Find NativeScript Plugins</h2><p>You can find a list of Telerik-verified NativeScript plugins on the <a href=\"http://plugins.telerik.com/nativescript\" target=\"_blank\" rel=\"external\">Telerik Verified Plugin Marketplace</a>, and a list of community-written NativeScript plugins by <a href=\"https://www.npmjs.com/search?q=nativescript\" target=\"_blank\" rel=\"external\">searching for “nativescript” on npm</a>.</p>\n<h2 id=\"Create-a-Plugin\"><a href=\"#Create-a-Plugin\" class=\"headerlink\" title=\"Create a Plugin\"></a>Create a Plugin</h2><p>If the NativeScript framework does not expose a native API that you need, you can develop a plugin which exposes the required functionality. When you develop a plugin, keep in mind the following requirements.</p>\n<ul>\n<li>The plugin must be a valid npm package.</li>\n<li>The plugin must expose a built-in native API or a native API available via custom native libraries.</li>\n<li>The plugin must be written in JavaScript and must comply with the CommonJS specification. If you are using a transpiler, make sure to include the transpiled JavaScript files in your plugin.</li>\n<li>The plugin directory structure must comply with the specification described below.</li>\n<li>The plugin must contain a valid <code>package.json</code> which complies with the specification described below.</li>\n<li>If the plugin requires any permissions, features or other configuration specifics, it must contain <code>AndroidManifest.xml</code> or <code>Info.plist</code> file which describe them.</li>\n<li>If the plugin depends on native libraries, it must contain a valid <code>include.gradle</code> or <code>build.xcconfig</code> file, which describes the dependencies.</li>\n</ul>\n<h3 id=\"Directory-Structure\"><a href=\"#Directory-Structure\" class=\"headerlink\" title=\"Directory Structure\"></a>Directory Structure</h3><p>NativeScript plugins which consist of one CommonJS module might have the following directory structure.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-plugin/</div><div class=\"line\">├── index.js</div><div class=\"line\">├── package.json</div><div class=\"line\">└── platforms/</div><div class=\"line\">    ├── android/</div><div class=\"line\">    │   ├── res/</div><div class=\"line\">    │   └── AndroidManifest.xml</div><div class=\"line\">    └── ios/</div><div class=\"line\">        └── Info.plist</div></pre></td></tr></table></figure>\n<p>NativeScript plugins which consist of multiple CommonJS modules might have the following directory structure.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-plugin/</div><div class=\"line\">├── index.js</div><div class=\"line\">├── package.json</div><div class=\"line\">├── MyModule1/</div><div class=\"line\">│   ├── index1.js</div><div class=\"line\">│   └── package.json</div><div class=\"line\">├── MyModule2/</div><div class=\"line\">│   ├── index2.js</div><div class=\"line\">│   └── package.json</div><div class=\"line\">└── platforms/</div><div class=\"line\">    ├── android/</div><div class=\"line\">    │   ├── AndroidManifest.xml</div><div class=\"line\">    │   └── res/</div><div class=\"line\">    └── ios/</div><div class=\"line\">        └── Info.plist</div></pre></td></tr></table></figure>\n<ul>\n<li><code>index.js</code>: This file is the CommonJS module which exposes the native API. You can use platform-specific <code>*.platform.js</code> files. For example: <code>index.ios.js</code> and <code>index.android.js</code>. During the plugin installation, the NativeScript CLI will copy the platform resources to the <code>tns_modules</code> subdirectory in the correct platform destination in the <code>platforms</code> directory of your project.<br>Alternatively, you can give any name to this CommonJS module. In this case, however, you need to point to this file by setting the <code>main</code> key in the <code>package.json</code> for the plugin. For more information, see <a href=\"https://nodejs.org/api/modules.html#modules_folders_as_modules\" target=\"_blank\" rel=\"external\">Folders as Modules</a>.</li>\n<li><code>package.json</code>: This file contains the metadata for your plugin. It sets the supported runtimes, the plugin name and version and any dependencies. The <code>package.json</code> specification is described in detail below.</li>\n<li><code>platforms\\android\\AndroidManifest.xml</code>: This file describes any specific configuration changes required for your plugin to work. For example: required permissions. For more information about the format of <code>AndroidManifest.xml</code>, see <a href=\"http://developer.android.com/guide/topics/manifest/manifest-intro.html\" target=\"_blank\" rel=\"external\">App Manifest</a>.<br>During build, gradle will merge the plugin <code>AndroidManifest.xml</code> with the <code>AndroidManifest.xml</code> for your project. The NativeScript CLI will not resolve any contradicting or duplicate entries during the merge. After the plugin is installed, you need to manually resolve such issues.</li>\n<li><code>platforms\\android\\res</code>:  (Optional) This directory contains resources declared by the <code>AndroidManifest.xml</code> file. You can look at the folder structure <a href=\"http://developer.android.com/guide/topics/resources/providing-resources.html#ResourceTypes\" target=\"_blank\" rel=\"external\">here</a>.</li>\n<li><code>platforms\\ios\\Info.plist</code>: This file describes any specific configuration changes required for your plugin to work. For example, required permissions. For more information about the format of <code>Info.plist</code>, see <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html\" target=\"_blank\" rel=\"external\">About Information Property List Files</a>.<br>During the plugin installation, the NativeScript CLI will merge the plugin <code>Info.plist</code> with the <code>Info.plist</code> for your project. The NativeScript CLI will not resolve any contradicting or duplicate entries during the merge. After the plugin is installed, you need to manually resolve such issues.</li>\n</ul>\n<p>NativeScript plugins which contain both native Android and iOS libraries might have the following directory structure.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-plugin/</div><div class=\"line\">├── ...</div><div class=\"line\">└── platforms/</div><div class=\"line\">    ├── android/</div><div class=\"line\">    │   ├── res/</div><div class=\"line\">    │   ├── MyLibrary.jar</div><div class=\"line\">    │   ├── MyLibrary.aar</div><div class=\"line\">    │   ├── include.gradle</div><div class=\"line\">    │   └── AndroidManifest.xml</div><div class=\"line\">    └── ios/</div><div class=\"line\">        ├── MyiOSFramework.framework</div><div class=\"line\">        ├── build.xcconfig</div><div class=\"line\">        ├── Podfile</div><div class=\"line\">        ├── Info.plist</div><div class=\"line\">        ├── MyStaticiOSLibrary.a</div><div class=\"line\">        └── include/</div><div class=\"line\">            └── MyStaticiOSLibrary/</div><div class=\"line\">                └── ...</div></pre></td></tr></table></figure>\n<ul>\n<li><code>platforms\\android</code>: This directory contains any native Android libraries packaged as <code>*.jar</code> and <code>*.aar</code> packages. These native libraries can reside in the root of this directory or in a user-created sub-directory. During the plugin installation, the NativeScript CLI will configure the Android project in <code>platforms\\android</code> to work with the plugin.</li>\n<li><code>platforms\\android\\res</code>:  (Optional) This directory contains resources declared by the <code>AndroidManifest.xml</code> file. You can look at the folder structure <a href=\"http://developer.android.com/guide/topics/resources/providing-resources.html#ResourceTypes\" target=\"_blank\" rel=\"external\">here</a>.</li>\n<li><code>platforms\\android\\include.gradle</code>: This file modifies the native Android configuration of your NativeScript project such as native dependencies, build types and configurations. For more information about the format of <code>include.gradle</code>, see <a href=\"#includegradle-specification\"><code>include.gradle</code> file</a>.</li>\n<li><code>platforms\\ios</code>: This directory contains native dynamic iOS Cocoa Touch Frameworks (<code>.framework</code>) and Cocoa Touch Static Libraries (<code>.a</code>). During the plugin installation, the NativeScript CLI will copy these files to <code>lib\\iOS</code> in your project and will configure the iOS project in <code>platforms\\ios</code> to work with the libraries.  If the library is written in Swift, only APIs exposed to Objective-C are exposed to NativeScript. In case the plugin contains a Cocoa Touch Static Library (<code>.a</code>), you must place all public headers (<code>.h</code>) under <code>include\\&lt;Static Library Name&gt;\\</code>. Make sure that the static libraries are built at least for the following processor architectures - armv7, arm64, i386.</li>\n<li><code>platforms\\ios\\build.xcconfig</code>: This file modifies the native iOS configuration of your NativeScript project such as native dependencies and configurations. For more information about the format of <code>build.xcconfig</code>, see <a href=\"#buildxcconfig-specification\"><code>build.xcconfig</code> file</a>.</li>\n<li><code>platforms\\ios\\Podfile</code>: This file describes the dependency to the library that you want to use. For more information, see <a href=\"CocoaPods.md\">the CocoaPods article</a>.</li>\n</ul>\n<h3 id=\"Package-json-Specification\"><a href=\"#Package-json-Specification\" class=\"headerlink\" title=\"Package.json Specification\"></a>Package.json Specification</h3><p>Every NativeScript plugin should contain a valid <code>package.json</code> file in its root. This <code>package.json</code> file must meet the following requirements.</p>\n<ul>\n<li>It must comply with the <a href=\"https://docs.npmjs.com/files/package.json\" target=\"_blank\" rel=\"external\">npm specification</a>.<br>The <code>package.json</code> must contain at least <code>name</code> and <code>version</code> pairs. You will later use the plugin in your code by requiring it by its <code>name</code>.</li>\n<li>It must contain a <code>nativescript</code> section which describes the supported NativeScript runtimes and their versions. This section can be empty. If you want to define supported platforms and runtimes, you can nest a <code>platforms</code> section. In this <code>platforms</code> section, you can nest <code>ios</code> and <code>android</code> key-value pairs. The values in these pairs must be valid runtime versions or ranges of values specified by a valid semver(7) syntax.</li>\n<li>If the plugin depends on other npm modules, it must contain a <code>dependencies</code> section as described <a href=\"https://docs.npmjs.com/files/package.json#dependencies\" target=\"_blank\" rel=\"external\">here</a>.<br>The NativeScript CLI will resolve the dependencies during the plugin installation.</li>\n</ul>\n<h4 id=\"Package-json-Example\"><a href=\"#Package-json-Example\" class=\"headerlink\" title=\"Package.json Example\"></a>Package.json Example</h4><p>The following is an example of a <code>package.json</code> file for a NativeScript plugin which supports the 1.0.0 version of the iOS runtime and the 1.1.0 version of the Android runtime.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"myplugin\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"nativescript\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"platforms\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"ios\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"android\"</span>: <span class=\"string\">\"1.1.0\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Include-gradle-Specification\"><a href=\"#Include-gradle-Specification\" class=\"headerlink\" title=\"Include.gradle Specification\"></a>Include.gradle Specification</h3><p>Every NativeScript plugin, which contains native Android dependencies, should also contain a valid <code>include.gradle</code> file in the root of its <code>platforms\\android</code> directory. This <code>include.gradle</code> file must meet the following requirements.</p>\n<ul>\n<li>It must contain its own <a href=\"http://developer.android.com/tools/building/configuring-gradle.html\" target=\"_blank\" rel=\"external\">configuration</a>.</li>\n<li>It might contain native dependencies required to build the plugin properly.</li>\n<li>Any native dependencies should be available in <a href=\"https://bintray.com/bintray/jcenter\" target=\"_blank\" rel=\"external\">jcenter</a> or from the Android SDK installed on your machine.</li>\n</ul>\n<blockquote>\n<p><strong>IMPORTANT:</strong> If you don’t have an <code>include.gradle</code> file, at build time, gradle will create a default one containing all default elements.</p>\n</blockquote>\n<h4 id=\"Include-gradle-Example\"><a href=\"#Include-gradle-Example\" class=\"headerlink\" title=\"Include.gradle Example\"></a>Include.gradle Example</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//default elements</span></div><div class=\"line\">android &#123;</div><div class=\"line\">  productFlavors &#123;</div><div class=\"line\">    <span class=\"string\">\"my-plugin\"</span> &#123;</div><div class=\"line\">      dimension <span class=\"string\">\"my-plugin\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//optional elements</span></div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">\"groupName:pluginName:ver\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Build-xcconfig-Specification\"><a href=\"#Build-xcconfig-Specification\" class=\"headerlink\" title=\"Build.xcconfig Specification\"></a>Build.xcconfig Specification</h3><p>Every NativeScript plugin, which contains native iOS dependencies, can also contain a <a href=\"https://pewpewthespells.com/blog/xcconfig_guide.html\" target=\"_blank\" rel=\"external\">valid</a> <code>build.xcconfig</code> file in the root of its <code>platforms\\ios</code> directory. This <code>build.xcconfig</code> file might contain native dependencies required to build the plugin properly.</p>\n<h4 id=\"Build-xcconfig-Example\"><a href=\"#Build-xcconfig-Example\" class=\"headerlink\" title=\"Build.xcconfig Example\"></a>Build.xcconfig Example</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">OTHER_LDFLAGS = $(inherited) -framework &quot;QuartzCore&quot; -l&quot;sqlite3&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"Install-a-Plugin\"><a href=\"#Install-a-Plugin\" class=\"headerlink\" title=\"Install a Plugin\"></a>Install a Plugin</h2><p>To install a plugin for your project, inside your project, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add &lt;Plugin&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Valid-Plugin-Sources\"><a href=\"#Valid-Plugin-Sources\" class=\"headerlink\" title=\"Valid Plugin Sources\"></a>Valid Plugin Sources</h3><p>You can specify a plugin by name in the npm registry, local path or URL. The following are valid values for the <code>&lt;Plugin&gt;</code> attribute.</p>\n<ul>\n<li>A <code>&lt;Name&gt;</code> or <code>&lt;Name&gt;@&lt;Version&gt;</code> for plugins published in the npm registry.</li>\n<li>A <code>&lt;Local Path&gt;</code> to the directory which contains the plugin files and its <code>package.json</code> file.</li>\n<li>A <code>&lt;Local Path&gt;</code> to a <code>.tar.gz</code> archive containing a directory with the plugin and its <code>package.json</code> file.</li>\n<li>A <code>&lt;URL&gt;</code> which resolves to a <code>.tar.gz</code> archive containing a directory with the plugin and its <code>package.json</code> file.</li>\n<li>A <code>&lt;git Remote URL&gt;</code> which resolves to a <code>.tar.gz</code> archive containing a directory with the plugin and its <code>package.json</code> file.</li>\n</ul>\n<h3 id=\"Installation-Specifics\"><a href=\"#Installation-Specifics\" class=\"headerlink\" title=\"Installation Specifics\"></a>Installation Specifics</h3><p>The installation of a NativeScript plugin mimics the installation of an npm module.</p>\n<p>The NativeScript CLI takes the plugin and installs it to the <code>node_modules</code> directory in the root of your project. During this process, the NativeScript CLI resolves any dependencies described in the plugin <code>package.json</code> file and adds the plugin to the project <code>package.json</code> file in the project root.</p>\n<p>If the NativeScript CLI detects any native iOS libraries in the plugin, it copies the library files to the <code>lib\\ios</code> folder in your project and configures the iOS-specific projects in <code>platforms\\ios</code> to work with the library.</p>\n<p>Next, the NativeScript CLI runs a partial <code>prepare</code> operation for the plugin for all platforms configured for the project. During this operation, the CLI copies only the plugin to the <code>tns_modules</code> subdirectories in the <code>platforms\\android</code> and <code>platforms\\ios</code> directories in your project. If your plugin contains platform-specific <code>JS</code> files, the CLI copies them to the respective platform subdirectory and renames them by removing the platform modifier.</p>\n<blockquote>\n<p><strong>TIP:</strong> If you have not configured any platforms, when you run <code>$ tns platform add</code>, the NativeScript CLI will automatically prepare all installed plugins for the newly added platform.</p>\n</blockquote>\n<p>Finally, the CLI merges the plugin <code>Info.plist</code> file with <code>platforms\\ios\\Info.plist</code> in your project. The plugin <code>AndroidManifest.xml</code> will be merged with <code>platforms\\android\\AndroidManifest.xml</code> later, at build time.</p>\n<blockquote>\n<p><strong>IMPORTANT:</strong> Currently, the merging of the platform configuration files does not resolve any contradicting or duplicate entries.</p>\n</blockquote>\n<h4 id=\"AndroidManifest-xml-Merge-Example\"><a href=\"#AndroidManifest-xml-Merge-Example\" class=\"headerlink\" title=\"AndroidManifest.xml Merge Example\"></a>AndroidManifest.xml Merge Example</h4><p>The following is an example of a plugin <code>AndroidManifest</code>, project <code>AndroidManifest.xml</code> and the resulting merged file after the plugin installation.</p>\n<p><strong>The Plugin Manifest</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_CONTACTS\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_FINE_LOCATION\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_COARSE_LOCATION\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.towntour.permission.MAPS_RECEIVE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_NETWORK_STATE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CALL_PHONE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_PHONE_STATE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.google.android.providers.gsf.permission.READ_GSERVICES\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>The Project Manifest Located in <code>platforms\\android\\</code></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"org.nativescript.test\"</span></div><div class=\"line\">    <span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    <span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span></span></div><div class=\"line\">        <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"17\"</span></div><div class=\"line\">        <span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"17\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_EXTERNAL_STORAGE\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tns.NativeScriptApplication\"</span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span> &gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tns.NativeScriptActivity\"</span></div><div class=\"line\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/title_activity_kimera\"</span></div><div class=\"line\">            <span class=\"attr\">android:configChanges</span>=<span class=\"string\">\"keyboardHidden|orientation|screenSize\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>The Merged Manifest Located in <code>platforms\\android\\</code></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span></span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span> <span class=\"attr\">package</span>=<span class=\"string\">\"org.nativescript.test\"</span> <span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span> <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"19\"</span> <span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"21\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_CONTACTS\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_FINE_LOCATION\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_COARSE_LOCATION\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.towntour.permission.MAPS_RECEIVE\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_NETWORK_STATE\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CALL_PHONE\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_PHONE_STATE\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--</span></div><div class=\"line\">    Some comment here</div><div class=\"line\">  --&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.google.android.providers.gsf.permission.READ_GSERVICES\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tns.NativeScriptApplication\"</span> <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon\"</span> <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tns.NativeScriptActivity\"</span> <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/title_activity_kimera\"</span> <span class=\"attr\">android:configChanges</span>=<span class=\"string\">\"keyboardHidden|orientation|screenSize\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.EDIT\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Manual-Steps-After-Installation\"><a href=\"#Manual-Steps-After-Installation\" class=\"headerlink\" title=\"Manual Steps After Installation\"></a>Manual Steps After Installation</h3><p>After the installation is complete, you need to open <code>platforms\\android\\AndroidManifest.xml</code> and <code>platforms\\ios\\Info.plist</code> in your project and inspect them for duplicate or contradicting entries. Make sure to preserve the settings required by the plugin. Otherwise, your app might not build or it might not work as expected, when deployed on device.</p>\n<h2 id=\"Use-a-Plugin\"><a href=\"#Use-a-Plugin\" class=\"headerlink\" title=\"Use a Plugin\"></a>Use a Plugin</h2><p>To use a plugin inside your project, you need to add a <code>require</code> in your app.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"myplugin\"</span>);</div></pre></td></tr></table></figure>\n<p>This will look for a <code>myplugin</code> module with a valid <code>package.json</code> file in the <code>tns_modules</code> directory. Note that you must require the plugin with the value for the <code>name</code> key in the plugin <code>package.json</code> file.</p>\n<h2 id=\"Remove-a-Plugin\"><a href=\"#Remove-a-Plugin\" class=\"headerlink\" title=\"Remove a Plugin\"></a>Remove a Plugin</h2><p>To remove a plugin from your project, inside your project, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin remove &lt;Plugin&gt;</div></pre></td></tr></table></figure>\n<p>You must specify the plugin by the value for the <code>name</code> key in the plugin <code>package.json</code> file.</p>\n<h3 id=\"Removal-Specifics\"><a href=\"#Removal-Specifics\" class=\"headerlink\" title=\"Removal Specifics\"></a>Removal Specifics</h3><p>The removal of a NativeScript plugin mimics the removal of an npm module.</p>\n<p>The NativeScript CLI removes any plugin files from the <code>node_modules</code> directory in the root of your project. During this process, the NativeScript CLI removes any dependencies described in the plugin <code>package.json</code> file and removes the plugin from the project <code>package.json</code> file in the project root.</p>\n<blockquote>\n<p><strong>IMPORTANT:</strong> For iOS, this operation does not remove files from the <code>platforms\\ios</code> directories and native iOS libraries, and does not unmerge the <code>Info.plist</code> file. For Android, this operation unmerges the <code>AndroidManifest.xml</code> file and takes care of removing any plugin files located in <code>platforms\\android</code>.</p>\n</blockquote>\n<h3 id=\"Manual-Steps-After-Removal\"><a href=\"#Manual-Steps-After-Removal\" class=\"headerlink\" title=\"Manual Steps After Removal\"></a>Manual Steps After Removal</h3><p>After the plugin removal is complete, make sure to remove any leftover native iOS library files from the <code>lib\\ios</code> directory in the root of the project. Update the iOS-specific projects in <code>platforms\\ios</code> to remove any dependencies on the removed native libraries.</p>\n<p>Next, you need to run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns prepare &lt;Platform&gt;</div></pre></td></tr></table></figure>\n<p>Make sure to run the command for all platforms configured for the project. During this operation, the NativeScript CLI will remove any leftover plugin files from your <code>platforms\\ios</code> directory.</p>\n<blockquote>\n<p><strong>TIP:</strong> Instead of <code>$ tns prepare</code> you can run <code>$ tns build</code>, <code>$ tns run</code>, <code>$ tns deploy</code> or <code>$ tns emulate</code>. All these commands run <code>$ tns prepare</code>.</p>\n</blockquote>\n<p>Next, open your <code>platforms\\ios\\Info.plist</code> file and remove any leftover entries from the plugin <code>Info.plist</code> file.</p>\n<p>Finally, make sure to update your code not to use the uninstalled plugin.</p>\n","excerpt":"","more":"<h1 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h1><p>Starting with NativeScript CLI 1.1.0, you can develop or use plugins in your NativeScript projects.</p>\n<ul>\n<li><a href=\"#what-are-nativescript-plugins\">What Are NativeScript Plugins</a></li>\n<li><a href=\"#where-can-you-find-nativescript-plugins\">Where Can You Find NativeScript Plugins</a></li>\n<li><a href=\"#create-a-plugin\">Create a Plugin</a><ul>\n<li><a href=\"#directory-structure\">Directory Structure</a></li>\n<li><a href=\"#packagejson-specification\"><code>package.json</code> Specification</a></li>\n<li><a href=\"#includegradle-specification\"><code>include.gradle</code> Specification</a></li>\n<li><a href=\"#buildxcconfig-specification\"><code>build.xcconfig</code> Specification</a></li>\n</ul>\n</li>\n<li><a href=\"#install-a-plugin\">Install a Plugin</a><ul>\n<li><a href=\"#valid-plugin-sources\">Valid Plugin Sources</a></li>\n<li><a href=\"#installation-specifics\">Installation Specifics</a></li>\n<li><a href=\"#manual-steps-after-installation\">Manual Steps After Installation</a></li>\n</ul>\n</li>\n<li><a href=\"#use-a-plugin\">Use a Plugin</a></li>\n<li><a href=\"#remove-a-plugin\">Remove a Plugin</a><ul>\n<li><a href=\"#removal-specifics\">Removal Specifics</a></li>\n<li><a href=\"#manual-steps-after-removal\">Manual Steps After Removal</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"What-Are-NativeScript-Plugins\"><a href=\"#What-Are-NativeScript-Plugins\" class=\"headerlink\" title=\"What Are NativeScript Plugins\"></a>What Are NativeScript Plugins</h2><p>A NativeScript plugin is any npm package, published or not, that exposes a native API via JavaScript and consists of the following elements.</p>\n<ul>\n<li>A <code>package.json</code> file which contains the following metadata: name, version, supported runtime versions, dependencies and others. For more information, see the <a href=\"#packagejson-specification\"><code>package.json</code> Specification</a> section.</li>\n<li>One or more CommonJS modules that expose a native API via a unified JavaScript API. For more information about Common JS modules, see the <a href=\"http://wiki.commonjs.org/wiki/CommonJS\">CommonJS Wiki</a>.</li>\n<li>(Optional) <code>AndroidManifest.xml</code> and <code>Info.plist</code> which describe the permissions, features or other configurations required or used by your app for Android and iOS, respectively.</li>\n<li>(Optional) Native Android libraries and the native Android <code>include.gradle</code> configuration file which describes the native dependencies. For more information, see the <a href=\"#includegradle-specification\"><code>include.gradle</code> Specification</a> section.</li>\n<li>(Optional) Native iOS libraries and the native <code>build.xcconfig</code> configuration file which describes the native dependencies. For more information, see the <a href=\"#buildxcconfig-specification\"><code>build.xcconfig</code> Specification</a> section.</li>\n</ul>\n<p>The plugin must have the directory structure, described in the <a href=\"#directory-structure\">Directory Structure</a> section.</p>\n<h2 id=\"Where-Can-You-Find-NativeScript-Plugins\"><a href=\"#Where-Can-You-Find-NativeScript-Plugins\" class=\"headerlink\" title=\"Where Can You Find NativeScript Plugins\"></a>Where Can You Find NativeScript Plugins</h2><p>You can find a list of Telerik-verified NativeScript plugins on the <a href=\"http://plugins.telerik.com/nativescript\">Telerik Verified Plugin Marketplace</a>, and a list of community-written NativeScript plugins by <a href=\"https://www.npmjs.com/search?q=nativescript\">searching for “nativescript” on npm</a>.</p>\n<h2 id=\"Create-a-Plugin\"><a href=\"#Create-a-Plugin\" class=\"headerlink\" title=\"Create a Plugin\"></a>Create a Plugin</h2><p>If the NativeScript framework does not expose a native API that you need, you can develop a plugin which exposes the required functionality. When you develop a plugin, keep in mind the following requirements.</p>\n<ul>\n<li>The plugin must be a valid npm package.</li>\n<li>The plugin must expose a built-in native API or a native API available via custom native libraries.</li>\n<li>The plugin must be written in JavaScript and must comply with the CommonJS specification. If you are using a transpiler, make sure to include the transpiled JavaScript files in your plugin.</li>\n<li>The plugin directory structure must comply with the specification described below.</li>\n<li>The plugin must contain a valid <code>package.json</code> which complies with the specification described below.</li>\n<li>If the plugin requires any permissions, features or other configuration specifics, it must contain <code>AndroidManifest.xml</code> or <code>Info.plist</code> file which describe them.</li>\n<li>If the plugin depends on native libraries, it must contain a valid <code>include.gradle</code> or <code>build.xcconfig</code> file, which describes the dependencies.</li>\n</ul>\n<h3 id=\"Directory-Structure\"><a href=\"#Directory-Structure\" class=\"headerlink\" title=\"Directory Structure\"></a>Directory Structure</h3><p>NativeScript plugins which consist of one CommonJS module might have the following directory structure.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-plugin/</div><div class=\"line\">├── index.js</div><div class=\"line\">├── package.json</div><div class=\"line\">└── platforms/</div><div class=\"line\">    ├── android/</div><div class=\"line\">    │   ├── res/</div><div class=\"line\">    │   └── AndroidManifest.xml</div><div class=\"line\">    └── ios/</div><div class=\"line\">        └── Info.plist</div></pre></td></tr></table></figure>\n<p>NativeScript plugins which consist of multiple CommonJS modules might have the following directory structure.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-plugin/</div><div class=\"line\">├── index.js</div><div class=\"line\">├── package.json</div><div class=\"line\">├── MyModule1/</div><div class=\"line\">│   ├── index1.js</div><div class=\"line\">│   └── package.json</div><div class=\"line\">├── MyModule2/</div><div class=\"line\">│   ├── index2.js</div><div class=\"line\">│   └── package.json</div><div class=\"line\">└── platforms/</div><div class=\"line\">    ├── android/</div><div class=\"line\">    │   ├── AndroidManifest.xml</div><div class=\"line\">    │   └── res/</div><div class=\"line\">    └── ios/</div><div class=\"line\">        └── Info.plist</div></pre></td></tr></table></figure>\n<ul>\n<li><code>index.js</code>: This file is the CommonJS module which exposes the native API. You can use platform-specific <code>*.platform.js</code> files. For example: <code>index.ios.js</code> and <code>index.android.js</code>. During the plugin installation, the NativeScript CLI will copy the platform resources to the <code>tns_modules</code> subdirectory in the correct platform destination in the <code>platforms</code> directory of your project.<br/>Alternatively, you can give any name to this CommonJS module. In this case, however, you need to point to this file by setting the <code>main</code> key in the <code>package.json</code> for the plugin. For more information, see <a href=\"https://nodejs.org/api/modules.html#modules_folders_as_modules\">Folders as Modules</a>.</li>\n<li><code>package.json</code>: This file contains the metadata for your plugin. It sets the supported runtimes, the plugin name and version and any dependencies. The <code>package.json</code> specification is described in detail below.</li>\n<li><code>platforms\\android\\AndroidManifest.xml</code>: This file describes any specific configuration changes required for your plugin to work. For example: required permissions. For more information about the format of <code>AndroidManifest.xml</code>, see <a href=\"http://developer.android.com/guide/topics/manifest/manifest-intro.html\">App Manifest</a>.<br/>During build, gradle will merge the plugin <code>AndroidManifest.xml</code> with the <code>AndroidManifest.xml</code> for your project. The NativeScript CLI will not resolve any contradicting or duplicate entries during the merge. After the plugin is installed, you need to manually resolve such issues.</li>\n<li><code>platforms\\android\\res</code>:  (Optional) This directory contains resources declared by the <code>AndroidManifest.xml</code> file. You can look at the folder structure <a href=\"http://developer.android.com/guide/topics/resources/providing-resources.html#ResourceTypes\">here</a>.</li>\n<li><code>platforms\\ios\\Info.plist</code>: This file describes any specific configuration changes required for your plugin to work. For example, required permissions. For more information about the format of <code>Info.plist</code>, see <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html\">About Information Property List Files</a>.<br/>During the plugin installation, the NativeScript CLI will merge the plugin <code>Info.plist</code> with the <code>Info.plist</code> for your project. The NativeScript CLI will not resolve any contradicting or duplicate entries during the merge. After the plugin is installed, you need to manually resolve such issues.</li>\n</ul>\n<p>NativeScript plugins which contain both native Android and iOS libraries might have the following directory structure.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-plugin/</div><div class=\"line\">├── ...</div><div class=\"line\">└── platforms/</div><div class=\"line\">    ├── android/</div><div class=\"line\">    │   ├── res/</div><div class=\"line\">    │   ├── MyLibrary.jar</div><div class=\"line\">    │   ├── MyLibrary.aar</div><div class=\"line\">    │   ├── include.gradle</div><div class=\"line\">    │   └── AndroidManifest.xml</div><div class=\"line\">    └── ios/</div><div class=\"line\">        ├── MyiOSFramework.framework</div><div class=\"line\">        ├── build.xcconfig</div><div class=\"line\">        ├── Podfile</div><div class=\"line\">        ├── Info.plist</div><div class=\"line\">        ├── MyStaticiOSLibrary.a</div><div class=\"line\">        └── include/</div><div class=\"line\">            └── MyStaticiOSLibrary/</div><div class=\"line\">                └── ...</div></pre></td></tr></table></figure>\n<ul>\n<li><code>platforms\\android</code>: This directory contains any native Android libraries packaged as <code>*.jar</code> and <code>*.aar</code> packages. These native libraries can reside in the root of this directory or in a user-created sub-directory. During the plugin installation, the NativeScript CLI will configure the Android project in <code>platforms\\android</code> to work with the plugin.</li>\n<li><code>platforms\\android\\res</code>:  (Optional) This directory contains resources declared by the <code>AndroidManifest.xml</code> file. You can look at the folder structure <a href=\"http://developer.android.com/guide/topics/resources/providing-resources.html#ResourceTypes\">here</a>.</li>\n<li><code>platforms\\android\\include.gradle</code>: This file modifies the native Android configuration of your NativeScript project such as native dependencies, build types and configurations. For more information about the format of <code>include.gradle</code>, see <a href=\"#includegradle-specification\"><code>include.gradle</code> file</a>.</li>\n<li><code>platforms\\ios</code>: This directory contains native dynamic iOS Cocoa Touch Frameworks (<code>.framework</code>) and Cocoa Touch Static Libraries (<code>.a</code>). During the plugin installation, the NativeScript CLI will copy these files to <code>lib\\iOS</code> in your project and will configure the iOS project in <code>platforms\\ios</code> to work with the libraries.  If the library is written in Swift, only APIs exposed to Objective-C are exposed to NativeScript. In case the plugin contains a Cocoa Touch Static Library (<code>.a</code>), you must place all public headers (<code>.h</code>) under <code>include\\&lt;Static Library Name&gt;\\</code>. Make sure that the static libraries are built at least for the following processor architectures - armv7, arm64, i386.</li>\n<li><code>platforms\\ios\\build.xcconfig</code>: This file modifies the native iOS configuration of your NativeScript project such as native dependencies and configurations. For more information about the format of <code>build.xcconfig</code>, see <a href=\"#buildxcconfig-specification\"><code>build.xcconfig</code> file</a>.</li>\n<li><code>platforms\\ios\\Podfile</code>: This file describes the dependency to the library that you want to use. For more information, see <a href=\"CocoaPods.md\">the CocoaPods article</a>.</li>\n</ul>\n<h3 id=\"Package-json-Specification\"><a href=\"#Package-json-Specification\" class=\"headerlink\" title=\"Package.json Specification\"></a>Package.json Specification</h3><p>Every NativeScript plugin should contain a valid <code>package.json</code> file in its root. This <code>package.json</code> file must meet the following requirements.</p>\n<ul>\n<li>It must comply with the <a href=\"https://docs.npmjs.com/files/package.json\">npm specification</a>.<br/>The <code>package.json</code> must contain at least <code>name</code> and <code>version</code> pairs. You will later use the plugin in your code by requiring it by its <code>name</code>.</li>\n<li>It must contain a <code>nativescript</code> section which describes the supported NativeScript runtimes and their versions. This section can be empty. If you want to define supported platforms and runtimes, you can nest a <code>platforms</code> section. In this <code>platforms</code> section, you can nest <code>ios</code> and <code>android</code> key-value pairs. The values in these pairs must be valid runtime versions or ranges of values specified by a valid semver(7) syntax.</li>\n<li>If the plugin depends on other npm modules, it must contain a <code>dependencies</code> section as described <a href=\"https://docs.npmjs.com/files/package.json#dependencies\">here</a>.<br/>The NativeScript CLI will resolve the dependencies during the plugin installation.</li>\n</ul>\n<h4 id=\"Package-json-Example\"><a href=\"#Package-json-Example\" class=\"headerlink\" title=\"Package.json Example\"></a>Package.json Example</h4><p>The following is an example of a <code>package.json</code> file for a NativeScript plugin which supports the 1.0.0 version of the iOS runtime and the 1.1.0 version of the Android runtime.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"myplugin\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"nativescript\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"platforms\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"ios\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"android\"</span>: <span class=\"string\">\"1.1.0\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Include-gradle-Specification\"><a href=\"#Include-gradle-Specification\" class=\"headerlink\" title=\"Include.gradle Specification\"></a>Include.gradle Specification</h3><p>Every NativeScript plugin, which contains native Android dependencies, should also contain a valid <code>include.gradle</code> file in the root of its <code>platforms\\android</code> directory. This <code>include.gradle</code> file must meet the following requirements.</p>\n<ul>\n<li>It must contain its own <a href=\"http://developer.android.com/tools/building/configuring-gradle.html\">configuration</a>.</li>\n<li>It might contain native dependencies required to build the plugin properly.</li>\n<li>Any native dependencies should be available in <a href=\"https://bintray.com/bintray/jcenter\">jcenter</a> or from the Android SDK installed on your machine.</li>\n</ul>\n<blockquote>\n<p><strong>IMPORTANT:</strong> If you don’t have an <code>include.gradle</code> file, at build time, gradle will create a default one containing all default elements.</p>\n</blockquote>\n<h4 id=\"Include-gradle-Example\"><a href=\"#Include-gradle-Example\" class=\"headerlink\" title=\"Include.gradle Example\"></a>Include.gradle Example</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//default elements</span></div><div class=\"line\">android &#123;</div><div class=\"line\">  productFlavors &#123;</div><div class=\"line\">    <span class=\"string\">\"my-plugin\"</span> &#123;</div><div class=\"line\">      dimension <span class=\"string\">\"my-plugin\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//optional elements</span></div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">\"groupName:pluginName:ver\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Build-xcconfig-Specification\"><a href=\"#Build-xcconfig-Specification\" class=\"headerlink\" title=\"Build.xcconfig Specification\"></a>Build.xcconfig Specification</h3><p>Every NativeScript plugin, which contains native iOS dependencies, can also contain a <a href=\"https://pewpewthespells.com/blog/xcconfig_guide.html\">valid</a> <code>build.xcconfig</code> file in the root of its <code>platforms\\ios</code> directory. This <code>build.xcconfig</code> file might contain native dependencies required to build the plugin properly.</p>\n<h4 id=\"Build-xcconfig-Example\"><a href=\"#Build-xcconfig-Example\" class=\"headerlink\" title=\"Build.xcconfig Example\"></a>Build.xcconfig Example</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">OTHER_LDFLAGS = $(inherited) -framework &quot;QuartzCore&quot; -l&quot;sqlite3&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"Install-a-Plugin\"><a href=\"#Install-a-Plugin\" class=\"headerlink\" title=\"Install a Plugin\"></a>Install a Plugin</h2><p>To install a plugin for your project, inside your project, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add &lt;Plugin&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Valid-Plugin-Sources\"><a href=\"#Valid-Plugin-Sources\" class=\"headerlink\" title=\"Valid Plugin Sources\"></a>Valid Plugin Sources</h3><p>You can specify a plugin by name in the npm registry, local path or URL. The following are valid values for the <code>&lt;Plugin&gt;</code> attribute.</p>\n<ul>\n<li>A <code>&lt;Name&gt;</code> or <code>&lt;Name&gt;@&lt;Version&gt;</code> for plugins published in the npm registry.</li>\n<li>A <code>&lt;Local Path&gt;</code> to the directory which contains the plugin files and its <code>package.json</code> file.</li>\n<li>A <code>&lt;Local Path&gt;</code> to a <code>.tar.gz</code> archive containing a directory with the plugin and its <code>package.json</code> file.</li>\n<li>A <code>&lt;URL&gt;</code> which resolves to a <code>.tar.gz</code> archive containing a directory with the plugin and its <code>package.json</code> file.</li>\n<li>A <code>&lt;git Remote URL&gt;</code> which resolves to a <code>.tar.gz</code> archive containing a directory with the plugin and its <code>package.json</code> file.</li>\n</ul>\n<h3 id=\"Installation-Specifics\"><a href=\"#Installation-Specifics\" class=\"headerlink\" title=\"Installation Specifics\"></a>Installation Specifics</h3><p>The installation of a NativeScript plugin mimics the installation of an npm module.</p>\n<p>The NativeScript CLI takes the plugin and installs it to the <code>node_modules</code> directory in the root of your project. During this process, the NativeScript CLI resolves any dependencies described in the plugin <code>package.json</code> file and adds the plugin to the project <code>package.json</code> file in the project root.</p>\n<p>If the NativeScript CLI detects any native iOS libraries in the plugin, it copies the library files to the <code>lib\\ios</code> folder in your project and configures the iOS-specific projects in <code>platforms\\ios</code> to work with the library.</p>\n<p>Next, the NativeScript CLI runs a partial <code>prepare</code> operation for the plugin for all platforms configured for the project. During this operation, the CLI copies only the plugin to the <code>tns_modules</code> subdirectories in the <code>platforms\\android</code> and <code>platforms\\ios</code> directories in your project. If your plugin contains platform-specific <code>JS</code> files, the CLI copies them to the respective platform subdirectory and renames them by removing the platform modifier.</p>\n<blockquote>\n<p><strong>TIP:</strong> If you have not configured any platforms, when you run <code>$ tns platform add</code>, the NativeScript CLI will automatically prepare all installed plugins for the newly added platform.</p>\n</blockquote>\n<p>Finally, the CLI merges the plugin <code>Info.plist</code> file with <code>platforms\\ios\\Info.plist</code> in your project. The plugin <code>AndroidManifest.xml</code> will be merged with <code>platforms\\android\\AndroidManifest.xml</code> later, at build time.</p>\n<blockquote>\n<p><strong>IMPORTANT:</strong> Currently, the merging of the platform configuration files does not resolve any contradicting or duplicate entries.</p>\n</blockquote>\n<h4 id=\"AndroidManifest-xml-Merge-Example\"><a href=\"#AndroidManifest-xml-Merge-Example\" class=\"headerlink\" title=\"AndroidManifest.xml Merge Example\"></a>AndroidManifest.xml Merge Example</h4><p>The following is an example of a plugin <code>AndroidManifest</code>, project <code>AndroidManifest.xml</code> and the resulting merged file after the plugin installation.</p>\n<p><strong>The Plugin Manifest</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_CONTACTS\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_FINE_LOCATION\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_COARSE_LOCATION\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.towntour.permission.MAPS_RECEIVE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_NETWORK_STATE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CALL_PHONE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_PHONE_STATE\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.google.android.providers.gsf.permission.READ_GSERVICES\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>The Project Manifest Located in <code>platforms\\android\\</code></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"org.nativescript.test\"</span></div><div class=\"line\">    <span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    <span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span> &gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span></div><div class=\"line\">        <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"17\"</span></div><div class=\"line\">        <span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"17\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_EXTERNAL_STORAGE\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tns.NativeScriptApplication\"</span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tns.NativeScriptActivity\"</span></div><div class=\"line\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/title_activity_kimera\"</span></div><div class=\"line\">            <span class=\"attr\">android:configChanges</span>=<span class=\"string\">\"keyboardHidden|orientation|screenSize\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>The Merged Manifest Located in <code>platforms\\android\\</code></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span> <span class=\"attr\">package</span>=<span class=\"string\">\"org.nativescript.test\"</span> <span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span> <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"19\"</span> <span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"21\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_CONTACTS\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_FINE_LOCATION\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_COARSE_LOCATION\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.towntour.permission.MAPS_RECEIVE\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_NETWORK_STATE\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CALL_PHONE\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_PHONE_STATE\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--</div><div class=\"line\">    Some comment here</div><div class=\"line\">  --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.google.android.providers.gsf.permission.READ_GSERVICES\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tns.NativeScriptApplication\"</span> <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon\"</span> <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tns.NativeScriptActivity\"</span> <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/title_activity_kimera\"</span> <span class=\"attr\">android:configChanges</span>=<span class=\"string\">\"keyboardHidden|orientation|screenSize\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.EDIT\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Manual-Steps-After-Installation\"><a href=\"#Manual-Steps-After-Installation\" class=\"headerlink\" title=\"Manual Steps After Installation\"></a>Manual Steps After Installation</h3><p>After the installation is complete, you need to open <code>platforms\\android\\AndroidManifest.xml</code> and <code>platforms\\ios\\Info.plist</code> in your project and inspect them for duplicate or contradicting entries. Make sure to preserve the settings required by the plugin. Otherwise, your app might not build or it might not work as expected, when deployed on device.</p>\n<h2 id=\"Use-a-Plugin\"><a href=\"#Use-a-Plugin\" class=\"headerlink\" title=\"Use a Plugin\"></a>Use a Plugin</h2><p>To use a plugin inside your project, you need to add a <code>require</code> in your app.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"myplugin\"</span>);</div></pre></td></tr></table></figure>\n<p>This will look for a <code>myplugin</code> module with a valid <code>package.json</code> file in the <code>tns_modules</code> directory. Note that you must require the plugin with the value for the <code>name</code> key in the plugin <code>package.json</code> file.</p>\n<h2 id=\"Remove-a-Plugin\"><a href=\"#Remove-a-Plugin\" class=\"headerlink\" title=\"Remove a Plugin\"></a>Remove a Plugin</h2><p>To remove a plugin from your project, inside your project, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin remove &lt;Plugin&gt;</div></pre></td></tr></table></figure>\n<p>You must specify the plugin by the value for the <code>name</code> key in the plugin <code>package.json</code> file.</p>\n<h3 id=\"Removal-Specifics\"><a href=\"#Removal-Specifics\" class=\"headerlink\" title=\"Removal Specifics\"></a>Removal Specifics</h3><p>The removal of a NativeScript plugin mimics the removal of an npm module.</p>\n<p>The NativeScript CLI removes any plugin files from the <code>node_modules</code> directory in the root of your project. During this process, the NativeScript CLI removes any dependencies described in the plugin <code>package.json</code> file and removes the plugin from the project <code>package.json</code> file in the project root.</p>\n<blockquote>\n<p><strong>IMPORTANT:</strong> For iOS, this operation does not remove files from the <code>platforms\\ios</code> directories and native iOS libraries, and does not unmerge the <code>Info.plist</code> file. For Android, this operation unmerges the <code>AndroidManifest.xml</code> file and takes care of removing any plugin files located in <code>platforms\\android</code>.</p>\n</blockquote>\n<h3 id=\"Manual-Steps-After-Removal\"><a href=\"#Manual-Steps-After-Removal\" class=\"headerlink\" title=\"Manual Steps After Removal\"></a>Manual Steps After Removal</h3><p>After the plugin removal is complete, make sure to remove any leftover native iOS library files from the <code>lib\\ios</code> directory in the root of the project. Update the iOS-specific projects in <code>platforms\\ios</code> to remove any dependencies on the removed native libraries.</p>\n<p>Next, you need to run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns prepare &lt;Platform&gt;</div></pre></td></tr></table></figure>\n<p>Make sure to run the command for all platforms configured for the project. During this operation, the NativeScript CLI will remove any leftover plugin files from your <code>platforms\\ios</code> directory.</p>\n<blockquote>\n<p><strong>TIP:</strong> Instead of <code>$ tns prepare</code> you can run <code>$ tns build</code>, <code>$ tns run</code>, <code>$ tns deploy</code> or <code>$ tns emulate</code>. All these commands run <code>$ tns prepare</code>.</p>\n</blockquote>\n<p>Next, open your <code>platforms\\ios\\Info.plist</code> file and remove any leftover entries from the plugin <code>Info.plist</code> file.</p>\n<p>Finally, make sure to update your code not to use the uninstalled plugin.</p>\n"},{"_content":"# NativeScript Getting Started Guide\n\nWelcome to the [NativeScript](http://www.nativescript.org/) Getting Started Guide. In this tutorial you'll use NativeScript, a cross-platform JavaScript framework for building native mobile apps, to build an iOS and Android app from scratch. You can start by watching the video walkthrough below, or by [jumping straight into the hands-on tutorial](#what-is-nativescript).\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/N8zsFIVdLwY\" frameborder=\"0\" allowfullscreen></iframe>\n\n## What is NativeScript?\n\nNativeScript is a free and open source framework for building native iOS and Android apps using JavaScript and CSS. NativeScript renders UIs with the native platform’s rendering engine—no [WebViews](http://developer.telerik.com/featured/what-is-a-webview/)—resulting in native-like performance and UX.\n\nNativeScript provides a best-of-both-worlds development experience. Our cross-platform JavaScript modules give you the convenience of writing iOS and Android apps from a single JavaScript codebase, while our runtimes give you the power of accessing native APIs, SDKs, and frameworks when you need them—all without needing to open Xcode or Android Studio. NativeScript was created and is supported by [Telerik](http://www.telerik.com/).\n\n## What you're building\n\nThis guide will walk you through building [Groceries](https://github.com/NativeScript/sample-Groceries), a groceries management app that does the following things:\n\n- Connects to an existing RESTful service.\n- Provides user registration and login.\n- Lets authenticated users add and delete groceries from a list.\n- Runs cross-platform (iOS and Android).\n\nIf you follow along to the end, here's what the finished app will look like on iOS:\n\n![login](/docs/img/cli-getting-started/nativescript/chapter0/ios/1.png)\n![register](/docs/img/cli-getting-started/nativescript/chapter0/ios/2.png)\n![list](/docs/img/cli-getting-started/nativescript/chapter0/ios/3.png)\n\nAnd here's what the app will look like on Android:\n\n![](/docs/img/cli-getting-started/nativescript/chapter0/android/1.png)\n![](/docs/img/cli-getting-started/nativescript/chapter0/android/2.png)\n![](/docs/img/cli-getting-started/nativescript/chapter0/android/3.png)\n\n## Prerequisites\n\nThis guide assumes that you have some basic knowledge of JavaScript, CSS, and your development machine’s terminal. More specifically:\n\n* **JavaScript**: You should know basic JavaScript concepts, such as how functions, if statements, and loops work.\n* **CSS**: You should know how to write simple CSS selectors, and know how to apply CSS rules as name/value pairs.\n* **The terminal**: You should know how to open a terminal or command-line prompt on your development machine, how to change directories, and how to execute commands.\n\nWith that out of the way, let’s get started!","source":"tutorial/0.md","raw":"# NativeScript Getting Started Guide\n\nWelcome to the [NativeScript](http://www.nativescript.org/) Getting Started Guide. In this tutorial you'll use NativeScript, a cross-platform JavaScript framework for building native mobile apps, to build an iOS and Android app from scratch. You can start by watching the video walkthrough below, or by [jumping straight into the hands-on tutorial](#what-is-nativescript).\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/N8zsFIVdLwY\" frameborder=\"0\" allowfullscreen></iframe>\n\n## What is NativeScript?\n\nNativeScript is a free and open source framework for building native iOS and Android apps using JavaScript and CSS. NativeScript renders UIs with the native platform’s rendering engine—no [WebViews](http://developer.telerik.com/featured/what-is-a-webview/)—resulting in native-like performance and UX.\n\nNativeScript provides a best-of-both-worlds development experience. Our cross-platform JavaScript modules give you the convenience of writing iOS and Android apps from a single JavaScript codebase, while our runtimes give you the power of accessing native APIs, SDKs, and frameworks when you need them—all without needing to open Xcode or Android Studio. NativeScript was created and is supported by [Telerik](http://www.telerik.com/).\n\n## What you're building\n\nThis guide will walk you through building [Groceries](https://github.com/NativeScript/sample-Groceries), a groceries management app that does the following things:\n\n- Connects to an existing RESTful service.\n- Provides user registration and login.\n- Lets authenticated users add and delete groceries from a list.\n- Runs cross-platform (iOS and Android).\n\nIf you follow along to the end, here's what the finished app will look like on iOS:\n\n![login](/docs/img/cli-getting-started/nativescript/chapter0/ios/1.png)\n![register](/docs/img/cli-getting-started/nativescript/chapter0/ios/2.png)\n![list](/docs/img/cli-getting-started/nativescript/chapter0/ios/3.png)\n\nAnd here's what the app will look like on Android:\n\n![](/docs/img/cli-getting-started/nativescript/chapter0/android/1.png)\n![](/docs/img/cli-getting-started/nativescript/chapter0/android/2.png)\n![](/docs/img/cli-getting-started/nativescript/chapter0/android/3.png)\n\n## Prerequisites\n\nThis guide assumes that you have some basic knowledge of JavaScript, CSS, and your development machine’s terminal. More specifically:\n\n* **JavaScript**: You should know basic JavaScript concepts, such as how functions, if statements, and loops work.\n* **CSS**: You should know how to write simple CSS selectors, and know how to apply CSS rules as name/value pairs.\n* **The terminal**: You should know how to open a terminal or command-line prompt on your development machine, how to change directories, and how to execute commands.\n\nWith that out of the way, let’s get started!","date":"2016-08-26T21:05:54.480Z","updated":"2016-08-26T21:05:54.480Z","path":"tutorial/0.html","title":"","comments":1,"layout":"page","_id":"cisn95c71000kwsl0vydc5fq4","content":"<h1 id=\"NativeScript-Getting-Started-Guide\"><a href=\"#NativeScript-Getting-Started-Guide\" class=\"headerlink\" title=\"NativeScript Getting Started Guide\"></a>NativeScript Getting Started Guide</h1><p>Welcome to the <a href=\"http://www.nativescript.org/\" target=\"_blank\" rel=\"external\">NativeScript</a> Getting Started Guide. In this tutorial you’ll use NativeScript, a cross-platform JavaScript framework for building native mobile apps, to build an iOS and Android app from scratch. You can start by watching the video walkthrough below, or by <a href=\"#what-is-nativescript\">jumping straight into the hands-on tutorial</a>.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/N8zsFIVdLwY\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"What-is-NativeScript\"><a href=\"#What-is-NativeScript\" class=\"headerlink\" title=\"What is NativeScript?\"></a>What is NativeScript?</h2><p>NativeScript is a free and open source framework for building native iOS and Android apps using JavaScript and CSS. NativeScript renders UIs with the native platform’s rendering engine—no <a href=\"http://developer.telerik.com/featured/what-is-a-webview/\" target=\"_blank\" rel=\"external\">WebViews</a>—resulting in native-like performance and UX.</p>\n<p>NativeScript provides a best-of-both-worlds development experience. Our cross-platform JavaScript modules give you the convenience of writing iOS and Android apps from a single JavaScript codebase, while our runtimes give you the power of accessing native APIs, SDKs, and frameworks when you need them—all without needing to open Xcode or Android Studio. NativeScript was created and is supported by <a href=\"http://www.telerik.com/\" target=\"_blank\" rel=\"external\">Telerik</a>.</p>\n<h2 id=\"What-you’re-building\"><a href=\"#What-you’re-building\" class=\"headerlink\" title=\"What you’re building\"></a>What you’re building</h2><p>This guide will walk you through building <a href=\"https://github.com/NativeScript/sample-Groceries\" target=\"_blank\" rel=\"external\">Groceries</a>, a groceries management app that does the following things:</p>\n<ul>\n<li>Connects to an existing RESTful service.</li>\n<li>Provides user registration and login.</li>\n<li>Lets authenticated users add and delete groceries from a list.</li>\n<li>Runs cross-platform (iOS and Android).</li>\n</ul>\n<p>If you follow along to the end, here’s what the finished app will look like on iOS:</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter0/ios/1.png\" alt=\"login\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter0/ios/2.png\" alt=\"register\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter0/ios/3.png\" alt=\"list\"></p>\n<p>And here’s what the app will look like on Android:</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter0/android/1.png\" alt=\"\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter0/android/2.png\" alt=\"\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter0/android/3.png\" alt=\"\"></p>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><p>This guide assumes that you have some basic knowledge of JavaScript, CSS, and your development machine’s terminal. More specifically:</p>\n<ul>\n<li><strong>JavaScript</strong>: You should know basic JavaScript concepts, such as how functions, if statements, and loops work.</li>\n<li><strong>CSS</strong>: You should know how to write simple CSS selectors, and know how to apply CSS rules as name/value pairs.</li>\n<li><strong>The terminal</strong>: You should know how to open a terminal or command-line prompt on your development machine, how to change directories, and how to execute commands.</li>\n</ul>\n<p>With that out of the way, let’s get started!</p>\n","excerpt":"","more":"<h1 id=\"NativeScript-Getting-Started-Guide\"><a href=\"#NativeScript-Getting-Started-Guide\" class=\"headerlink\" title=\"NativeScript Getting Started Guide\"></a>NativeScript Getting Started Guide</h1><p>Welcome to the <a href=\"http://www.nativescript.org/\">NativeScript</a> Getting Started Guide. In this tutorial you’ll use NativeScript, a cross-platform JavaScript framework for building native mobile apps, to build an iOS and Android app from scratch. You can start by watching the video walkthrough below, or by <a href=\"#what-is-nativescript\">jumping straight into the hands-on tutorial</a>.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/N8zsFIVdLwY\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"What-is-NativeScript\"><a href=\"#What-is-NativeScript\" class=\"headerlink\" title=\"What is NativeScript?\"></a>What is NativeScript?</h2><p>NativeScript is a free and open source framework for building native iOS and Android apps using JavaScript and CSS. NativeScript renders UIs with the native platform’s rendering engine—no <a href=\"http://developer.telerik.com/featured/what-is-a-webview/\">WebViews</a>—resulting in native-like performance and UX.</p>\n<p>NativeScript provides a best-of-both-worlds development experience. Our cross-platform JavaScript modules give you the convenience of writing iOS and Android apps from a single JavaScript codebase, while our runtimes give you the power of accessing native APIs, SDKs, and frameworks when you need them—all without needing to open Xcode or Android Studio. NativeScript was created and is supported by <a href=\"http://www.telerik.com/\">Telerik</a>.</p>\n<h2 id=\"What-you’re-building\"><a href=\"#What-you’re-building\" class=\"headerlink\" title=\"What you’re building\"></a>What you’re building</h2><p>This guide will walk you through building <a href=\"https://github.com/NativeScript/sample-Groceries\">Groceries</a>, a groceries management app that does the following things:</p>\n<ul>\n<li>Connects to an existing RESTful service.</li>\n<li>Provides user registration and login.</li>\n<li>Lets authenticated users add and delete groceries from a list.</li>\n<li>Runs cross-platform (iOS and Android).</li>\n</ul>\n<p>If you follow along to the end, here’s what the finished app will look like on iOS:</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter0/ios/1.png\" alt=\"login\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter0/ios/2.png\" alt=\"register\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter0/ios/3.png\" alt=\"list\"></p>\n<p>And here’s what the app will look like on Android:</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter0/android/1.png\" alt=\"\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter0/android/2.png\" alt=\"\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter0/android/3.png\" alt=\"\"></p>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><p>This guide assumes that you have some basic knowledge of JavaScript, CSS, and your development machine’s terminal. More specifically:</p>\n<ul>\n<li><strong>JavaScript</strong>: You should know basic JavaScript concepts, such as how functions, if statements, and loops work.</li>\n<li><strong>CSS</strong>: You should know how to write simple CSS selectors, and know how to apply CSS rules as name/value pairs.</li>\n<li><strong>The terminal</strong>: You should know how to open a terminal or command-line prompt on your development machine, how to change directories, and how to execute commands.</li>\n</ul>\n<p>With that out of the way, let’s get started!</p>\n"},{"title":"UI Plugins","description":"Learn how to create a new User Interface plugin for NativeScript.","position":2,"_content":"\n# Overview\nThis article covers the basics of creating a NativeScript User Interface plugin that integrates with the existing [cross-platform](https://github.com/NativeScript/NativeScript) modules.\n\nAlthough the cross-platform part of NativeScript is entirely written in [TypeScript](http://www.typescriptlang.org/), the provided code samples are in plain JavaScript and are created with Sublime Text 2 as the preferred IDE. You can achieve the same with any transpiler tool that produces valid ES5 JavaScript and an IDE of your choice.\n\nThe widget to enable is [NumberPicker](http://developer.android.com/reference/android/widget/NumberPicker.html) / [UIStepper](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper) as this component is currently not available in the NativeScript UI modules and (a very important note) - semantically similar widgets are available in both Android and iOS. The suggested way for building the plugin will follow the guidelines the NativeScript team uses when creating cross-platform modules and will emphasize major concepts like observables, bindable properties, abstract View hierarchy (or Visual Tree) and CSS styling.\n\n> The article assumes that you are already familiar with developing [applications with NativeScript]({% slug tutorial %}).\n\n# Class Hierarchy\n> Throughout this article you will often see the \"Visual Tree\" expression&mdash;it refers to the JavaScript abstraction available in the cross-platform modules.\n\nHere is a brief overview of the class hierarchy in the Visual Tree:\n\n```\nObservable\n├── DependencyObservable\n│   ├── Bindable\n│   │   ├── ProxyObject\n│   │   │   ├── View\n```\n\n### [Observable](http://docs.nativescript.org/api-reference/classes/_data_observable_.observable.html)\nThis is the class that implements the [Observer](https://en.wikipedia.org/wiki/Observer_pattern) design-pattern. Every node within the Visual Tree should support the addEventListener/removeEventListener routine, hence the base class.\n\n### [DependencyObservable](http://docs.nativescript.org/api-reference/classes/_ui_core_dependency_observable_.dependencyobservable.html)\nThis class enables cascading property values - for example an effective property value may be the default one, inherited from some ancestor, coming from a style or set locally directly. You may consider it as an `Observable` with extended property backing mechanism.\n\n\n### [Bindable](http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html)\nThis class enables data-binding, using the extended property backing mechanism of the `DependencyObservable` base class. \n\n### [ProxyObject](http://docs.nativescript.org/api-reference/classes/_ui_core_proxy_.proxyobject.html)\nEach UI module within NativeScript internally creates and maintains a corresponding native UI instance. This class serves as a proxy between the JavaScript object and the wrapped native object. For example, when a property changes on the JavaScript side, the implementation takes care of delegating the change to the native representation and vice-versa.\n\n### [View](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html)\nAt an abstract level, *View* describes an object that has visual representation on the screen. It participates in the life-cycle and layout passes and may be styled - either through CSS or by using the [View.style](http://docs.nativescript.org/api-reference/classes/_ui_styling_.style.html) property.\n\n\n### See Also\nThe NativeScript documentation portal has some great content to walk you through each of the above classes in greater details:\n\n* [Events](http://docs.nativescript.org/events.html)\n* [Properties](http://docs.nativescript.org/properties.html)\n* [Data-Binding](http://docs.nativescript.org/bindings.html)\n  \n# File Structure\nKeeping in mind the class hierarchy, the obvious choice for the base class of the widget will be `View`. Following is the structure of a typical NativeScript [UI module](https://github.com/NativeScript/NativeScript/tree/master/ui/button):\n\n### Definition File (number-picker.d.ts)\nThis is the TypeScript way to describe all the publicly available APIs within a module. Typically, the creation of a NativeScript module starts with the API first (or defining what a widget should do) and then move to the actual implementation. Taking a close look at [NumberPicker](http://developer.android.com/reference/android/widget/NumberPicker.html) and [UIStepper](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper) you can easily come up with the API definition (we are looking for an API that is cross-platform and each method/property is available for each native platform). For the sake of simplicity, this article will cover only one property. You can examine the sample [GitHub repository](https://github.com/atanasovg/nativescript-number-picker) for the complete implementation.\n\n> This file is not mandatory and if you do not use TypeScript you may simply skip this step. Still, defining the public API one way or another will be useful for the users of the plugin.\n\n```javascript\ndeclare module \"number-picker\" {\n    import view = require(\"ui/core/view\");\n    import dependencyObservable = require(\"ui/core/dependency-observable\");\n\n    export class NumberPicker extends view.View {\n        // static (prototype) properties\n        public static valueProperty: dependencyObservable.Property;\n\n        // instance properties\n        value: number;\n        \n        android: android.widget.NumberPicker;\n        ios: UIStepper;\n    }\n} \n```\n\n> Each NativeScript module uses TypeScript's [ambient module declaration](http://www.typescriptlang.org/Handbook#modules-working-with-other-javascript-libraries), which tell the language service that this module will be available at runtime and it is our responsibility to load it.\n\nTo enable features like data-binding and styling for the widget, you need to use dependency properties to back the instance properties as described [here](http://docs.nativescript.org/bindings.html).\n\n### Common File (number-picker-common.ts)\nLooking at the [Button](https://github.com/NativeScript/NativeScript/tree/master/ui/button) folder you will notice the `*-common` file. This is the file that holds the functionality, which is the same regardless of the target platform. Such functionality, for example, contains instance properties in its implementation. Here is how the common file looks like:\n\n```javascript\nvar view = require(\"ui/core/view\");\nvar dObservable = require(\"ui/core/dependency-observable\");\nvar proxy = require(\"ui/core/proxy\");\n\nvar NumberPicker = (function (_super) {\n    global.__extends(NumberPicker, _super);\n    function NumberPicker() {\n        _super.call(this);\n    }\n    Object.defineProperty(NumberPicker.prototype, \"value\", {\n        get: function () {\n            return this._getValue(NumberPicker.valueProperty);\n        },\n        set: function (value) {\n            this._setValue(NumberPicker.valueProperty, value);\n        }\n    });\n    NumberPicker.valueProperty = new dObservable.Property(\"value\", \"NumberPicker\", new proxy.PropertyMetadata(0, dObservable.PropertyMetadataSettings.AffectsLayout));\n    return NumberPicker;\n})(view.View);\n\nexports.NumberPicker = NumberPicker;\n```\n\n>The global `__extends` function is provided by the NativeScript runtime and it basically adds some functionality on top of the TypeScript's `__extends` function.\n\nA new `NumberPicker` class is defined and a backing dependency property with the respective getter and setter functions for the instance property is created. An important note is how the `getter` and `setter` functions are implemented. The `DependencyObservable` `_getValue` and `_setValue` methods, respectively, enable cascading values as well as change notifications and data-bindings. Now comes the other interesting part&mdash;creating the native widgets themselves and plugging them into the NativeScript framework.\n\n### Android-Specific File (number-picker.android.ts)\nThe [NativeScript CLI](https://github.com/NativeScript/nativescript-cli#development-in-app) follows the convention of marking platform-specific files with the platform name. This tells the CLI that these files will be only available for the package targeting the specified platform. With that said, you will need the `number-picker.android.ts` file to specify the Android-specific part of the widget:\n\n```javascript\nvar common = require(\"./number-picker-common\");\n\nfunction onValuePropertyChanged(data) {\n    var picker = data.object;\n    if (!picker.android) {\n        return;\n    }\n    picker.android.setValue(data.newValue);\n}\n\ncommon.NumberPicker.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;\nrequire(\"utils/module-merge\").merge(common, module.exports);\n\nvar NumberPicker = (function (_super) {\n    global.__extends(NumberPicker, _super);\n    function NumberPicker() {\n        _super.apply(this, arguments);\n    }\n    NumberPicker.prototype._createUI = function () {\n        this._android = new android.widget.NumberPicker(this._context);\n    };\n    Object.defineProperty(NumberPicker.prototype, \"android\", {\n        get: function () {\n            return this._android;\n        }\n    });\n    return NumberPicker;\n})(common.NumberPicker);\n\nexports.NumberPicker = NumberPicker;\n```\n\nWhat the above code does is:\n\n1. Require the common module.\n1. Define a PropertyChangedCallback that will update the value of the native `NumberPicker`. Because this code is applicable to Android only, you can safely go through the NativeScript Bridge and change the property of the native widget directly.\n1. Register the callback with the metadata of the `value` property so that the base implementation can call it. Here, the `Proxy` level of the class hierarchy provides the implementation that will execute this callback whenever the JavaScript `value` property changes. \n1. Merge the exports of the common file with the exports of this file. This is very important because at run time, the loaded file is the `number-picker.android` and you need the publicly exposed API from the common module to be available on the specific one.\n1. Create a new `NumberPicker` class that inherits the common one and its functionality.\n1. Override the `_createUI` method and instantiate the `_android` field.\n1. Define a public getter property for the native Android instance.\n \n> The `iOS` property, as declared in the definition (API) file, remains `undefined` when running on Android.\n\nThe `_createUI` method is part of the Visual Tree instantiation pass for Android. Because every native Android UI widget requires a valid [Context](http://developer.android.com/reference/android/content/Context.html) as a constructor parameter, the UI is lazy initialized when we have such `Context` available. This happens when the main [Activity](http://developer.android.com/reference/android/app/Activity.html) is created. The following scheme briefly summarizes the steps during the UI initialization pass within the Visual Tree:\n\n```\nAndroid runtime raises the getActivity callback\n                 |\nApplication module handles the callback\n                 |\nFrame module onActivityRequested is called\n                 |\nNative Activity overrides are provided\n                 |\nNative onCreate method is called on the main Activity\n                 |\nApplication is navigated to the main module\n                 |\nThe XML is parsed and the Visual Tree is created\n                 |\nThe Visual Tree is traversed and _onAttached(context) is called on each View\n                 |\n_onAttached(context) will update the _context property and will call _createUI\n\n```\n\nSo, overriding the `_createUI` method is what is needed to plug the new widget within the Visual Tree.\n\n### iOS-specific File (number-picker.ios.ts)\nHere is the minimalistic iOS functionality implementation:\n\n```javascript\nvar common = require(\"./number-picker-common\");\n\nfunction onValuePropertyChanged(data) {\n    var picker = data.object;\n    picker.ios.value = data.newValue;\n}\n\ncommon.NumberPicker.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;\nrequire(\"utils/module-merge\").merge(common, module.exports);\n\nvar NumberPicker = (function (_super) {\n    global.__extends(NumberPicker, _super);\n    function NumberPicker() {\n        _super.apply(this, arguments);\n        this._ios = new UIStepper();\n    }\n\n    Object.defineProperty(NumberPicker.prototype, \"ios\", {\n        get: function () {\n            return this._ios;\n        }\n    });\n    return NumberPicker;\n})(common.NumberPicker);\n\nexports.NumberPicker = NumberPicker;\n```\n\nTo some extent, the code looks similar to the Android-specific one and uses the same concepts, but when you look into the details, you will see the differences. For example, the `onValuePropertyChanged` function uses the iOS [UIStepper](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper) API to update the native `value` or another example could be the absence of a `_createUI` method. In iOS, the instantiation pass happens in the constructor of each UI widget because each native widget may be constructed at any time, without the need of an additional parameter like Android's `Context`. Here are the steps of the iOS instantiation pass:\n\n```\nAppDelegate's applicationDidFinishLaunchingWithOptions notification comes\n                 |\nApplication module handles the notification\n                 |\nApplication is navigated to the main module\n                 |\nThe XML is parsed and the Visual Tree, including native widgets, is created\n```\n\n# Testing\nThe minimalistic implementation is ready and the widget is ready to be tested. You need to package the files as a valid plugin, as described in the [documentation](http://docs.nativescript.org/plugins). Here are the steps:\n\n1. Create a new sample project named *myApp*:\n\n   ```shell\n   tns create myApp\n   ```\n1. Navigate to the new folder:\n\n   ```Shell\n   cd myApp\n   ```\n1. Create a new folder named `number-picker`.\n1. Add the above described JavaScript files in `number-picker`:\n   * `number-picker-common.js`\n   * `number-picker.android.js`\n   * `number-picker.ios.js`\n1. Add a new `package.json` file in `number-picker` with the following content:\n\n   ```json\n   {\n       \"name\": \"number-picker\",\n       \"version\": \"0.0.1\",\n       \"main\": \"number-picker.js\",\n       \"nativescript\": {\n           \"platforms\": {\n               \"ios\": \"1.0.0\",\n               \"android\": \"1.1.0\"\n           }\n       }\n   }\n   ```\n1. Run the following command:\n\n   ```Shell\n   tns plugin add number-picker\n   ```\n1. Modify the `app/main-page.js` file to create the new widget:\n\n   ```javascript\n   var vmModule = require(\"./main-view-model\");\n   var pickerModule = require(\"number-picker\");\n  \n   function pageLoaded(args) {\n       var page = args.object;\n       page.bindingContext = vmModule.mainViewModel;\n   \n       var layout = page.content;\n       var picker = new pickerModule.NumberPicker();\n       layout.addChild(picker);\n   }\n   exports.pageLoaded = pageLoaded;\n   ```\n1. Run the application:\n\n   ```Shell\n    tns run android (or tns emulate ios)\n   ```\n\nThe new widget should be successfully displayed on the page.\n\n# Handling User Interaction\nThe widget is already successfully visualized but it is in a very basic state&mdash;for example, it does not reflect changes coming from the Native side when the user interacts with the widget. In other words, the `value` property on the JavaScript side will not be updated after user interaction.\n\n### Android\nThe Android general way of handling change notifications is via *Listeners*&mdash;in the current scenario this is the [OnValueChangeListener](http://developer.android.com/reference/android/widget/NumberPicker.OnValueChangeListener.html).You need to create a new interface implementation and register it on the native picker instance to receive updates coming from the Android world. Because this implementation is instance-related, we want to put it in the `_createUI` method:\n\n```javascript\nNumberPicker.prototype._createUI = function () {\n    this._android = new android.widget.NumberPicker(this._context);\n\n    var that = new WeakRef(this);\n    var changeListener = new android.widget.NumberPicker.OnValueChangeListener({\n        onValueChange: function(picker, oldVal, newVal){\n            var instance = that.get();\n            if(instance) {\n                instance._onPropertyChangedFromNative(NumberPicker.valueProperty, newVal);\n            }\n        }\n    });\n\n    this._android.setOnValueChangedListener(changeListener);\n};\n```\n\n>Note the `WeakRef` wrapper of the `this` argument. This is an important part of the listener implementation as it prevents circular references (resulting in a memory leak) between the JavaScript implementation Object literal, which is statically cached per `extend` call and the outer JavaScript instance.\n\nHere the NativeScript Android Bridge is used to create a new [interface implementation in JavaScript](http://docs.nativescript.org/runtimes/android/generator/extend-class-interface) and to handle the `onValueChange` method. When a notification from the native Picker is received, the JavaScript object associated with the event is retrieved and the special method `_onPropertyChangedFromNative` is called on it. This is a method on the `Proxy` class that synchronizes properties from both JavaScript and native Picker in a way that prevents circular updates, which may result in a StackOverflow Exception.\n\n### iOS\nOn iOS the generic event [UIControlEventValueChanged](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIControl_Class/index.html#//apple_ref/c/econst/UIControlEventValueChanged) raised by the `UIStepper` widget is used. So the approach will be to extend the base `NSObject` class, to expose a handler method and register a new instance of the extended object using the [addTargetActionForControlEvents](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIControl_Class/#//apple_ref/occ/instm/UIControl/addTarget:action:forControlEvents:) method. According to the [Extending Classes in NativeScript for iOS](http://docs.nativescript.org/runtimes/ios/how-to/ObjC-Subclassing#calling-base-methods-Exposed) article, the following code enables value change notifications:\n\n```javascript\n// put this somewhere in the module implementation\nvar ListenerClass = NSObject.extend({\n    valueChanged: function(sender) {\n        if(this._owner) {\n            this._owner._onPropertyChangedFromNative(common.NumberPicker.valueProperty, sender.value);\n        }\n    }\n}, {\n    name: \"ListenerClass\",\n    exposedMethods: {\n        \"valueChanged\": { returns: interop.types.void, params: [ UIStepper ] }\n    }\n});\n\n////////////////////////////////////////\n\n// inside the NumberPicker's constructor\nfunction NumberPicker() {\n    _super.apply(this, arguments);\n\n    this._ios = new UIStepper();\n    this._listener = new ListenerClass();\n    this._listener._owner = this;\n    this._ios.addTargetActionForControlEvents(this._listener, \"valueChanged\", UIControlEvents.UIControlEventValueChanged);\n}\n```\n\n>Note the assignment of the `listener` object to the `this` argument (`this._listener = new ListenerClass()`) in the constructor. This is needed to prevent the native class deallocation because the `addTargetActionForControlEvents` method uses `Weak` references when adding listeners.\n\n### Data-Binding Ready\nWith gluing the Native-to-JavaScript and JavaScript-to-Native flow of changes, the `value` property is completely [data-binding](http://docs.nativescript.org/bindings) ready and calling the [Bindable.bind](http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html#bind) method on the widget will work as expected, both in one-way and two-way cases.\n\n# CSS Support\nThe styling support in the NativeScript modules is built on top of three major layers:\n\n* The [Style](http://docs.nativescript.org/api-reference/classes/_ui_styling_.style.html) object on a per `View` instance, which allows programmatic styling.\n* The Css parser that reads `*.css` files and updates the `Style` object of each matched `View`.\n* The *Styler* concept - the mapping of a JavaScript value to the corresponding native widget's property is delegated to an external object, named `Styler`.\n\n\n> The properties, common for each native widget, are handled by the `DefaultStyler`. Other properties are specific on a per widget type. For example, the [TextView](http://developer.android.com/reference/android/widget/TextView.html) widgets&mdash;these are handled by the specific `TextViewStyler`. \n\nThe `DefaultStyler` handles the following [properties](http://uatdocs.nativescript.org/styling#supported-properties):\n\n* background\n* visibility\n* opacity\n* minWidth\n* minHeight\n* borderWidth\n* borderColor\n* borderRadius\n\nWhen you create a new widget and you do not need support for other specific properties, there is no need to specify custom `Styler` because the default one will handle these for you. In this particular case, the article will walk you through handling the `color` property as well, to demonstrate the workflow and the steps needed to enable widget-specific properties. The following three entry points are needed by a `Styler` to reflect a JavaScript style property change:\n\n* setPropertyValue <br/>\n  *Applies the property-specific logic to the native widget.*\n* resetPropertyValue <br/>\n  *Resets the property value to its default (original) state.*\n* getNativePropertyValue <br/>\n  *Gets the default (original) property value.*\n\n### iOS\nThe following code illustrates how to update the `tintColor` property of the iOS UIStepper when the `color` property changes on a JavaScript `NumberPicker` object:\n\n```javascript\n// within the number-picker.ios.js file\nvar style = require(\"ui/styling\");\n\n//////////////////////////////////\n\n// this function is called when the `color` Style property changes on a `NumberPicker` instance \nfunction setColor(view, value) {\n    var nativePicker = view.ios;\n\n    // value is UIColor, so we may apply it directly\n    nativePicker.tintColor = value;\n}\n\n// this function is called when the `color` Style property changes and the new value is `undefined`\nfunction resetColor(view, value) {\n    var nativePicker = view.ios;\n\n    // value is native UIColor, so apply it directly\n    nativePicker.tintColor = value;\n}\n\n// this function is called when the `Styler` is about to reset the `color` property to its default (original) value.\nfunction getNativeColorValue(view) {\n    var nativePicker = view.ios;\n\n    return nativePicker.tintColor;\n}\n\nvar changedHandler = new style.stylers.StylePropertyChangedHandler(setColor, resetColor, getNativeColorValue);\n\n// register the handler for the color property on the NumberPicker type\nstyle.stylers.registerHandler(style.properties.colorProperty, changedHandler, \"NumberPicker\");\n```\n\n>In Android, the `color` property would be mapped to the text color of the labels within the native widget, However, this cannot be easily achieved programmatically but rather through the Android-specific XML styles. That's why this article will not cover the `color` property for Android. Still, the concept there is identical to the one described for iOS.\n\n# XML-Ready\nMaking the component visible to the XML parser is as easy as adding a custom namespace at the [Page level](http://docs.nativescript.org/ui-with-xml#custom-components). The following code illustrates this:\n\n```xml\n<Page\n    xmlns=\"http://schemas.nativescript.org/tns.xsd\"\n    xmlns:numPicker=\"number-picker\"\n    loaded=\"pageLoaded\">\n  <StackLayout id=\"rootLayout\">\n    <Label text=\"{{ value }}\" cssClass=\"title\"/>\n    <Button text=\"TAP\" tap=\"{{ tapAction }}\" />\n    <Label text=\"{{ value }}\" cssClass=\"message\" textWrap=\"true\"/>\n    <numPicker:NumberPicker value=\"{{ value }}\" horizontalAlignment=\"left\"/>\n  </StackLayout>\n</Page>\n```\n\n> The CLI will copy the JavaScript part of the plugin within the tns_modules folder. The XML parser will automatically check for the `tns_modules/number-picker` folder to load the widget.\n\n# See Also\n\n* [Plugins](http://docs.nativescript.org/plugins).\n* [UI - The Basics](http://docs.nativescript.org/ui-with-xml)\n","source":"plugins/ui-plugin.md","raw":"---\ntitle: UI Plugins\ndescription: Learn how to create a new User Interface plugin for NativeScript.\nposition: 2\n---\n\n# Overview\nThis article covers the basics of creating a NativeScript User Interface plugin that integrates with the existing [cross-platform](https://github.com/NativeScript/NativeScript) modules.\n\nAlthough the cross-platform part of NativeScript is entirely written in [TypeScript](http://www.typescriptlang.org/), the provided code samples are in plain JavaScript and are created with Sublime Text 2 as the preferred IDE. You can achieve the same with any transpiler tool that produces valid ES5 JavaScript and an IDE of your choice.\n\nThe widget to enable is [NumberPicker](http://developer.android.com/reference/android/widget/NumberPicker.html) / [UIStepper](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper) as this component is currently not available in the NativeScript UI modules and (a very important note) - semantically similar widgets are available in both Android and iOS. The suggested way for building the plugin will follow the guidelines the NativeScript team uses when creating cross-platform modules and will emphasize major concepts like observables, bindable properties, abstract View hierarchy (or Visual Tree) and CSS styling.\n\n> The article assumes that you are already familiar with developing [applications with NativeScript]({% slug tutorial %}).\n\n# Class Hierarchy\n> Throughout this article you will often see the \"Visual Tree\" expression&mdash;it refers to the JavaScript abstraction available in the cross-platform modules.\n\nHere is a brief overview of the class hierarchy in the Visual Tree:\n\n```\nObservable\n├── DependencyObservable\n│   ├── Bindable\n│   │   ├── ProxyObject\n│   │   │   ├── View\n```\n\n### [Observable](http://docs.nativescript.org/api-reference/classes/_data_observable_.observable.html)\nThis is the class that implements the [Observer](https://en.wikipedia.org/wiki/Observer_pattern) design-pattern. Every node within the Visual Tree should support the addEventListener/removeEventListener routine, hence the base class.\n\n### [DependencyObservable](http://docs.nativescript.org/api-reference/classes/_ui_core_dependency_observable_.dependencyobservable.html)\nThis class enables cascading property values - for example an effective property value may be the default one, inherited from some ancestor, coming from a style or set locally directly. You may consider it as an `Observable` with extended property backing mechanism.\n\n\n### [Bindable](http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html)\nThis class enables data-binding, using the extended property backing mechanism of the `DependencyObservable` base class. \n\n### [ProxyObject](http://docs.nativescript.org/api-reference/classes/_ui_core_proxy_.proxyobject.html)\nEach UI module within NativeScript internally creates and maintains a corresponding native UI instance. This class serves as a proxy between the JavaScript object and the wrapped native object. For example, when a property changes on the JavaScript side, the implementation takes care of delegating the change to the native representation and vice-versa.\n\n### [View](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html)\nAt an abstract level, *View* describes an object that has visual representation on the screen. It participates in the life-cycle and layout passes and may be styled - either through CSS or by using the [View.style](http://docs.nativescript.org/api-reference/classes/_ui_styling_.style.html) property.\n\n\n### See Also\nThe NativeScript documentation portal has some great content to walk you through each of the above classes in greater details:\n\n* [Events](http://docs.nativescript.org/events.html)\n* [Properties](http://docs.nativescript.org/properties.html)\n* [Data-Binding](http://docs.nativescript.org/bindings.html)\n  \n# File Structure\nKeeping in mind the class hierarchy, the obvious choice for the base class of the widget will be `View`. Following is the structure of a typical NativeScript [UI module](https://github.com/NativeScript/NativeScript/tree/master/ui/button):\n\n### Definition File (number-picker.d.ts)\nThis is the TypeScript way to describe all the publicly available APIs within a module. Typically, the creation of a NativeScript module starts with the API first (or defining what a widget should do) and then move to the actual implementation. Taking a close look at [NumberPicker](http://developer.android.com/reference/android/widget/NumberPicker.html) and [UIStepper](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper) you can easily come up with the API definition (we are looking for an API that is cross-platform and each method/property is available for each native platform). For the sake of simplicity, this article will cover only one property. You can examine the sample [GitHub repository](https://github.com/atanasovg/nativescript-number-picker) for the complete implementation.\n\n> This file is not mandatory and if you do not use TypeScript you may simply skip this step. Still, defining the public API one way or another will be useful for the users of the plugin.\n\n```javascript\ndeclare module \"number-picker\" {\n    import view = require(\"ui/core/view\");\n    import dependencyObservable = require(\"ui/core/dependency-observable\");\n\n    export class NumberPicker extends view.View {\n        // static (prototype) properties\n        public static valueProperty: dependencyObservable.Property;\n\n        // instance properties\n        value: number;\n        \n        android: android.widget.NumberPicker;\n        ios: UIStepper;\n    }\n} \n```\n\n> Each NativeScript module uses TypeScript's [ambient module declaration](http://www.typescriptlang.org/Handbook#modules-working-with-other-javascript-libraries), which tell the language service that this module will be available at runtime and it is our responsibility to load it.\n\nTo enable features like data-binding and styling for the widget, you need to use dependency properties to back the instance properties as described [here](http://docs.nativescript.org/bindings.html).\n\n### Common File (number-picker-common.ts)\nLooking at the [Button](https://github.com/NativeScript/NativeScript/tree/master/ui/button) folder you will notice the `*-common` file. This is the file that holds the functionality, which is the same regardless of the target platform. Such functionality, for example, contains instance properties in its implementation. Here is how the common file looks like:\n\n```javascript\nvar view = require(\"ui/core/view\");\nvar dObservable = require(\"ui/core/dependency-observable\");\nvar proxy = require(\"ui/core/proxy\");\n\nvar NumberPicker = (function (_super) {\n    global.__extends(NumberPicker, _super);\n    function NumberPicker() {\n        _super.call(this);\n    }\n    Object.defineProperty(NumberPicker.prototype, \"value\", {\n        get: function () {\n            return this._getValue(NumberPicker.valueProperty);\n        },\n        set: function (value) {\n            this._setValue(NumberPicker.valueProperty, value);\n        }\n    });\n    NumberPicker.valueProperty = new dObservable.Property(\"value\", \"NumberPicker\", new proxy.PropertyMetadata(0, dObservable.PropertyMetadataSettings.AffectsLayout));\n    return NumberPicker;\n})(view.View);\n\nexports.NumberPicker = NumberPicker;\n```\n\n>The global `__extends` function is provided by the NativeScript runtime and it basically adds some functionality on top of the TypeScript's `__extends` function.\n\nA new `NumberPicker` class is defined and a backing dependency property with the respective getter and setter functions for the instance property is created. An important note is how the `getter` and `setter` functions are implemented. The `DependencyObservable` `_getValue` and `_setValue` methods, respectively, enable cascading values as well as change notifications and data-bindings. Now comes the other interesting part&mdash;creating the native widgets themselves and plugging them into the NativeScript framework.\n\n### Android-Specific File (number-picker.android.ts)\nThe [NativeScript CLI](https://github.com/NativeScript/nativescript-cli#development-in-app) follows the convention of marking platform-specific files with the platform name. This tells the CLI that these files will be only available for the package targeting the specified platform. With that said, you will need the `number-picker.android.ts` file to specify the Android-specific part of the widget:\n\n```javascript\nvar common = require(\"./number-picker-common\");\n\nfunction onValuePropertyChanged(data) {\n    var picker = data.object;\n    if (!picker.android) {\n        return;\n    }\n    picker.android.setValue(data.newValue);\n}\n\ncommon.NumberPicker.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;\nrequire(\"utils/module-merge\").merge(common, module.exports);\n\nvar NumberPicker = (function (_super) {\n    global.__extends(NumberPicker, _super);\n    function NumberPicker() {\n        _super.apply(this, arguments);\n    }\n    NumberPicker.prototype._createUI = function () {\n        this._android = new android.widget.NumberPicker(this._context);\n    };\n    Object.defineProperty(NumberPicker.prototype, \"android\", {\n        get: function () {\n            return this._android;\n        }\n    });\n    return NumberPicker;\n})(common.NumberPicker);\n\nexports.NumberPicker = NumberPicker;\n```\n\nWhat the above code does is:\n\n1. Require the common module.\n1. Define a PropertyChangedCallback that will update the value of the native `NumberPicker`. Because this code is applicable to Android only, you can safely go through the NativeScript Bridge and change the property of the native widget directly.\n1. Register the callback with the metadata of the `value` property so that the base implementation can call it. Here, the `Proxy` level of the class hierarchy provides the implementation that will execute this callback whenever the JavaScript `value` property changes. \n1. Merge the exports of the common file with the exports of this file. This is very important because at run time, the loaded file is the `number-picker.android` and you need the publicly exposed API from the common module to be available on the specific one.\n1. Create a new `NumberPicker` class that inherits the common one and its functionality.\n1. Override the `_createUI` method and instantiate the `_android` field.\n1. Define a public getter property for the native Android instance.\n \n> The `iOS` property, as declared in the definition (API) file, remains `undefined` when running on Android.\n\nThe `_createUI` method is part of the Visual Tree instantiation pass for Android. Because every native Android UI widget requires a valid [Context](http://developer.android.com/reference/android/content/Context.html) as a constructor parameter, the UI is lazy initialized when we have such `Context` available. This happens when the main [Activity](http://developer.android.com/reference/android/app/Activity.html) is created. The following scheme briefly summarizes the steps during the UI initialization pass within the Visual Tree:\n\n```\nAndroid runtime raises the getActivity callback\n                 |\nApplication module handles the callback\n                 |\nFrame module onActivityRequested is called\n                 |\nNative Activity overrides are provided\n                 |\nNative onCreate method is called on the main Activity\n                 |\nApplication is navigated to the main module\n                 |\nThe XML is parsed and the Visual Tree is created\n                 |\nThe Visual Tree is traversed and _onAttached(context) is called on each View\n                 |\n_onAttached(context) will update the _context property and will call _createUI\n\n```\n\nSo, overriding the `_createUI` method is what is needed to plug the new widget within the Visual Tree.\n\n### iOS-specific File (number-picker.ios.ts)\nHere is the minimalistic iOS functionality implementation:\n\n```javascript\nvar common = require(\"./number-picker-common\");\n\nfunction onValuePropertyChanged(data) {\n    var picker = data.object;\n    picker.ios.value = data.newValue;\n}\n\ncommon.NumberPicker.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;\nrequire(\"utils/module-merge\").merge(common, module.exports);\n\nvar NumberPicker = (function (_super) {\n    global.__extends(NumberPicker, _super);\n    function NumberPicker() {\n        _super.apply(this, arguments);\n        this._ios = new UIStepper();\n    }\n\n    Object.defineProperty(NumberPicker.prototype, \"ios\", {\n        get: function () {\n            return this._ios;\n        }\n    });\n    return NumberPicker;\n})(common.NumberPicker);\n\nexports.NumberPicker = NumberPicker;\n```\n\nTo some extent, the code looks similar to the Android-specific one and uses the same concepts, but when you look into the details, you will see the differences. For example, the `onValuePropertyChanged` function uses the iOS [UIStepper](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper) API to update the native `value` or another example could be the absence of a `_createUI` method. In iOS, the instantiation pass happens in the constructor of each UI widget because each native widget may be constructed at any time, without the need of an additional parameter like Android's `Context`. Here are the steps of the iOS instantiation pass:\n\n```\nAppDelegate's applicationDidFinishLaunchingWithOptions notification comes\n                 |\nApplication module handles the notification\n                 |\nApplication is navigated to the main module\n                 |\nThe XML is parsed and the Visual Tree, including native widgets, is created\n```\n\n# Testing\nThe minimalistic implementation is ready and the widget is ready to be tested. You need to package the files as a valid plugin, as described in the [documentation](http://docs.nativescript.org/plugins). Here are the steps:\n\n1. Create a new sample project named *myApp*:\n\n   ```shell\n   tns create myApp\n   ```\n1. Navigate to the new folder:\n\n   ```Shell\n   cd myApp\n   ```\n1. Create a new folder named `number-picker`.\n1. Add the above described JavaScript files in `number-picker`:\n   * `number-picker-common.js`\n   * `number-picker.android.js`\n   * `number-picker.ios.js`\n1. Add a new `package.json` file in `number-picker` with the following content:\n\n   ```json\n   {\n       \"name\": \"number-picker\",\n       \"version\": \"0.0.1\",\n       \"main\": \"number-picker.js\",\n       \"nativescript\": {\n           \"platforms\": {\n               \"ios\": \"1.0.0\",\n               \"android\": \"1.1.0\"\n           }\n       }\n   }\n   ```\n1. Run the following command:\n\n   ```Shell\n   tns plugin add number-picker\n   ```\n1. Modify the `app/main-page.js` file to create the new widget:\n\n   ```javascript\n   var vmModule = require(\"./main-view-model\");\n   var pickerModule = require(\"number-picker\");\n  \n   function pageLoaded(args) {\n       var page = args.object;\n       page.bindingContext = vmModule.mainViewModel;\n   \n       var layout = page.content;\n       var picker = new pickerModule.NumberPicker();\n       layout.addChild(picker);\n   }\n   exports.pageLoaded = pageLoaded;\n   ```\n1. Run the application:\n\n   ```Shell\n    tns run android (or tns emulate ios)\n   ```\n\nThe new widget should be successfully displayed on the page.\n\n# Handling User Interaction\nThe widget is already successfully visualized but it is in a very basic state&mdash;for example, it does not reflect changes coming from the Native side when the user interacts with the widget. In other words, the `value` property on the JavaScript side will not be updated after user interaction.\n\n### Android\nThe Android general way of handling change notifications is via *Listeners*&mdash;in the current scenario this is the [OnValueChangeListener](http://developer.android.com/reference/android/widget/NumberPicker.OnValueChangeListener.html).You need to create a new interface implementation and register it on the native picker instance to receive updates coming from the Android world. Because this implementation is instance-related, we want to put it in the `_createUI` method:\n\n```javascript\nNumberPicker.prototype._createUI = function () {\n    this._android = new android.widget.NumberPicker(this._context);\n\n    var that = new WeakRef(this);\n    var changeListener = new android.widget.NumberPicker.OnValueChangeListener({\n        onValueChange: function(picker, oldVal, newVal){\n            var instance = that.get();\n            if(instance) {\n                instance._onPropertyChangedFromNative(NumberPicker.valueProperty, newVal);\n            }\n        }\n    });\n\n    this._android.setOnValueChangedListener(changeListener);\n};\n```\n\n>Note the `WeakRef` wrapper of the `this` argument. This is an important part of the listener implementation as it prevents circular references (resulting in a memory leak) between the JavaScript implementation Object literal, which is statically cached per `extend` call and the outer JavaScript instance.\n\nHere the NativeScript Android Bridge is used to create a new [interface implementation in JavaScript](http://docs.nativescript.org/runtimes/android/generator/extend-class-interface) and to handle the `onValueChange` method. When a notification from the native Picker is received, the JavaScript object associated with the event is retrieved and the special method `_onPropertyChangedFromNative` is called on it. This is a method on the `Proxy` class that synchronizes properties from both JavaScript and native Picker in a way that prevents circular updates, which may result in a StackOverflow Exception.\n\n### iOS\nOn iOS the generic event [UIControlEventValueChanged](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIControl_Class/index.html#//apple_ref/c/econst/UIControlEventValueChanged) raised by the `UIStepper` widget is used. So the approach will be to extend the base `NSObject` class, to expose a handler method and register a new instance of the extended object using the [addTargetActionForControlEvents](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIControl_Class/#//apple_ref/occ/instm/UIControl/addTarget:action:forControlEvents:) method. According to the [Extending Classes in NativeScript for iOS](http://docs.nativescript.org/runtimes/ios/how-to/ObjC-Subclassing#calling-base-methods-Exposed) article, the following code enables value change notifications:\n\n```javascript\n// put this somewhere in the module implementation\nvar ListenerClass = NSObject.extend({\n    valueChanged: function(sender) {\n        if(this._owner) {\n            this._owner._onPropertyChangedFromNative(common.NumberPicker.valueProperty, sender.value);\n        }\n    }\n}, {\n    name: \"ListenerClass\",\n    exposedMethods: {\n        \"valueChanged\": { returns: interop.types.void, params: [ UIStepper ] }\n    }\n});\n\n////////////////////////////////////////\n\n// inside the NumberPicker's constructor\nfunction NumberPicker() {\n    _super.apply(this, arguments);\n\n    this._ios = new UIStepper();\n    this._listener = new ListenerClass();\n    this._listener._owner = this;\n    this._ios.addTargetActionForControlEvents(this._listener, \"valueChanged\", UIControlEvents.UIControlEventValueChanged);\n}\n```\n\n>Note the assignment of the `listener` object to the `this` argument (`this._listener = new ListenerClass()`) in the constructor. This is needed to prevent the native class deallocation because the `addTargetActionForControlEvents` method uses `Weak` references when adding listeners.\n\n### Data-Binding Ready\nWith gluing the Native-to-JavaScript and JavaScript-to-Native flow of changes, the `value` property is completely [data-binding](http://docs.nativescript.org/bindings) ready and calling the [Bindable.bind](http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html#bind) method on the widget will work as expected, both in one-way and two-way cases.\n\n# CSS Support\nThe styling support in the NativeScript modules is built on top of three major layers:\n\n* The [Style](http://docs.nativescript.org/api-reference/classes/_ui_styling_.style.html) object on a per `View` instance, which allows programmatic styling.\n* The Css parser that reads `*.css` files and updates the `Style` object of each matched `View`.\n* The *Styler* concept - the mapping of a JavaScript value to the corresponding native widget's property is delegated to an external object, named `Styler`.\n\n\n> The properties, common for each native widget, are handled by the `DefaultStyler`. Other properties are specific on a per widget type. For example, the [TextView](http://developer.android.com/reference/android/widget/TextView.html) widgets&mdash;these are handled by the specific `TextViewStyler`. \n\nThe `DefaultStyler` handles the following [properties](http://uatdocs.nativescript.org/styling#supported-properties):\n\n* background\n* visibility\n* opacity\n* minWidth\n* minHeight\n* borderWidth\n* borderColor\n* borderRadius\n\nWhen you create a new widget and you do not need support for other specific properties, there is no need to specify custom `Styler` because the default one will handle these for you. In this particular case, the article will walk you through handling the `color` property as well, to demonstrate the workflow and the steps needed to enable widget-specific properties. The following three entry points are needed by a `Styler` to reflect a JavaScript style property change:\n\n* setPropertyValue <br/>\n  *Applies the property-specific logic to the native widget.*\n* resetPropertyValue <br/>\n  *Resets the property value to its default (original) state.*\n* getNativePropertyValue <br/>\n  *Gets the default (original) property value.*\n\n### iOS\nThe following code illustrates how to update the `tintColor` property of the iOS UIStepper when the `color` property changes on a JavaScript `NumberPicker` object:\n\n```javascript\n// within the number-picker.ios.js file\nvar style = require(\"ui/styling\");\n\n//////////////////////////////////\n\n// this function is called when the `color` Style property changes on a `NumberPicker` instance \nfunction setColor(view, value) {\n    var nativePicker = view.ios;\n\n    // value is UIColor, so we may apply it directly\n    nativePicker.tintColor = value;\n}\n\n// this function is called when the `color` Style property changes and the new value is `undefined`\nfunction resetColor(view, value) {\n    var nativePicker = view.ios;\n\n    // value is native UIColor, so apply it directly\n    nativePicker.tintColor = value;\n}\n\n// this function is called when the `Styler` is about to reset the `color` property to its default (original) value.\nfunction getNativeColorValue(view) {\n    var nativePicker = view.ios;\n\n    return nativePicker.tintColor;\n}\n\nvar changedHandler = new style.stylers.StylePropertyChangedHandler(setColor, resetColor, getNativeColorValue);\n\n// register the handler for the color property on the NumberPicker type\nstyle.stylers.registerHandler(style.properties.colorProperty, changedHandler, \"NumberPicker\");\n```\n\n>In Android, the `color` property would be mapped to the text color of the labels within the native widget, However, this cannot be easily achieved programmatically but rather through the Android-specific XML styles. That's why this article will not cover the `color` property for Android. Still, the concept there is identical to the one described for iOS.\n\n# XML-Ready\nMaking the component visible to the XML parser is as easy as adding a custom namespace at the [Page level](http://docs.nativescript.org/ui-with-xml#custom-components). The following code illustrates this:\n\n```xml\n<Page\n    xmlns=\"http://schemas.nativescript.org/tns.xsd\"\n    xmlns:numPicker=\"number-picker\"\n    loaded=\"pageLoaded\">\n  <StackLayout id=\"rootLayout\">\n    <Label text=\"{{ value }}\" cssClass=\"title\"/>\n    <Button text=\"TAP\" tap=\"{{ tapAction }}\" />\n    <Label text=\"{{ value }}\" cssClass=\"message\" textWrap=\"true\"/>\n    <numPicker:NumberPicker value=\"{{ value }}\" horizontalAlignment=\"left\"/>\n  </StackLayout>\n</Page>\n```\n\n> The CLI will copy the JavaScript part of the plugin within the tns_modules folder. The XML parser will automatically check for the `tns_modules/number-picker` folder to load the widget.\n\n# See Also\n\n* [Plugins](http://docs.nativescript.org/plugins).\n* [UI - The Basics](http://docs.nativescript.org/ui-with-xml)\n","date":"2016-08-26T21:05:54.469Z","updated":"2016-08-26T21:05:54.469Z","path":"plugins/ui-plugin.html","comments":1,"layout":"page","_id":"cisn95c74000lwsl07r3qpobi","content":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>This article covers the basics of creating a NativeScript User Interface plugin that integrates with the existing <a href=\"https://github.com/NativeScript/NativeScript\" target=\"_blank\" rel=\"external\">cross-platform</a> modules.</p>\n<p>Although the cross-platform part of NativeScript is entirely written in <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">TypeScript</a>, the provided code samples are in plain JavaScript and are created with Sublime Text 2 as the preferred IDE. You can achieve the same with any transpiler tool that produces valid ES5 JavaScript and an IDE of your choice.</p>\n<p>The widget to enable is <a href=\"http://developer.android.com/reference/android/widget/NumberPicker.html\" target=\"_blank\" rel=\"external\">NumberPicker</a> / <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper\" target=\"_blank\" rel=\"external\">UIStepper</a> as this component is currently not available in the NativeScript UI modules and (a very important note) - semantically similar widgets are available in both Android and iOS. The suggested way for building the plugin will follow the guidelines the NativeScript team uses when creating cross-platform modules and will emphasize major concepts like observables, bindable properties, abstract View hierarchy (or Visual Tree) and CSS styling.</p>\n<blockquote>\n<p>The article assumes that you are already familiar with developing <a href=\"!--￼17--\">applications with NativeScript</a>.</p>\n</blockquote>\n<h1 id=\"Class-Hierarchy\"><a href=\"#Class-Hierarchy\" class=\"headerlink\" title=\"Class Hierarchy\"></a>Class Hierarchy</h1><blockquote>\n<p>Throughout this article you will often see the “Visual Tree” expression&mdash;it refers to the JavaScript abstraction available in the cross-platform modules.</p>\n</blockquote>\n<p>Here is a brief overview of the class hierarchy in the Visual Tree:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable</div><div class=\"line\">├── DependencyObservable</div><div class=\"line\">│   ├── Bindable</div><div class=\"line\">│   │   ├── ProxyObject</div><div class=\"line\">│   │   │   ├── View</div></pre></td></tr></table></figure>\n<h3 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_data_observable_.observable.html\">Observable</a></h3><p>This is the class that implements the <a href=\"https://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"external\">Observer</a> design-pattern. Every node within the Visual Tree should support the addEventListener/removeEventListener routine, hence the base class.</p>\n<h3 id=\"DependencyObservable\"><a href=\"#DependencyObservable\" class=\"headerlink\" title=\"DependencyObservable\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_dependency_observable_.dependencyobservable.html\">DependencyObservable</a></h3><p>This class enables cascading property values - for example an effective property value may be the default one, inherited from some ancestor, coming from a style or set locally directly. You may consider it as an <code>Observable</code> with extended property backing mechanism.</p>\n<h3 id=\"Bindable\"><a href=\"#Bindable\" class=\"headerlink\" title=\"Bindable\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html\">Bindable</a></h3><p>This class enables data-binding, using the extended property backing mechanism of the <code>DependencyObservable</code> base class. </p>\n<h3 id=\"ProxyObject\"><a href=\"#ProxyObject\" class=\"headerlink\" title=\"ProxyObject\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_proxy_.proxyobject.html\">ProxyObject</a></h3><p>Each UI module within NativeScript internally creates and maintains a corresponding native UI instance. This class serves as a proxy between the JavaScript object and the wrapped native object. For example, when a property changes on the JavaScript side, the implementation takes care of delegating the change to the native representation and vice-versa.</p>\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\">View</a></h3><p>At an abstract level, <em>View</em> describes an object that has visual representation on the screen. It participates in the life-cycle and layout passes and may be styled - either through CSS or by using the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_styling_.style.html\">View.style</a> property.</p>\n<h3 id=\"See-Also\"><a href=\"#See-Also\" class=\"headerlink\" title=\"See Also\"></a>See Also</h3><p>The NativeScript documentation portal has some great content to walk you through each of the above classes in greater details:</p>\n<ul>\n<li><a href=\"http://docs.nativescript.org/events.html\">Events</a></li>\n<li><a href=\"http://docs.nativescript.org/properties.html\">Properties</a></li>\n<li><a href=\"http://docs.nativescript.org/bindings.html\">Data-Binding</a></li>\n</ul>\n<h1 id=\"File-Structure\"><a href=\"#File-Structure\" class=\"headerlink\" title=\"File Structure\"></a>File Structure</h1><p>Keeping in mind the class hierarchy, the obvious choice for the base class of the widget will be <code>View</code>. Following is the structure of a typical NativeScript <a href=\"https://github.com/NativeScript/NativeScript/tree/master/ui/button\" target=\"_blank\" rel=\"external\">UI module</a>:</p>\n<h3 id=\"Definition-File-number-picker-d-ts\"><a href=\"#Definition-File-number-picker-d-ts\" class=\"headerlink\" title=\"Definition File (number-picker.d.ts)\"></a>Definition File (number-picker.d.ts)</h3><p>This is the TypeScript way to describe all the publicly available APIs within a module. Typically, the creation of a NativeScript module starts with the API first (or defining what a widget should do) and then move to the actual implementation. Taking a close look at <a href=\"http://developer.android.com/reference/android/widget/NumberPicker.html\" target=\"_blank\" rel=\"external\">NumberPicker</a> and <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper\" target=\"_blank\" rel=\"external\">UIStepper</a> you can easily come up with the API definition (we are looking for an API that is cross-platform and each method/property is available for each native platform). For the sake of simplicity, this article will cover only one property. You can examine the sample <a href=\"https://github.com/atanasovg/nativescript-number-picker\" target=\"_blank\" rel=\"external\">GitHub repository</a> for the complete implementation.</p>\n<blockquote>\n<p>This file is not mandatory and if you do not use TypeScript you may simply skip this step. Still, defining the public API one way or another will be useful for the users of the plugin.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">\"number-picker\"</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\">    <span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberPicker</span> <span class=\"keyword\">extends</span> <span class=\"title\">view</span>.<span class=\"title\">View</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// static (prototype) properties</span></div><div class=\"line\">        public <span class=\"keyword\">static</span> valueProperty: dependencyObservable.Property;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// instance properties</span></div><div class=\"line\">        value: number;</div><div class=\"line\">        </div><div class=\"line\">        android: android.widget.NumberPicker;</div><div class=\"line\">        ios: UIStepper;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Each NativeScript module uses TypeScript’s <a href=\"http://www.typescriptlang.org/Handbook#modules-working-with-other-javascript-libraries\" target=\"_blank\" rel=\"external\">ambient module declaration</a>, which tell the language service that this module will be available at runtime and it is our responsibility to load it.</p>\n</blockquote>\n<p>To enable features like data-binding and styling for the widget, you need to use dependency properties to back the instance properties as described <a href=\"http://docs.nativescript.org/bindings.html\">here</a>.</p>\n<h3 id=\"Common-File-number-picker-common-ts\"><a href=\"#Common-File-number-picker-common-ts\" class=\"headerlink\" title=\"Common File (number-picker-common.ts)\"></a>Common File (number-picker-common.ts)</h3><p>Looking at the <a href=\"https://github.com/NativeScript/NativeScript/tree/master/ui/button\" target=\"_blank\" rel=\"external\">Button</a> folder you will notice the <code>*-common</code> file. This is the file that holds the functionality, which is the same regardless of the target platform. Such functionality, for example, contains instance properties in its implementation. Here is how the common file looks like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> dObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/proxy\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> NumberPicker = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    global.__extends(NumberPicker, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberPicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(NumberPicker.prototype, <span class=\"string\">\"value\"</span>, &#123;</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(NumberPicker.valueProperty);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._setValue(NumberPicker.valueProperty, value);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    NumberPicker.valueProperty = <span class=\"keyword\">new</span> dObservable.Property(<span class=\"string\">\"value\"</span>, <span class=\"string\">\"NumberPicker\"</span>, <span class=\"keyword\">new</span> proxy.PropertyMetadata(<span class=\"number\">0</span>, dObservable.PropertyMetadataSettings.AffectsLayout));</div><div class=\"line\">    <span class=\"keyword\">return</span> NumberPicker;</div><div class=\"line\">&#125;)(view.View);</div><div class=\"line\"></div><div class=\"line\">exports.NumberPicker = NumberPicker;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The global <code>__extends</code> function is provided by the NativeScript runtime and it basically adds some functionality on top of the TypeScript’s <code>__extends</code> function.</p>\n</blockquote>\n<p>A new <code>NumberPicker</code> class is defined and a backing dependency property with the respective getter and setter functions for the instance property is created. An important note is how the <code>getter</code> and <code>setter</code> functions are implemented. The <code>DependencyObservable</code> <code>_getValue</code> and <code>_setValue</code> methods, respectively, enable cascading values as well as change notifications and data-bindings. Now comes the other interesting part&mdash;creating the native widgets themselves and plugging them into the NativeScript framework.</p>\n<h3 id=\"Android-Specific-File-number-picker-android-ts\"><a href=\"#Android-Specific-File-number-picker-android-ts\" class=\"headerlink\" title=\"Android-Specific File (number-picker.android.ts)\"></a>Android-Specific File (number-picker.android.ts)</h3><p>The <a href=\"https://github.com/NativeScript/nativescript-cli#development-in-app\" target=\"_blank\" rel=\"external\">NativeScript CLI</a> follows the convention of marking platform-specific files with the platform name. This tells the CLI that these files will be only available for the package targeting the specified platform. With that said, you will need the <code>number-picker.android.ts</code> file to specify the Android-specific part of the widget:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">\"./number-picker-common\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onValuePropertyChanged</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> picker = data.object;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!picker.android) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    picker.android.setValue(data.newValue);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">common.NumberPicker.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"utils/module-merge\"</span>).merge(common, <span class=\"built_in\">module</span>.exports);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> NumberPicker = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    global.__extends(NumberPicker, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberPicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    NumberPicker.prototype._createUI = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._android = <span class=\"keyword\">new</span> android.widget.NumberPicker(<span class=\"keyword\">this</span>._context);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(NumberPicker.prototype, <span class=\"string\">\"android\"</span>, &#123;</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._android;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> NumberPicker;</div><div class=\"line\">&#125;)(common.NumberPicker);</div><div class=\"line\"></div><div class=\"line\">exports.NumberPicker = NumberPicker;</div></pre></td></tr></table></figure>\n<p>What the above code does is:</p>\n<ol>\n<li>Require the common module.</li>\n<li>Define a PropertyChangedCallback that will update the value of the native <code>NumberPicker</code>. Because this code is applicable to Android only, you can safely go through the NativeScript Bridge and change the property of the native widget directly.</li>\n<li>Register the callback with the metadata of the <code>value</code> property so that the base implementation can call it. Here, the <code>Proxy</code> level of the class hierarchy provides the implementation that will execute this callback whenever the JavaScript <code>value</code> property changes. </li>\n<li>Merge the exports of the common file with the exports of this file. This is very important because at run time, the loaded file is the <code>number-picker.android</code> and you need the publicly exposed API from the common module to be available on the specific one.</li>\n<li>Create a new <code>NumberPicker</code> class that inherits the common one and its functionality.</li>\n<li>Override the <code>_createUI</code> method and instantiate the <code>_android</code> field.</li>\n<li>Define a public getter property for the native Android instance.</li>\n</ol>\n<blockquote>\n<p>The <code>iOS</code> property, as declared in the definition (API) file, remains <code>undefined</code> when running on Android.</p>\n</blockquote>\n<p>The <code>_createUI</code> method is part of the Visual Tree instantiation pass for Android. Because every native Android UI widget requires a valid <a href=\"http://developer.android.com/reference/android/content/Context.html\" target=\"_blank\" rel=\"external\">Context</a> as a constructor parameter, the UI is lazy initialized when we have such <code>Context</code> available. This happens when the main <a href=\"http://developer.android.com/reference/android/app/Activity.html\" target=\"_blank\" rel=\"external\">Activity</a> is created. The following scheme briefly summarizes the steps during the UI initialization pass within the Visual Tree:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Android runtime raises the getActivity callback</div><div class=\"line\">                 |</div><div class=\"line\">Application module handles the callback</div><div class=\"line\">                 |</div><div class=\"line\">Frame module onActivityRequested is called</div><div class=\"line\">                 |</div><div class=\"line\">Native Activity overrides are provided</div><div class=\"line\">                 |</div><div class=\"line\">Native onCreate method is called on the main Activity</div><div class=\"line\">                 |</div><div class=\"line\">Application is navigated to the main module</div><div class=\"line\">                 |</div><div class=\"line\">The XML is parsed and the Visual Tree is created</div><div class=\"line\">                 |</div><div class=\"line\">The Visual Tree is traversed and _onAttached(context) is called on each View</div><div class=\"line\">                 |</div><div class=\"line\">_onAttached(context) will update the _context property and will call _createUI</div></pre></td></tr></table></figure>\n<p>So, overriding the <code>_createUI</code> method is what is needed to plug the new widget within the Visual Tree.</p>\n<h3 id=\"iOS-specific-File-number-picker-ios-ts\"><a href=\"#iOS-specific-File-number-picker-ios-ts\" class=\"headerlink\" title=\"iOS-specific File (number-picker.ios.ts)\"></a>iOS-specific File (number-picker.ios.ts)</h3><p>Here is the minimalistic iOS functionality implementation:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">\"./number-picker-common\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onValuePropertyChanged</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> picker = data.object;</div><div class=\"line\">    picker.ios.value = data.newValue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">common.NumberPicker.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"utils/module-merge\"</span>).merge(common, <span class=\"built_in\">module</span>.exports);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> NumberPicker = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    global.__extends(NumberPicker, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberPicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>._ios = <span class=\"keyword\">new</span> UIStepper();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(NumberPicker.prototype, <span class=\"string\">\"ios\"</span>, &#123;</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._ios;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> NumberPicker;</div><div class=\"line\">&#125;)(common.NumberPicker);</div><div class=\"line\"></div><div class=\"line\">exports.NumberPicker = NumberPicker;</div></pre></td></tr></table></figure>\n<p>To some extent, the code looks similar to the Android-specific one and uses the same concepts, but when you look into the details, you will see the differences. For example, the <code>onValuePropertyChanged</code> function uses the iOS <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper\" target=\"_blank\" rel=\"external\">UIStepper</a> API to update the native <code>value</code> or another example could be the absence of a <code>_createUI</code> method. In iOS, the instantiation pass happens in the constructor of each UI widget because each native widget may be constructed at any time, without the need of an additional parameter like Android’s <code>Context</code>. Here are the steps of the iOS instantiation pass:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppDelegate&apos;s applicationDidFinishLaunchingWithOptions notification comes</div><div class=\"line\">                 |</div><div class=\"line\">Application module handles the notification</div><div class=\"line\">                 |</div><div class=\"line\">Application is navigated to the main module</div><div class=\"line\">                 |</div><div class=\"line\">The XML is parsed and the Visual Tree, including native widgets, is created</div></pre></td></tr></table></figure>\n<h1 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h1><p>The minimalistic implementation is ready and the widget is ready to be tested. You need to package the files as a valid plugin, as described in the <a href=\"http://docs.nativescript.org/plugins\">documentation</a>. Here are the steps:</p>\n<ol>\n<li><p>Create a new sample project named <em>myApp</em>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns create myApp</div></pre></td></tr></table></figure>\n</li>\n<li><p>Navigate to the new folder:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd myApp</div></pre></td></tr></table></figure>\n</li>\n<li><p>Create a new folder named <code>number-picker</code>.</p>\n</li>\n<li>Add the above described JavaScript files in <code>number-picker</code>:<ul>\n<li><code>number-picker-common.js</code></li>\n<li><code>number-picker.android.js</code></li>\n<li><code>number-picker.ios.js</code></li>\n</ul>\n</li>\n<li><p>Add a new <code>package.json</code> file in <code>number-picker</code> with the following content:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"number-picker\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"number-picker.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"nativescript\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"platforms\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"ios\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"android\"</span>: <span class=\"string\">\"1.1.0\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Run the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add number-picker</div></pre></td></tr></table></figure>\n</li>\n<li><p>Modify the <code>app/main-page.js</code> file to create the new widget:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vmModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"./main-view-model\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pickerModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"number-picker\"</span>);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    page.bindingContext = vmModule.mainViewModel;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> layout = page.content;</div><div class=\"line\">    <span class=\"keyword\">var</span> picker = <span class=\"keyword\">new</span> pickerModule.NumberPicker();</div><div class=\"line\">    layout.addChild(picker);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Run the application:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run android (or tns emulate ios)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>The new widget should be successfully displayed on the page.</p>\n<h1 id=\"Handling-User-Interaction\"><a href=\"#Handling-User-Interaction\" class=\"headerlink\" title=\"Handling User Interaction\"></a>Handling User Interaction</h1><p>The widget is already successfully visualized but it is in a very basic state&mdash;for example, it does not reflect changes coming from the Native side when the user interacts with the widget. In other words, the <code>value</code> property on the JavaScript side will not be updated after user interaction.</p>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><p>The Android general way of handling change notifications is via <em>Listeners</em>&mdash;in the current scenario this is the <a href=\"http://developer.android.com/reference/android/widget/NumberPicker.OnValueChangeListener.html\" target=\"_blank\" rel=\"external\">OnValueChangeListener</a>.You need to create a new interface implementation and register it on the native picker instance to receive updates coming from the Android world. Because this implementation is instance-related, we want to put it in the <code>_createUI</code> method:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">NumberPicker.prototype._createUI = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._android = <span class=\"keyword\">new</span> android.widget.NumberPicker(<span class=\"keyword\">this</span>._context);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> changeListener = <span class=\"keyword\">new</span> android.widget.NumberPicker.OnValueChangeListener(&#123;</div><div class=\"line\">        onValueChange: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">picker, oldVal, newVal</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> instance = that.get();</div><div class=\"line\">            <span class=\"keyword\">if</span>(instance) &#123;</div><div class=\"line\">                instance._onPropertyChangedFromNative(NumberPicker.valueProperty, newVal);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>._android.setOnValueChangedListener(changeListener);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note the <code>WeakRef</code> wrapper of the <code>this</code> argument. This is an important part of the listener implementation as it prevents circular references (resulting in a memory leak) between the JavaScript implementation Object literal, which is statically cached per <code>extend</code> call and the outer JavaScript instance.</p>\n</blockquote>\n<p>Here the NativeScript Android Bridge is used to create a new <a href=\"http://docs.nativescript.org/runtimes/android/generator/extend-class-interface\">interface implementation in JavaScript</a> and to handle the <code>onValueChange</code> method. When a notification from the native Picker is received, the JavaScript object associated with the event is retrieved and the special method <code>_onPropertyChangedFromNative</code> is called on it. This is a method on the <code>Proxy</code> class that synchronizes properties from both JavaScript and native Picker in a way that prevents circular updates, which may result in a StackOverflow Exception.</p>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p>On iOS the generic event <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIControl_Class/index.html#//apple_ref/c/econst/UIControlEventValueChanged\" target=\"_blank\" rel=\"external\">UIControlEventValueChanged</a> raised by the <code>UIStepper</code> widget is used. So the approach will be to extend the base <code>NSObject</code> class, to expose a handler method and register a new instance of the extended object using the <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIControl_Class/#//apple_ref/occ/instm/UIControl/addTarget:action:forControlEvents:\" target=\"_blank\" rel=\"external\">addTargetActionForControlEvents</a> method. According to the <a href=\"http://docs.nativescript.org/runtimes/ios/how-to/ObjC-Subclassing#calling-base-methods-Exposed\">Extending Classes in NativeScript for iOS</a> article, the following code enables value change notifications:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// put this somewhere in the module implementation</span></div><div class=\"line\"><span class=\"keyword\">var</span> ListenerClass = NSObject.extend(&#123;</div><div class=\"line\">    valueChanged: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sender</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>._owner) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._owner._onPropertyChangedFromNative(common.NumberPicker.valueProperty, sender.value);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    name: <span class=\"string\">\"ListenerClass\"</span>,</div><div class=\"line\">    exposedMethods: &#123;</div><div class=\"line\">        <span class=\"string\">\"valueChanged\"</span>: &#123; returns: interop.types.void, params: [ UIStepper ] &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">////////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// inside the NumberPicker's constructor</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberPicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>._ios = <span class=\"keyword\">new</span> UIStepper();</div><div class=\"line\">    <span class=\"keyword\">this</span>._listener = <span class=\"keyword\">new</span> ListenerClass();</div><div class=\"line\">    <span class=\"keyword\">this</span>._listener._owner = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>._ios.addTargetActionForControlEvents(<span class=\"keyword\">this</span>._listener, <span class=\"string\">\"valueChanged\"</span>, UIControlEvents.UIControlEventValueChanged);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note the assignment of the <code>listener</code> object to the <code>this</code> argument (<code>this._listener = new ListenerClass()</code>) in the constructor. This is needed to prevent the native class deallocation because the <code>addTargetActionForControlEvents</code> method uses <code>Weak</code> references when adding listeners.</p>\n</blockquote>\n<h3 id=\"Data-Binding-Ready\"><a href=\"#Data-Binding-Ready\" class=\"headerlink\" title=\"Data-Binding Ready\"></a>Data-Binding Ready</h3><p>With gluing the Native-to-JavaScript and JavaScript-to-Native flow of changes, the <code>value</code> property is completely <a href=\"http://docs.nativescript.org/bindings\">data-binding</a> ready and calling the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html#bind\">Bindable.bind</a> method on the widget will work as expected, both in one-way and two-way cases.</p>\n<h1 id=\"CSS-Support\"><a href=\"#CSS-Support\" class=\"headerlink\" title=\"CSS Support\"></a>CSS Support</h1><p>The styling support in the NativeScript modules is built on top of three major layers:</p>\n<ul>\n<li>The <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_styling_.style.html\">Style</a> object on a per <code>View</code> instance, which allows programmatic styling.</li>\n<li>The Css parser that reads <code>*.css</code> files and updates the <code>Style</code> object of each matched <code>View</code>.</li>\n<li>The <em>Styler</em> concept - the mapping of a JavaScript value to the corresponding native widget’s property is delegated to an external object, named <code>Styler</code>.</li>\n</ul>\n<blockquote>\n<p>The properties, common for each native widget, are handled by the <code>DefaultStyler</code>. Other properties are specific on a per widget type. For example, the <a href=\"http://developer.android.com/reference/android/widget/TextView.html\" target=\"_blank\" rel=\"external\">TextView</a> widgets&mdash;these are handled by the specific <code>TextViewStyler</code>. </p>\n</blockquote>\n<p>The <code>DefaultStyler</code> handles the following <a href=\"http://uatdocs.nativescript.org/styling#supported-properties\" target=\"_blank\" rel=\"external\">properties</a>:</p>\n<ul>\n<li>background</li>\n<li>visibility</li>\n<li>opacity</li>\n<li>minWidth</li>\n<li>minHeight</li>\n<li>borderWidth</li>\n<li>borderColor</li>\n<li>borderRadius</li>\n</ul>\n<p>When you create a new widget and you do not need support for other specific properties, there is no need to specify custom <code>Styler</code> because the default one will handle these for you. In this particular case, the article will walk you through handling the <code>color</code> property as well, to demonstrate the workflow and the steps needed to enable widget-specific properties. The following three entry points are needed by a <code>Styler</code> to reflect a JavaScript style property change:</p>\n<ul>\n<li>setPropertyValue <br>\n<em>Applies the property-specific logic to the native widget.</em></li>\n<li>resetPropertyValue <br>\n<em>Resets the property value to its default (original) state.</em></li>\n<li>getNativePropertyValue <br>\n<em>Gets the default (original) property value.</em></li>\n</ul>\n<h3 id=\"iOS-1\"><a href=\"#iOS-1\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p>The following code illustrates how to update the <code>tintColor</code> property of the iOS UIStepper when the <code>color</code> property changes on a JavaScript <code>NumberPicker</code> object:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// within the number-picker.ios.js file</span></div><div class=\"line\"><span class=\"keyword\">var</span> style = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// this function is called when the `color` Style property changes on a `NumberPicker` instance </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setColor</span>(<span class=\"params\">view, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativePicker = view.ios;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// value is UIColor, so we may apply it directly</span></div><div class=\"line\">    nativePicker.tintColor = value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// this function is called when the `color` Style property changes and the new value is `undefined`</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetColor</span>(<span class=\"params\">view, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativePicker = view.ios;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// value is native UIColor, so apply it directly</span></div><div class=\"line\">    nativePicker.tintColor = value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// this function is called when the `Styler` is about to reset the `color` property to its default (original) value.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNativeColorValue</span>(<span class=\"params\">view</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativePicker = view.ios;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> nativePicker.tintColor;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> changedHandler = <span class=\"keyword\">new</span> style.stylers.StylePropertyChangedHandler(setColor, resetColor, getNativeColorValue);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register the handler for the color property on the NumberPicker type</span></div><div class=\"line\">style.stylers.registerHandler(style.properties.colorProperty, changedHandler, <span class=\"string\">\"NumberPicker\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>In Android, the <code>color</code> property would be mapped to the text color of the labels within the native widget, However, this cannot be easily achieved programmatically but rather through the Android-specific XML styles. That’s why this article will not cover the <code>color</code> property for Android. Still, the concept there is identical to the one described for iOS.</p>\n</blockquote>\n<h1 id=\"XML-Ready\"><a href=\"#XML-Ready\" class=\"headerlink\" title=\"XML-Ready\"></a>XML-Ready</h1><p>Making the component visible to the XML parser is as easy as adding a custom namespace at the <a href=\"http://docs.nativescript.org/ui-with-xml#custom-components\">Page level</a>. The following code illustrates this:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.nativescript.org/tns.xsd\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:numPicker</span>=<span class=\"string\">\"number-picker\"</span></div><div class=\"line\">    <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rootLayout\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; value &#125;&#125;\"</span> <span class=\"attr\">cssClass</span>=<span class=\"string\">\"title\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"TAP\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"&#123;&#123; tapAction &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; value &#125;&#125;\"</span> <span class=\"attr\">cssClass</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">textWrap</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">numPicker:NumberPicker</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123; value &#125;&#125;\"</span> <span class=\"attr\">horizontalAlignment</span>=<span class=\"string\">\"left\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>The CLI will copy the JavaScript part of the plugin within the tns_modules folder. The XML parser will automatically check for the <code>tns_modules/number-picker</code> folder to load the widget.</p>\n</blockquote>\n<h1 id=\"See-Also-1\"><a href=\"#See-Also-1\" class=\"headerlink\" title=\"See Also\"></a>See Also</h1><ul>\n<li><a href=\"http://docs.nativescript.org/plugins\">Plugins</a>.</li>\n<li><a href=\"http://docs.nativescript.org/ui-with-xml\">UI - The Basics</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>This article covers the basics of creating a NativeScript User Interface plugin that integrates with the existing <a href=\"https://github.com/NativeScript/NativeScript\">cross-platform</a> modules.</p>\n<p>Although the cross-platform part of NativeScript is entirely written in <a href=\"http://www.typescriptlang.org/\">TypeScript</a>, the provided code samples are in plain JavaScript and are created with Sublime Text 2 as the preferred IDE. You can achieve the same with any transpiler tool that produces valid ES5 JavaScript and an IDE of your choice.</p>\n<p>The widget to enable is <a href=\"http://developer.android.com/reference/android/widget/NumberPicker.html\">NumberPicker</a> / <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper\">UIStepper</a> as this component is currently not available in the NativeScript UI modules and (a very important note) - semantically similar widgets are available in both Android and iOS. The suggested way for building the plugin will follow the guidelines the NativeScript team uses when creating cross-platform modules and will emphasize major concepts like observables, bindable properties, abstract View hierarchy (or Visual Tree) and CSS styling.</p>\n<blockquote>\n<p>The article assumes that you are already familiar with developing <a href=\"!--￼17--\">applications with NativeScript</a>.</p>\n</blockquote>\n<h1 id=\"Class-Hierarchy\"><a href=\"#Class-Hierarchy\" class=\"headerlink\" title=\"Class Hierarchy\"></a>Class Hierarchy</h1><blockquote>\n<p>Throughout this article you will often see the “Visual Tree” expression&mdash;it refers to the JavaScript abstraction available in the cross-platform modules.</p>\n</blockquote>\n<p>Here is a brief overview of the class hierarchy in the Visual Tree:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable</div><div class=\"line\">├── DependencyObservable</div><div class=\"line\">│   ├── Bindable</div><div class=\"line\">│   │   ├── ProxyObject</div><div class=\"line\">│   │   │   ├── View</div></pre></td></tr></table></figure>\n<h3 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_data_observable_.observable.html\">Observable</a></h3><p>This is the class that implements the <a href=\"https://en.wikipedia.org/wiki/Observer_pattern\">Observer</a> design-pattern. Every node within the Visual Tree should support the addEventListener/removeEventListener routine, hence the base class.</p>\n<h3 id=\"DependencyObservable\"><a href=\"#DependencyObservable\" class=\"headerlink\" title=\"DependencyObservable\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_dependency_observable_.dependencyobservable.html\">DependencyObservable</a></h3><p>This class enables cascading property values - for example an effective property value may be the default one, inherited from some ancestor, coming from a style or set locally directly. You may consider it as an <code>Observable</code> with extended property backing mechanism.</p>\n<h3 id=\"Bindable\"><a href=\"#Bindable\" class=\"headerlink\" title=\"Bindable\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html\">Bindable</a></h3><p>This class enables data-binding, using the extended property backing mechanism of the <code>DependencyObservable</code> base class. </p>\n<h3 id=\"ProxyObject\"><a href=\"#ProxyObject\" class=\"headerlink\" title=\"ProxyObject\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_proxy_.proxyobject.html\">ProxyObject</a></h3><p>Each UI module within NativeScript internally creates and maintains a corresponding native UI instance. This class serves as a proxy between the JavaScript object and the wrapped native object. For example, when a property changes on the JavaScript side, the implementation takes care of delegating the change to the native representation and vice-versa.</p>\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a><a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\">View</a></h3><p>At an abstract level, <em>View</em> describes an object that has visual representation on the screen. It participates in the life-cycle and layout passes and may be styled - either through CSS or by using the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_styling_.style.html\">View.style</a> property.</p>\n<h3 id=\"See-Also\"><a href=\"#See-Also\" class=\"headerlink\" title=\"See Also\"></a>See Also</h3><p>The NativeScript documentation portal has some great content to walk you through each of the above classes in greater details:</p>\n<ul>\n<li><a href=\"http://docs.nativescript.org/events.html\">Events</a></li>\n<li><a href=\"http://docs.nativescript.org/properties.html\">Properties</a></li>\n<li><a href=\"http://docs.nativescript.org/bindings.html\">Data-Binding</a></li>\n</ul>\n<h1 id=\"File-Structure\"><a href=\"#File-Structure\" class=\"headerlink\" title=\"File Structure\"></a>File Structure</h1><p>Keeping in mind the class hierarchy, the obvious choice for the base class of the widget will be <code>View</code>. Following is the structure of a typical NativeScript <a href=\"https://github.com/NativeScript/NativeScript/tree/master/ui/button\">UI module</a>:</p>\n<h3 id=\"Definition-File-number-picker-d-ts\"><a href=\"#Definition-File-number-picker-d-ts\" class=\"headerlink\" title=\"Definition File (number-picker.d.ts)\"></a>Definition File (number-picker.d.ts)</h3><p>This is the TypeScript way to describe all the publicly available APIs within a module. Typically, the creation of a NativeScript module starts with the API first (or defining what a widget should do) and then move to the actual implementation. Taking a close look at <a href=\"http://developer.android.com/reference/android/widget/NumberPicker.html\">NumberPicker</a> and <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper\">UIStepper</a> you can easily come up with the API definition (we are looking for an API that is cross-platform and each method/property is available for each native platform). For the sake of simplicity, this article will cover only one property. You can examine the sample <a href=\"https://github.com/atanasovg/nativescript-number-picker\">GitHub repository</a> for the complete implementation.</p>\n<blockquote>\n<p>This file is not mandatory and if you do not use TypeScript you may simply skip this step. Still, defining the public API one way or another will be useful for the users of the plugin.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">\"number-picker\"</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\">    <span class=\"keyword\">import</span> dependencyObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberPicker</span> <span class=\"keyword\">extends</span> <span class=\"title\">view</span>.<span class=\"title\">View</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// static (prototype) properties</span></div><div class=\"line\">        public <span class=\"keyword\">static</span> valueProperty: dependencyObservable.Property;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// instance properties</span></div><div class=\"line\">        value: number;</div><div class=\"line\">        </div><div class=\"line\">        android: android.widget.NumberPicker;</div><div class=\"line\">        ios: UIStepper;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Each NativeScript module uses TypeScript’s <a href=\"http://www.typescriptlang.org/Handbook#modules-working-with-other-javascript-libraries\">ambient module declaration</a>, which tell the language service that this module will be available at runtime and it is our responsibility to load it.</p>\n</blockquote>\n<p>To enable features like data-binding and styling for the widget, you need to use dependency properties to back the instance properties as described <a href=\"http://docs.nativescript.org/bindings.html\">here</a>.</p>\n<h3 id=\"Common-File-number-picker-common-ts\"><a href=\"#Common-File-number-picker-common-ts\" class=\"headerlink\" title=\"Common File (number-picker-common.ts)\"></a>Common File (number-picker-common.ts)</h3><p>Looking at the <a href=\"https://github.com/NativeScript/NativeScript/tree/master/ui/button\">Button</a> folder you will notice the <code>*-common</code> file. This is the file that holds the functionality, which is the same regardless of the target platform. Such functionality, for example, contains instance properties in its implementation. Here is how the common file looks like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> dObservable = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/dependency-observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/proxy\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> NumberPicker = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    global.__extends(NumberPicker, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberPicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(NumberPicker.prototype, <span class=\"string\">\"value\"</span>, &#123;</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getValue(NumberPicker.valueProperty);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._setValue(NumberPicker.valueProperty, value);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    NumberPicker.valueProperty = <span class=\"keyword\">new</span> dObservable.Property(<span class=\"string\">\"value\"</span>, <span class=\"string\">\"NumberPicker\"</span>, <span class=\"keyword\">new</span> proxy.PropertyMetadata(<span class=\"number\">0</span>, dObservable.PropertyMetadataSettings.AffectsLayout));</div><div class=\"line\">    <span class=\"keyword\">return</span> NumberPicker;</div><div class=\"line\">&#125;)(view.View);</div><div class=\"line\"></div><div class=\"line\">exports.NumberPicker = NumberPicker;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The global <code>__extends</code> function is provided by the NativeScript runtime and it basically adds some functionality on top of the TypeScript’s <code>__extends</code> function.</p>\n</blockquote>\n<p>A new <code>NumberPicker</code> class is defined and a backing dependency property with the respective getter and setter functions for the instance property is created. An important note is how the <code>getter</code> and <code>setter</code> functions are implemented. The <code>DependencyObservable</code> <code>_getValue</code> and <code>_setValue</code> methods, respectively, enable cascading values as well as change notifications and data-bindings. Now comes the other interesting part&mdash;creating the native widgets themselves and plugging them into the NativeScript framework.</p>\n<h3 id=\"Android-Specific-File-number-picker-android-ts\"><a href=\"#Android-Specific-File-number-picker-android-ts\" class=\"headerlink\" title=\"Android-Specific File (number-picker.android.ts)\"></a>Android-Specific File (number-picker.android.ts)</h3><p>The <a href=\"https://github.com/NativeScript/nativescript-cli#development-in-app\">NativeScript CLI</a> follows the convention of marking platform-specific files with the platform name. This tells the CLI that these files will be only available for the package targeting the specified platform. With that said, you will need the <code>number-picker.android.ts</code> file to specify the Android-specific part of the widget:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">\"./number-picker-common\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onValuePropertyChanged</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> picker = data.object;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!picker.android) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    picker.android.setValue(data.newValue);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">common.NumberPicker.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"utils/module-merge\"</span>).merge(common, <span class=\"built_in\">module</span>.exports);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> NumberPicker = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    global.__extends(NumberPicker, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberPicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    NumberPicker.prototype._createUI = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._android = <span class=\"keyword\">new</span> android.widget.NumberPicker(<span class=\"keyword\">this</span>._context);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(NumberPicker.prototype, <span class=\"string\">\"android\"</span>, &#123;</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._android;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> NumberPicker;</div><div class=\"line\">&#125;)(common.NumberPicker);</div><div class=\"line\"></div><div class=\"line\">exports.NumberPicker = NumberPicker;</div></pre></td></tr></table></figure>\n<p>What the above code does is:</p>\n<ol>\n<li>Require the common module.</li>\n<li>Define a PropertyChangedCallback that will update the value of the native <code>NumberPicker</code>. Because this code is applicable to Android only, you can safely go through the NativeScript Bridge and change the property of the native widget directly.</li>\n<li>Register the callback with the metadata of the <code>value</code> property so that the base implementation can call it. Here, the <code>Proxy</code> level of the class hierarchy provides the implementation that will execute this callback whenever the JavaScript <code>value</code> property changes. </li>\n<li>Merge the exports of the common file with the exports of this file. This is very important because at run time, the loaded file is the <code>number-picker.android</code> and you need the publicly exposed API from the common module to be available on the specific one.</li>\n<li>Create a new <code>NumberPicker</code> class that inherits the common one and its functionality.</li>\n<li>Override the <code>_createUI</code> method and instantiate the <code>_android</code> field.</li>\n<li>Define a public getter property for the native Android instance.</li>\n</ol>\n<blockquote>\n<p>The <code>iOS</code> property, as declared in the definition (API) file, remains <code>undefined</code> when running on Android.</p>\n</blockquote>\n<p>The <code>_createUI</code> method is part of the Visual Tree instantiation pass for Android. Because every native Android UI widget requires a valid <a href=\"http://developer.android.com/reference/android/content/Context.html\">Context</a> as a constructor parameter, the UI is lazy initialized when we have such <code>Context</code> available. This happens when the main <a href=\"http://developer.android.com/reference/android/app/Activity.html\">Activity</a> is created. The following scheme briefly summarizes the steps during the UI initialization pass within the Visual Tree:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Android runtime raises the getActivity callback</div><div class=\"line\">                 |</div><div class=\"line\">Application module handles the callback</div><div class=\"line\">                 |</div><div class=\"line\">Frame module onActivityRequested is called</div><div class=\"line\">                 |</div><div class=\"line\">Native Activity overrides are provided</div><div class=\"line\">                 |</div><div class=\"line\">Native onCreate method is called on the main Activity</div><div class=\"line\">                 |</div><div class=\"line\">Application is navigated to the main module</div><div class=\"line\">                 |</div><div class=\"line\">The XML is parsed and the Visual Tree is created</div><div class=\"line\">                 |</div><div class=\"line\">The Visual Tree is traversed and _onAttached(context) is called on each View</div><div class=\"line\">                 |</div><div class=\"line\">_onAttached(context) will update the _context property and will call _createUI</div></pre></td></tr></table></figure>\n<p>So, overriding the <code>_createUI</code> method is what is needed to plug the new widget within the Visual Tree.</p>\n<h3 id=\"iOS-specific-File-number-picker-ios-ts\"><a href=\"#iOS-specific-File-number-picker-ios-ts\" class=\"headerlink\" title=\"iOS-specific File (number-picker.ios.ts)\"></a>iOS-specific File (number-picker.ios.ts)</h3><p>Here is the minimalistic iOS functionality implementation:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">\"./number-picker-common\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onValuePropertyChanged</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> picker = data.object;</div><div class=\"line\">    picker.ios.value = data.newValue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">common.NumberPicker.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"utils/module-merge\"</span>).merge(common, <span class=\"built_in\">module</span>.exports);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> NumberPicker = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    global.__extends(NumberPicker, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberPicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>._ios = <span class=\"keyword\">new</span> UIStepper();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(NumberPicker.prototype, <span class=\"string\">\"ios\"</span>, &#123;</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._ios;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> NumberPicker;</div><div class=\"line\">&#125;)(common.NumberPicker);</div><div class=\"line\"></div><div class=\"line\">exports.NumberPicker = NumberPicker;</div></pre></td></tr></table></figure>\n<p>To some extent, the code looks similar to the Android-specific one and uses the same concepts, but when you look into the details, you will see the differences. For example, the <code>onValuePropertyChanged</code> function uses the iOS <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html#//apple_ref/occ/cl/UIStepper\">UIStepper</a> API to update the native <code>value</code> or another example could be the absence of a <code>_createUI</code> method. In iOS, the instantiation pass happens in the constructor of each UI widget because each native widget may be constructed at any time, without the need of an additional parameter like Android’s <code>Context</code>. Here are the steps of the iOS instantiation pass:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppDelegate&apos;s applicationDidFinishLaunchingWithOptions notification comes</div><div class=\"line\">                 |</div><div class=\"line\">Application module handles the notification</div><div class=\"line\">                 |</div><div class=\"line\">Application is navigated to the main module</div><div class=\"line\">                 |</div><div class=\"line\">The XML is parsed and the Visual Tree, including native widgets, is created</div></pre></td></tr></table></figure>\n<h1 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h1><p>The minimalistic implementation is ready and the widget is ready to be tested. You need to package the files as a valid plugin, as described in the <a href=\"http://docs.nativescript.org/plugins\">documentation</a>. Here are the steps:</p>\n<ol>\n<li><p>Create a new sample project named <em>myApp</em>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns create myApp</div></pre></td></tr></table></figure>\n</li>\n<li><p>Navigate to the new folder:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd myApp</div></pre></td></tr></table></figure>\n</li>\n<li><p>Create a new folder named <code>number-picker</code>.</p>\n</li>\n<li>Add the above described JavaScript files in <code>number-picker</code>:<ul>\n<li><code>number-picker-common.js</code></li>\n<li><code>number-picker.android.js</code></li>\n<li><code>number-picker.ios.js</code></li>\n</ul>\n</li>\n<li><p>Add a new <code>package.json</code> file in <code>number-picker</code> with the following content:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"number-picker\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"number-picker.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"nativescript\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"platforms\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"ios\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"android\"</span>: <span class=\"string\">\"1.1.0\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Run the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add number-picker</div></pre></td></tr></table></figure>\n</li>\n<li><p>Modify the <code>app/main-page.js</code> file to create the new widget:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vmModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"./main-view-model\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pickerModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"number-picker\"</span>);</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    page.bindingContext = vmModule.mainViewModel;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> layout = page.content;</div><div class=\"line\">    <span class=\"keyword\">var</span> picker = <span class=\"keyword\">new</span> pickerModule.NumberPicker();</div><div class=\"line\">    layout.addChild(picker);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Run the application:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run android (or tns emulate ios)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>The new widget should be successfully displayed on the page.</p>\n<h1 id=\"Handling-User-Interaction\"><a href=\"#Handling-User-Interaction\" class=\"headerlink\" title=\"Handling User Interaction\"></a>Handling User Interaction</h1><p>The widget is already successfully visualized but it is in a very basic state&mdash;for example, it does not reflect changes coming from the Native side when the user interacts with the widget. In other words, the <code>value</code> property on the JavaScript side will not be updated after user interaction.</p>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><p>The Android general way of handling change notifications is via <em>Listeners</em>&mdash;in the current scenario this is the <a href=\"http://developer.android.com/reference/android/widget/NumberPicker.OnValueChangeListener.html\">OnValueChangeListener</a>.You need to create a new interface implementation and register it on the native picker instance to receive updates coming from the Android world. Because this implementation is instance-related, we want to put it in the <code>_createUI</code> method:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">NumberPicker.prototype._createUI = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._android = <span class=\"keyword\">new</span> android.widget.NumberPicker(<span class=\"keyword\">this</span>._context);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">new</span> WeakRef(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> changeListener = <span class=\"keyword\">new</span> android.widget.NumberPicker.OnValueChangeListener(&#123;</div><div class=\"line\">        onValueChange: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">picker, oldVal, newVal</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> instance = that.get();</div><div class=\"line\">            <span class=\"keyword\">if</span>(instance) &#123;</div><div class=\"line\">                instance._onPropertyChangedFromNative(NumberPicker.valueProperty, newVal);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>._android.setOnValueChangedListener(changeListener);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note the <code>WeakRef</code> wrapper of the <code>this</code> argument. This is an important part of the listener implementation as it prevents circular references (resulting in a memory leak) between the JavaScript implementation Object literal, which is statically cached per <code>extend</code> call and the outer JavaScript instance.</p>\n</blockquote>\n<p>Here the NativeScript Android Bridge is used to create a new <a href=\"http://docs.nativescript.org/runtimes/android/generator/extend-class-interface\">interface implementation in JavaScript</a> and to handle the <code>onValueChange</code> method. When a notification from the native Picker is received, the JavaScript object associated with the event is retrieved and the special method <code>_onPropertyChangedFromNative</code> is called on it. This is a method on the <code>Proxy</code> class that synchronizes properties from both JavaScript and native Picker in a way that prevents circular updates, which may result in a StackOverflow Exception.</p>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p>On iOS the generic event <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIControl_Class/index.html#//apple_ref/c/econst/UIControlEventValueChanged\">UIControlEventValueChanged</a> raised by the <code>UIStepper</code> widget is used. So the approach will be to extend the base <code>NSObject</code> class, to expose a handler method and register a new instance of the extended object using the <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIControl_Class/#//apple_ref/occ/instm/UIControl/addTarget:action:forControlEvents:\">addTargetActionForControlEvents</a> method. According to the <a href=\"http://docs.nativescript.org/runtimes/ios/how-to/ObjC-Subclassing#calling-base-methods-Exposed\">Extending Classes in NativeScript for iOS</a> article, the following code enables value change notifications:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// put this somewhere in the module implementation</span></div><div class=\"line\"><span class=\"keyword\">var</span> ListenerClass = NSObject.extend(&#123;</div><div class=\"line\">    valueChanged: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sender</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>._owner) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._owner._onPropertyChangedFromNative(common.NumberPicker.valueProperty, sender.value);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">    name: <span class=\"string\">\"ListenerClass\"</span>,</div><div class=\"line\">    exposedMethods: &#123;</div><div class=\"line\">        <span class=\"string\">\"valueChanged\"</span>: &#123; returns: interop.types.void, params: [ UIStepper ] &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">////////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// inside the NumberPicker's constructor</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberPicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    _super.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>._ios = <span class=\"keyword\">new</span> UIStepper();</div><div class=\"line\">    <span class=\"keyword\">this</span>._listener = <span class=\"keyword\">new</span> ListenerClass();</div><div class=\"line\">    <span class=\"keyword\">this</span>._listener._owner = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>._ios.addTargetActionForControlEvents(<span class=\"keyword\">this</span>._listener, <span class=\"string\">\"valueChanged\"</span>, UIControlEvents.UIControlEventValueChanged);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note the assignment of the <code>listener</code> object to the <code>this</code> argument (<code>this._listener = new ListenerClass()</code>) in the constructor. This is needed to prevent the native class deallocation because the <code>addTargetActionForControlEvents</code> method uses <code>Weak</code> references when adding listeners.</p>\n</blockquote>\n<h3 id=\"Data-Binding-Ready\"><a href=\"#Data-Binding-Ready\" class=\"headerlink\" title=\"Data-Binding Ready\"></a>Data-Binding Ready</h3><p>With gluing the Native-to-JavaScript and JavaScript-to-Native flow of changes, the <code>value</code> property is completely <a href=\"http://docs.nativescript.org/bindings\">data-binding</a> ready and calling the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_bindable_.bindable.html#bind\">Bindable.bind</a> method on the widget will work as expected, both in one-way and two-way cases.</p>\n<h1 id=\"CSS-Support\"><a href=\"#CSS-Support\" class=\"headerlink\" title=\"CSS Support\"></a>CSS Support</h1><p>The styling support in the NativeScript modules is built on top of three major layers:</p>\n<ul>\n<li>The <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_styling_.style.html\">Style</a> object on a per <code>View</code> instance, which allows programmatic styling.</li>\n<li>The Css parser that reads <code>*.css</code> files and updates the <code>Style</code> object of each matched <code>View</code>.</li>\n<li>The <em>Styler</em> concept - the mapping of a JavaScript value to the corresponding native widget’s property is delegated to an external object, named <code>Styler</code>.</li>\n</ul>\n<blockquote>\n<p>The properties, common for each native widget, are handled by the <code>DefaultStyler</code>. Other properties are specific on a per widget type. For example, the <a href=\"http://developer.android.com/reference/android/widget/TextView.html\">TextView</a> widgets&mdash;these are handled by the specific <code>TextViewStyler</code>. </p>\n</blockquote>\n<p>The <code>DefaultStyler</code> handles the following <a href=\"http://uatdocs.nativescript.org/styling#supported-properties\">properties</a>:</p>\n<ul>\n<li>background</li>\n<li>visibility</li>\n<li>opacity</li>\n<li>minWidth</li>\n<li>minHeight</li>\n<li>borderWidth</li>\n<li>borderColor</li>\n<li>borderRadius</li>\n</ul>\n<p>When you create a new widget and you do not need support for other specific properties, there is no need to specify custom <code>Styler</code> because the default one will handle these for you. In this particular case, the article will walk you through handling the <code>color</code> property as well, to demonstrate the workflow and the steps needed to enable widget-specific properties. The following three entry points are needed by a <code>Styler</code> to reflect a JavaScript style property change:</p>\n<ul>\n<li>setPropertyValue <br/>\n<em>Applies the property-specific logic to the native widget.</em></li>\n<li>resetPropertyValue <br/>\n<em>Resets the property value to its default (original) state.</em></li>\n<li>getNativePropertyValue <br/>\n<em>Gets the default (original) property value.</em></li>\n</ul>\n<h3 id=\"iOS-1\"><a href=\"#iOS-1\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p>The following code illustrates how to update the <code>tintColor</code> property of the iOS UIStepper when the <code>color</code> property changes on a JavaScript <code>NumberPicker</code> object:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// within the number-picker.ios.js file</span></div><div class=\"line\"><span class=\"keyword\">var</span> style = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// this function is called when the `color` Style property changes on a `NumberPicker` instance </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setColor</span>(<span class=\"params\">view, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativePicker = view.ios;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// value is UIColor, so we may apply it directly</span></div><div class=\"line\">    nativePicker.tintColor = value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// this function is called when the `color` Style property changes and the new value is `undefined`</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetColor</span>(<span class=\"params\">view, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativePicker = view.ios;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// value is native UIColor, so apply it directly</span></div><div class=\"line\">    nativePicker.tintColor = value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// this function is called when the `Styler` is about to reset the `color` property to its default (original) value.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNativeColorValue</span>(<span class=\"params\">view</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativePicker = view.ios;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> nativePicker.tintColor;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> changedHandler = <span class=\"keyword\">new</span> style.stylers.StylePropertyChangedHandler(setColor, resetColor, getNativeColorValue);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register the handler for the color property on the NumberPicker type</span></div><div class=\"line\">style.stylers.registerHandler(style.properties.colorProperty, changedHandler, <span class=\"string\">\"NumberPicker\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>In Android, the <code>color</code> property would be mapped to the text color of the labels within the native widget, However, this cannot be easily achieved programmatically but rather through the Android-specific XML styles. That’s why this article will not cover the <code>color</code> property for Android. Still, the concept there is identical to the one described for iOS.</p>\n</blockquote>\n<h1 id=\"XML-Ready\"><a href=\"#XML-Ready\" class=\"headerlink\" title=\"XML-Ready\"></a>XML-Ready</h1><p>Making the component visible to the XML parser is as easy as adding a custom namespace at the <a href=\"http://docs.nativescript.org/ui-with-xml#custom-components\">Page level</a>. The following code illustrates this:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span></div><div class=\"line\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.nativescript.org/tns.xsd\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:numPicker</span>=<span class=\"string\">\"number-picker\"</span></div><div class=\"line\">    <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rootLayout\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; value &#125;&#125;\"</span> <span class=\"attr\">cssClass</span>=<span class=\"string\">\"title\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"TAP\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"&#123;&#123; tapAction &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; value &#125;&#125;\"</span> <span class=\"attr\">cssClass</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">textWrap</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">numPicker:NumberPicker</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123; value &#125;&#125;\"</span> <span class=\"attr\">horizontalAlignment</span>=<span class=\"string\">\"left\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>The CLI will copy the JavaScript part of the plugin within the tns_modules folder. The XML parser will automatically check for the <code>tns_modules/number-picker</code> folder to load the widget.</p>\n</blockquote>\n<h1 id=\"See-Also-1\"><a href=\"#See-Also-1\" class=\"headerlink\" title=\"See Also\"></a>See Also</h1><ul>\n<li><a href=\"http://docs.nativescript.org/plugins\">Plugins</a>.</li>\n<li><a href=\"http://docs.nativescript.org/ui-with-xml\">UI - The Basics</a></li>\n</ul>\n"},{"_content":"# Chapter 1—Getting Up and Running\n\nIn this chapter you're going to start with the basics, including installing the NativeScript CLI, starting a new project, and getting your first app up and running.\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [1.1: Install NativeScript and configure your environment](#11-install-nativescript-and-configure-your-environment)\n- [1.2: Start your app](#12-start-your-app)\n- [1.3: Add target development platforms](#13-add-target-development-platforms)\n- [1.4: Running your app](#14-running-your-app)\n- [1.5: Development workflow](#15-development-workflow)\n\n## 1.1: Install NativeScript and configure your environment\n\nThe NativeScript CLI has a few system requirements you must have in place before building NativeScript apps. Before we get started building, make sure you’ve completed the NativeScript installation instructions using the link below.\n\n* [Complete the NativeScript installation guide](/angular/start/quick-setup)\n\n## 1.2: Start your app\n\nWith the NativeScript CLI installed, it's time to start building your app. Normally, you would [use the `tns create` command to create an empty NativeScript application](https://github.com/NativeScript/NativeScript-cli#create-project). For this guide, we've scaffolded out a boilerplate project to act as a starting point for [Groceries](https://github.com/NativeScript/sample-Groceries).\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Get the Groceries starting point</h4>\n\nNavigate to a folder where you want to keep your app code:\n\n<div class=\"no-copy-button\"></div>\n\n```bash\ncd the-folder-you-want-groceries-to-be-in\n```\n\nNext, assuming you have [git installed](http://www.git-scm.com/), clone the Groceries repo from GitHub:\n\n```bash\ngit clone https://github.com/NativeScript/sample-Groceries.git\n```\n\nAfter that, change to the newly cloned repo's folder:\n\n```bash\ncd sample-Groceries\n```\n\nFinally, switch to the “start” branch for this guide's starting point:\n\n```bash\ngit checkout start\n```\n\n>**TIP:** The “end” branch has the final state of this guide's tutorial. Feel free to [refer to the branch on GitHub](https://github.com/NativeScript/sample-Groceries/tree/end) if you get stuck.\n\n</div>\n\n## 1.3: Add target development platforms\n\nYour app is now set up, but before you run it, you need to initialize a platform-specific native project for each platform you intend to target.\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add the iOS and Android platforms</h4>\n\nIf you're on a Mac, start by adding the iOS platform:\n\n```bash\ntns platform add ios\n```\n\nNext, add the Android platform with the same `platform add` command:\n\n```bash\ntns platform add android\n```\n\n</div>\n\n<div class=\"explain\">\n\n>**IMPORTANT:** You can add platforms only for SDKs that you already have installed on your development machine. If you get errors running `tns platform add`, refer back to the section on [setting up your development environment](#11-install-nativescript-and-configure-your-environment).\n\nThe `platform add` command adds a folder called `platforms` to your project, and copies all of the required native SDKs into this folder. When you build the application, the NativeScript CLI will copy your application code into the `platforms` folder so that a native binary can be created.\n</div>\n## 1.4: Running your app\n\nWith the platform initialization complete, you can run your app in an emulator or on devices.\n\n<div class=\"exercise-start\">\n\n<h4>**Exercise**: Run your app</h4>\n\n\nIf you're on a Mac, start by running the app in an iOS simulator with the following command:\n\n```bash\ntns run ios --emulator\n```\n\nIf all went well, you should see something like this:\n\n![iOS login](/docs/img/cli-getting-started/nativescript/chapter1/ios/1.png)\n\nNext, run your app on an Android emulator with the following command:\n\n```bash\ntns run android --emulator\n```\n\n> **WARNING**:\n> * You must have at least one Android AVD (Android Virtual Device) configured for this command to work. If you get an error, try [setting up an AVD](http://developer.telerik.com/featured/using-android-emulator-hybrid-mobile-apps-telerik-appbuilder/#managing-avds) and then run the command again.\n> * If you're using [Genymotion](https://www.genymotion.com), launch your Genymotion virtual device, and then run `tns run android`.\n\nIf all went well, you should see your app running in an Android emulator:\n\n![Android login](/docs/img/cli-getting-started/nativescript/chapter1/android/1.png)\n\n</div>\n\n<div class=\"explain\">\n\nHere are a few other tips for running NativeScript apps.\n\n> **TIP**:\n> * To run on a USB-connected Android or iOS device, use the same `run` command without the `--emulator` flag—i.e. `tns run android` and `tns run ios`.\n> * The `tns device` command lists all USB-connected iOS devices, USB-connected Android devices, and Genymotion virtual devices that `tns run` can deploy to. Note that `tns device` does not list iOS simulators.\n\n\n## 1.5: Development workflow\n\nAt this point, you have the NativeScript CLI downloaded and installed, as well as the iOS and Android dependencies that you need to run your app. Now you need a good workflow that lets you make changes and see results fast. For that we’ll use the `tns livesync` command.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Your first NativeScript change</h4>\n\nIf your previous `tns run ios` or `tns run android` task is still running, type `Ctrl+C` in your terminal to kill it.\n\nIf you’re on a Mac, start an iOS livesync watcher by executing the following command:\n\n```bash\ntns livesync ios --emulator --watch\n```\n\nIf you have your app running on an Android emulator, start an Android livesync watcher by executing the following command:\n\n```bash\ntns livesync android --emulator --watch\n```\n\nIf you instead have your app running on a USB-connected Android device or Genymotion virtual device, run the same command without the `--emulator` flag:\n\n```bash\ntns livesync android --watch\n```\n\nThe `tns livesync` command updates your app by transferring the updated source code to the device or simulator. By adding the `--watch` flag, the `livesync` command additionally watches the files in your NativeScript project. Whenever one of those files changes, the command detects the update, and patches your app with the updated code.\n\n> **TIP**: You can learn about how this is possible by reading more about [how NativeScript works](http://developer.telerik.com/featured/nativescript-works/).\n\nTo see livesync in action let’s make a small update to your app. Open your app's `app/views/login/login.xml` file in your text editor of choice and change `<Label text=\"hello world\" />` to `<Label text=\"hello NativeScript\" />`.\n\nSave `app/views/login/login.xml` and you should see the app relaunch and the updated text displayed.\n\n</div>\n\n<div class=\"explain\">\n\nRegardless of whether you’re running on iOS or Android, or whether you’re using `tns livesync` or `tns run`, the NativeScript CLI shows the output of `console.log()` statements as your app executes, as well as stack traces when things go wrong. So if your app crashes at any time during this guide, look to the terminal for a detailed report of the problem.\n\nThe iOS and Android logs can be a bit noisy, so you might have to scroll up a bit to find the actual problem. For example if I try to call `foo.bar()` when `foo` does not exist, here's the information I get on iOS:\n\n```\n/app/path/to/file.js:14:8: JS ERROR ReferenceError: Can't find variable: foo\n1   0xe3dc0 NativeScript::FFICallback<NativeScript::ObjCMethodCallback>::ffiClosureCallback(ffi_cif*, void*, void**, void*)\n```\n\nAnd here's the same information in the Android logs:\n\n```\nE/TNS.Native( 2063): ReferenceError: foo is not defined\nE/TNS.Native( 2063): File: \"/data/data/org.nativescript.groceries/files/app/./views/login/login.js, line: 13, column: 4\n```\n\n> **TIP**: When you're trying to debug a problem, you can also try adding `console.log()` statements in your JavaScript code—exactly as you would in a browser-based application.\n\n> **WARNING**: Not all changes can be livesync’d in a NativeScript app. For instance, livesync cannot patch native configuration file changes (`Info.plist`, `AndroidManifest.xml`, and so forth), new plugin installations, and any other change that requires a full compilation of the application. In those cases, you’ll want to use `Ctrl+C` to stop livesync, and rerun the application using the `tns run ios` or `tns run android` commands. Don’t worry though; when situations that require a full compilation come up in this guide, these instructions will be explicitly listed.\n\nNow that you've created an app, configured your environment, and set up your app to run on iOS and Android, you're ready to start digging into the files that make up a NativeScript app.\n\n</div>","source":"tutorial/1.md","raw":"# Chapter 1—Getting Up and Running\n\nIn this chapter you're going to start with the basics, including installing the NativeScript CLI, starting a new project, and getting your first app up and running.\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [1.1: Install NativeScript and configure your environment](#11-install-nativescript-and-configure-your-environment)\n- [1.2: Start your app](#12-start-your-app)\n- [1.3: Add target development platforms](#13-add-target-development-platforms)\n- [1.4: Running your app](#14-running-your-app)\n- [1.5: Development workflow](#15-development-workflow)\n\n## 1.1: Install NativeScript and configure your environment\n\nThe NativeScript CLI has a few system requirements you must have in place before building NativeScript apps. Before we get started building, make sure you’ve completed the NativeScript installation instructions using the link below.\n\n* [Complete the NativeScript installation guide](/angular/start/quick-setup)\n\n## 1.2: Start your app\n\nWith the NativeScript CLI installed, it's time to start building your app. Normally, you would [use the `tns create` command to create an empty NativeScript application](https://github.com/NativeScript/NativeScript-cli#create-project). For this guide, we've scaffolded out a boilerplate project to act as a starting point for [Groceries](https://github.com/NativeScript/sample-Groceries).\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Get the Groceries starting point</h4>\n\nNavigate to a folder where you want to keep your app code:\n\n<div class=\"no-copy-button\"></div>\n\n```bash\ncd the-folder-you-want-groceries-to-be-in\n```\n\nNext, assuming you have [git installed](http://www.git-scm.com/), clone the Groceries repo from GitHub:\n\n```bash\ngit clone https://github.com/NativeScript/sample-Groceries.git\n```\n\nAfter that, change to the newly cloned repo's folder:\n\n```bash\ncd sample-Groceries\n```\n\nFinally, switch to the “start” branch for this guide's starting point:\n\n```bash\ngit checkout start\n```\n\n>**TIP:** The “end” branch has the final state of this guide's tutorial. Feel free to [refer to the branch on GitHub](https://github.com/NativeScript/sample-Groceries/tree/end) if you get stuck.\n\n</div>\n\n## 1.3: Add target development platforms\n\nYour app is now set up, but before you run it, you need to initialize a platform-specific native project for each platform you intend to target.\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add the iOS and Android platforms</h4>\n\nIf you're on a Mac, start by adding the iOS platform:\n\n```bash\ntns platform add ios\n```\n\nNext, add the Android platform with the same `platform add` command:\n\n```bash\ntns platform add android\n```\n\n</div>\n\n<div class=\"explain\">\n\n>**IMPORTANT:** You can add platforms only for SDKs that you already have installed on your development machine. If you get errors running `tns platform add`, refer back to the section on [setting up your development environment](#11-install-nativescript-and-configure-your-environment).\n\nThe `platform add` command adds a folder called `platforms` to your project, and copies all of the required native SDKs into this folder. When you build the application, the NativeScript CLI will copy your application code into the `platforms` folder so that a native binary can be created.\n</div>\n## 1.4: Running your app\n\nWith the platform initialization complete, you can run your app in an emulator or on devices.\n\n<div class=\"exercise-start\">\n\n<h4>**Exercise**: Run your app</h4>\n\n\nIf you're on a Mac, start by running the app in an iOS simulator with the following command:\n\n```bash\ntns run ios --emulator\n```\n\nIf all went well, you should see something like this:\n\n![iOS login](/docs/img/cli-getting-started/nativescript/chapter1/ios/1.png)\n\nNext, run your app on an Android emulator with the following command:\n\n```bash\ntns run android --emulator\n```\n\n> **WARNING**:\n> * You must have at least one Android AVD (Android Virtual Device) configured for this command to work. If you get an error, try [setting up an AVD](http://developer.telerik.com/featured/using-android-emulator-hybrid-mobile-apps-telerik-appbuilder/#managing-avds) and then run the command again.\n> * If you're using [Genymotion](https://www.genymotion.com), launch your Genymotion virtual device, and then run `tns run android`.\n\nIf all went well, you should see your app running in an Android emulator:\n\n![Android login](/docs/img/cli-getting-started/nativescript/chapter1/android/1.png)\n\n</div>\n\n<div class=\"explain\">\n\nHere are a few other tips for running NativeScript apps.\n\n> **TIP**:\n> * To run on a USB-connected Android or iOS device, use the same `run` command without the `--emulator` flag—i.e. `tns run android` and `tns run ios`.\n> * The `tns device` command lists all USB-connected iOS devices, USB-connected Android devices, and Genymotion virtual devices that `tns run` can deploy to. Note that `tns device` does not list iOS simulators.\n\n\n## 1.5: Development workflow\n\nAt this point, you have the NativeScript CLI downloaded and installed, as well as the iOS and Android dependencies that you need to run your app. Now you need a good workflow that lets you make changes and see results fast. For that we’ll use the `tns livesync` command.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Your first NativeScript change</h4>\n\nIf your previous `tns run ios` or `tns run android` task is still running, type `Ctrl+C` in your terminal to kill it.\n\nIf you’re on a Mac, start an iOS livesync watcher by executing the following command:\n\n```bash\ntns livesync ios --emulator --watch\n```\n\nIf you have your app running on an Android emulator, start an Android livesync watcher by executing the following command:\n\n```bash\ntns livesync android --emulator --watch\n```\n\nIf you instead have your app running on a USB-connected Android device or Genymotion virtual device, run the same command without the `--emulator` flag:\n\n```bash\ntns livesync android --watch\n```\n\nThe `tns livesync` command updates your app by transferring the updated source code to the device or simulator. By adding the `--watch` flag, the `livesync` command additionally watches the files in your NativeScript project. Whenever one of those files changes, the command detects the update, and patches your app with the updated code.\n\n> **TIP**: You can learn about how this is possible by reading more about [how NativeScript works](http://developer.telerik.com/featured/nativescript-works/).\n\nTo see livesync in action let’s make a small update to your app. Open your app's `app/views/login/login.xml` file in your text editor of choice and change `<Label text=\"hello world\" />` to `<Label text=\"hello NativeScript\" />`.\n\nSave `app/views/login/login.xml` and you should see the app relaunch and the updated text displayed.\n\n</div>\n\n<div class=\"explain\">\n\nRegardless of whether you’re running on iOS or Android, or whether you’re using `tns livesync` or `tns run`, the NativeScript CLI shows the output of `console.log()` statements as your app executes, as well as stack traces when things go wrong. So if your app crashes at any time during this guide, look to the terminal for a detailed report of the problem.\n\nThe iOS and Android logs can be a bit noisy, so you might have to scroll up a bit to find the actual problem. For example if I try to call `foo.bar()` when `foo` does not exist, here's the information I get on iOS:\n\n```\n/app/path/to/file.js:14:8: JS ERROR ReferenceError: Can't find variable: foo\n1   0xe3dc0 NativeScript::FFICallback<NativeScript::ObjCMethodCallback>::ffiClosureCallback(ffi_cif*, void*, void**, void*)\n```\n\nAnd here's the same information in the Android logs:\n\n```\nE/TNS.Native( 2063): ReferenceError: foo is not defined\nE/TNS.Native( 2063): File: \"/data/data/org.nativescript.groceries/files/app/./views/login/login.js, line: 13, column: 4\n```\n\n> **TIP**: When you're trying to debug a problem, you can also try adding `console.log()` statements in your JavaScript code—exactly as you would in a browser-based application.\n\n> **WARNING**: Not all changes can be livesync’d in a NativeScript app. For instance, livesync cannot patch native configuration file changes (`Info.plist`, `AndroidManifest.xml`, and so forth), new plugin installations, and any other change that requires a full compilation of the application. In those cases, you’ll want to use `Ctrl+C` to stop livesync, and rerun the application using the `tns run ios` or `tns run android` commands. Don’t worry though; when situations that require a full compilation come up in this guide, these instructions will be explicitly listed.\n\nNow that you've created an app, configured your environment, and set up your app to run on iOS and Android, you're ready to start digging into the files that make up a NativeScript app.\n\n</div>","date":"2016-09-08T11:24:00.052Z","updated":"2016-09-08T11:24:00.052Z","path":"tutorial/1.html","_id":"cisn95c78000mwsl04usu994q","title":"","comments":1,"layout":"page","content":"<h1 id=\"Chapter-1—Getting-Up-and-Running\"><a href=\"#Chapter-1—Getting-Up-and-Running\" class=\"headerlink\" title=\"Chapter 1—Getting Up and Running\"></a>Chapter 1—Getting Up and Running</h1><p>In this chapter you’re going to start with the basics, including installing the NativeScript CLI, starting a new project, and getting your first app up and running.</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#11-install-nativescript-and-configure-your-environment\">1.1: Install NativeScript and configure your environment</a>\n- <a href=\"#12-start-your-app\">1.2: Start your app</a>\n- <a href=\"#13-add-target-development-platforms\">1.3: Add target development platforms</a>\n- <a href=\"#14-running-your-app\">1.4: Running your app</a>\n- <a href=\"#15-development-workflow\">1.5: Development workflow</a>\n\n## 1.1: Install NativeScript and configure your environment\n\nThe NativeScript CLI has a few system requirements you must have in place before building NativeScript apps. Before we get started building, make sure you’ve completed the NativeScript installation instructions using the link below.\n\n* <a href=\"/angular/start/quick-setup\">Complete the NativeScript installation guide</a>\n\n## 1.2: Start your app\n\nWith the NativeScript CLI installed, it’s time to start building your app. Normally, you would <a href=\"https://github.com/NativeScript/NativeScript-cli#create-project\" target=\"_blank\" rel=\"external\">use the <code>tns create</code> command to create an empty NativeScript application</a>. For this guide, we’ve scaffolded out a boilerplate project to act as a starting point for <a href=\"https://github.com/NativeScript/sample-Groceries\" target=\"_blank\" rel=\"external\">Groceries</a>.\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Get the Groceries starting point</h4>\n\nNavigate to a folder where you want to keep your app code:\n\n<div class=\"no-copy-button\"></div>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> the-folder-you-want-groceries-to-be-in</div></pre></td></tr></table></figure>\n<p>Next, assuming you have <a href=\"http://www.git-scm.com/\" target=\"_blank\" rel=\"external\">git installed</a>, clone the Groceries repo from GitHub:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/NativeScript/sample-Groceries.git</div></pre></td></tr></table></figure>\n<p>After that, change to the newly cloned repo’s folder:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> sample-Groceries</div></pre></td></tr></table></figure>\n<p>Finally, switch to the “start” branch for this guide’s starting point:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout start</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>TIP:</strong> The “end” branch has the final state of this guide’s tutorial. Feel free to <a href=\"https://github.com/NativeScript/sample-Groceries/tree/end\" target=\"_blank\" rel=\"external\">refer to the branch on GitHub</a> if you get stuck.</p>\n</blockquote>\n<p></p></div><p></p>\n<h2 id=\"1-3-Add-target-development-platforms\"><a href=\"#1-3-Add-target-development-platforms\" class=\"headerlink\" title=\"1.3: Add target development platforms\"></a>1.3: Add target development platforms</h2><p>Your app is now set up, but before you run it, you need to initialize a platform-specific native project for each platform you intend to target.</p>\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add the iOS and Android platforms</h4>\n\nIf you’re on a Mac, start by adding the iOS platform:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns platform add ios</div></pre></td></tr></table></figure>\n\nNext, add the Android platform with the same <code>platform add</code> command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns platform add android</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\n&gt;<strong>IMPORTANT:</strong> You can add platforms only for SDKs that you already have installed on your development machine. If you get errors running <code>tns platform add</code>, refer back to the section on <a href=\"#11-install-nativescript-and-configure-your-environment\">setting up your development environment</a>.\n\nThe <code>platform add</code> command adds a folder called <code>platforms</code> to your project, and copies all of the required native SDKs into this folder. When you build the application, the NativeScript CLI will copy your application code into the <code>platforms</code> folder so that a native binary can be created.\n</div>\n## 1.4: Running your app\n\nWith the platform initialization complete, you can run your app in an emulator or on devices.\n\n<div class=\"exercise-start\">\n\n<h4><strong>Exercise</strong>: Run your app</h4>\n\n\nIf you’re on a Mac, start by running the app in an iOS simulator with the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run ios --emulator</div></pre></td></tr></table></figure>\n\nIf all went well, you should see something like this:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter1/ios/1.png\" alt=\"iOS login\">\n\nNext, run your app on an Android emulator with the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run android --emulator</div></pre></td></tr></table></figure>\n\n&gt; <strong>WARNING</strong>:\n&gt; <em> You must have at least one Android AVD (Android Virtual Device) configured for this command to work. If you get an error, try <a href=\"http://developer.telerik.com/featured/using-android-emulator-hybrid-mobile-apps-telerik-appbuilder/#managing-avds\" target=\"_blank\" rel=\"external\">setting up an AVD</a> and then run the command again.\n&gt; </em> If you’re using <a href=\"https://www.genymotion.com\" target=\"_blank\" rel=\"external\">Genymotion</a>, launch your Genymotion virtual device, and then run <code>tns run android</code>.\n\nIf all went well, you should see your app running in an Android emulator:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter1/android/1.png\" alt=\"Android login\">\n\n</div>\n\n<div class=\"explain\">\n\nHere are a few other tips for running NativeScript apps.\n\n&gt; <strong>TIP</strong>:\n&gt; <em> To run on a USB-connected Android or iOS device, use the same <code>run</code> command without the <code>--emulator</code> flag—i.e. <code>tns run android</code> and <code>tns run ios</code>.\n&gt; </em> The <code>tns device</code> command lists all USB-connected iOS devices, USB-connected Android devices, and Genymotion virtual devices that <code>tns run</code> can deploy to. Note that <code>tns device</code> does not list iOS simulators.\n\n\n## 1.5: Development workflow\n\nAt this point, you have the NativeScript CLI downloaded and installed, as well as the iOS and Android dependencies that you need to run your app. Now you need a good workflow that lets you make changes and see results fast. For that we’ll use the <code>tns livesync</code> command.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Your first NativeScript change</h4>\n\nIf your previous <code>tns run ios</code> or <code>tns run android</code> task is still running, type <code>Ctrl+C</code> in your terminal to kill it.\n\nIf you’re on a Mac, start an iOS livesync watcher by executing the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync ios --emulator --watch</div></pre></td></tr></table></figure>\n\nIf you have your app running on an Android emulator, start an Android livesync watcher by executing the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync android --emulator --watch</div></pre></td></tr></table></figure>\n\nIf you instead have your app running on a USB-connected Android device or Genymotion virtual device, run the same command without the <code>--emulator</code> flag:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync android --watch</div></pre></td></tr></table></figure>\n\nThe <code>tns livesync</code> command updates your app by transferring the updated source code to the device or simulator. By adding the <code>--watch</code> flag, the <code>livesync</code> command additionally watches the files in your NativeScript project. Whenever one of those files changes, the command detects the update, and patches your app with the updated code.\n\n&gt; <strong>TIP</strong>: You can learn about how this is possible by reading more about <a href=\"http://developer.telerik.com/featured/nativescript-works/\" target=\"_blank\" rel=\"external\">how NativeScript works</a>.\n\nTo see livesync in action let’s make a small update to your app. Open your app’s <code>app/views/login/login.xml</code> file in your text editor of choice and change <code>&lt;Label text=&quot;hello world&quot; /&gt;</code> to <code>&lt;Label text=&quot;hello NativeScript&quot; /&gt;</code>.\n\nSave <code>app/views/login/login.xml</code> and you should see the app relaunch and the updated text displayed.\n\n</div>\n\n<div class=\"explain\">\n\nRegardless of whether you’re running on iOS or Android, or whether you’re using <code>tns livesync</code> or <code>tns run</code>, the NativeScript CLI shows the output of <code>console.log()</code> statements as your app executes, as well as stack traces when things go wrong. So if your app crashes at any time during this guide, look to the terminal for a detailed report of the problem.\n\nThe iOS and Android logs can be a bit noisy, so you might have to scroll up a bit to find the actual problem. For example if I try to call <code>foo.bar()</code> when <code>foo</code> does not exist, here’s the information I get on iOS:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/app/path/to/file.js:14:8: JS ERROR ReferenceError: Can&apos;t find variable: foo</div><div class=\"line\">1   0xe3dc0 NativeScript::FFICallback&lt;NativeScript::ObjCMethodCallback&gt;::ffiClosureCallback(ffi_cif*, void*, void**, void*)</div></pre></td></tr></table></figure>\n\nAnd here’s the same information in the Android logs:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">E/TNS.Native( 2063): ReferenceError: foo is not defined</div><div class=\"line\">E/TNS.Native( 2063): File: &quot;/data/data/org.nativescript.groceries/files/app/./views/login/login.js, line: 13, column: 4</div></pre></td></tr></table></figure>\n\n&gt; <strong>TIP</strong>: When you’re trying to debug a problem, you can also try adding <code>console.log()</code> statements in your JavaScript code—exactly as you would in a browser-based application.\n\n&gt; <strong>WARNING</strong>: Not all changes can be livesync’d in a NativeScript app. For instance, livesync cannot patch native configuration file changes (<code>Info.plist</code>, <code>AndroidManifest.xml</code>, and so forth), new plugin installations, and any other change that requires a full compilation of the application. In those cases, you’ll want to use <code>Ctrl+C</code> to stop livesync, and rerun the application using the <code>tns run ios</code> or <code>tns run android</code> commands. Don’t worry though; when situations that require a full compilation come up in this guide, these instructions will be explicitly listed.\n\nNow that you’ve created an app, configured your environment, and set up your app to run on iOS and Android, you’re ready to start digging into the files that make up a NativeScript app.\n\n</div>","excerpt":"","more":"<h1 id=\"Chapter-1—Getting-Up-and-Running\"><a href=\"#Chapter-1—Getting-Up-and-Running\" class=\"headerlink\" title=\"Chapter 1—Getting Up and Running\"></a>Chapter 1—Getting Up and Running</h1><p>In this chapter you’re going to start with the basics, including installing the NativeScript CLI, starting a new project, and getting your first app up and running.</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#11-install-nativescript-and-configure-your-environment\">1.1: Install NativeScript and configure your environment</a>\n- <a href=\"#12-start-your-app\">1.2: Start your app</a>\n- <a href=\"#13-add-target-development-platforms\">1.3: Add target development platforms</a>\n- <a href=\"#14-running-your-app\">1.4: Running your app</a>\n- <a href=\"#15-development-workflow\">1.5: Development workflow</a>\n\n## 1.1: Install NativeScript and configure your environment\n\nThe NativeScript CLI has a few system requirements you must have in place before building NativeScript apps. Before we get started building, make sure you’ve completed the NativeScript installation instructions using the link below.\n\n* <a href=\"/angular/start/quick-setup\">Complete the NativeScript installation guide</a>\n\n## 1.2: Start your app\n\nWith the NativeScript CLI installed, it’s time to start building your app. Normally, you would <a href=\"https://github.com/NativeScript/NativeScript-cli#create-project\">use the <code>tns create</code> command to create an empty NativeScript application</a>. For this guide, we’ve scaffolded out a boilerplate project to act as a starting point for <a href=\"https://github.com/NativeScript/sample-Groceries\">Groceries</a>.\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Get the Groceries starting point</h4>\n\nNavigate to a folder where you want to keep your app code:\n\n<div class=\"no-copy-button\"></div>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> the-folder-you-want-groceries-to-be-in</div></pre></td></tr></table></figure>\n<p>Next, assuming you have <a href=\"http://www.git-scm.com/\">git installed</a>, clone the Groceries repo from GitHub:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/NativeScript/sample-Groceries.git</div></pre></td></tr></table></figure>\n<p>After that, change to the newly cloned repo’s folder:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> sample-Groceries</div></pre></td></tr></table></figure>\n<p>Finally, switch to the “start” branch for this guide’s starting point:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout start</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>TIP:</strong> The “end” branch has the final state of this guide’s tutorial. Feel free to <a href=\"https://github.com/NativeScript/sample-Groceries/tree/end\">refer to the branch on GitHub</a> if you get stuck.</p>\n</blockquote>\n<p></div></p>\n<h2 id=\"1-3-Add-target-development-platforms\"><a href=\"#1-3-Add-target-development-platforms\" class=\"headerlink\" title=\"1.3: Add target development platforms\"></a>1.3: Add target development platforms</h2><p>Your app is now set up, but before you run it, you need to initialize a platform-specific native project for each platform you intend to target.</p>\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add the iOS and Android platforms</h4>\n\nIf you’re on a Mac, start by adding the iOS platform:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns platform add ios</div></pre></td></tr></table></figure>\n\nNext, add the Android platform with the same <code>platform add</code> command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns platform add android</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\n&gt;<strong>IMPORTANT:</strong> You can add platforms only for SDKs that you already have installed on your development machine. If you get errors running <code>tns platform add</code>, refer back to the section on <a href=\"#11-install-nativescript-and-configure-your-environment\">setting up your development environment</a>.\n\nThe <code>platform add</code> command adds a folder called <code>platforms</code> to your project, and copies all of the required native SDKs into this folder. When you build the application, the NativeScript CLI will copy your application code into the <code>platforms</code> folder so that a native binary can be created.\n</div>\n## 1.4: Running your app\n\nWith the platform initialization complete, you can run your app in an emulator or on devices.\n\n<div class=\"exercise-start\">\n\n<h4><strong>Exercise</strong>: Run your app</h4>\n\n\nIf you’re on a Mac, start by running the app in an iOS simulator with the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run ios --emulator</div></pre></td></tr></table></figure>\n\nIf all went well, you should see something like this:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter1/ios/1.png\" alt=\"iOS login\">\n\nNext, run your app on an Android emulator with the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run android --emulator</div></pre></td></tr></table></figure>\n\n&gt; <strong>WARNING</strong>:\n&gt; <em> You must have at least one Android AVD (Android Virtual Device) configured for this command to work. If you get an error, try <a href=\"http://developer.telerik.com/featured/using-android-emulator-hybrid-mobile-apps-telerik-appbuilder/#managing-avds\">setting up an AVD</a> and then run the command again.\n&gt; </em> If you’re using <a href=\"https://www.genymotion.com\">Genymotion</a>, launch your Genymotion virtual device, and then run <code>tns run android</code>.\n\nIf all went well, you should see your app running in an Android emulator:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter1/android/1.png\" alt=\"Android login\">\n\n</div>\n\n<div class=\"explain\">\n\nHere are a few other tips for running NativeScript apps.\n\n&gt; <strong>TIP</strong>:\n&gt; <em> To run on a USB-connected Android or iOS device, use the same <code>run</code> command without the <code>--emulator</code> flag—i.e. <code>tns run android</code> and <code>tns run ios</code>.\n&gt; </em> The <code>tns device</code> command lists all USB-connected iOS devices, USB-connected Android devices, and Genymotion virtual devices that <code>tns run</code> can deploy to. Note that <code>tns device</code> does not list iOS simulators.\n\n\n## 1.5: Development workflow\n\nAt this point, you have the NativeScript CLI downloaded and installed, as well as the iOS and Android dependencies that you need to run your app. Now you need a good workflow that lets you make changes and see results fast. For that we’ll use the <code>tns livesync</code> command.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Your first NativeScript change</h4>\n\nIf your previous <code>tns run ios</code> or <code>tns run android</code> task is still running, type <code>Ctrl+C</code> in your terminal to kill it.\n\nIf you’re on a Mac, start an iOS livesync watcher by executing the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync ios --emulator --watch</div></pre></td></tr></table></figure>\n\nIf you have your app running on an Android emulator, start an Android livesync watcher by executing the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync android --emulator --watch</div></pre></td></tr></table></figure>\n\nIf you instead have your app running on a USB-connected Android device or Genymotion virtual device, run the same command without the <code>--emulator</code> flag:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync android --watch</div></pre></td></tr></table></figure>\n\nThe <code>tns livesync</code> command updates your app by transferring the updated source code to the device or simulator. By adding the <code>--watch</code> flag, the <code>livesync</code> command additionally watches the files in your NativeScript project. Whenever one of those files changes, the command detects the update, and patches your app with the updated code.\n\n&gt; <strong>TIP</strong>: You can learn about how this is possible by reading more about <a href=\"http://developer.telerik.com/featured/nativescript-works/\">how NativeScript works</a>.\n\nTo see livesync in action let’s make a small update to your app. Open your app’s <code>app/views/login/login.xml</code> file in your text editor of choice and change <code>&lt;Label text=&quot;hello world&quot; /&gt;</code> to <code>&lt;Label text=&quot;hello NativeScript&quot; /&gt;</code>.\n\nSave <code>app/views/login/login.xml</code> and you should see the app relaunch and the updated text displayed.\n\n</div>\n\n<div class=\"explain\">\n\nRegardless of whether you’re running on iOS or Android, or whether you’re using <code>tns livesync</code> or <code>tns run</code>, the NativeScript CLI shows the output of <code>console.log()</code> statements as your app executes, as well as stack traces when things go wrong. So if your app crashes at any time during this guide, look to the terminal for a detailed report of the problem.\n\nThe iOS and Android logs can be a bit noisy, so you might have to scroll up a bit to find the actual problem. For example if I try to call <code>foo.bar()</code> when <code>foo</code> does not exist, here’s the information I get on iOS:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/app/path/to/file.js:14:8: JS ERROR ReferenceError: Can&apos;t find variable: foo</div><div class=\"line\">1   0xe3dc0 NativeScript::FFICallback&lt;NativeScript::ObjCMethodCallback&gt;::ffiClosureCallback(ffi_cif*, void*, void**, void*)</div></pre></td></tr></table></figure>\n\nAnd here’s the same information in the Android logs:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">E/TNS.Native( 2063): ReferenceError: foo is not defined</div><div class=\"line\">E/TNS.Native( 2063): File: &quot;/data/data/org.nativescript.groceries/files/app/./views/login/login.js, line: 13, column: 4</div></pre></td></tr></table></figure>\n\n&gt; <strong>TIP</strong>: When you’re trying to debug a problem, you can also try adding <code>console.log()</code> statements in your JavaScript code—exactly as you would in a browser-based application.\n\n&gt; <strong>WARNING</strong>: Not all changes can be livesync’d in a NativeScript app. For instance, livesync cannot patch native configuration file changes (<code>Info.plist</code>, <code>AndroidManifest.xml</code>, and so forth), new plugin installations, and any other change that requires a full compilation of the application. In those cases, you’ll want to use <code>Ctrl+C</code> to stop livesync, and rerun the application using the <code>tns run ios</code> or <code>tns run android</code> commands. Don’t worry though; when situations that require a full compilation come up in this guide, these instructions will be explicitly listed.\n\nNow that you’ve created an app, configured your environment, and set up your app to run on iOS and Android, you’re ready to start digging into the files that make up a NativeScript app.\n\n</div>"},{"_content":"# Chapter 3—Application Logic\n\nIn this chapter, you'll learn how to add JavaScript logic to your NativeScript app, and you'll be doing so using the base pattern on which the NativeScript framework is built, MVVM, or \"model view view model\". \n\n<div class=\"explain\">\n\nHere's what those words mean:\n\n- **Model**: The model defines and represents the data. Separating the model from the various views that might use it allows for code reuse.\n- **View**: The view represents the UI, which in NativeScript is written in XML. The view is often data-bound to the view model so that changes made to the view model in JavaScript instantly trigger visual changes to UI components.\n- **View Model**: The view model contains the application logic (often including the model), and exposes the data to the view. NativeScript provides a module called 'Observable', which facilitates creating a view model object that can be bound to the view.\n\nThe biggest benefit of separating models, views, and view models, is that you are able to use two-way data binding; that is, changes to data in the model get instantly reflected on the view, and vice versa. The other big benefit is code reuse, as you're often able to reuse models and view models across views.\n\nIn Groceries, so far you've only touched the view (`login.xml`), and in this chapter you'll be creating a view model. To do so, we first need to introduce one other type of file: the code-behind.\n\n## Table of contents\n\n- [3.1: The code-behind](#31-the-code-behind)\n- [3.2: Navigating screens](#32-navigating-screens)\n- [3.3: Accessing UI components](#33-accessing-ui-components)\n- [3.4: Adding a view model](#34-adding-a-view-model)\n\n## 3.1: The code-behind\n\nIn NativeScript a code-behind file is a JavaScript file that shares the same name as the view. For example, the login page's view is named `login.xml`, so its code-behind file is named `login.js`. The code-behind file is where you put all code that interacts with the view itself.\n\nLet's look at what you can do in a code-behind file with a simple example.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Construct the login view model</h4>\n\nOpen `login.xml` and add a `loaded` attribute to the `<Page>` UI component at the top. It should look like this:\n\n```xml\n<Page loaded=\"loaded\">\n```\n\nNext, paste the code below in `app/views/login/login.js` to define a `loaded()` function:\n\n```javascript\nexports.loaded = function() {\n    console.log(\"hello\");\n};\n```\n\n</div>\n\n> **NOTE**: The keyword `exports` is part of [CommonJS](http://wiki.commonjs.org/wiki/Modules/1.1), the standard on which both NativeScript and Node.js' implementations of modules are based. In CommonJS-based JavaScript modules, a free variable called `exports` is an object to which a module might add properties and methods to configure its external API. Using `exports` in a code-behind file exposes the function for use in the view, or XML file. That is, the `exports.loaded` assignment in the code-behind file is what makes `loaded=\"loaded\"` in the view work.\n\nWhen you run the app with this change, NativeScript triggers the `loaded()` function you created in the code-behind file, and you should see the word “hello” logged in your terminal.\n\n![](/docs/img/cli-getting-started/nativescript/chapter3/terminal-1.png)\n\nThis simple example shows you how you can append attributes to UI components to run functions in the view's accompanying JavaScript file. Let's use another one of these attributes: `tap`.\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Enable the buttons</h4>\n\nYou can add a `tap` attribute that will fire when the user taps or touches a button. In `app/views/login/login.xml`, switch the two buttons at the bottom of the screen to use this markup:\n\n```xml\n<Button text=\"Sign in\" tap=\"signIn\" />\n<Button text=\"Sign up for Groceries\" class=\"link\" tap=\"register\" />\n```\n\nThen, at the bottom of the `app/views/login/login.js` file, paste in the following `signIn()` and `register()` functions:\n\n```javascript\nexports.signIn = function() {\n    alert(\"Signing in\");\n};\n\nexports.register = function() {\n    alert(\"Registering\");\n};\n```\n\n</div>\n\nAt this point, if you run your app and tap either of the buttons, you will see the appropriate alerts pop up. \n\n![login 5](/docs/img/cli-getting-started/nativescript/chapter3/ios/1.png)\n![login 5](/docs/img/cli-getting-started/nativescript/chapter3/android/1.png)\n\nNow that you can see tap gestures working, let's make them do something more interesting than open alerts.\n\n## 3.2: Navigating screens\n\nWhen you tap the “Sign up for Groceries” button, you would expect a navigational change to a registration screen. This is very easy to do in NativeScript.\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Enable the “Sign up” button on the login screen with a navigational change</h4>\n\nIn `app/views/login/login.js`, add this line to the top of the file:\n\n```javascript\nvar frameModule = require(\"ui/frame\");\n```\n\nThen, replace the current `register()` function with the version shown below:\n\n```javascript\nexports.register = function() {\n    var topmost = frameModule.topmost();\n    topmost.navigate(\"views/register/register\");\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThis function uses the [frame module](http://docs.nativescript.org/api-reference/modules/_ui_frame_.html), which is the NativeScript module responsible for navigation in your app. Here, you tell the topmost frame, or the frame the user actually sees, to navigate to the register view. \n\nIf you run your app and click the “Sign up for Groceries” button, you will be sent to the registration screen, which we have pre-built for you.\n\n![navigate](/docs/img/cli-getting-started/nativescript/chapter3/ios/2.gif)\n![navigate](/docs/img/cli-getting-started/nativescript/chapter3/android/2.gif)\n\nNow that you can access the registration page, go ahead and sign up for an account to use for the rest of this tutorial.\n\n</div> \n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Register for an account</h4>\n\nOpen Groceries and tap “Sign up for Groceries” to access the registration page. From there, provide an email address and password, and click the “Sign up” button to create an account.\n\nYou can use a fake email address and password, just remember your credentials as you'll need them later.\n\n</div>\n\n<div class=\"explain\">\n\n> **TIP**: Although our Groceries app doesn't use complex navigation strategies, you have several available to you out of the box, such as the [TabView](/ui-views#tabview) and the [SegmentedBar](/ui-views#segmentedbar). A SideDrawer component is also available for free via Telerik's [UI for NativeScript](http://docs.telerik.com/devtools/nativescript-ui/introduction) product.\n\n## 3.3: Accessing UI components\n\nIt's time to see how data flows back and forth between the front end and back end in forms.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Send data from the front end to the view model</h4>\n\nOpen `login.xml` and add an `id=\"email\"` attribute to the email text field. Its markup should look like this:\n\n```xml\n<TextField id=\"email\" hint=\"Email Address\" keyboardType=\"email\" autocorrect=\"false\" autocapitalizationType=\"none\" />\n```\n\nWith an `id` attribute in place, you can access this text field in your code-behind file. To do that, start by opening `app/views/login/login.js` and adding the two lines of code below at the top of the file, underneath the `frameModule` variable.\n\n```javascript\nvar page;\nvar email;\n```\n\nNext, edit the `loaded()` function in `login.js` to get a reference to the current page:\n\n```javascript\nexports.loaded = function(args) {\n    page = args.object;\n};\n```\n\n> **NOTE**: This works because NativeScript passes `loaded` event handlers a reference to the `<Page>` in the function's argument, which is named `args` by convention.\n\nFinally, edit the `signIn()` function to get a reference to the text field component and log its contents:\n\n```javascript\nexports.signIn = function() {\n    email = page.getViewById(\"email\");\n    console.log(email.text);\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nAll NativeScript UI components, including `<Page>`, inherit from the [`View` class](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html), which gives them a number of methods for working the UI. In this case you use the [`getViewById()` method](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html#getviewbyid) to get a reference to the email text field by its `id` attribute.\n\nTo see how this works in action, run the app, type some text in the email address text field, and tap the “Sign in” button. If all went well, you should see the text you typed logged in your terminal.\n\n![](/docs/img/cli-getting-started/nativescript/chapter3/terminal-2.png)\n\nBy accessing UI elements in JavaScript, you can control how those elements look and behave on the front end. However, accessing these UI components individually is a very manual process, and it makes it hard to track the state of the UI. This is where view models come in.\n\n## 3.4: Adding a view model\n\nNativeScript provides view model functionality in the form of a module called 'Observable'.\n\nThe Observable is the view model in the MVVM design pattern. It provides a mechanism used for two-way data binding, to enable direct communication between the UI and code-behind file. This means that if the user updates the data in the UI, the change will be automatically reflected in the view model, and vice versa. \n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Create a view model and bind it to the view</h4>\n\nTo allow for two-way data binding using an Observable, open `login.xml`, and replace the two existing TextField UI components with the two shown below, each including a new `text` attribute:\n\n```xml\n<TextField id=\"email\" text=\"{% raw %}{{ email }}{% endraw %}\" hint=\"Email Address\" keyboardType=\"email\" autocorrect=\"false\" autocapitalizationType=\"none\" />\n<TextField secure=\"true\" text=\"{% raw %}{{ password }}{% endraw %}\" hint=\"Password\" />\n```\n\n> **NOTE**: The use of two curly brackets surrounding the `text` attribute's value delineates a data-bound value. You will be setting corresponding properties with the same name in the view model.\n\nAdd the following code to the top of `app/views/login/login.js`. The code gets a reference to the `Observable` constructor from the observable module, and invokes the constructor to define a new `user` object, which you'll be using as this page's view model:\n\n```javascript\nvar Observable = require(\"data/observable\").Observable;\n\nvar user = new Observable({\n    email: \"user@domain.com\",\n    password: \"password\"\n});\n```\n\nNow, replace the existing `loaded()` function with the one below, which sets `user` as the binding context for the page.\n\n```javascript\nexports.loaded = function(args) {\n    page = args.object;\n    page.bindingContext = user;\n};\n```\n\n</div>\n\nWhat's going on here?\n\n1. You're creating a `user` view model that is based on the NativeScript Observable module. You create the view model with two properties, `email` and `password`, that are pre-populated with some dummy values.\n2. You bind the page to the `user` view model by setting it as the page's `bindingContext` property. This is specifically what makes the curly bracket syntax work.\n\nSimply put, properties placed on a page's binding context are available to XML elements using the `{% raw %}{{ propertyName }}{% endraw %}` syntax. Because JavaScript sets the view model's `email` to `\"user@domain.com\"`, and because you bound the email address text field to that property using `<TextField text=\"{% raw %}{{ email }}{% endraw %}\">`, when you run this app you'll see \"user@domain.com\" appear on the front end.\n\n![](/docs/img/cli-getting-started/nativescript/chapter3/ios/3.png)\n![](/docs/img/cli-getting-started/nativescript/chapter3/android/3.png)\n\nWhat's really cool is that the binding is two-way. Meaning, when the user types text in these text fields, those changes are immediately applied to your view model.\n\nTo use these values, and to make this login functional by tying your app into a backend service, you're going to need the ability to make HTTP calls. And to make HTTP calls in NativeScript you use the NativeScript fetch module. Let's look at how NativeScript modules work.\n\n","source":"tutorial/3.md","raw":"# Chapter 3—Application Logic\n\nIn this chapter, you'll learn how to add JavaScript logic to your NativeScript app, and you'll be doing so using the base pattern on which the NativeScript framework is built, MVVM, or \"model view view model\". \n\n<div class=\"explain\">\n\nHere's what those words mean:\n\n- **Model**: The model defines and represents the data. Separating the model from the various views that might use it allows for code reuse.\n- **View**: The view represents the UI, which in NativeScript is written in XML. The view is often data-bound to the view model so that changes made to the view model in JavaScript instantly trigger visual changes to UI components.\n- **View Model**: The view model contains the application logic (often including the model), and exposes the data to the view. NativeScript provides a module called 'Observable', which facilitates creating a view model object that can be bound to the view.\n\nThe biggest benefit of separating models, views, and view models, is that you are able to use two-way data binding; that is, changes to data in the model get instantly reflected on the view, and vice versa. The other big benefit is code reuse, as you're often able to reuse models and view models across views.\n\nIn Groceries, so far you've only touched the view (`login.xml`), and in this chapter you'll be creating a view model. To do so, we first need to introduce one other type of file: the code-behind.\n\n## Table of contents\n\n- [3.1: The code-behind](#31-the-code-behind)\n- [3.2: Navigating screens](#32-navigating-screens)\n- [3.3: Accessing UI components](#33-accessing-ui-components)\n- [3.4: Adding a view model](#34-adding-a-view-model)\n\n## 3.1: The code-behind\n\nIn NativeScript a code-behind file is a JavaScript file that shares the same name as the view. For example, the login page's view is named `login.xml`, so its code-behind file is named `login.js`. The code-behind file is where you put all code that interacts with the view itself.\n\nLet's look at what you can do in a code-behind file with a simple example.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Construct the login view model</h4>\n\nOpen `login.xml` and add a `loaded` attribute to the `<Page>` UI component at the top. It should look like this:\n\n```xml\n<Page loaded=\"loaded\">\n```\n\nNext, paste the code below in `app/views/login/login.js` to define a `loaded()` function:\n\n```javascript\nexports.loaded = function() {\n    console.log(\"hello\");\n};\n```\n\n</div>\n\n> **NOTE**: The keyword `exports` is part of [CommonJS](http://wiki.commonjs.org/wiki/Modules/1.1), the standard on which both NativeScript and Node.js' implementations of modules are based. In CommonJS-based JavaScript modules, a free variable called `exports` is an object to which a module might add properties and methods to configure its external API. Using `exports` in a code-behind file exposes the function for use in the view, or XML file. That is, the `exports.loaded` assignment in the code-behind file is what makes `loaded=\"loaded\"` in the view work.\n\nWhen you run the app with this change, NativeScript triggers the `loaded()` function you created in the code-behind file, and you should see the word “hello” logged in your terminal.\n\n![](/docs/img/cli-getting-started/nativescript/chapter3/terminal-1.png)\n\nThis simple example shows you how you can append attributes to UI components to run functions in the view's accompanying JavaScript file. Let's use another one of these attributes: `tap`.\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Enable the buttons</h4>\n\nYou can add a `tap` attribute that will fire when the user taps or touches a button. In `app/views/login/login.xml`, switch the two buttons at the bottom of the screen to use this markup:\n\n```xml\n<Button text=\"Sign in\" tap=\"signIn\" />\n<Button text=\"Sign up for Groceries\" class=\"link\" tap=\"register\" />\n```\n\nThen, at the bottom of the `app/views/login/login.js` file, paste in the following `signIn()` and `register()` functions:\n\n```javascript\nexports.signIn = function() {\n    alert(\"Signing in\");\n};\n\nexports.register = function() {\n    alert(\"Registering\");\n};\n```\n\n</div>\n\nAt this point, if you run your app and tap either of the buttons, you will see the appropriate alerts pop up. \n\n![login 5](/docs/img/cli-getting-started/nativescript/chapter3/ios/1.png)\n![login 5](/docs/img/cli-getting-started/nativescript/chapter3/android/1.png)\n\nNow that you can see tap gestures working, let's make them do something more interesting than open alerts.\n\n## 3.2: Navigating screens\n\nWhen you tap the “Sign up for Groceries” button, you would expect a navigational change to a registration screen. This is very easy to do in NativeScript.\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Enable the “Sign up” button on the login screen with a navigational change</h4>\n\nIn `app/views/login/login.js`, add this line to the top of the file:\n\n```javascript\nvar frameModule = require(\"ui/frame\");\n```\n\nThen, replace the current `register()` function with the version shown below:\n\n```javascript\nexports.register = function() {\n    var topmost = frameModule.topmost();\n    topmost.navigate(\"views/register/register\");\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThis function uses the [frame module](http://docs.nativescript.org/api-reference/modules/_ui_frame_.html), which is the NativeScript module responsible for navigation in your app. Here, you tell the topmost frame, or the frame the user actually sees, to navigate to the register view. \n\nIf you run your app and click the “Sign up for Groceries” button, you will be sent to the registration screen, which we have pre-built for you.\n\n![navigate](/docs/img/cli-getting-started/nativescript/chapter3/ios/2.gif)\n![navigate](/docs/img/cli-getting-started/nativescript/chapter3/android/2.gif)\n\nNow that you can access the registration page, go ahead and sign up for an account to use for the rest of this tutorial.\n\n</div> \n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Register for an account</h4>\n\nOpen Groceries and tap “Sign up for Groceries” to access the registration page. From there, provide an email address and password, and click the “Sign up” button to create an account.\n\nYou can use a fake email address and password, just remember your credentials as you'll need them later.\n\n</div>\n\n<div class=\"explain\">\n\n> **TIP**: Although our Groceries app doesn't use complex navigation strategies, you have several available to you out of the box, such as the [TabView](/ui-views#tabview) and the [SegmentedBar](/ui-views#segmentedbar). A SideDrawer component is also available for free via Telerik's [UI for NativeScript](http://docs.telerik.com/devtools/nativescript-ui/introduction) product.\n\n## 3.3: Accessing UI components\n\nIt's time to see how data flows back and forth between the front end and back end in forms.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Send data from the front end to the view model</h4>\n\nOpen `login.xml` and add an `id=\"email\"` attribute to the email text field. Its markup should look like this:\n\n```xml\n<TextField id=\"email\" hint=\"Email Address\" keyboardType=\"email\" autocorrect=\"false\" autocapitalizationType=\"none\" />\n```\n\nWith an `id` attribute in place, you can access this text field in your code-behind file. To do that, start by opening `app/views/login/login.js` and adding the two lines of code below at the top of the file, underneath the `frameModule` variable.\n\n```javascript\nvar page;\nvar email;\n```\n\nNext, edit the `loaded()` function in `login.js` to get a reference to the current page:\n\n```javascript\nexports.loaded = function(args) {\n    page = args.object;\n};\n```\n\n> **NOTE**: This works because NativeScript passes `loaded` event handlers a reference to the `<Page>` in the function's argument, which is named `args` by convention.\n\nFinally, edit the `signIn()` function to get a reference to the text field component and log its contents:\n\n```javascript\nexports.signIn = function() {\n    email = page.getViewById(\"email\");\n    console.log(email.text);\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nAll NativeScript UI components, including `<Page>`, inherit from the [`View` class](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html), which gives them a number of methods for working the UI. In this case you use the [`getViewById()` method](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html#getviewbyid) to get a reference to the email text field by its `id` attribute.\n\nTo see how this works in action, run the app, type some text in the email address text field, and tap the “Sign in” button. If all went well, you should see the text you typed logged in your terminal.\n\n![](/docs/img/cli-getting-started/nativescript/chapter3/terminal-2.png)\n\nBy accessing UI elements in JavaScript, you can control how those elements look and behave on the front end. However, accessing these UI components individually is a very manual process, and it makes it hard to track the state of the UI. This is where view models come in.\n\n## 3.4: Adding a view model\n\nNativeScript provides view model functionality in the form of a module called 'Observable'.\n\nThe Observable is the view model in the MVVM design pattern. It provides a mechanism used for two-way data binding, to enable direct communication between the UI and code-behind file. This means that if the user updates the data in the UI, the change will be automatically reflected in the view model, and vice versa. \n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Create a view model and bind it to the view</h4>\n\nTo allow for two-way data binding using an Observable, open `login.xml`, and replace the two existing TextField UI components with the two shown below, each including a new `text` attribute:\n\n```xml\n<TextField id=\"email\" text=\"{% raw %}{{ email }}{% endraw %}\" hint=\"Email Address\" keyboardType=\"email\" autocorrect=\"false\" autocapitalizationType=\"none\" />\n<TextField secure=\"true\" text=\"{% raw %}{{ password }}{% endraw %}\" hint=\"Password\" />\n```\n\n> **NOTE**: The use of two curly brackets surrounding the `text` attribute's value delineates a data-bound value. You will be setting corresponding properties with the same name in the view model.\n\nAdd the following code to the top of `app/views/login/login.js`. The code gets a reference to the `Observable` constructor from the observable module, and invokes the constructor to define a new `user` object, which you'll be using as this page's view model:\n\n```javascript\nvar Observable = require(\"data/observable\").Observable;\n\nvar user = new Observable({\n    email: \"user@domain.com\",\n    password: \"password\"\n});\n```\n\nNow, replace the existing `loaded()` function with the one below, which sets `user` as the binding context for the page.\n\n```javascript\nexports.loaded = function(args) {\n    page = args.object;\n    page.bindingContext = user;\n};\n```\n\n</div>\n\nWhat's going on here?\n\n1. You're creating a `user` view model that is based on the NativeScript Observable module. You create the view model with two properties, `email` and `password`, that are pre-populated with some dummy values.\n2. You bind the page to the `user` view model by setting it as the page's `bindingContext` property. This is specifically what makes the curly bracket syntax work.\n\nSimply put, properties placed on a page's binding context are available to XML elements using the `{% raw %}{{ propertyName }}{% endraw %}` syntax. Because JavaScript sets the view model's `email` to `\"user@domain.com\"`, and because you bound the email address text field to that property using `<TextField text=\"{% raw %}{{ email }}{% endraw %}\">`, when you run this app you'll see \"user@domain.com\" appear on the front end.\n\n![](/docs/img/cli-getting-started/nativescript/chapter3/ios/3.png)\n![](/docs/img/cli-getting-started/nativescript/chapter3/android/3.png)\n\nWhat's really cool is that the binding is two-way. Meaning, when the user types text in these text fields, those changes are immediately applied to your view model.\n\nTo use these values, and to make this login functional by tying your app into a backend service, you're going to need the ability to make HTTP calls. And to make HTTP calls in NativeScript you use the NativeScript fetch module. Let's look at how NativeScript modules work.\n\n","date":"2016-08-26T21:05:54.506Z","updated":"2016-08-26T21:05:54.506Z","path":"tutorial/3.html","title":"","comments":1,"layout":"page","_id":"cisn95c7b000nwsl0okk01w0y","content":"<h1 id=\"Chapter-3—Application-Logic\"><a href=\"#Chapter-3—Application-Logic\" class=\"headerlink\" title=\"Chapter 3—Application Logic\"></a>Chapter 3—Application Logic</h1><p>In this chapter, you’ll learn how to add JavaScript logic to your NativeScript app, and you’ll be doing so using the base pattern on which the NativeScript framework is built, MVVM, or “model view view model”. </p>\n<div class=\"explain\">\n\nHere’s what those words mean:\n\n- <strong>Model</strong>: The model defines and represents the data. Separating the model from the various views that might use it allows for code reuse.\n- <strong>View</strong>: The view represents the UI, which in NativeScript is written in XML. The view is often data-bound to the view model so that changes made to the view model in JavaScript instantly trigger visual changes to UI components.\n- <strong>View Model</strong>: The view model contains the application logic (often including the model), and exposes the data to the view. NativeScript provides a module called ‘Observable’, which facilitates creating a view model object that can be bound to the view.\n\nThe biggest benefit of separating models, views, and view models, is that you are able to use two-way data binding; that is, changes to data in the model get instantly reflected on the view, and vice versa. The other big benefit is code reuse, as you’re often able to reuse models and view models across views.\n\nIn Groceries, so far you’ve only touched the view (<code>login.xml</code>), and in this chapter you’ll be creating a view model. To do so, we first need to introduce one other type of file: the code-behind.\n\n## Table of contents\n\n- <a href=\"#31-the-code-behind\">3.1: The code-behind</a>\n- <a href=\"#32-navigating-screens\">3.2: Navigating screens</a>\n- <a href=\"#33-accessing-ui-components\">3.3: Accessing UI components</a>\n- <a href=\"#34-adding-a-view-model\">3.4: Adding a view model</a>\n\n## 3.1: The code-behind\n\nIn NativeScript a code-behind file is a JavaScript file that shares the same name as the view. For example, the login page’s view is named <code>login.xml</code>, so its code-behind file is named <code>login.js</code>. The code-behind file is where you put all code that interacts with the view itself.\n\nLet’s look at what you can do in a code-behind file with a simple example.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Construct the login view model</h4>\n\nOpen <code>login.xml</code> and add a <code>loaded</code> attribute to the <code>&lt;Page&gt;</code> UI component at the top. It should look like this:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"loaded\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\nNext, paste the code below in <code>app/views/login/login.js</code> to define a <code>loaded()</code> function:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<blockquote>\n<p><strong>NOTE</strong>: The keyword <code>exports</code> is part of <a href=\"http://wiki.commonjs.org/wiki/Modules/1.1\" target=\"_blank\" rel=\"external\">CommonJS</a>, the standard on which both NativeScript and Node.js’ implementations of modules are based. In CommonJS-based JavaScript modules, a free variable called <code>exports</code> is an object to which a module might add properties and methods to configure its external API. Using <code>exports</code> in a code-behind file exposes the function for use in the view, or XML file. That is, the <code>exports.loaded</code> assignment in the code-behind file is what makes <code>loaded=&quot;loaded&quot;</code> in the view work.</p>\n</blockquote>\n<p>When you run the app with this change, NativeScript triggers the <code>loaded()</code> function you created in the code-behind file, and you should see the word “hello” logged in your terminal.</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter3/terminal-1.png\" alt=\"\"></p>\n<p>This simple example shows you how you can append attributes to UI components to run functions in the view’s accompanying JavaScript file. Let’s use another one of these attributes: <code>tap</code>.</p>\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Enable the buttons</h4>\n\nYou can add a <code>tap</code> attribute that will fire when the user taps or touches a button. In <code>app/views/login/login.xml</code>, switch the two buttons at the bottom of the screen to use this markup:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign in\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"signIn\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"register\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThen, at the bottom of the <code>app/views/login/login.js</code> file, paste in the following <code>signIn()</code> and <code>register()</code> functions:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.signIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Signing in\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">exports.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Registering\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<p>At this point, if you run your app and tap either of the buttons, you will see the appropriate alerts pop up. </p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter3/ios/1.png\" alt=\"login 5\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/android/1.png\" alt=\"login 5\"></p>\n<p>Now that you can see tap gestures working, let’s make them do something more interesting than open alerts.</p>\n<h2 id=\"3-2-Navigating-screens\"><a href=\"#3-2-Navigating-screens\" class=\"headerlink\" title=\"3.2: Navigating screens\"></a>3.2: Navigating screens</h2><p>When you tap the “Sign up for Groceries” button, you would expect a navigational change to a registration screen. This is very easy to do in NativeScript.</p>\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Enable the “Sign up” button on the login screen with a navigational change</h4>\n\nIn <code>app/views/login/login.js</code>, add this line to the top of the file:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div></pre></td></tr></table></figure>\n\nThen, replace the current <code>register()</code> function with the version shown below:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> topmost = frameModule.topmost();</div><div class=\"line\">    topmost.navigate(<span class=\"string\">\"views/register/register\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThis function uses the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_frame_.html\">frame module</a>, which is the NativeScript module responsible for navigation in your app. Here, you tell the topmost frame, or the frame the user actually sees, to navigate to the register view. \n\nIf you run your app and click the “Sign up for Groceries” button, you will be sent to the registration screen, which we have pre-built for you.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/ios/2.gif\" alt=\"navigate\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/android/2.gif\" alt=\"navigate\">\n\nNow that you can access the registration page, go ahead and sign up for an account to use for the rest of this tutorial.\n\n</div> \n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Register for an account</h4>\n\nOpen Groceries and tap “Sign up for Groceries” to access the registration page. From there, provide an email address and password, and click the “Sign up” button to create an account.\n\nYou can use a fake email address and password, just remember your credentials as you’ll need them later.\n\n</div>\n\n<div class=\"explain\">\n\n&gt; <strong>TIP</strong>: Although our Groceries app doesn’t use complex navigation strategies, you have several available to you out of the box, such as the <a href=\"/ui-views#tabview\">TabView</a> and the <a href=\"/ui-views#segmentedbar\">SegmentedBar</a>. A SideDrawer component is also available for free via Telerik’s <a href=\"http://docs.telerik.com/devtools/nativescript-ui/introduction\" target=\"_blank\" rel=\"external\">UI for NativeScript</a> product.\n\n## 3.3: Accessing UI components\n\nIt’s time to see how data flows back and forth between the front end and back end in forms.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Send data from the front end to the view model</h4>\n\nOpen <code>login.xml</code> and add an <code>id=&quot;email&quot;</code> attribute to the email text field. Its markup should look like this:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">id</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Email Address\"</span> <span class=\"attr\">keyboardType</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autocapitalizationType</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nWith an <code>id</code> attribute in place, you can access this text field in your code-behind file. To do that, start by opening <code>app/views/login/login.js</code> and adding the two lines of code below at the top of the file, underneath the <code>frameModule</code> variable.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page;</div><div class=\"line\"><span class=\"keyword\">var</span> email;</div></pre></td></tr></table></figure>\n\nNext, edit the <code>loaded()</code> function in <code>login.js</code> to get a reference to the current page:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n&gt; <strong>NOTE</strong>: This works because NativeScript passes <code>loaded</code> event handlers a reference to the <code>&lt;Page&gt;</code> in the function’s argument, which is named <code>args</code> by convention.\n\nFinally, edit the <code>signIn()</code> function to get a reference to the text field component and log its contents:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.signIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    email = page.getViewById(<span class=\"string\">\"email\"</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(email.text);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nAll NativeScript UI components, including <code>&lt;Page&gt;</code>, inherit from the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\"><code>View</code> class</a>, which gives them a number of methods for working the UI. In this case you use the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html#getviewbyid\"><code>getViewById()</code> method</a> to get a reference to the email text field by its <code>id</code> attribute.\n\nTo see how this works in action, run the app, type some text in the email address text field, and tap the “Sign in” button. If all went well, you should see the text you typed logged in your terminal.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/terminal-2.png\" alt=\"\">\n\nBy accessing UI elements in JavaScript, you can control how those elements look and behave on the front end. However, accessing these UI components individually is a very manual process, and it makes it hard to track the state of the UI. This is where view models come in.\n\n## 3.4: Adding a view model\n\nNativeScript provides view model functionality in the form of a module called ‘Observable’.\n\nThe Observable is the view model in the MVVM design pattern. It provides a mechanism used for two-way data binding, to enable direct communication between the UI and code-behind file. This means that if the user updates the data in the UI, the change will be automatically reflected in the view model, and vice versa. \n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Create a view model and bind it to the view</h4>\n\nTo allow for two-way data binding using an Observable, open <code>login.xml</code>, and replace the two existing TextField UI components with the two shown below, each including a new <code>text</code> attribute:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">id</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; email &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Email Address\"</span> <span class=\"attr\">keyboardType</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autocapitalizationType</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">secure</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; password &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Password\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n&gt; <strong>NOTE</strong>: The use of two curly brackets surrounding the <code>text</code> attribute’s value delineates a data-bound value. You will be setting corresponding properties with the same name in the view model.\n\nAdd the following code to the top of <code>app/views/login/login.js</code>. The code gets a reference to the <code>Observable</code> constructor from the observable module, and invokes the constructor to define a new <code>user</code> object, which you’ll be using as this page’s view model:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>).Observable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    email: <span class=\"string\">\"user@domain.com\"</span>,</div><div class=\"line\">    password: <span class=\"string\">\"password\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n\nNow, replace the existing <code>loaded()</code> function with the one below, which sets <code>user</code> as the binding context for the page.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">    page.bindingContext = user;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<p>What’s going on here?</p>\n<ol>\n<li>You’re creating a <code>user</code> view model that is based on the NativeScript Observable module. You create the view model with two properties, <code>email</code> and <code>password</code>, that are pre-populated with some dummy values.</li>\n<li>You bind the page to the <code>user</code> view model by setting it as the page’s <code>bindingContext</code> property. This is specifically what makes the curly bracket syntax work.</li>\n</ol>\n<p>Simply put, properties placed on a page’s binding context are available to XML elements using the <code>{{ propertyName }}</code> syntax. Because JavaScript sets the view model’s <code>email</code> to <code>&quot;user@domain.com&quot;</code>, and because you bound the email address text field to that property using <code>&lt;TextField text=&quot;{{ email }}&quot;&gt;</code>, when you run this app you’ll see “user@domain.com” appear on the front end.</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter3/ios/3.png\" alt=\"\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/android/3.png\" alt=\"\"></p>\n<p>What’s really cool is that the binding is two-way. Meaning, when the user types text in these text fields, those changes are immediately applied to your view model.</p>\n<p>To use these values, and to make this login functional by tying your app into a backend service, you’re going to need the ability to make HTTP calls. And to make HTTP calls in NativeScript you use the NativeScript fetch module. Let’s look at how NativeScript modules work.</p>\n","excerpt":"","more":"<h1 id=\"Chapter-3—Application-Logic\"><a href=\"#Chapter-3—Application-Logic\" class=\"headerlink\" title=\"Chapter 3—Application Logic\"></a>Chapter 3—Application Logic</h1><p>In this chapter, you’ll learn how to add JavaScript logic to your NativeScript app, and you’ll be doing so using the base pattern on which the NativeScript framework is built, MVVM, or “model view view model”. </p>\n<div class=\"explain\">\n\nHere’s what those words mean:\n\n- <strong>Model</strong>: The model defines and represents the data. Separating the model from the various views that might use it allows for code reuse.\n- <strong>View</strong>: The view represents the UI, which in NativeScript is written in XML. The view is often data-bound to the view model so that changes made to the view model in JavaScript instantly trigger visual changes to UI components.\n- <strong>View Model</strong>: The view model contains the application logic (often including the model), and exposes the data to the view. NativeScript provides a module called ‘Observable’, which facilitates creating a view model object that can be bound to the view.\n\nThe biggest benefit of separating models, views, and view models, is that you are able to use two-way data binding; that is, changes to data in the model get instantly reflected on the view, and vice versa. The other big benefit is code reuse, as you’re often able to reuse models and view models across views.\n\nIn Groceries, so far you’ve only touched the view (<code>login.xml</code>), and in this chapter you’ll be creating a view model. To do so, we first need to introduce one other type of file: the code-behind.\n\n## Table of contents\n\n- <a href=\"#31-the-code-behind\">3.1: The code-behind</a>\n- <a href=\"#32-navigating-screens\">3.2: Navigating screens</a>\n- <a href=\"#33-accessing-ui-components\">3.3: Accessing UI components</a>\n- <a href=\"#34-adding-a-view-model\">3.4: Adding a view model</a>\n\n## 3.1: The code-behind\n\nIn NativeScript a code-behind file is a JavaScript file that shares the same name as the view. For example, the login page’s view is named <code>login.xml</code>, so its code-behind file is named <code>login.js</code>. The code-behind file is where you put all code that interacts with the view itself.\n\nLet’s look at what you can do in a code-behind file with a simple example.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Construct the login view model</h4>\n\nOpen <code>login.xml</code> and add a <code>loaded</code> attribute to the <code>&lt;Page&gt;</code> UI component at the top. It should look like this:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"loaded\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\nNext, paste the code below in <code>app/views/login/login.js</code> to define a <code>loaded()</code> function:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<blockquote>\n<p><strong>NOTE</strong>: The keyword <code>exports</code> is part of <a href=\"http://wiki.commonjs.org/wiki/Modules/1.1\">CommonJS</a>, the standard on which both NativeScript and Node.js’ implementations of modules are based. In CommonJS-based JavaScript modules, a free variable called <code>exports</code> is an object to which a module might add properties and methods to configure its external API. Using <code>exports</code> in a code-behind file exposes the function for use in the view, or XML file. That is, the <code>exports.loaded</code> assignment in the code-behind file is what makes <code>loaded=&quot;loaded&quot;</code> in the view work.</p>\n</blockquote>\n<p>When you run the app with this change, NativeScript triggers the <code>loaded()</code> function you created in the code-behind file, and you should see the word “hello” logged in your terminal.</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter3/terminal-1.png\" alt=\"\"></p>\n<p>This simple example shows you how you can append attributes to UI components to run functions in the view’s accompanying JavaScript file. Let’s use another one of these attributes: <code>tap</code>.</p>\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Enable the buttons</h4>\n\nYou can add a <code>tap</code> attribute that will fire when the user taps or touches a button. In <code>app/views/login/login.xml</code>, switch the two buttons at the bottom of the screen to use this markup:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign in\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"signIn\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"register\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThen, at the bottom of the <code>app/views/login/login.js</code> file, paste in the following <code>signIn()</code> and <code>register()</code> functions:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.signIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Signing in\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">exports.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Registering\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<p>At this point, if you run your app and tap either of the buttons, you will see the appropriate alerts pop up. </p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter3/ios/1.png\" alt=\"login 5\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/android/1.png\" alt=\"login 5\"></p>\n<p>Now that you can see tap gestures working, let’s make them do something more interesting than open alerts.</p>\n<h2 id=\"3-2-Navigating-screens\"><a href=\"#3-2-Navigating-screens\" class=\"headerlink\" title=\"3.2: Navigating screens\"></a>3.2: Navigating screens</h2><p>When you tap the “Sign up for Groceries” button, you would expect a navigational change to a registration screen. This is very easy to do in NativeScript.</p>\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Enable the “Sign up” button on the login screen with a navigational change</h4>\n\nIn <code>app/views/login/login.js</code>, add this line to the top of the file:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> frameModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div></pre></td></tr></table></figure>\n\nThen, replace the current <code>register()</code> function with the version shown below:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> topmost = frameModule.topmost();</div><div class=\"line\">    topmost.navigate(<span class=\"string\">\"views/register/register\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThis function uses the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_frame_.html\">frame module</a>, which is the NativeScript module responsible for navigation in your app. Here, you tell the topmost frame, or the frame the user actually sees, to navigate to the register view. \n\nIf you run your app and click the “Sign up for Groceries” button, you will be sent to the registration screen, which we have pre-built for you.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/ios/2.gif\" alt=\"navigate\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/android/2.gif\" alt=\"navigate\">\n\nNow that you can access the registration page, go ahead and sign up for an account to use for the rest of this tutorial.\n\n</div> \n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Register for an account</h4>\n\nOpen Groceries and tap “Sign up for Groceries” to access the registration page. From there, provide an email address and password, and click the “Sign up” button to create an account.\n\nYou can use a fake email address and password, just remember your credentials as you’ll need them later.\n\n</div>\n\n<div class=\"explain\">\n\n&gt; <strong>TIP</strong>: Although our Groceries app doesn’t use complex navigation strategies, you have several available to you out of the box, such as the <a href=\"/ui-views#tabview\">TabView</a> and the <a href=\"/ui-views#segmentedbar\">SegmentedBar</a>. A SideDrawer component is also available for free via Telerik’s <a href=\"http://docs.telerik.com/devtools/nativescript-ui/introduction\">UI for NativeScript</a> product.\n\n## 3.3: Accessing UI components\n\nIt’s time to see how data flows back and forth between the front end and back end in forms.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Send data from the front end to the view model</h4>\n\nOpen <code>login.xml</code> and add an <code>id=&quot;email&quot;</code> attribute to the email text field. Its markup should look like this:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">id</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Email Address\"</span> <span class=\"attr\">keyboardType</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autocapitalizationType</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nWith an <code>id</code> attribute in place, you can access this text field in your code-behind file. To do that, start by opening <code>app/views/login/login.js</code> and adding the two lines of code below at the top of the file, underneath the <code>frameModule</code> variable.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page;</div><div class=\"line\"><span class=\"keyword\">var</span> email;</div></pre></td></tr></table></figure>\n\nNext, edit the <code>loaded()</code> function in <code>login.js</code> to get a reference to the current page:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n&gt; <strong>NOTE</strong>: This works because NativeScript passes <code>loaded</code> event handlers a reference to the <code>&lt;Page&gt;</code> in the function’s argument, which is named <code>args</code> by convention.\n\nFinally, edit the <code>signIn()</code> function to get a reference to the text field component and log its contents:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.signIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    email = page.getViewById(<span class=\"string\">\"email\"</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(email.text);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nAll NativeScript UI components, including <code>&lt;Page&gt;</code>, inherit from the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\"><code>View</code> class</a>, which gives them a number of methods for working the UI. In this case you use the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html#getviewbyid\"><code>getViewById()</code> method</a> to get a reference to the email text field by its <code>id</code> attribute.\n\nTo see how this works in action, run the app, type some text in the email address text field, and tap the “Sign in” button. If all went well, you should see the text you typed logged in your terminal.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/terminal-2.png\" alt=\"\">\n\nBy accessing UI elements in JavaScript, you can control how those elements look and behave on the front end. However, accessing these UI components individually is a very manual process, and it makes it hard to track the state of the UI. This is where view models come in.\n\n## 3.4: Adding a view model\n\nNativeScript provides view model functionality in the form of a module called ‘Observable’.\n\nThe Observable is the view model in the MVVM design pattern. It provides a mechanism used for two-way data binding, to enable direct communication between the UI and code-behind file. This means that if the user updates the data in the UI, the change will be automatically reflected in the view model, and vice versa. \n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Create a view model and bind it to the view</h4>\n\nTo allow for two-way data binding using an Observable, open <code>login.xml</code>, and replace the two existing TextField UI components with the two shown below, each including a new <code>text</code> attribute:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">id</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; email &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Email Address\"</span> <span class=\"attr\">keyboardType</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autocapitalizationType</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">secure</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; password &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Password\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n&gt; <strong>NOTE</strong>: The use of two curly brackets surrounding the <code>text</code> attribute’s value delineates a data-bound value. You will be setting corresponding properties with the same name in the view model.\n\nAdd the following code to the top of <code>app/views/login/login.js</code>. The code gets a reference to the <code>Observable</code> constructor from the observable module, and invokes the constructor to define a new <code>user</code> object, which you’ll be using as this page’s view model:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>).Observable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    email: <span class=\"string\">\"user@domain.com\"</span>,</div><div class=\"line\">    password: <span class=\"string\">\"password\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n\nNow, replace the existing <code>loaded()</code> function with the one below, which sets <code>user</code> as the binding context for the page.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">    page.bindingContext = user;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<p>What’s going on here?</p>\n<ol>\n<li>You’re creating a <code>user</code> view model that is based on the NativeScript Observable module. You create the view model with two properties, <code>email</code> and <code>password</code>, that are pre-populated with some dummy values.</li>\n<li>You bind the page to the <code>user</code> view model by setting it as the page’s <code>bindingContext</code> property. This is specifically what makes the curly bracket syntax work.</li>\n</ol>\n<p>Simply put, properties placed on a page’s binding context are available to XML elements using the <code>{{ propertyName }}</code> syntax. Because JavaScript sets the view model’s <code>email</code> to <code>&quot;user@domain.com&quot;</code>, and because you bound the email address text field to that property using <code>&lt;TextField text=&quot;{{ email }}&quot;&gt;</code>, when you run this app you’ll see “user@domain.com” appear on the front end.</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter3/ios/3.png\" alt=\"\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter3/android/3.png\" alt=\"\"></p>\n<p>What’s really cool is that the binding is two-way. Meaning, when the user types text in these text fields, those changes are immediately applied to your view model.</p>\n<p>To use these values, and to make this login functional by tying your app into a backend service, you’re going to need the ability to make HTTP calls. And to make HTTP calls in NativeScript you use the NativeScript fetch module. Let’s look at how NativeScript modules work.</p>\n"},{"_content":"# Chapter 5—Plugins and npm Modules\n\nAs you build more complex apps, you'll likely run into functionality that is not implemented in the NativeScript modules. But no worries, as NativeScript lets you leverage [npm](https://www.npmjs.com/) (node package manager) to import npm modules into your apps. Alternately, you can install NativeScript plugins, which are simply npm modules that can access native code and use Android and iOS SDKs, if required. \n\nIn this chapter, you'll install and use an external email validator module to verify the format of email addresses as they are entered on the registration screen. Then, you'll add a NativeScript plugin, [NativeScript social share](https://www.npmjs.com/package/nativescript-social-share), to let users share their grocery lists using their device's native sharing widget.\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [5.1: Using npm modules](#51-using-npm-modules)\n- [5.2: Using NativeScript plugins](#52-using-nativescript-plugins)\n\n## 5.1: Using npm modules\n\nIt would be nice to be able to make sure people are entering well-formatted email addresses into your app on the registration screen. You could write this functionality yourself, but validating email addresses is [surprisingly tricky](http://stackoverflow.com/questions/46155/validate-email-address-in-javascript), and it's a lot easier to use one of many npm modules that already provide this validation. For Groceries let's see how to add this [email-validator module](https://www.npmjs.com/package/email-validator) to test for valid addresses.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Install the email validator module</h4>\n\nReturn to your terminal and make sure that you are working in the root directory in your Groceries project folder, a.k.a. here:\n\n<div class=\"no-copy-button\"></div>\n\n```\nsample-Groceries <----------------\n    ├── app\n    │   └── ...\n    ├── package.json\n    └── platforms\n        ├── android\n        └── ios\n```\n\nFrom the root directory install the email-validator module:\n\n```\nnpm install email-validator --save\n```\n\n</div>\n\n<div class=\"explain\">\n\nThe install process does a few things in the background. First, because you added the `--save` flag, npm records this dependency in your app's `package.json`. If you open your `package.json` you should see `\"email-validator\"` in your app's `\"dependencies\"` array.\n\n```javascript\n\"dependencies\": {\n  \"email-validator\": \"^1.0.4\"\n}\n```\n\nThe npm CLI also creates a `node_modules` folder in the root of your app. This folder contains the code for the email-validator module, which is a bit of validation logic in `node_modules/email_validator/index.js`. \n\n> **TIP**: By saving your app's npm dependencies in your `package.json` file, you can always regenerate your `node_modules` folder by running `npm install`. Because of this, it's a common practice to exclude the `node_modules` folder from source control. The Groceries app uses git for source control, and as such includes `node_modules/` in its `.gitignore`.\n\nNow that you have the module installed let's look at how to use it.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Use the email validator module\n</h4>\n\nOpen `/app/shared/view-models/user-view-model.js` and add the following line at the top of the file:\n\n```javascript\nvar validator = require(\"email-validator\");\n```\n\n> **NOTE**: The NativeScript framework's `require()` method is configured to look at the `\"main\"` value in an npm module's `package.json` file. In the case of this module, the `\"main\"` value is `\"index.js\"`. Therefore, when you run `require(\"email-validator\")`, you're actually requiring the file at `node_modules/email_validator/index.js`. You could also type `require(\"email-validator/index\")` to retrieve the same file.\n\nTo make use of this validator, add a function to `user-view-model.js`, right above the line `return viewModel`:\n\n```javascript\nviewModel.isValidEmail = function() {\n    var email = this.get(\"email\");\n    return validator.validate(email);\n};\n```\n\nThen, edit the registration function in `app/views/register/register.js` to trap any malformed email addresses:\n\n```javascript\nexports.register = function() {\n    if (user.isValidEmail()) {\n        completeRegistration();\n    } else {\n        dialogsModule.alert({\n            message: \"Enter a valid email address.\",\n            okButtonText: \"OK\"\n        });\n    }\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nIn this function, the user submits an email and password, and the value is sent to the view model for validation. If it passes, registration can proceed, otherwise you show an alert. However in order to test out this change you’ll need to do one more thing.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Rebuild your app\n</h4>\n\nAs we mentioned in chapter 1, although the `tns livesync` command is smart enough to reload your app for most changes you make to your app, certain changes require a full build—most notably, changes to native files in `app/App_Resources`, new modules installed with `npm install`, and new NativeScript plugins.\n\nFor NativeScript to recognize this new email-validator npm module, type `Ctrl+C` in your terminal to kill the existing `tns livesync` watcher if it’s still running, and then use `tns run` to rebuild your application and deploy it to an emulator or device.\n\n```\ntns run ios --emulator\n```\n\nOr\n\n```\ntns run android --emulator\n```\n\nAfter the app deploys you can again run the `livesync` command to setup the watcher again.\n\n```\ntns livesync ios --emulator --watch\n```\n\nOr\n\n```\ntns livesync android --emulator --watch\n```\n\n</div>\n\n<div class=\"explain\">\n\nAfter your app launches again, if you attempt to register with an invalid email address, you should see an alert that prevents the submission:\n\n![](/docs/img/cli-getting-started/nativescript/chapter5/ios/1.png)\n![](/docs/img/cli-getting-started/nativescript/chapter5/android/1.png)\n\nIn general npm modules greatly expand the number of things you're able to do in your NativeScript apps. Need date and time formatting? Use [moment](https://www.npmjs.com/package/moment). Need utility functions for objects and arrays? Use [lodash](https://www.npmjs.com/package/lodash) or [underscore](https://www.npmjs.com/package/underscore). This code reuse benefit gets even more powerful when you bring NativeScript plugins into the picture.\n\n> **WARNING**: Not all npm modules work in NativeScript apps. Specifically, modules that depend on Node.js or browser APIs will not work, as those APIs do not exist in NativeScript. The NativeScript wiki contains a [list of some of the more popular npm modules that have been verified to work in NativeScript apps](https://github.com/NativeScript/NativeScript/wiki/supported-npm-modules).\n\n## 5.2: Using NativeScript plugins\n\nNativeScript plugins are npm modules that have the added ability to run native code and use iOS and Android frameworks. Because NativeScript plugins are just npm modules, a lot of the techniques you learned in the previous section still apply. The one big difference is in the command you use to install plugins. Let's look at how it works by installing the NativeScript social share plugin.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Install the social sharing plugin\n</h4>\n\nReturn to your terminal, make sure you're still in the root of your app, and run the following command:\n\n```bash\ntns plugin add nativescript-social-share\n```\n\n</div>\n\n<div class=\"explain\">\n\nThe install process does the same thing that the `npm install` command does—including retrieving the module from npm, installing the module in `node_modules`, and saving the module as a dependency in your app's `package.json`—but the `tns plugin add` command additionally configures any native code that the plugin needs to use.\n\nFor example the [NativeScript push plugin](https://github.com/NativeScript/push-plugin) uses both iOS and Android SDKs, and the `tns plugin add` command takes care of installing those. The [NativeScript flashlight plugin](https://github.com/tjvantoll/nativescript-flashlight) needs permissions to use the camera on Android, and the `tns plugin add` command takes care of setting that up too.\n\nNow that you've installed the social share plugin, let's look at how to use it.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Use the social sharing plugin\n</h4>\n\nOpen `app/views/list/list.js` and add the following line at the top of the file, which requires the social share module you just installed:\n\n```javascript\nvar socialShare = require(\"nativescript-social-share\");\n```\n\nNext you have to build some UI that lets you share a grocery list. To do so, open `app/views/list/list.xml` and add the following code below the opening `<Page>` tag, and above the opening `<GridLayout>` tag.\n\n```xml\n<Page.actionBar>\n    <ActionBar title=\"Groceries\">\n        <ActionBar.actionItems>\n            <ActionItem text=\"Share\" tap=\"share\" ios.position=\"right\" />\n        </ActionBar.actionItems>\n    </ActionBar>\n</Page.actionBar>\n```\n\nThis code defines an [ActionBar](/ui/action-bar), which is a UI component that includes various menu items, enclosed in the `<ActionBar.actionItems>` tag. The `title` of the ActionBar lets you show page-specific titles.\n\n> **NOTE**: On iOS devices, `<ActionItem>`s are placed from left to right in sequence; you can override that (as the code above does) by providing an `ios.position` attribute.\n\nWith the module installed and required, and the UI in place, you can implement the `<ActionItem>`'s tap handler (`share()`) in the list page's code-behind file.\n\nTo do so, return to `list.js` and paste the following code at the bottom of the file:\n\n```javascript\nexports.share = function() {\n    var list = [];\n    var finalList = \"\";\n    for (var i = 0, size = groceryList.length; i < size ; i++) {\n        list.push(groceryList.getItem(i).name);\n    }\n    var listString = list.join(\", \").trim();\n    socialShare.shareText(listString);\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThis code takes the groceries from the grocery list view model, converts the data into a comma-separated string, and passes that string to the social share module's `shareText()` method.\n\n> **WARNING**: Because this section had you install a NativeScript plugin, you’ll have to rebuild your app one last time in order to test your changes. If you don’t remember how refer back to [chapter 5](chapter-5) for instructions.\n\nNow when you run the app, you'll see a new button at the top of the screen. When you tap it, the native iOS or Android sharing widget will show to let you post your groceries to your social networks, or send them via email, message, or any other method you prefer.\n\n![Social sharing widget on iOS](/docs/img/cli-getting-started/nativescript/chapter5/ios/2.gif)\n![Social sharing widget on Android](/docs/img/cli-getting-started/nativescript/chapter5/android/2.gif)\n\nPretty cool, huh? The ability to use npm modules greatly expands the number of things you're able to do in a NativeScript app. Need to compose emails in your app? Try out the [NativeScript email plugin](https://www.npmjs.com/package/nativescript-email). Need to use the clipboard in your app? Try out the [NativeScript clipboard plugin](https://www.npmjs.com/package/nativescript-clipboard).\n\nIf you're looking for NativeScript plugins start by searching both the [Telerik NativeScript Plugins Marketplace](http://plugins.telerik.com/nativescript) and our [community-curated list of plugins on npm](http://plugins.nativescript.rocks). If you don't find the plugin you need, you can [request the plugin on our ideas portal](https://nativescript.ideas.aha.io/), or you can take a stab at [creating the plugin yourself](https://docs.nativescript.org/plugins).\n\nBetween NativeScript modules, npm modules, and NativeScript plugins, the NativeScript framework provides a lot of functionality you can use to build your next app. However, we've yet to talk about NativeScript's most powerful feature: the ability to directly access iOS and Android APIs in JavaScript. Let's look at how it works.\n\n</div>\n","source":"tutorial/5.md","raw":"# Chapter 5—Plugins and npm Modules\n\nAs you build more complex apps, you'll likely run into functionality that is not implemented in the NativeScript modules. But no worries, as NativeScript lets you leverage [npm](https://www.npmjs.com/) (node package manager) to import npm modules into your apps. Alternately, you can install NativeScript plugins, which are simply npm modules that can access native code and use Android and iOS SDKs, if required. \n\nIn this chapter, you'll install and use an external email validator module to verify the format of email addresses as they are entered on the registration screen. Then, you'll add a NativeScript plugin, [NativeScript social share](https://www.npmjs.com/package/nativescript-social-share), to let users share their grocery lists using their device's native sharing widget.\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [5.1: Using npm modules](#51-using-npm-modules)\n- [5.2: Using NativeScript plugins](#52-using-nativescript-plugins)\n\n## 5.1: Using npm modules\n\nIt would be nice to be able to make sure people are entering well-formatted email addresses into your app on the registration screen. You could write this functionality yourself, but validating email addresses is [surprisingly tricky](http://stackoverflow.com/questions/46155/validate-email-address-in-javascript), and it's a lot easier to use one of many npm modules that already provide this validation. For Groceries let's see how to add this [email-validator module](https://www.npmjs.com/package/email-validator) to test for valid addresses.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Install the email validator module</h4>\n\nReturn to your terminal and make sure that you are working in the root directory in your Groceries project folder, a.k.a. here:\n\n<div class=\"no-copy-button\"></div>\n\n```\nsample-Groceries <----------------\n    ├── app\n    │   └── ...\n    ├── package.json\n    └── platforms\n        ├── android\n        └── ios\n```\n\nFrom the root directory install the email-validator module:\n\n```\nnpm install email-validator --save\n```\n\n</div>\n\n<div class=\"explain\">\n\nThe install process does a few things in the background. First, because you added the `--save` flag, npm records this dependency in your app's `package.json`. If you open your `package.json` you should see `\"email-validator\"` in your app's `\"dependencies\"` array.\n\n```javascript\n\"dependencies\": {\n  \"email-validator\": \"^1.0.4\"\n}\n```\n\nThe npm CLI also creates a `node_modules` folder in the root of your app. This folder contains the code for the email-validator module, which is a bit of validation logic in `node_modules/email_validator/index.js`. \n\n> **TIP**: By saving your app's npm dependencies in your `package.json` file, you can always regenerate your `node_modules` folder by running `npm install`. Because of this, it's a common practice to exclude the `node_modules` folder from source control. The Groceries app uses git for source control, and as such includes `node_modules/` in its `.gitignore`.\n\nNow that you have the module installed let's look at how to use it.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Use the email validator module\n</h4>\n\nOpen `/app/shared/view-models/user-view-model.js` and add the following line at the top of the file:\n\n```javascript\nvar validator = require(\"email-validator\");\n```\n\n> **NOTE**: The NativeScript framework's `require()` method is configured to look at the `\"main\"` value in an npm module's `package.json` file. In the case of this module, the `\"main\"` value is `\"index.js\"`. Therefore, when you run `require(\"email-validator\")`, you're actually requiring the file at `node_modules/email_validator/index.js`. You could also type `require(\"email-validator/index\")` to retrieve the same file.\n\nTo make use of this validator, add a function to `user-view-model.js`, right above the line `return viewModel`:\n\n```javascript\nviewModel.isValidEmail = function() {\n    var email = this.get(\"email\");\n    return validator.validate(email);\n};\n```\n\nThen, edit the registration function in `app/views/register/register.js` to trap any malformed email addresses:\n\n```javascript\nexports.register = function() {\n    if (user.isValidEmail()) {\n        completeRegistration();\n    } else {\n        dialogsModule.alert({\n            message: \"Enter a valid email address.\",\n            okButtonText: \"OK\"\n        });\n    }\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nIn this function, the user submits an email and password, and the value is sent to the view model for validation. If it passes, registration can proceed, otherwise you show an alert. However in order to test out this change you’ll need to do one more thing.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Rebuild your app\n</h4>\n\nAs we mentioned in chapter 1, although the `tns livesync` command is smart enough to reload your app for most changes you make to your app, certain changes require a full build—most notably, changes to native files in `app/App_Resources`, new modules installed with `npm install`, and new NativeScript plugins.\n\nFor NativeScript to recognize this new email-validator npm module, type `Ctrl+C` in your terminal to kill the existing `tns livesync` watcher if it’s still running, and then use `tns run` to rebuild your application and deploy it to an emulator or device.\n\n```\ntns run ios --emulator\n```\n\nOr\n\n```\ntns run android --emulator\n```\n\nAfter the app deploys you can again run the `livesync` command to setup the watcher again.\n\n```\ntns livesync ios --emulator --watch\n```\n\nOr\n\n```\ntns livesync android --emulator --watch\n```\n\n</div>\n\n<div class=\"explain\">\n\nAfter your app launches again, if you attempt to register with an invalid email address, you should see an alert that prevents the submission:\n\n![](/docs/img/cli-getting-started/nativescript/chapter5/ios/1.png)\n![](/docs/img/cli-getting-started/nativescript/chapter5/android/1.png)\n\nIn general npm modules greatly expand the number of things you're able to do in your NativeScript apps. Need date and time formatting? Use [moment](https://www.npmjs.com/package/moment). Need utility functions for objects and arrays? Use [lodash](https://www.npmjs.com/package/lodash) or [underscore](https://www.npmjs.com/package/underscore). This code reuse benefit gets even more powerful when you bring NativeScript plugins into the picture.\n\n> **WARNING**: Not all npm modules work in NativeScript apps. Specifically, modules that depend on Node.js or browser APIs will not work, as those APIs do not exist in NativeScript. The NativeScript wiki contains a [list of some of the more popular npm modules that have been verified to work in NativeScript apps](https://github.com/NativeScript/NativeScript/wiki/supported-npm-modules).\n\n## 5.2: Using NativeScript plugins\n\nNativeScript plugins are npm modules that have the added ability to run native code and use iOS and Android frameworks. Because NativeScript plugins are just npm modules, a lot of the techniques you learned in the previous section still apply. The one big difference is in the command you use to install plugins. Let's look at how it works by installing the NativeScript social share plugin.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Install the social sharing plugin\n</h4>\n\nReturn to your terminal, make sure you're still in the root of your app, and run the following command:\n\n```bash\ntns plugin add nativescript-social-share\n```\n\n</div>\n\n<div class=\"explain\">\n\nThe install process does the same thing that the `npm install` command does—including retrieving the module from npm, installing the module in `node_modules`, and saving the module as a dependency in your app's `package.json`—but the `tns plugin add` command additionally configures any native code that the plugin needs to use.\n\nFor example the [NativeScript push plugin](https://github.com/NativeScript/push-plugin) uses both iOS and Android SDKs, and the `tns plugin add` command takes care of installing those. The [NativeScript flashlight plugin](https://github.com/tjvantoll/nativescript-flashlight) needs permissions to use the camera on Android, and the `tns plugin add` command takes care of setting that up too.\n\nNow that you've installed the social share plugin, let's look at how to use it.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Use the social sharing plugin\n</h4>\n\nOpen `app/views/list/list.js` and add the following line at the top of the file, which requires the social share module you just installed:\n\n```javascript\nvar socialShare = require(\"nativescript-social-share\");\n```\n\nNext you have to build some UI that lets you share a grocery list. To do so, open `app/views/list/list.xml` and add the following code below the opening `<Page>` tag, and above the opening `<GridLayout>` tag.\n\n```xml\n<Page.actionBar>\n    <ActionBar title=\"Groceries\">\n        <ActionBar.actionItems>\n            <ActionItem text=\"Share\" tap=\"share\" ios.position=\"right\" />\n        </ActionBar.actionItems>\n    </ActionBar>\n</Page.actionBar>\n```\n\nThis code defines an [ActionBar](/ui/action-bar), which is a UI component that includes various menu items, enclosed in the `<ActionBar.actionItems>` tag. The `title` of the ActionBar lets you show page-specific titles.\n\n> **NOTE**: On iOS devices, `<ActionItem>`s are placed from left to right in sequence; you can override that (as the code above does) by providing an `ios.position` attribute.\n\nWith the module installed and required, and the UI in place, you can implement the `<ActionItem>`'s tap handler (`share()`) in the list page's code-behind file.\n\nTo do so, return to `list.js` and paste the following code at the bottom of the file:\n\n```javascript\nexports.share = function() {\n    var list = [];\n    var finalList = \"\";\n    for (var i = 0, size = groceryList.length; i < size ; i++) {\n        list.push(groceryList.getItem(i).name);\n    }\n    var listString = list.join(\", \").trim();\n    socialShare.shareText(listString);\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThis code takes the groceries from the grocery list view model, converts the data into a comma-separated string, and passes that string to the social share module's `shareText()` method.\n\n> **WARNING**: Because this section had you install a NativeScript plugin, you’ll have to rebuild your app one last time in order to test your changes. If you don’t remember how refer back to [chapter 5](chapter-5) for instructions.\n\nNow when you run the app, you'll see a new button at the top of the screen. When you tap it, the native iOS or Android sharing widget will show to let you post your groceries to your social networks, or send them via email, message, or any other method you prefer.\n\n![Social sharing widget on iOS](/docs/img/cli-getting-started/nativescript/chapter5/ios/2.gif)\n![Social sharing widget on Android](/docs/img/cli-getting-started/nativescript/chapter5/android/2.gif)\n\nPretty cool, huh? The ability to use npm modules greatly expands the number of things you're able to do in a NativeScript app. Need to compose emails in your app? Try out the [NativeScript email plugin](https://www.npmjs.com/package/nativescript-email). Need to use the clipboard in your app? Try out the [NativeScript clipboard plugin](https://www.npmjs.com/package/nativescript-clipboard).\n\nIf you're looking for NativeScript plugins start by searching both the [Telerik NativeScript Plugins Marketplace](http://plugins.telerik.com/nativescript) and our [community-curated list of plugins on npm](http://plugins.nativescript.rocks). If you don't find the plugin you need, you can [request the plugin on our ideas portal](https://nativescript.ideas.aha.io/), or you can take a stab at [creating the plugin yourself](https://docs.nativescript.org/plugins).\n\nBetween NativeScript modules, npm modules, and NativeScript plugins, the NativeScript framework provides a lot of functionality you can use to build your next app. However, we've yet to talk about NativeScript's most powerful feature: the ability to directly access iOS and Android APIs in JavaScript. Let's look at how it works.\n\n</div>\n","date":"2016-08-26T21:05:54.524Z","updated":"2016-08-26T21:05:54.524Z","path":"tutorial/5.html","title":"","comments":1,"layout":"page","_id":"cisn95c7s000owsl0hqsn838w","content":"<h1 id=\"Chapter-5—Plugins-and-npm-Modules\"><a href=\"#Chapter-5—Plugins-and-npm-Modules\" class=\"headerlink\" title=\"Chapter 5—Plugins and npm Modules\"></a>Chapter 5—Plugins and npm Modules</h1><p>As you build more complex apps, you’ll likely run into functionality that is not implemented in the NativeScript modules. But no worries, as NativeScript lets you leverage <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">npm</a> (node package manager) to import npm modules into your apps. Alternately, you can install NativeScript plugins, which are simply npm modules that can access native code and use Android and iOS SDKs, if required. </p>\n<p>In this chapter, you’ll install and use an external email validator module to verify the format of email addresses as they are entered on the registration screen. Then, you’ll add a NativeScript plugin, <a href=\"https://www.npmjs.com/package/nativescript-social-share\" target=\"_blank\" rel=\"external\">NativeScript social share</a>, to let users share their grocery lists using their device’s native sharing widget.</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#51-using-npm-modules\">5.1: Using npm modules</a>\n- <a href=\"#52-using-nativescript-plugins\">5.2: Using NativeScript plugins</a>\n\n## 5.1: Using npm modules\n\nIt would be nice to be able to make sure people are entering well-formatted email addresses into your app on the registration screen. You could write this functionality yourself, but validating email addresses is <a href=\"http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\" target=\"_blank\" rel=\"external\">surprisingly tricky</a>, and it’s a lot easier to use one of many npm modules that already provide this validation. For Groceries let’s see how to add this <a href=\"https://www.npmjs.com/package/email-validator\" target=\"_blank\" rel=\"external\">email-validator module</a> to test for valid addresses.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Install the email validator module</h4>\n\nReturn to your terminal and make sure that you are working in the root directory in your Groceries project folder, a.k.a. here:\n\n<div class=\"no-copy-button\"></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sample-Groceries &lt;----------------</div><div class=\"line\">    ├── app</div><div class=\"line\">    │   └── ...</div><div class=\"line\">    ├── package.json</div><div class=\"line\">    └── platforms</div><div class=\"line\">        ├── android</div><div class=\"line\">        └── ios</div></pre></td></tr></table></figure>\n<p>From the root directory install the email-validator module:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install email-validator --save</div></pre></td></tr></table></figure>\n<p></p></div><p></p>\n<div class=\"explain\">\n\nThe install process does a few things in the background. First, because you added the <code>--save</code> flag, npm records this dependency in your app’s <code>package.json</code>. If you open your <code>package.json</code> you should see <code>&quot;email-validator&quot;</code> in your app’s <code>&quot;dependencies&quot;</code> array.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"email-validator\"</span>: <span class=\"string\">\"^1.0.4\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\nThe npm CLI also creates a <code>node_modules</code> folder in the root of your app. This folder contains the code for the email-validator module, which is a bit of validation logic in <code>node_modules/email_validator/index.js</code>. \n\n&gt; <strong>TIP</strong>: By saving your app’s npm dependencies in your <code>package.json</code> file, you can always regenerate your <code>node_modules</code> folder by running <code>npm install</code>. Because of this, it’s a common practice to exclude the <code>node_modules</code> folder from source control. The Groceries app uses git for source control, and as such includes <code>node_modules/</code> in its <code>.gitignore</code>.\n\nNow that you have the module installed let’s look at how to use it.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Use the email validator module\n</h4>\n\nOpen <code>/app/shared/view-models/user-view-model.js</code> and add the following line at the top of the file:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> validator = <span class=\"built_in\">require</span>(<span class=\"string\">\"email-validator\"</span>);</div></pre></td></tr></table></figure>\n\n&gt; <strong>NOTE</strong>: The NativeScript framework’s <code>require()</code> method is configured to look at the <code>&quot;main&quot;</code> value in an npm module’s <code>package.json</code> file. In the case of this module, the <code>&quot;main&quot;</code> value is <code>&quot;index.js&quot;</code>. Therefore, when you run <code>require(&quot;email-validator&quot;)</code>, you’re actually requiring the file at <code>node_modules/email_validator/index.js</code>. You could also type <code>require(&quot;email-validator/index&quot;)</code> to retrieve the same file.\n\nTo make use of this validator, add a function to <code>user-view-model.js</code>, right above the line <code>return viewModel</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.isValidEmail = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> email = <span class=\"keyword\">this</span>.get(<span class=\"string\">\"email\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> validator.validate(email);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\nThen, edit the registration function in <code>app/views/register/register.js</code> to trap any malformed email addresses:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (user.isValidEmail()) &#123;</div><div class=\"line\">        completeRegistration();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dialogsModule.alert(&#123;</div><div class=\"line\">            message: <span class=\"string\">\"Enter a valid email address.\"</span>,</div><div class=\"line\">            okButtonText: <span class=\"string\">\"OK\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nIn this function, the user submits an email and password, and the value is sent to the view model for validation. If it passes, registration can proceed, otherwise you show an alert. However in order to test out this change you’ll need to do one more thing.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Rebuild your app\n</h4>\n\nAs we mentioned in chapter 1, although the <code>tns livesync</code> command is smart enough to reload your app for most changes you make to your app, certain changes require a full build—most notably, changes to native files in <code>app/App_Resources</code>, new modules installed with <code>npm install</code>, and new NativeScript plugins.\n\nFor NativeScript to recognize this new email-validator npm module, type <code>Ctrl+C</code> in your terminal to kill the existing <code>tns livesync</code> watcher if it’s still running, and then use <code>tns run</code> to rebuild your application and deploy it to an emulator or device.\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run ios --emulator</div></pre></td></tr></table></figure>\n\nOr\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run android --emulator</div></pre></td></tr></table></figure>\n\nAfter the app deploys you can again run the <code>livesync</code> command to setup the watcher again.\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync ios --emulator --watch</div></pre></td></tr></table></figure>\n\nOr\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync android --emulator --watch</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nAfter your app launches again, if you attempt to register with an invalid email address, you should see an alert that prevents the submission:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter5/ios/1.png\" alt=\"\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter5/android/1.png\" alt=\"\">\n\nIn general npm modules greatly expand the number of things you’re able to do in your NativeScript apps. Need date and time formatting? Use <a href=\"https://www.npmjs.com/package/moment\" target=\"_blank\" rel=\"external\">moment</a>. Need utility functions for objects and arrays? Use <a href=\"https://www.npmjs.com/package/lodash\" target=\"_blank\" rel=\"external\">lodash</a> or <a href=\"https://www.npmjs.com/package/underscore\" target=\"_blank\" rel=\"external\">underscore</a>. This code reuse benefit gets even more powerful when you bring NativeScript plugins into the picture.\n\n&gt; <strong>WARNING</strong>: Not all npm modules work in NativeScript apps. Specifically, modules that depend on Node.js or browser APIs will not work, as those APIs do not exist in NativeScript. The NativeScript wiki contains a <a href=\"https://github.com/NativeScript/NativeScript/wiki/supported-npm-modules\" target=\"_blank\" rel=\"external\">list of some of the more popular npm modules that have been verified to work in NativeScript apps</a>.\n\n## 5.2: Using NativeScript plugins\n\nNativeScript plugins are npm modules that have the added ability to run native code and use iOS and Android frameworks. Because NativeScript plugins are just npm modules, a lot of the techniques you learned in the previous section still apply. The one big difference is in the command you use to install plugins. Let’s look at how it works by installing the NativeScript social share plugin.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Install the social sharing plugin\n</h4>\n\nReturn to your terminal, make sure you’re still in the root of your app, and run the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add nativescript-social-share</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThe install process does the same thing that the <code>npm install</code> command does—including retrieving the module from npm, installing the module in <code>node_modules</code>, and saving the module as a dependency in your app’s <code>package.json</code>—but the <code>tns plugin add</code> command additionally configures any native code that the plugin needs to use.\n\nFor example the <a href=\"https://github.com/NativeScript/push-plugin\" target=\"_blank\" rel=\"external\">NativeScript push plugin</a> uses both iOS and Android SDKs, and the <code>tns plugin add</code> command takes care of installing those. The <a href=\"https://github.com/tjvantoll/nativescript-flashlight\" target=\"_blank\" rel=\"external\">NativeScript flashlight plugin</a> needs permissions to use the camera on Android, and the <code>tns plugin add</code> command takes care of setting that up too.\n\nNow that you’ve installed the social share plugin, let’s look at how to use it.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Use the social sharing plugin\n</h4>\n\nOpen <code>app/views/list/list.js</code> and add the following line at the top of the file, which requires the social share module you just installed:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> socialShare = <span class=\"built_in\">require</span>(<span class=\"string\">\"nativescript-social-share\"</span>);</div></pre></td></tr></table></figure>\n\nNext you have to build some UI that lets you share a grocery list. To do so, open <code>app/views/list/list.xml</code> and add the following code below the opening <code>&lt;Page&gt;</code> tag, and above the opening <code>&lt;GridLayout&gt;</code> tag.\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Groceries\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ActionBar.actionItems</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ActionItem</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Share\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"share\"</span> <span class=\"attr\">ios.position</span>=<span class=\"string\">\"right\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ActionBar.actionItems</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n\nThis code defines an <a href=\"/ui/action-bar\">ActionBar</a>, which is a UI component that includes various menu items, enclosed in the <code>&lt;ActionBar.actionItems&gt;</code> tag. The <code>title</code> of the ActionBar lets you show page-specific titles.\n\n&gt; <strong>NOTE</strong>: On iOS devices, <code>&lt;ActionItem&gt;</code>s are placed from left to right in sequence; you can override that (as the code above does) by providing an <code>ios.position</code> attribute.\n\nWith the module installed and required, and the UI in place, you can implement the <code>&lt;ActionItem&gt;</code>‘s tap handler (<code>share()</code>) in the list page’s code-behind file.\n\nTo do so, return to <code>list.js</code> and paste the following code at the bottom of the file:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.share = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> list = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> finalList = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, size = groceryList.length; i &lt; size ; i++) &#123;</div><div class=\"line\">        list.push(groceryList.getItem(i).name);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> listString = list.join(<span class=\"string\">\", \"</span>).trim();</div><div class=\"line\">    socialShare.shareText(listString);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThis code takes the groceries from the grocery list view model, converts the data into a comma-separated string, and passes that string to the social share module’s <code>shareText()</code> method.\n\n&gt; <strong>WARNING</strong>: Because this section had you install a NativeScript plugin, you’ll have to rebuild your app one last time in order to test your changes. If you don’t remember how refer back to <a href=\"chapter-5\">chapter 5</a> for instructions.\n\nNow when you run the app, you’ll see a new button at the top of the screen. When you tap it, the native iOS or Android sharing widget will show to let you post your groceries to your social networks, or send them via email, message, or any other method you prefer.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter5/ios/2.gif\" alt=\"Social sharing widget on iOS\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter5/android/2.gif\" alt=\"Social sharing widget on Android\">\n\nPretty cool, huh? The ability to use npm modules greatly expands the number of things you’re able to do in a NativeScript app. Need to compose emails in your app? Try out the <a href=\"https://www.npmjs.com/package/nativescript-email\" target=\"_blank\" rel=\"external\">NativeScript email plugin</a>. Need to use the clipboard in your app? Try out the <a href=\"https://www.npmjs.com/package/nativescript-clipboard\" target=\"_blank\" rel=\"external\">NativeScript clipboard plugin</a>.\n\nIf you’re looking for NativeScript plugins start by searching both the <a href=\"http://plugins.telerik.com/nativescript\" target=\"_blank\" rel=\"external\">Telerik NativeScript Plugins Marketplace</a> and our <a href=\"http://plugins.nativescript.rocks\" target=\"_blank\" rel=\"external\">community-curated list of plugins on npm</a>. If you don’t find the plugin you need, you can <a href=\"https://nativescript.ideas.aha.io/\" target=\"_blank\" rel=\"external\">request the plugin on our ideas portal</a>, or you can take a stab at <a href=\"https://docs.nativescript.org/plugins\">creating the plugin yourself</a>.\n\nBetween NativeScript modules, npm modules, and NativeScript plugins, the NativeScript framework provides a lot of functionality you can use to build your next app. However, we’ve yet to talk about NativeScript’s most powerful feature: the ability to directly access iOS and Android APIs in JavaScript. Let’s look at how it works.\n\n</div>\n","excerpt":"","more":"<h1 id=\"Chapter-5—Plugins-and-npm-Modules\"><a href=\"#Chapter-5—Plugins-and-npm-Modules\" class=\"headerlink\" title=\"Chapter 5—Plugins and npm Modules\"></a>Chapter 5—Plugins and npm Modules</h1><p>As you build more complex apps, you’ll likely run into functionality that is not implemented in the NativeScript modules. But no worries, as NativeScript lets you leverage <a href=\"https://www.npmjs.com/\">npm</a> (node package manager) to import npm modules into your apps. Alternately, you can install NativeScript plugins, which are simply npm modules that can access native code and use Android and iOS SDKs, if required. </p>\n<p>In this chapter, you’ll install and use an external email validator module to verify the format of email addresses as they are entered on the registration screen. Then, you’ll add a NativeScript plugin, <a href=\"https://www.npmjs.com/package/nativescript-social-share\">NativeScript social share</a>, to let users share their grocery lists using their device’s native sharing widget.</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#51-using-npm-modules\">5.1: Using npm modules</a>\n- <a href=\"#52-using-nativescript-plugins\">5.2: Using NativeScript plugins</a>\n\n## 5.1: Using npm modules\n\nIt would be nice to be able to make sure people are entering well-formatted email addresses into your app on the registration screen. You could write this functionality yourself, but validating email addresses is <a href=\"http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\">surprisingly tricky</a>, and it’s a lot easier to use one of many npm modules that already provide this validation. For Groceries let’s see how to add this <a href=\"https://www.npmjs.com/package/email-validator\">email-validator module</a> to test for valid addresses.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Install the email validator module</h4>\n\nReturn to your terminal and make sure that you are working in the root directory in your Groceries project folder, a.k.a. here:\n\n<div class=\"no-copy-button\"></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sample-Groceries &lt;----------------</div><div class=\"line\">    ├── app</div><div class=\"line\">    │   └── ...</div><div class=\"line\">    ├── package.json</div><div class=\"line\">    └── platforms</div><div class=\"line\">        ├── android</div><div class=\"line\">        └── ios</div></pre></td></tr></table></figure>\n<p>From the root directory install the email-validator module:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install email-validator --save</div></pre></td></tr></table></figure>\n<p></div></p>\n<div class=\"explain\">\n\nThe install process does a few things in the background. First, because you added the <code>--save</code> flag, npm records this dependency in your app’s <code>package.json</code>. If you open your <code>package.json</code> you should see <code>&quot;email-validator&quot;</code> in your app’s <code>&quot;dependencies&quot;</code> array.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"email-validator\"</span>: <span class=\"string\">\"^1.0.4\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\nThe npm CLI also creates a <code>node_modules</code> folder in the root of your app. This folder contains the code for the email-validator module, which is a bit of validation logic in <code>node_modules/email_validator/index.js</code>. \n\n&gt; <strong>TIP</strong>: By saving your app’s npm dependencies in your <code>package.json</code> file, you can always regenerate your <code>node_modules</code> folder by running <code>npm install</code>. Because of this, it’s a common practice to exclude the <code>node_modules</code> folder from source control. The Groceries app uses git for source control, and as such includes <code>node_modules/</code> in its <code>.gitignore</code>.\n\nNow that you have the module installed let’s look at how to use it.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Use the email validator module\n</h4>\n\nOpen <code>/app/shared/view-models/user-view-model.js</code> and add the following line at the top of the file:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> validator = <span class=\"built_in\">require</span>(<span class=\"string\">\"email-validator\"</span>);</div></pre></td></tr></table></figure>\n\n&gt; <strong>NOTE</strong>: The NativeScript framework’s <code>require()</code> method is configured to look at the <code>&quot;main&quot;</code> value in an npm module’s <code>package.json</code> file. In the case of this module, the <code>&quot;main&quot;</code> value is <code>&quot;index.js&quot;</code>. Therefore, when you run <code>require(&quot;email-validator&quot;)</code>, you’re actually requiring the file at <code>node_modules/email_validator/index.js</code>. You could also type <code>require(&quot;email-validator/index&quot;)</code> to retrieve the same file.\n\nTo make use of this validator, add a function to <code>user-view-model.js</code>, right above the line <code>return viewModel</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.isValidEmail = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> email = <span class=\"keyword\">this</span>.get(<span class=\"string\">\"email\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> validator.validate(email);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\nThen, edit the registration function in <code>app/views/register/register.js</code> to trap any malformed email addresses:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (user.isValidEmail()) &#123;</div><div class=\"line\">        completeRegistration();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dialogsModule.alert(&#123;</div><div class=\"line\">            message: <span class=\"string\">\"Enter a valid email address.\"</span>,</div><div class=\"line\">            okButtonText: <span class=\"string\">\"OK\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nIn this function, the user submits an email and password, and the value is sent to the view model for validation. If it passes, registration can proceed, otherwise you show an alert. However in order to test out this change you’ll need to do one more thing.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Rebuild your app\n</h4>\n\nAs we mentioned in chapter 1, although the <code>tns livesync</code> command is smart enough to reload your app for most changes you make to your app, certain changes require a full build—most notably, changes to native files in <code>app/App_Resources</code>, new modules installed with <code>npm install</code>, and new NativeScript plugins.\n\nFor NativeScript to recognize this new email-validator npm module, type <code>Ctrl+C</code> in your terminal to kill the existing <code>tns livesync</code> watcher if it’s still running, and then use <code>tns run</code> to rebuild your application and deploy it to an emulator or device.\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run ios --emulator</div></pre></td></tr></table></figure>\n\nOr\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns run android --emulator</div></pre></td></tr></table></figure>\n\nAfter the app deploys you can again run the <code>livesync</code> command to setup the watcher again.\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync ios --emulator --watch</div></pre></td></tr></table></figure>\n\nOr\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns livesync android --emulator --watch</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nAfter your app launches again, if you attempt to register with an invalid email address, you should see an alert that prevents the submission:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter5/ios/1.png\" alt=\"\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter5/android/1.png\" alt=\"\">\n\nIn general npm modules greatly expand the number of things you’re able to do in your NativeScript apps. Need date and time formatting? Use <a href=\"https://www.npmjs.com/package/moment\">moment</a>. Need utility functions for objects and arrays? Use <a href=\"https://www.npmjs.com/package/lodash\">lodash</a> or <a href=\"https://www.npmjs.com/package/underscore\">underscore</a>. This code reuse benefit gets even more powerful when you bring NativeScript plugins into the picture.\n\n&gt; <strong>WARNING</strong>: Not all npm modules work in NativeScript apps. Specifically, modules that depend on Node.js or browser APIs will not work, as those APIs do not exist in NativeScript. The NativeScript wiki contains a <a href=\"https://github.com/NativeScript/NativeScript/wiki/supported-npm-modules\">list of some of the more popular npm modules that have been verified to work in NativeScript apps</a>.\n\n## 5.2: Using NativeScript plugins\n\nNativeScript plugins are npm modules that have the added ability to run native code and use iOS and Android frameworks. Because NativeScript plugins are just npm modules, a lot of the techniques you learned in the previous section still apply. The one big difference is in the command you use to install plugins. Let’s look at how it works by installing the NativeScript social share plugin.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Install the social sharing plugin\n</h4>\n\nReturn to your terminal, make sure you’re still in the root of your app, and run the following command:\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns plugin add nativescript-social-share</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThe install process does the same thing that the <code>npm install</code> command does—including retrieving the module from npm, installing the module in <code>node_modules</code>, and saving the module as a dependency in your app’s <code>package.json</code>—but the <code>tns plugin add</code> command additionally configures any native code that the plugin needs to use.\n\nFor example the <a href=\"https://github.com/NativeScript/push-plugin\">NativeScript push plugin</a> uses both iOS and Android SDKs, and the <code>tns plugin add</code> command takes care of installing those. The <a href=\"https://github.com/tjvantoll/nativescript-flashlight\">NativeScript flashlight plugin</a> needs permissions to use the camera on Android, and the <code>tns plugin add</code> command takes care of setting that up too.\n\nNow that you’ve installed the social share plugin, let’s look at how to use it.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Use the social sharing plugin\n</h4>\n\nOpen <code>app/views/list/list.js</code> and add the following line at the top of the file, which requires the social share module you just installed:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> socialShare = <span class=\"built_in\">require</span>(<span class=\"string\">\"nativescript-social-share\"</span>);</div></pre></td></tr></table></figure>\n\nNext you have to build some UI that lets you share a grocery list. To do so, open <code>app/views/list/list.xml</code> and add the following code below the opening <code>&lt;Page&gt;</code> tag, and above the opening <code>&lt;GridLayout&gt;</code> tag.\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Groceries\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ActionBar.actionItems</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ActionItem</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Share\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"share\"</span> <span class=\"attr\">ios.position</span>=<span class=\"string\">\"right\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ActionBar.actionItems</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n\nThis code defines an <a href=\"/ui/action-bar\">ActionBar</a>, which is a UI component that includes various menu items, enclosed in the <code>&lt;ActionBar.actionItems&gt;</code> tag. The <code>title</code> of the ActionBar lets you show page-specific titles.\n\n&gt; <strong>NOTE</strong>: On iOS devices, <code>&lt;ActionItem&gt;</code>s are placed from left to right in sequence; you can override that (as the code above does) by providing an <code>ios.position</code> attribute.\n\nWith the module installed and required, and the UI in place, you can implement the <code>&lt;ActionItem&gt;</code>‘s tap handler (<code>share()</code>) in the list page’s code-behind file.\n\nTo do so, return to <code>list.js</code> and paste the following code at the bottom of the file:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.share = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> list = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> finalList = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, size = groceryList.length; i &lt; size ; i++) &#123;</div><div class=\"line\">        list.push(groceryList.getItem(i).name);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> listString = list.join(<span class=\"string\">\", \"</span>).trim();</div><div class=\"line\">    socialShare.shareText(listString);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThis code takes the groceries from the grocery list view model, converts the data into a comma-separated string, and passes that string to the social share module’s <code>shareText()</code> method.\n\n&gt; <strong>WARNING</strong>: Because this section had you install a NativeScript plugin, you’ll have to rebuild your app one last time in order to test your changes. If you don’t remember how refer back to <a href=\"chapter-5\">chapter 5</a> for instructions.\n\nNow when you run the app, you’ll see a new button at the top of the screen. When you tap it, the native iOS or Android sharing widget will show to let you post your groceries to your social networks, or send them via email, message, or any other method you prefer.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter5/ios/2.gif\" alt=\"Social sharing widget on iOS\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter5/android/2.gif\" alt=\"Social sharing widget on Android\">\n\nPretty cool, huh? The ability to use npm modules greatly expands the number of things you’re able to do in a NativeScript app. Need to compose emails in your app? Try out the <a href=\"https://www.npmjs.com/package/nativescript-email\">NativeScript email plugin</a>. Need to use the clipboard in your app? Try out the <a href=\"https://www.npmjs.com/package/nativescript-clipboard\">NativeScript clipboard plugin</a>.\n\nIf you’re looking for NativeScript plugins start by searching both the <a href=\"http://plugins.telerik.com/nativescript\">Telerik NativeScript Plugins Marketplace</a> and our <a href=\"http://plugins.nativescript.rocks\">community-curated list of plugins on npm</a>. If you don’t find the plugin you need, you can <a href=\"https://nativescript.ideas.aha.io/\">request the plugin on our ideas portal</a>, or you can take a stab at <a href=\"https://docs.nativescript.org/plugins\">creating the plugin yourself</a>.\n\nBetween NativeScript modules, npm modules, and NativeScript plugins, the NativeScript framework provides a lot of functionality you can use to build your next app. However, we’ve yet to talk about NativeScript’s most powerful feature: the ability to directly access iOS and Android APIs in JavaScript. Let’s look at how it works.\n\n</div>\n"},{"_content":"# Chapter 2—Building the UI\n\nBefore you start coding the Groceries app it's important to understand a NativeScript app's folder structure. It'll help you understand where to place new files, as well as a bit of what's going on with NativeScript under the hood.\n\nGo ahead and open your app's `sample-Groceries` folder in your text editor of choice and let's dig in.\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [2.1: Directory structure](#21-directory-structure)\n- [2.2: Adding UI components](#22-adding-ui-components)\n- [2.3: Layouts](#23-layouts)\n- [2.4: CSS](#24-css)\n- [2.5: Images](#25-images)\n\n## 2.1: Directory structure\n\nTo keep things simple, let's start by looking at the outer structure of the Groceries app:\n\n```\n.\n└── sample-Groceries\n    ├── app\n    │   └── ...\n    ├── node_modules\n    │   └── tns-core-modules\n    ├── package.json\n    └── platforms\n        ├── android\n        └── ios\n```\n\nHere's what these various files and folders do:\n\n- **app**: This folder contains all the development resources you need to build your app. You'll be spending most of your time editing the files in here.\n- **node_modules**: This folder contains your app's npm module dependencies. All new NativeScript projects start with a single dependency on tns-core-modules.\n- **node_modules/tns-core-modules**: This folder contains your app's NativeScript modules, which are a series of NativeScript-provided JavaScript modules you'll use to build your app. Each module contains the platform-specific code needed to implement some feature—the camera, http calls, the file system, and so forth—exposed through a platform-agnostic API (e.g. `camera.takePicture()`). We'll look at some examples momentarily.\n- **package.json**: This file contains your app's configuration details, such as your app id, the version of NativeScript you're using, and also which npm modules your app uses. We'll take a closer look at how to use this file when we talk about using npm modules in [chapter 5](chapter5).\n- **platforms**: This folder contains the platform-specific code NativeScript needs to build native iOS and Android apps. For example in the `android` folder you'll find things like your project's `AndroidManifest.xml` and .apk executable files. Similarly, the `ios` folder contains the Groceries' Xcode project and .ipa executables. Note, users on Windows machines will not have an `ios` folder.\n\nThe NativeScript CLI manages the `platforms` folder for you as you develop and run your app; therefore, it's a best practice to treat the `platforms` folder as generated code. The Groceries app includes the `platforms` folder in its [`.gitignore`](https://github.com/NativeScript/sample-Groceries/blob/master/.gitignore) to exclude its files from source control.\n\nNext, let's dig into the `app` folder, as that's where you'll be spending the majority of your time.\n\n```\n.\n└── sample-Groceries\n    ├── app\n    │   ├── App_Resources\n    │   │   ├── Android\n    │   │   └── iOS\n    │   ├── shared\n    │   │   └── ...\n    │   ├── views\n    │   │   └── login\n    │   │       ├── login.js\n    │   │       └── login.xml\n    │   ├── app.css\n    │   ├── app.js\n    │   └── ...\n    └── ...\n```\nHere's what these various files and folders do:\n\n- **App_Resources**: This folder contains platform-specific resources such as icons, splash screens, and configuration files. The NativeScript CLI takes care of injecting these resources into the appropriate places in the `platforms` folder when you execute `tns run`.\n- **shared**: This folder, specific to the Groceries app, contains any files you need to share across views in your app. In the Groceries app, you'll find a few view model objects and a `config.js` file used to share configuration variables like API keys.\n- **views**: This folder contains the code to build your app's views, each of which will have a subfolder in `views`. Each view is made up of an xml file, a JavaScript file, and an optional CSS file. The groceries app contains three folders for its three views.\n- **app.css**: This file contains global styles for your app. We'll dig into app styling in [chapter 2.4](#24-css).\n- **app.js**: This file sets up your application's starting module and initializes the app.\n\nLet's start with `app/app.js`, as it's the starting point for NativeScript apps. Your `app.js` contains the two lines below: \n\n```javascript\nvar applicationModule = require(\"application\");\napplicationModule.start({ moduleName: \"views/login/login\" });\n```\n\nHere, you're requiring, or importing, the [NativeScript application module](). Then, you call its `start()` method with the starting screen of your app (the login screen), which lives in your app's `views/login` folder.\n\n> **TIP**: JavaScript modules in NativeScript follow the [CommonJS specification](http://wiki.commonjs.org/wiki/CommonJS). This means you can use the [`require()` method](http://wiki.commonjs.org/wiki/Modules/1.1#Module_Context) to import modules, as is done above, as well as use the `export` keyword to expose a module's properties and methods, which we'll look at later in this chapter. These are the same constructs Node.js uses for JavaScript modules, so if you know how to use Node.js modules, you already know how to use NativeScript modules.\n\nNow that your app is ready for development, let's add some UI components to make your login screen show more than some basic text.\n\n## 2.2: Adding UI components\n\nLet's dig into the files used to create your app's UI, which reside in the `app/views` folder. Each folder in `app/views` contains the code for one of the three pages in Groceries: `list`, `login`, and `register`. If you look in the `app/views/login` folder, you'll see three files: `login.css`, `login.js`, and the `login.xml` file we updated in the previous chapter. When you open `login.xml` again you should see the following code:\n\n```xml\n<Page>\n    <Label text=\"hello NativeScript\" />\n</Page>\n```\n\nThis page currently contains two UI components: a `<Page>` and a `<Label>`. To make this page look more like a login page, let's add a few additional components, namely two `<TextField>` elements and two `<Button>` elements.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add UI components to <code>login.xml</code></h4>\n\nOpen `app/views/login/login.xml` and replace the existing `<Label>` with the following code:\n\n```xml\n<TextField hint=\"Email Address\" keyboardType=\"email\" autocorrect=\"false\" autocapitalizationType=\"none\" />\n<TextField hint=\"Password\" secure=\"true\" />\n\n<Button text=\"Sign in\" />\n<Button text=\"Sign up for Groceries\" />\n```\n\n</div>\n\n<div class=\"explain\">\n\nNativeScript UI components provide attributes to let you configure their behavior and appearance. The code you just added uses the following attributes:\n\n- `<TextField>`\n    - `hint`: Shows placeholder text that tells the user what to type.\n    - `keyboardType`: The type of keyboard to present to the user for input. `keyboardType=\"email\"` shows a keyboard optimized for entering email addresses. NativeScript currently supports [five types of keyboards](/ui/keyboard.html) for text fields.\n    - `autocorrect`: A boolean attribute that determines whether the mobile operating system should autocorrect user input. In the case of email address text fields, the autocorrect behavior is undesirable.\n    - `autocapitalizationType`: Determines how the operating system should autocapitalize user input. `autocapitalizationType=\"none\"` turns autocapitalization off altogether. NativeScript supports [four autocapitalization types](http://docs.nativescript.org/api-reference/modules/_ui_enums_.autocapitalizationtype.html) on text fields.\n    - `secure`: A boolean attribute that determines whether the TextField's text should be masked, which is commonly done on password fields.\n- `<Button>`\n    - `text`: Controls the text displayed within the button.\n\nAfter you [run your app](#development-workflow) with this change, you will see a single `<Button>` component on the screen:\n\n![login 1](/docs/img/cli-getting-started/nativescript/chapter2/ios/1.png)\n![login 1](/docs/img/cli-getting-started/nativescript/chapter2/android/1.png)\n\nCurrently you only see a single button because you need to tell NativeScript how to layout your page’s UI components. Let's look at how to use NativeScript layouts to arrange these components on the screen.\n\n> **TIP**: The NativeScript docs include a [full list of the UI components and attributes](/ui-with-xml) with which you can build your apps. You can even [build your own, custom UI components](/ui-with-xml#custom-components).\n\n## 2.3: Layouts \n\nNativeScript provides several different layout containers that allow you to place UI components precisely where you want them to appear. \n\n- The [Absolute Layout]() lets you position elements using explicit x and y coordinates. This is useful when you need to place elements in exact locations, for example showing an activity indicator widget in the top-left corner of your app.\n- The [Dock Layout]() is useful for placing UI elements at the outer edges of your app. For example, a container docked at the bottom of the screen would be a good location for an ad.\n- The [Grid Layout]() lets you divide your interface into a series of rows and columns, much like a `<table>` in HTML markup.\n- The [Stack Layout]() lets you stack child UI components either vertically or horizontally.\n- The [Wrap Layout]() lets child UI components flow from one row or column to the next when space is filled.\n\nFor your login screen, all you need is a simple `<StackLayout>` to stack the UI components on top of each other. In later sections, you'll use some of the more advanced layouts.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add a stack layout to the login screen</h4>\n\nIn `login.xml`, add a `<StackLayout>` component within the `<Page>` component. `login.xml` should look like this:\n\n```xml\n<Page>\n    <StackLayout orientation=\"vertical\">\n\n        <TextField hint=\"Email Address\" keyboardType=\"email\" autocorrect=\"false\" autocapitalizationType=\"none\" />\n        <TextField hint=\"Password\" secure=\"true\" />\n\n        <Button text=\"Sign in\" />\n        <Button text=\"Sign up for Groceries\" />\n\n    </StackLayout>\n</Page>\n```\n\n</div>\n\n<div class=\"explain\">\n\nThe stack layout is a UI component, and as such, it has attributes just like the `<TextField>` and `<Button>` components you used in the previous section. Here, the `orientation=\"vertical\"` attribute tells the stack layout to arrange its child components vertically.\n\nAfter you run your app with this change, you'll see that your login page's UI components stack up:\n\n![login 2](/docs/img/cli-getting-started/nativescript/chapter2/ios/2.png)\n![login 2](/docs/img/cli-getting-started/nativescript/chapter2/android/2.png)\n\nAlthough the UI components are in the correct order, they could use some spacing and color to make the app look a bit nicer. To do that let's look at another NativeScript feature: CSS.\n\n> **TIP**:\n> * Refer to the NativeScript docs for a [more detailed look at how NativeScript layouts work](/layouts) and the various things you can do to configure them.\n> * Check out Jen Looper's article on [demystifying NativeScript layouts](https://www.nativescript.org/blog/demystifying-nativescript-layouts) for a thorough look at NativeScript layouts in action.\n\n## 2.4: CSS\n\nNativeScript uses a [subset of CSS](/styling) to change the visual appearance of your app. You can use three mechanisms to add CSS properties to UI components: [application-wide CSS](/styling#application-wide-css) (`app.css`), [page-specific CSS](/styling#page-specific-css), and an [inline `style` attribute](/styling#inline-css).\n\n> **TIP**:\n> * Place CSS rules that should apply to all pages in your `app.css`, and CSS rules that apply to a single page in a page-specific CSS file (e.g. `login.css`). \n> * Although inline styles are great for quick testing—e.g. `<Page style=\"background-color: green;\">` you should avoid them in general because the `style` attributes tend to clutter up xml files, especially if you need to apply multiple rules.\n\nLet's start by adding a few application-wide CSS rules.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Create global styles</h4>\n\nPaste the following code in the `app.css` file:\n\n```css\n \nPage {\n    background-color: white;\n    font-size: 17;\n}\nTextField {\n    margin: 10;\n    padding: 10;\n}\nImage {\n    margin-top: 20;\n    margin-left: 0;\n    margin-right: 0;\n    margin-bottom: 80;\n}\nButton {\n    margin: 10;\n    padding: 10;\n}\n \n```\n\n</div>\n\n<div class=\"explain\">\n\nIf you've done any web development before, the syntax should feel familiar here. You select four UI components (Page, TextField, Image, and Button) by their tag name, and then apply a handful of CSS rules as name/value pairs. NativeScript does not support all CSS properties because it is not possible to replicate some of them in native apps without causing performance issues. A [full list of the CSS properties that are supported](/styling#supported-properties) are listed in the NativeScript docs.\n\nLet's make one more change. Although often you want CSS rules to apply equally to your iOS and Android app, occasionally it makes sense to apply a CSS rule to only one platform. For example, iOS text fields frequently have borders around them, but Android text fields do not. Let's look at how to make platform-specific style changes in NativeScript.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add platform-specific CSS</h4>\n\nAdd the following as the first line of your app's `app.css` file:\n\n```css\n@import { url('~/platform.css') };\n```\n\n> **IMPORTANT**: NativeScript is consistent with browser implementations, in that `@import` statements must precede all other CSS rules in a file.\n\nNext, add a `class=\"link\"` attribute to the sign up button in `login.xml`. The button's markup should look like this:\n\n```xml\n<Button text=\"Sign up for Groceries\" class=\"link\" />\n```\n\n</div>\n\n<div class=\"explain\">\n\nLet's break down what just happened. First, NativeScript supports CSS's `@import` statement for importing one CSS file into another. So this new line of code imports the CSS rules from `platform.css` into `app.css`. But, you might have noticed that Groceries does not have a file named `platform.css`—only `app/platform.android.css` and `app/platform.ios.css` exist. What's going on here?\n\n<a id=\"platform-specific-files\"></a>When you execute `tns run`, or `tns livesync`, the NativeScript CLI takes your code from the `app` folder and places it in the native projects located in the `platforms/ios` and `platforms/android` folders. Here the naming convention comes in: while moving files, the CLI intelligently selects `.android.*` and `.ios.*` files. To give a specific example, the CLI moves `platform.ios.css` into `platforms/ios` and renames it to `platform.css`; similarly, the CLI moves `platform.android.css` into `platforms/android`, and again renames it to `platform.css`. This convention provides a convenient way to branch your code to handle iOS and Android separately, and it's supported for any type of file in NativeScript—not just CSS files. You'll see a few more examples of this convention later in this guide.\n\nThere's one other change here we need to discuss, and that's the `class` attribute you added to this button:\n\n```xml\n<Button text=\"Sign up for Groceries\" class=\"link\" />\n```\n\nNativeScript uses the `class` attribute for adding CSS class names to UI components. The class name is used to give the sign up button a slightly different look than the sign in button. You can find the CSS rules associated with this class name in `platform.ios.css` and `platform.android.css`:\n\n```css\n \n/* From platform.android.css */\n.link {\n    background-color: transparent;\n}\n\n/* From platform.ios.css */\n.link {\n    border-width: 0;\n} \n \n```\n\n> **TIP**: NativeScript also supports selecting elements by the `id` attribute. Refer to the docs for [a full list of the supported selectors](/styling#supported-selectors).\n\nWith these changes in place, you'll notice that the app looks halfway decent now, and also has a distinctly different look on iOS and Android:\n\n![login 1](/docs/img/cli-getting-started/nativescript/chapter2/ios/3.png)\n![login 1](/docs/img/cli-getting-started/nativescript/chapter2/android/3.png)\n\nFeel free to take some time to play with the look of this app before moving on. You can try adding some additional CSS class names, or adding some page-specific styles in your `login.css` file. When you're ready, let's move on and add an image to this login screen.\n\n## 2.5: Images\n\nIn NativeScript you use the `<Image>` UI component and its `src` attribute to add images to your pages. The `src` attribute lets you specify your image in three ways. The first (and simplest) way is to point at the URL of an image:\n\n```xml\n<Image src=\"https://www.nativescript.org/images/default-source/landingpages/logo.png\" />\n```\n\nThe second way is to point at an image that lives within your app's `app` folder. For example if you have an image at `app/images/logo.png`, you can use it with:\n\n```xml\n<Image src=\"~/images/logo.png\" />\n```\n\nThe third way, and the one Groceries uses, is to use platform-specific image resources. Let's add an image to the login screen and then discuss exactly what's happening.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add a logo</h4>\n\nIn `login.xml`, add the `<Image>` below as the first child of the existing `<StackLayout>` tag:\n\n```xml\n<Image src=\"res://logo\" stretch=\"none\" horizontalAlignment=\"center\" />\n```\n</div>\n\n<div class=\"explain\">\n\nThe `res://` syntax tells NativeScript to use a platform-specific resource, in this case an image. Platform-specific resources go in your app's `app/App_Resources` folder. If you look there you'll find a few different image files, several of which are named `logo.png`.\n\nAlthough more complex than putting an image directly in the `app` folder, using platform-specific images gives you more control over image display on different device dimensions. For example iOS lets you provide three different image files for devices with different pixel densities. As such you'll find logos named `logo.png`, `logo@2x.png`, and `logo@3x.png` in your `App_Resources/iOS` folder. For Android you'll find similar image files in `App_Resources/Android/drawable-hdpi` (for \"high\" dpi, or high dots-per-inch), `App_Resources/Android/drawable-mdpi` (for medium-dpi), and `App_Resources/Android/drawable-ldpi` (for low-dpi).\n\nOnce these files are in place the NativeScript framework knows how to pick the correct file; all you have to do is reference the image using `res://` and its base file name—i.e. `res://logo`. Here's what your login screen should look like on iOS and Android:\n\n![login 4](/docs/img/cli-getting-started/nativescript/chapter2/ios/4.png)\n![login 4](/docs/img/cli-getting-started/nativescript/chapter2/android/4.png)\n\nAt this point your UI looks good, but the app still doesn't actually do anything. Let's look at how you can use JavaScript to add some functionality.\n\n> **TIP**: The community-written [NativeScript Image Builder](http://nsimage.brosteins.com/) can help you generate images in the appropriate resolutions for iOS and Android.\n\n</div>","source":"tutorial/2.md","raw":"# Chapter 2—Building the UI\n\nBefore you start coding the Groceries app it's important to understand a NativeScript app's folder structure. It'll help you understand where to place new files, as well as a bit of what's going on with NativeScript under the hood.\n\nGo ahead and open your app's `sample-Groceries` folder in your text editor of choice and let's dig in.\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [2.1: Directory structure](#21-directory-structure)\n- [2.2: Adding UI components](#22-adding-ui-components)\n- [2.3: Layouts](#23-layouts)\n- [2.4: CSS](#24-css)\n- [2.5: Images](#25-images)\n\n## 2.1: Directory structure\n\nTo keep things simple, let's start by looking at the outer structure of the Groceries app:\n\n```\n.\n└── sample-Groceries\n    ├── app\n    │   └── ...\n    ├── node_modules\n    │   └── tns-core-modules\n    ├── package.json\n    └── platforms\n        ├── android\n        └── ios\n```\n\nHere's what these various files and folders do:\n\n- **app**: This folder contains all the development resources you need to build your app. You'll be spending most of your time editing the files in here.\n- **node_modules**: This folder contains your app's npm module dependencies. All new NativeScript projects start with a single dependency on tns-core-modules.\n- **node_modules/tns-core-modules**: This folder contains your app's NativeScript modules, which are a series of NativeScript-provided JavaScript modules you'll use to build your app. Each module contains the platform-specific code needed to implement some feature—the camera, http calls, the file system, and so forth—exposed through a platform-agnostic API (e.g. `camera.takePicture()`). We'll look at some examples momentarily.\n- **package.json**: This file contains your app's configuration details, such as your app id, the version of NativeScript you're using, and also which npm modules your app uses. We'll take a closer look at how to use this file when we talk about using npm modules in [chapter 5](chapter5).\n- **platforms**: This folder contains the platform-specific code NativeScript needs to build native iOS and Android apps. For example in the `android` folder you'll find things like your project's `AndroidManifest.xml` and .apk executable files. Similarly, the `ios` folder contains the Groceries' Xcode project and .ipa executables. Note, users on Windows machines will not have an `ios` folder.\n\nThe NativeScript CLI manages the `platforms` folder for you as you develop and run your app; therefore, it's a best practice to treat the `platforms` folder as generated code. The Groceries app includes the `platforms` folder in its [`.gitignore`](https://github.com/NativeScript/sample-Groceries/blob/master/.gitignore) to exclude its files from source control.\n\nNext, let's dig into the `app` folder, as that's where you'll be spending the majority of your time.\n\n```\n.\n└── sample-Groceries\n    ├── app\n    │   ├── App_Resources\n    │   │   ├── Android\n    │   │   └── iOS\n    │   ├── shared\n    │   │   └── ...\n    │   ├── views\n    │   │   └── login\n    │   │       ├── login.js\n    │   │       └── login.xml\n    │   ├── app.css\n    │   ├── app.js\n    │   └── ...\n    └── ...\n```\nHere's what these various files and folders do:\n\n- **App_Resources**: This folder contains platform-specific resources such as icons, splash screens, and configuration files. The NativeScript CLI takes care of injecting these resources into the appropriate places in the `platforms` folder when you execute `tns run`.\n- **shared**: This folder, specific to the Groceries app, contains any files you need to share across views in your app. In the Groceries app, you'll find a few view model objects and a `config.js` file used to share configuration variables like API keys.\n- **views**: This folder contains the code to build your app's views, each of which will have a subfolder in `views`. Each view is made up of an xml file, a JavaScript file, and an optional CSS file. The groceries app contains three folders for its three views.\n- **app.css**: This file contains global styles for your app. We'll dig into app styling in [chapter 2.4](#24-css).\n- **app.js**: This file sets up your application's starting module and initializes the app.\n\nLet's start with `app/app.js`, as it's the starting point for NativeScript apps. Your `app.js` contains the two lines below: \n\n```javascript\nvar applicationModule = require(\"application\");\napplicationModule.start({ moduleName: \"views/login/login\" });\n```\n\nHere, you're requiring, or importing, the [NativeScript application module](). Then, you call its `start()` method with the starting screen of your app (the login screen), which lives in your app's `views/login` folder.\n\n> **TIP**: JavaScript modules in NativeScript follow the [CommonJS specification](http://wiki.commonjs.org/wiki/CommonJS). This means you can use the [`require()` method](http://wiki.commonjs.org/wiki/Modules/1.1#Module_Context) to import modules, as is done above, as well as use the `export` keyword to expose a module's properties and methods, which we'll look at later in this chapter. These are the same constructs Node.js uses for JavaScript modules, so if you know how to use Node.js modules, you already know how to use NativeScript modules.\n\nNow that your app is ready for development, let's add some UI components to make your login screen show more than some basic text.\n\n## 2.2: Adding UI components\n\nLet's dig into the files used to create your app's UI, which reside in the `app/views` folder. Each folder in `app/views` contains the code for one of the three pages in Groceries: `list`, `login`, and `register`. If you look in the `app/views/login` folder, you'll see three files: `login.css`, `login.js`, and the `login.xml` file we updated in the previous chapter. When you open `login.xml` again you should see the following code:\n\n```xml\n<Page>\n    <Label text=\"hello NativeScript\" />\n</Page>\n```\n\nThis page currently contains two UI components: a `<Page>` and a `<Label>`. To make this page look more like a login page, let's add a few additional components, namely two `<TextField>` elements and two `<Button>` elements.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add UI components to <code>login.xml</code></h4>\n\nOpen `app/views/login/login.xml` and replace the existing `<Label>` with the following code:\n\n```xml\n<TextField hint=\"Email Address\" keyboardType=\"email\" autocorrect=\"false\" autocapitalizationType=\"none\" />\n<TextField hint=\"Password\" secure=\"true\" />\n\n<Button text=\"Sign in\" />\n<Button text=\"Sign up for Groceries\" />\n```\n\n</div>\n\n<div class=\"explain\">\n\nNativeScript UI components provide attributes to let you configure their behavior and appearance. The code you just added uses the following attributes:\n\n- `<TextField>`\n    - `hint`: Shows placeholder text that tells the user what to type.\n    - `keyboardType`: The type of keyboard to present to the user for input. `keyboardType=\"email\"` shows a keyboard optimized for entering email addresses. NativeScript currently supports [five types of keyboards](/ui/keyboard.html) for text fields.\n    - `autocorrect`: A boolean attribute that determines whether the mobile operating system should autocorrect user input. In the case of email address text fields, the autocorrect behavior is undesirable.\n    - `autocapitalizationType`: Determines how the operating system should autocapitalize user input. `autocapitalizationType=\"none\"` turns autocapitalization off altogether. NativeScript supports [four autocapitalization types](http://docs.nativescript.org/api-reference/modules/_ui_enums_.autocapitalizationtype.html) on text fields.\n    - `secure`: A boolean attribute that determines whether the TextField's text should be masked, which is commonly done on password fields.\n- `<Button>`\n    - `text`: Controls the text displayed within the button.\n\nAfter you [run your app](#development-workflow) with this change, you will see a single `<Button>` component on the screen:\n\n![login 1](/docs/img/cli-getting-started/nativescript/chapter2/ios/1.png)\n![login 1](/docs/img/cli-getting-started/nativescript/chapter2/android/1.png)\n\nCurrently you only see a single button because you need to tell NativeScript how to layout your page’s UI components. Let's look at how to use NativeScript layouts to arrange these components on the screen.\n\n> **TIP**: The NativeScript docs include a [full list of the UI components and attributes](/ui-with-xml) with which you can build your apps. You can even [build your own, custom UI components](/ui-with-xml#custom-components).\n\n## 2.3: Layouts \n\nNativeScript provides several different layout containers that allow you to place UI components precisely where you want them to appear. \n\n- The [Absolute Layout]() lets you position elements using explicit x and y coordinates. This is useful when you need to place elements in exact locations, for example showing an activity indicator widget in the top-left corner of your app.\n- The [Dock Layout]() is useful for placing UI elements at the outer edges of your app. For example, a container docked at the bottom of the screen would be a good location for an ad.\n- The [Grid Layout]() lets you divide your interface into a series of rows and columns, much like a `<table>` in HTML markup.\n- The [Stack Layout]() lets you stack child UI components either vertically or horizontally.\n- The [Wrap Layout]() lets child UI components flow from one row or column to the next when space is filled.\n\nFor your login screen, all you need is a simple `<StackLayout>` to stack the UI components on top of each other. In later sections, you'll use some of the more advanced layouts.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add a stack layout to the login screen</h4>\n\nIn `login.xml`, add a `<StackLayout>` component within the `<Page>` component. `login.xml` should look like this:\n\n```xml\n<Page>\n    <StackLayout orientation=\"vertical\">\n\n        <TextField hint=\"Email Address\" keyboardType=\"email\" autocorrect=\"false\" autocapitalizationType=\"none\" />\n        <TextField hint=\"Password\" secure=\"true\" />\n\n        <Button text=\"Sign in\" />\n        <Button text=\"Sign up for Groceries\" />\n\n    </StackLayout>\n</Page>\n```\n\n</div>\n\n<div class=\"explain\">\n\nThe stack layout is a UI component, and as such, it has attributes just like the `<TextField>` and `<Button>` components you used in the previous section. Here, the `orientation=\"vertical\"` attribute tells the stack layout to arrange its child components vertically.\n\nAfter you run your app with this change, you'll see that your login page's UI components stack up:\n\n![login 2](/docs/img/cli-getting-started/nativescript/chapter2/ios/2.png)\n![login 2](/docs/img/cli-getting-started/nativescript/chapter2/android/2.png)\n\nAlthough the UI components are in the correct order, they could use some spacing and color to make the app look a bit nicer. To do that let's look at another NativeScript feature: CSS.\n\n> **TIP**:\n> * Refer to the NativeScript docs for a [more detailed look at how NativeScript layouts work](/layouts) and the various things you can do to configure them.\n> * Check out Jen Looper's article on [demystifying NativeScript layouts](https://www.nativescript.org/blog/demystifying-nativescript-layouts) for a thorough look at NativeScript layouts in action.\n\n## 2.4: CSS\n\nNativeScript uses a [subset of CSS](/styling) to change the visual appearance of your app. You can use three mechanisms to add CSS properties to UI components: [application-wide CSS](/styling#application-wide-css) (`app.css`), [page-specific CSS](/styling#page-specific-css), and an [inline `style` attribute](/styling#inline-css).\n\n> **TIP**:\n> * Place CSS rules that should apply to all pages in your `app.css`, and CSS rules that apply to a single page in a page-specific CSS file (e.g. `login.css`). \n> * Although inline styles are great for quick testing—e.g. `<Page style=\"background-color: green;\">` you should avoid them in general because the `style` attributes tend to clutter up xml files, especially if you need to apply multiple rules.\n\nLet's start by adding a few application-wide CSS rules.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Create global styles</h4>\n\nPaste the following code in the `app.css` file:\n\n```css\n \nPage {\n    background-color: white;\n    font-size: 17;\n}\nTextField {\n    margin: 10;\n    padding: 10;\n}\nImage {\n    margin-top: 20;\n    margin-left: 0;\n    margin-right: 0;\n    margin-bottom: 80;\n}\nButton {\n    margin: 10;\n    padding: 10;\n}\n \n```\n\n</div>\n\n<div class=\"explain\">\n\nIf you've done any web development before, the syntax should feel familiar here. You select four UI components (Page, TextField, Image, and Button) by their tag name, and then apply a handful of CSS rules as name/value pairs. NativeScript does not support all CSS properties because it is not possible to replicate some of them in native apps without causing performance issues. A [full list of the CSS properties that are supported](/styling#supported-properties) are listed in the NativeScript docs.\n\nLet's make one more change. Although often you want CSS rules to apply equally to your iOS and Android app, occasionally it makes sense to apply a CSS rule to only one platform. For example, iOS text fields frequently have borders around them, but Android text fields do not. Let's look at how to make platform-specific style changes in NativeScript.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add platform-specific CSS</h4>\n\nAdd the following as the first line of your app's `app.css` file:\n\n```css\n@import { url('~/platform.css') };\n```\n\n> **IMPORTANT**: NativeScript is consistent with browser implementations, in that `@import` statements must precede all other CSS rules in a file.\n\nNext, add a `class=\"link\"` attribute to the sign up button in `login.xml`. The button's markup should look like this:\n\n```xml\n<Button text=\"Sign up for Groceries\" class=\"link\" />\n```\n\n</div>\n\n<div class=\"explain\">\n\nLet's break down what just happened. First, NativeScript supports CSS's `@import` statement for importing one CSS file into another. So this new line of code imports the CSS rules from `platform.css` into `app.css`. But, you might have noticed that Groceries does not have a file named `platform.css`—only `app/platform.android.css` and `app/platform.ios.css` exist. What's going on here?\n\n<a id=\"platform-specific-files\"></a>When you execute `tns run`, or `tns livesync`, the NativeScript CLI takes your code from the `app` folder and places it in the native projects located in the `platforms/ios` and `platforms/android` folders. Here the naming convention comes in: while moving files, the CLI intelligently selects `.android.*` and `.ios.*` files. To give a specific example, the CLI moves `platform.ios.css` into `platforms/ios` and renames it to `platform.css`; similarly, the CLI moves `platform.android.css` into `platforms/android`, and again renames it to `platform.css`. This convention provides a convenient way to branch your code to handle iOS and Android separately, and it's supported for any type of file in NativeScript—not just CSS files. You'll see a few more examples of this convention later in this guide.\n\nThere's one other change here we need to discuss, and that's the `class` attribute you added to this button:\n\n```xml\n<Button text=\"Sign up for Groceries\" class=\"link\" />\n```\n\nNativeScript uses the `class` attribute for adding CSS class names to UI components. The class name is used to give the sign up button a slightly different look than the sign in button. You can find the CSS rules associated with this class name in `platform.ios.css` and `platform.android.css`:\n\n```css\n \n/* From platform.android.css */\n.link {\n    background-color: transparent;\n}\n\n/* From platform.ios.css */\n.link {\n    border-width: 0;\n} \n \n```\n\n> **TIP**: NativeScript also supports selecting elements by the `id` attribute. Refer to the docs for [a full list of the supported selectors](/styling#supported-selectors).\n\nWith these changes in place, you'll notice that the app looks halfway decent now, and also has a distinctly different look on iOS and Android:\n\n![login 1](/docs/img/cli-getting-started/nativescript/chapter2/ios/3.png)\n![login 1](/docs/img/cli-getting-started/nativescript/chapter2/android/3.png)\n\nFeel free to take some time to play with the look of this app before moving on. You can try adding some additional CSS class names, or adding some page-specific styles in your `login.css` file. When you're ready, let's move on and add an image to this login screen.\n\n## 2.5: Images\n\nIn NativeScript you use the `<Image>` UI component and its `src` attribute to add images to your pages. The `src` attribute lets you specify your image in three ways. The first (and simplest) way is to point at the URL of an image:\n\n```xml\n<Image src=\"https://www.nativescript.org/images/default-source/landingpages/logo.png\" />\n```\n\nThe second way is to point at an image that lives within your app's `app` folder. For example if you have an image at `app/images/logo.png`, you can use it with:\n\n```xml\n<Image src=\"~/images/logo.png\" />\n```\n\nThe third way, and the one Groceries uses, is to use platform-specific image resources. Let's add an image to the login screen and then discuss exactly what's happening.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add a logo</h4>\n\nIn `login.xml`, add the `<Image>` below as the first child of the existing `<StackLayout>` tag:\n\n```xml\n<Image src=\"res://logo\" stretch=\"none\" horizontalAlignment=\"center\" />\n```\n</div>\n\n<div class=\"explain\">\n\nThe `res://` syntax tells NativeScript to use a platform-specific resource, in this case an image. Platform-specific resources go in your app's `app/App_Resources` folder. If you look there you'll find a few different image files, several of which are named `logo.png`.\n\nAlthough more complex than putting an image directly in the `app` folder, using platform-specific images gives you more control over image display on different device dimensions. For example iOS lets you provide three different image files for devices with different pixel densities. As such you'll find logos named `logo.png`, `logo@2x.png`, and `logo@3x.png` in your `App_Resources/iOS` folder. For Android you'll find similar image files in `App_Resources/Android/drawable-hdpi` (for \"high\" dpi, or high dots-per-inch), `App_Resources/Android/drawable-mdpi` (for medium-dpi), and `App_Resources/Android/drawable-ldpi` (for low-dpi).\n\nOnce these files are in place the NativeScript framework knows how to pick the correct file; all you have to do is reference the image using `res://` and its base file name—i.e. `res://logo`. Here's what your login screen should look like on iOS and Android:\n\n![login 4](/docs/img/cli-getting-started/nativescript/chapter2/ios/4.png)\n![login 4](/docs/img/cli-getting-started/nativescript/chapter2/android/4.png)\n\nAt this point your UI looks good, but the app still doesn't actually do anything. Let's look at how you can use JavaScript to add some functionality.\n\n> **TIP**: The community-written [NativeScript Image Builder](http://nsimage.brosteins.com/) can help you generate images in the appropriate resolutions for iOS and Android.\n\n</div>","date":"2016-08-26T21:05:54.495Z","updated":"2016-08-26T21:05:54.495Z","path":"tutorial/2.html","title":"","comments":1,"layout":"page","_id":"cisn95c7u000pwsl0m1ug8yfc","content":"<h1 id=\"Chapter-2—Building-the-UI\"><a href=\"#Chapter-2—Building-the-UI\" class=\"headerlink\" title=\"Chapter 2—Building the UI\"></a>Chapter 2—Building the UI</h1><p>Before you start coding the Groceries app it’s important to understand a NativeScript app’s folder structure. It’ll help you understand where to place new files, as well as a bit of what’s going on with NativeScript under the hood.</p>\n<p>Go ahead and open your app’s <code>sample-Groceries</code> folder in your text editor of choice and let’s dig in.</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#21-directory-structure\">2.1: Directory structure</a>\n- <a href=\"#22-adding-ui-components\">2.2: Adding UI components</a>\n- <a href=\"#23-layouts\">2.3: Layouts</a>\n- <a href=\"#24-css\">2.4: CSS</a>\n- <a href=\"#25-images\">2.5: Images</a>\n\n## 2.1: Directory structure\n\nTo keep things simple, let’s start by looking at the outer structure of the Groceries app:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">└── sample-Groceries</div><div class=\"line\">    ├── app</div><div class=\"line\">    │   └── ...</div><div class=\"line\">    ├── node_modules</div><div class=\"line\">    │   └── tns-core-modules</div><div class=\"line\">    ├── package.json</div><div class=\"line\">    └── platforms</div><div class=\"line\">        ├── android</div><div class=\"line\">        └── ios</div></pre></td></tr></table></figure>\n\nHere’s what these various files and folders do:\n\n- <strong>app</strong>: This folder contains all the development resources you need to build your app. You’ll be spending most of your time editing the files in here.\n- <strong>node_modules</strong>: This folder contains your app’s npm module dependencies. All new NativeScript projects start with a single dependency on tns-core-modules.\n- <strong>node_modules/tns-core-modules</strong>: This folder contains your app’s NativeScript modules, which are a series of NativeScript-provided JavaScript modules you’ll use to build your app. Each module contains the platform-specific code needed to implement some feature—the camera, http calls, the file system, and so forth—exposed through a platform-agnostic API (e.g. <code>camera.takePicture()</code>). We’ll look at some examples momentarily.\n- <strong>package.json</strong>: This file contains your app’s configuration details, such as your app id, the version of NativeScript you’re using, and also which npm modules your app uses. We’ll take a closer look at how to use this file when we talk about using npm modules in <a href=\"chapter5\">chapter 5</a>.\n- <strong>platforms</strong>: This folder contains the platform-specific code NativeScript needs to build native iOS and Android apps. For example in the <code>android</code> folder you’ll find things like your project’s <code>AndroidManifest.xml</code> and .apk executable files. Similarly, the <code>ios</code> folder contains the Groceries’ Xcode project and .ipa executables. Note, users on Windows machines will not have an <code>ios</code> folder.\n\nThe NativeScript CLI manages the <code>platforms</code> folder for you as you develop and run your app; therefore, it’s a best practice to treat the <code>platforms</code> folder as generated code. The Groceries app includes the <code>platforms</code> folder in its <a href=\"https://github.com/NativeScript/sample-Groceries/blob/master/.gitignore\" target=\"_blank\" rel=\"external\"><code>.gitignore</code></a> to exclude its files from source control.\n\nNext, let’s dig into the <code>app</code> folder, as that’s where you’ll be spending the majority of your time.\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">└── sample-Groceries</div><div class=\"line\">    ├── app</div><div class=\"line\">    │   ├── App_Resources</div><div class=\"line\">    │   │   ├── Android</div><div class=\"line\">    │   │   └── iOS</div><div class=\"line\">    │   ├── shared</div><div class=\"line\">    │   │   └── ...</div><div class=\"line\">    │   ├── views</div><div class=\"line\">    │   │   └── login</div><div class=\"line\">    │   │       ├── login.js</div><div class=\"line\">    │   │       └── login.xml</div><div class=\"line\">    │   ├── app.css</div><div class=\"line\">    │   ├── app.js</div><div class=\"line\">    │   └── ...</div><div class=\"line\">    └── ...</div></pre></td></tr></table></figure>\n\nHere’s what these various files and folders do:\n\n- <strong>App_Resources</strong>: This folder contains platform-specific resources such as icons, splash screens, and configuration files. The NativeScript CLI takes care of injecting these resources into the appropriate places in the <code>platforms</code> folder when you execute <code>tns run</code>.\n- <strong>shared</strong>: This folder, specific to the Groceries app, contains any files you need to share across views in your app. In the Groceries app, you’ll find a few view model objects and a <code>config.js</code> file used to share configuration variables like API keys.\n- <strong>views</strong>: This folder contains the code to build your app’s views, each of which will have a subfolder in <code>views</code>. Each view is made up of an xml file, a JavaScript file, and an optional CSS file. The groceries app contains three folders for its three views.\n- <strong>app.css</strong>: This file contains global styles for your app. We’ll dig into app styling in <a href=\"#24-css\">chapter 2.4</a>.\n- <strong>app.js</strong>: This file sets up your application’s starting module and initializes the app.\n\nLet’s start with <code>app/app.js</code>, as it’s the starting point for NativeScript apps. Your <code>app.js</code> contains the two lines below: \n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> applicationModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\">applicationModule.start(&#123; moduleName: <span class=\"string\">\"views/login/login\"</span> &#125;);</div></pre></td></tr></table></figure>\n\nHere, you’re requiring, or importing, the <a href=\"\">NativeScript application module</a>. Then, you call its <code>start()</code> method with the starting screen of your app (the login screen), which lives in your app’s <code>views/login</code> folder.\n\n&gt; <strong>TIP</strong>: JavaScript modules in NativeScript follow the <a href=\"http://wiki.commonjs.org/wiki/CommonJS\" target=\"_blank\" rel=\"external\">CommonJS specification</a>. This means you can use the <a href=\"http://wiki.commonjs.org/wiki/Modules/1.1#Module_Context\" target=\"_blank\" rel=\"external\"><code>require()</code> method</a> to import modules, as is done above, as well as use the <code>export</code> keyword to expose a module’s properties and methods, which we’ll look at later in this chapter. These are the same constructs Node.js uses for JavaScript modules, so if you know how to use Node.js modules, you already know how to use NativeScript modules.\n\nNow that your app is ready for development, let’s add some UI components to make your login screen show more than some basic text.\n\n## 2.2: Adding UI components\n\nLet’s dig into the files used to create your app’s UI, which reside in the <code>app/views</code> folder. Each folder in <code>app/views</code> contains the code for one of the three pages in Groceries: <code>list</code>, <code>login</code>, and <code>register</code>. If you look in the <code>app/views/login</code> folder, you’ll see three files: <code>login.css</code>, <code>login.js</code>, and the <code>login.xml</code> file we updated in the previous chapter. When you open <code>login.xml</code> again you should see the following code:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"hello NativeScript\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n\nThis page currently contains two UI components: a <code>&lt;Page&gt;</code> and a <code>&lt;Label&gt;</code>. To make this page look more like a login page, let’s add a few additional components, namely two <code>&lt;TextField&gt;</code> elements and two <code>&lt;Button&gt;</code> elements.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add UI components to <code>login.xml</code></h4>\n\nOpen <code>app/views/login/login.xml</code> and replace the existing <code>&lt;Label&gt;</code> with the following code:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Email Address\"</span> <span class=\"attr\">keyboardType</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autocapitalizationType</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">secure</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign in\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nNativeScript UI components provide attributes to let you configure their behavior and appearance. The code you just added uses the following attributes:\n\n- <code>&lt;TextField&gt;</code>\n    - <code>hint</code>: Shows placeholder text that tells the user what to type.\n    - <code>keyboardType</code>: The type of keyboard to present to the user for input. <code>keyboardType=&quot;email&quot;</code> shows a keyboard optimized for entering email addresses. NativeScript currently supports <a href=\"/ui/keyboard.html\">five types of keyboards</a> for text fields.\n    - <code>autocorrect</code>: A boolean attribute that determines whether the mobile operating system should autocorrect user input. In the case of email address text fields, the autocorrect behavior is undesirable.\n    - <code>autocapitalizationType</code>: Determines how the operating system should autocapitalize user input. <code>autocapitalizationType=&quot;none&quot;</code> turns autocapitalization off altogether. NativeScript supports <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.autocapitalizationtype.html\">four autocapitalization types</a> on text fields.\n    - <code>secure</code>: A boolean attribute that determines whether the TextField’s text should be masked, which is commonly done on password fields.\n- <code>&lt;Button&gt;</code>\n    - <code>text</code>: Controls the text displayed within the button.\n\nAfter you <a href=\"#development-workflow\">run your app</a> with this change, you will see a single <code>&lt;Button&gt;</code> component on the screen:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/ios/1.png\" alt=\"login 1\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/android/1.png\" alt=\"login 1\">\n\nCurrently you only see a single button because you need to tell NativeScript how to layout your page’s UI components. Let’s look at how to use NativeScript layouts to arrange these components on the screen.\n\n&gt; <strong>TIP</strong>: The NativeScript docs include a <a href=\"/ui-with-xml\">full list of the UI components and attributes</a> with which you can build your apps. You can even <a href=\"/ui-with-xml#custom-components\">build your own, custom UI components</a>.\n\n## 2.3: Layouts \n\nNativeScript provides several different layout containers that allow you to place UI components precisely where you want them to appear. \n\n- The <a href=\"\">Absolute Layout</a> lets you position elements using explicit x and y coordinates. This is useful when you need to place elements in exact locations, for example showing an activity indicator widget in the top-left corner of your app.\n- The <a href=\"\">Dock Layout</a> is useful for placing UI elements at the outer edges of your app. For example, a container docked at the bottom of the screen would be a good location for an ad.\n- The <a href=\"\">Grid Layout</a> lets you divide your interface into a series of rows and columns, much like a <code>&lt;table&gt;</code> in HTML markup.\n- The <a href=\"\">Stack Layout</a> lets you stack child UI components either vertically or horizontally.\n- The <a href=\"\">Wrap Layout</a> lets child UI components flow from one row or column to the next when space is filled.\n\nFor your login screen, all you need is a simple <code>&lt;StackLayout&gt;</code> to stack the UI components on top of each other. In later sections, you’ll use some of the more advanced layouts.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add a stack layout to the login screen</h4>\n\nIn <code>login.xml</code>, add a <code>&lt;StackLayout&gt;</code> component within the <code>&lt;Page&gt;</code> component. <code>login.xml</code> should look like this:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Email Address\"</span> <span class=\"attr\">keyboardType</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autocapitalizationType</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">secure</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign in\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThe stack layout is a UI component, and as such, it has attributes just like the <code>&lt;TextField&gt;</code> and <code>&lt;Button&gt;</code> components you used in the previous section. Here, the <code>orientation=&quot;vertical&quot;</code> attribute tells the stack layout to arrange its child components vertically.\n\nAfter you run your app with this change, you’ll see that your login page’s UI components stack up:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/ios/2.png\" alt=\"login 2\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/android/2.png\" alt=\"login 2\">\n\nAlthough the UI components are in the correct order, they could use some spacing and color to make the app look a bit nicer. To do that let’s look at another NativeScript feature: CSS.\n\n&gt; <strong>TIP</strong>:\n&gt; <em> Refer to the NativeScript docs for a <a href=\"/layouts\">more detailed look at how NativeScript layouts work</a> and the various things you can do to configure them.\n&gt; </em> Check out Jen Looper’s article on <a href=\"https://www.nativescript.org/blog/demystifying-nativescript-layouts\" target=\"_blank\" rel=\"external\">demystifying NativeScript layouts</a> for a thorough look at NativeScript layouts in action.\n\n## 2.4: CSS\n\nNativeScript uses a <a href=\"/styling\">subset of CSS</a> to change the visual appearance of your app. You can use three mechanisms to add CSS properties to UI components: <a href=\"/styling#application-wide-css\">application-wide CSS</a> (<code>app.css</code>), <a href=\"/styling#page-specific-css\">page-specific CSS</a>, and an <a href=\"/styling#inline-css\">inline <code>style</code> attribute</a>.\n\n&gt; <strong>TIP</strong>:\n&gt; <em> Place CSS rules that should apply to all pages in your <code>app.css</code>, and CSS rules that apply to a single page in a page-specific CSS file (e.g. <code>login.css</code>). \n&gt; </em> Although inline styles are great for quick testing—e.g. <code>&lt;Page style=&quot;background-color: green;&quot;&gt;</code> you should avoid them in general because the <code>style</code> attributes tend to clutter up xml files, especially if you need to apply multiple rules.\n\nLet’s start by adding a few application-wide CSS rules.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Create global styles</h4>\n\nPaste the following code in the <code>app.css</code> file:\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"><span class=\"selector-tag\">Page</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">17</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">TextField</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">Image</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">80</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">Button</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nIf you’ve done any web development before, the syntax should feel familiar here. You select four UI components (Page, TextField, Image, and Button) by their tag name, and then apply a handful of CSS rules as name/value pairs. NativeScript does not support all CSS properties because it is not possible to replicate some of them in native apps without causing performance issues. A <a href=\"/styling#supported-properties\">full list of the CSS properties that are supported</a> are listed in the NativeScript docs.\n\nLet’s make one more change. Although often you want CSS rules to apply equally to your iOS and Android app, occasionally it makes sense to apply a CSS rule to only one platform. For example, iOS text fields frequently have borders around them, but Android text fields do not. Let’s look at how to make platform-specific style changes in NativeScript.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add platform-specific CSS</h4>\n\nAdd the following as the first line of your app’s <code>app.css</code> file:\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import &#123; url('~/platform.css') &#125;;</div></pre></td></tr></table></figure>\n\n&gt; <strong>IMPORTANT</strong>: NativeScript is consistent with browser implementations, in that <code>@import</code> statements must precede all other CSS rules in a file.\n\nNext, add a <code>class=&quot;link&quot;</code> attribute to the sign up button in <code>login.xml</code>. The button’s markup should look like this:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nLet’s break down what just happened. First, NativeScript supports CSS’s <code>@import</code> statement for importing one CSS file into another. So this new line of code imports the CSS rules from <code>platform.css</code> into <code>app.css</code>. But, you might have noticed that Groceries does not have a file named <code>platform.css</code>—only <code>app/platform.android.css</code> and <code>app/platform.ios.css</code> exist. What’s going on here?\n\n<a id=\"platform-specific-files\"></a>When you execute <code>tns run</code>, or <code>tns livesync</code>, the NativeScript CLI takes your code from the <code>app</code> folder and places it in the native projects located in the <code>platforms/ios</code> and <code>platforms/android</code> folders. Here the naming convention comes in: while moving files, the CLI intelligently selects <code>.android.*</code> and <code>.ios.*</code> files. To give a specific example, the CLI moves <code>platform.ios.css</code> into <code>platforms/ios</code> and renames it to <code>platform.css</code>; similarly, the CLI moves <code>platform.android.css</code> into <code>platforms/android</code>, and again renames it to <code>platform.css</code>. This convention provides a convenient way to branch your code to handle iOS and Android separately, and it’s supported for any type of file in NativeScript—not just CSS files. You’ll see a few more examples of this convention later in this guide.\n\nThere’s one other change here we need to discuss, and that’s the <code>class</code> attribute you added to this button:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nNativeScript uses the <code>class</code> attribute for adding CSS class names to UI components. The class name is used to give the sign up button a slightly different look than the sign in button. You can find the CSS rules associated with this class name in <code>platform.ios.css</code> and <code>platform.android.css</code>:\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/* From platform.android.css */</span></div><div class=\"line\"><span class=\"selector-class\">.link</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* From platform.ios.css */</span></div><div class=\"line\"><span class=\"selector-class\">.link</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n&gt; <strong>TIP</strong>: NativeScript also supports selecting elements by the <code>id</code> attribute. Refer to the docs for <a href=\"/styling#supported-selectors\">a full list of the supported selectors</a>.\n\nWith these changes in place, you’ll notice that the app looks halfway decent now, and also has a distinctly different look on iOS and Android:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/ios/3.png\" alt=\"login 1\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/android/3.png\" alt=\"login 1\">\n\nFeel free to take some time to play with the look of this app before moving on. You can try adding some additional CSS class names, or adding some page-specific styles in your <code>login.css</code> file. When you’re ready, let’s move on and add an image to this login screen.\n\n## 2.5: Images\n\nIn NativeScript you use the <code>&lt;Image&gt;</code> UI component and its <code>src</code> attribute to add images to your pages. The <code>src</code> attribute lets you specify your image in three ways. The first (and simplest) way is to point at the URL of an image:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.nativescript.org/images/default-source/landingpages/logo.png\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThe second way is to point at an image that lives within your app’s <code>app</code> folder. For example if you have an image at <code>app/images/logo.png</code>, you can use it with:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"~/images/logo.png\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThe third way, and the one Groceries uses, is to use platform-specific image resources. Let’s add an image to the login screen and then discuss exactly what’s happening.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add a logo</h4>\n\nIn <code>login.xml</code>, add the <code>&lt;Image&gt;</code> below as the first child of the existing <code>&lt;StackLayout&gt;</code> tag:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res://logo\"</span> <span class=\"attr\">stretch</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">horizontalAlignment</span>=<span class=\"string\">\"center\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThe <code>res://</code> syntax tells NativeScript to use a platform-specific resource, in this case an image. Platform-specific resources go in your app’s <code>app/App_Resources</code> folder. If you look there you’ll find a few different image files, several of which are named <code>logo.png</code>.\n\nAlthough more complex than putting an image directly in the <code>app</code> folder, using platform-specific images gives you more control over image display on different device dimensions. For example iOS lets you provide three different image files for devices with different pixel densities. As such you’ll find logos named <code>logo.png</code>, <code>logo@2x.png</code>, and <code>logo@3x.png</code> in your <code>App_Resources/iOS</code> folder. For Android you’ll find similar image files in <code>App_Resources/Android/drawable-hdpi</code> (for “high” dpi, or high dots-per-inch), <code>App_Resources/Android/drawable-mdpi</code> (for medium-dpi), and <code>App_Resources/Android/drawable-ldpi</code> (for low-dpi).\n\nOnce these files are in place the NativeScript framework knows how to pick the correct file; all you have to do is reference the image using <code>res://</code> and its base file name—i.e. <code>res://logo</code>. Here’s what your login screen should look like on iOS and Android:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/ios/4.png\" alt=\"login 4\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/android/4.png\" alt=\"login 4\">\n\nAt this point your UI looks good, but the app still doesn’t actually do anything. Let’s look at how you can use JavaScript to add some functionality.\n\n&gt; <strong>TIP</strong>: The community-written <a href=\"http://nsimage.brosteins.com/\" target=\"_blank\" rel=\"external\">NativeScript Image Builder</a> can help you generate images in the appropriate resolutions for iOS and Android.\n\n</div>","excerpt":"","more":"<h1 id=\"Chapter-2—Building-the-UI\"><a href=\"#Chapter-2—Building-the-UI\" class=\"headerlink\" title=\"Chapter 2—Building the UI\"></a>Chapter 2—Building the UI</h1><p>Before you start coding the Groceries app it’s important to understand a NativeScript app’s folder structure. It’ll help you understand where to place new files, as well as a bit of what’s going on with NativeScript under the hood.</p>\n<p>Go ahead and open your app’s <code>sample-Groceries</code> folder in your text editor of choice and let’s dig in.</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#21-directory-structure\">2.1: Directory structure</a>\n- <a href=\"#22-adding-ui-components\">2.2: Adding UI components</a>\n- <a href=\"#23-layouts\">2.3: Layouts</a>\n- <a href=\"#24-css\">2.4: CSS</a>\n- <a href=\"#25-images\">2.5: Images</a>\n\n## 2.1: Directory structure\n\nTo keep things simple, let’s start by looking at the outer structure of the Groceries app:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">└── sample-Groceries</div><div class=\"line\">    ├── app</div><div class=\"line\">    │   └── ...</div><div class=\"line\">    ├── node_modules</div><div class=\"line\">    │   └── tns-core-modules</div><div class=\"line\">    ├── package.json</div><div class=\"line\">    └── platforms</div><div class=\"line\">        ├── android</div><div class=\"line\">        └── ios</div></pre></td></tr></table></figure>\n\nHere’s what these various files and folders do:\n\n- <strong>app</strong>: This folder contains all the development resources you need to build your app. You’ll be spending most of your time editing the files in here.\n- <strong>node_modules</strong>: This folder contains your app’s npm module dependencies. All new NativeScript projects start with a single dependency on tns-core-modules.\n- <strong>node_modules/tns-core-modules</strong>: This folder contains your app’s NativeScript modules, which are a series of NativeScript-provided JavaScript modules you’ll use to build your app. Each module contains the platform-specific code needed to implement some feature—the camera, http calls, the file system, and so forth—exposed through a platform-agnostic API (e.g. <code>camera.takePicture()</code>). We’ll look at some examples momentarily.\n- <strong>package.json</strong>: This file contains your app’s configuration details, such as your app id, the version of NativeScript you’re using, and also which npm modules your app uses. We’ll take a closer look at how to use this file when we talk about using npm modules in <a href=\"chapter5\">chapter 5</a>.\n- <strong>platforms</strong>: This folder contains the platform-specific code NativeScript needs to build native iOS and Android apps. For example in the <code>android</code> folder you’ll find things like your project’s <code>AndroidManifest.xml</code> and .apk executable files. Similarly, the <code>ios</code> folder contains the Groceries’ Xcode project and .ipa executables. Note, users on Windows machines will not have an <code>ios</code> folder.\n\nThe NativeScript CLI manages the <code>platforms</code> folder for you as you develop and run your app; therefore, it’s a best practice to treat the <code>platforms</code> folder as generated code. The Groceries app includes the <code>platforms</code> folder in its <a href=\"https://github.com/NativeScript/sample-Groceries/blob/master/.gitignore\"><code>.gitignore</code></a> to exclude its files from source control.\n\nNext, let’s dig into the <code>app</code> folder, as that’s where you’ll be spending the majority of your time.\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">└── sample-Groceries</div><div class=\"line\">    ├── app</div><div class=\"line\">    │   ├── App_Resources</div><div class=\"line\">    │   │   ├── Android</div><div class=\"line\">    │   │   └── iOS</div><div class=\"line\">    │   ├── shared</div><div class=\"line\">    │   │   └── ...</div><div class=\"line\">    │   ├── views</div><div class=\"line\">    │   │   └── login</div><div class=\"line\">    │   │       ├── login.js</div><div class=\"line\">    │   │       └── login.xml</div><div class=\"line\">    │   ├── app.css</div><div class=\"line\">    │   ├── app.js</div><div class=\"line\">    │   └── ...</div><div class=\"line\">    └── ...</div></pre></td></tr></table></figure>\n\nHere’s what these various files and folders do:\n\n- <strong>App_Resources</strong>: This folder contains platform-specific resources such as icons, splash screens, and configuration files. The NativeScript CLI takes care of injecting these resources into the appropriate places in the <code>platforms</code> folder when you execute <code>tns run</code>.\n- <strong>shared</strong>: This folder, specific to the Groceries app, contains any files you need to share across views in your app. In the Groceries app, you’ll find a few view model objects and a <code>config.js</code> file used to share configuration variables like API keys.\n- <strong>views</strong>: This folder contains the code to build your app’s views, each of which will have a subfolder in <code>views</code>. Each view is made up of an xml file, a JavaScript file, and an optional CSS file. The groceries app contains three folders for its three views.\n- <strong>app.css</strong>: This file contains global styles for your app. We’ll dig into app styling in <a href=\"#24-css\">chapter 2.4</a>.\n- <strong>app.js</strong>: This file sets up your application’s starting module and initializes the app.\n\nLet’s start with <code>app/app.js</code>, as it’s the starting point for NativeScript apps. Your <code>app.js</code> contains the two lines below: \n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> applicationModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\">applicationModule.start(&#123; moduleName: <span class=\"string\">\"views/login/login\"</span> &#125;);</div></pre></td></tr></table></figure>\n\nHere, you’re requiring, or importing, the <a href=\"\">NativeScript application module</a>. Then, you call its <code>start()</code> method with the starting screen of your app (the login screen), which lives in your app’s <code>views/login</code> folder.\n\n&gt; <strong>TIP</strong>: JavaScript modules in NativeScript follow the <a href=\"http://wiki.commonjs.org/wiki/CommonJS\">CommonJS specification</a>. This means you can use the <a href=\"http://wiki.commonjs.org/wiki/Modules/1.1#Module_Context\"><code>require()</code> method</a> to import modules, as is done above, as well as use the <code>export</code> keyword to expose a module’s properties and methods, which we’ll look at later in this chapter. These are the same constructs Node.js uses for JavaScript modules, so if you know how to use Node.js modules, you already know how to use NativeScript modules.\n\nNow that your app is ready for development, let’s add some UI components to make your login screen show more than some basic text.\n\n## 2.2: Adding UI components\n\nLet’s dig into the files used to create your app’s UI, which reside in the <code>app/views</code> folder. Each folder in <code>app/views</code> contains the code for one of the three pages in Groceries: <code>list</code>, <code>login</code>, and <code>register</code>. If you look in the <code>app/views/login</code> folder, you’ll see three files: <code>login.css</code>, <code>login.js</code>, and the <code>login.xml</code> file we updated in the previous chapter. When you open <code>login.xml</code> again you should see the following code:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"hello NativeScript\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n\nThis page currently contains two UI components: a <code>&lt;Page&gt;</code> and a <code>&lt;Label&gt;</code>. To make this page look more like a login page, let’s add a few additional components, namely two <code>&lt;TextField&gt;</code> elements and two <code>&lt;Button&gt;</code> elements.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add UI components to <code>login.xml</code></h4>\n\nOpen <code>app/views/login/login.xml</code> and replace the existing <code>&lt;Label&gt;</code> with the following code:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Email Address\"</span> <span class=\"attr\">keyboardType</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autocapitalizationType</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">secure</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign in\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nNativeScript UI components provide attributes to let you configure their behavior and appearance. The code you just added uses the following attributes:\n\n- <code>&lt;TextField&gt;</code>\n    - <code>hint</code>: Shows placeholder text that tells the user what to type.\n    - <code>keyboardType</code>: The type of keyboard to present to the user for input. <code>keyboardType=&quot;email&quot;</code> shows a keyboard optimized for entering email addresses. NativeScript currently supports <a href=\"/ui/keyboard.html\">five types of keyboards</a> for text fields.\n    - <code>autocorrect</code>: A boolean attribute that determines whether the mobile operating system should autocorrect user input. In the case of email address text fields, the autocorrect behavior is undesirable.\n    - <code>autocapitalizationType</code>: Determines how the operating system should autocapitalize user input. <code>autocapitalizationType=&quot;none&quot;</code> turns autocapitalization off altogether. NativeScript supports <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.autocapitalizationtype.html\">four autocapitalization types</a> on text fields.\n    - <code>secure</code>: A boolean attribute that determines whether the TextField’s text should be masked, which is commonly done on password fields.\n- <code>&lt;Button&gt;</code>\n    - <code>text</code>: Controls the text displayed within the button.\n\nAfter you <a href=\"#development-workflow\">run your app</a> with this change, you will see a single <code>&lt;Button&gt;</code> component on the screen:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/ios/1.png\" alt=\"login 1\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/android/1.png\" alt=\"login 1\">\n\nCurrently you only see a single button because you need to tell NativeScript how to layout your page’s UI components. Let’s look at how to use NativeScript layouts to arrange these components on the screen.\n\n&gt; <strong>TIP</strong>: The NativeScript docs include a <a href=\"/ui-with-xml\">full list of the UI components and attributes</a> with which you can build your apps. You can even <a href=\"/ui-with-xml#custom-components\">build your own, custom UI components</a>.\n\n## 2.3: Layouts \n\nNativeScript provides several different layout containers that allow you to place UI components precisely where you want them to appear. \n\n- The <a href=\"\">Absolute Layout</a> lets you position elements using explicit x and y coordinates. This is useful when you need to place elements in exact locations, for example showing an activity indicator widget in the top-left corner of your app.\n- The <a href=\"\">Dock Layout</a> is useful for placing UI elements at the outer edges of your app. For example, a container docked at the bottom of the screen would be a good location for an ad.\n- The <a href=\"\">Grid Layout</a> lets you divide your interface into a series of rows and columns, much like a <code>&lt;table&gt;</code> in HTML markup.\n- The <a href=\"\">Stack Layout</a> lets you stack child UI components either vertically or horizontally.\n- The <a href=\"\">Wrap Layout</a> lets child UI components flow from one row or column to the next when space is filled.\n\nFor your login screen, all you need is a simple <code>&lt;StackLayout&gt;</code> to stack the UI components on top of each other. In later sections, you’ll use some of the more advanced layouts.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add a stack layout to the login screen</h4>\n\nIn <code>login.xml</code>, add a <code>&lt;StackLayout&gt;</code> component within the <code>&lt;Page&gt;</code> component. <code>login.xml</code> should look like this:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Email Address\"</span> <span class=\"attr\">keyboardType</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autocapitalizationType</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">secure</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign in\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThe stack layout is a UI component, and as such, it has attributes just like the <code>&lt;TextField&gt;</code> and <code>&lt;Button&gt;</code> components you used in the previous section. Here, the <code>orientation=&quot;vertical&quot;</code> attribute tells the stack layout to arrange its child components vertically.\n\nAfter you run your app with this change, you’ll see that your login page’s UI components stack up:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/ios/2.png\" alt=\"login 2\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/android/2.png\" alt=\"login 2\">\n\nAlthough the UI components are in the correct order, they could use some spacing and color to make the app look a bit nicer. To do that let’s look at another NativeScript feature: CSS.\n\n&gt; <strong>TIP</strong>:\n&gt; <em> Refer to the NativeScript docs for a <a href=\"/layouts\">more detailed look at how NativeScript layouts work</a> and the various things you can do to configure them.\n&gt; </em> Check out Jen Looper’s article on <a href=\"https://www.nativescript.org/blog/demystifying-nativescript-layouts\">demystifying NativeScript layouts</a> for a thorough look at NativeScript layouts in action.\n\n## 2.4: CSS\n\nNativeScript uses a <a href=\"/styling\">subset of CSS</a> to change the visual appearance of your app. You can use three mechanisms to add CSS properties to UI components: <a href=\"/styling#application-wide-css\">application-wide CSS</a> (<code>app.css</code>), <a href=\"/styling#page-specific-css\">page-specific CSS</a>, and an <a href=\"/styling#inline-css\">inline <code>style</code> attribute</a>.\n\n&gt; <strong>TIP</strong>:\n&gt; <em> Place CSS rules that should apply to all pages in your <code>app.css</code>, and CSS rules that apply to a single page in a page-specific CSS file (e.g. <code>login.css</code>). \n&gt; </em> Although inline styles are great for quick testing—e.g. <code>&lt;Page style=&quot;background-color: green;&quot;&gt;</code> you should avoid them in general because the <code>style</code> attributes tend to clutter up xml files, especially if you need to apply multiple rules.\n\nLet’s start by adding a few application-wide CSS rules.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Create global styles</h4>\n\nPaste the following code in the <code>app.css</code> file:\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"><span class=\"selector-tag\">Page</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">17</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">TextField</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">Image</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">80</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">Button</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nIf you’ve done any web development before, the syntax should feel familiar here. You select four UI components (Page, TextField, Image, and Button) by their tag name, and then apply a handful of CSS rules as name/value pairs. NativeScript does not support all CSS properties because it is not possible to replicate some of them in native apps without causing performance issues. A <a href=\"/styling#supported-properties\">full list of the CSS properties that are supported</a> are listed in the NativeScript docs.\n\nLet’s make one more change. Although often you want CSS rules to apply equally to your iOS and Android app, occasionally it makes sense to apply a CSS rule to only one platform. For example, iOS text fields frequently have borders around them, but Android text fields do not. Let’s look at how to make platform-specific style changes in NativeScript.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add platform-specific CSS</h4>\n\nAdd the following as the first line of your app’s <code>app.css</code> file:\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import &#123; url('~/platform.css') &#125;;</div></pre></td></tr></table></figure>\n\n&gt; <strong>IMPORTANT</strong>: NativeScript is consistent with browser implementations, in that <code>@import</code> statements must precede all other CSS rules in a file.\n\nNext, add a <code>class=&quot;link&quot;</code> attribute to the sign up button in <code>login.xml</code>. The button’s markup should look like this:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nLet’s break down what just happened. First, NativeScript supports CSS’s <code>@import</code> statement for importing one CSS file into another. So this new line of code imports the CSS rules from <code>platform.css</code> into <code>app.css</code>. But, you might have noticed that Groceries does not have a file named <code>platform.css</code>—only <code>app/platform.android.css</code> and <code>app/platform.ios.css</code> exist. What’s going on here?\n\n<a id=\"platform-specific-files\"></a>When you execute <code>tns run</code>, or <code>tns livesync</code>, the NativeScript CLI takes your code from the <code>app</code> folder and places it in the native projects located in the <code>platforms/ios</code> and <code>platforms/android</code> folders. Here the naming convention comes in: while moving files, the CLI intelligently selects <code>.android.*</code> and <code>.ios.*</code> files. To give a specific example, the CLI moves <code>platform.ios.css</code> into <code>platforms/ios</code> and renames it to <code>platform.css</code>; similarly, the CLI moves <code>platform.android.css</code> into <code>platforms/android</code>, and again renames it to <code>platform.css</code>. This convention provides a convenient way to branch your code to handle iOS and Android separately, and it’s supported for any type of file in NativeScript—not just CSS files. You’ll see a few more examples of this convention later in this guide.\n\nThere’s one other change here we need to discuss, and that’s the <code>class</code> attribute you added to this button:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Sign up for Groceries\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nNativeScript uses the <code>class</code> attribute for adding CSS class names to UI components. The class name is used to give the sign up button a slightly different look than the sign in button. You can find the CSS rules associated with this class name in <code>platform.ios.css</code> and <code>platform.android.css</code>:\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/* From platform.android.css */</span></div><div class=\"line\"><span class=\"selector-class\">.link</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* From platform.ios.css */</span></div><div class=\"line\"><span class=\"selector-class\">.link</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n&gt; <strong>TIP</strong>: NativeScript also supports selecting elements by the <code>id</code> attribute. Refer to the docs for <a href=\"/styling#supported-selectors\">a full list of the supported selectors</a>.\n\nWith these changes in place, you’ll notice that the app looks halfway decent now, and also has a distinctly different look on iOS and Android:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/ios/3.png\" alt=\"login 1\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/android/3.png\" alt=\"login 1\">\n\nFeel free to take some time to play with the look of this app before moving on. You can try adding some additional CSS class names, or adding some page-specific styles in your <code>login.css</code> file. When you’re ready, let’s move on and add an image to this login screen.\n\n## 2.5: Images\n\nIn NativeScript you use the <code>&lt;Image&gt;</code> UI component and its <code>src</code> attribute to add images to your pages. The <code>src</code> attribute lets you specify your image in three ways. The first (and simplest) way is to point at the URL of an image:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.nativescript.org/images/default-source/landingpages/logo.png\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThe second way is to point at an image that lives within your app’s <code>app</code> folder. For example if you have an image at <code>app/images/logo.png</code>, you can use it with:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"~/images/logo.png\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThe third way, and the one Groceries uses, is to use platform-specific image resources. Let’s add an image to the login screen and then discuss exactly what’s happening.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add a logo</h4>\n\nIn <code>login.xml</code>, add the <code>&lt;Image&gt;</code> below as the first child of the existing <code>&lt;StackLayout&gt;</code> tag:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res://logo\"</span> <span class=\"attr\">stretch</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">horizontalAlignment</span>=<span class=\"string\">\"center\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThe <code>res://</code> syntax tells NativeScript to use a platform-specific resource, in this case an image. Platform-specific resources go in your app’s <code>app/App_Resources</code> folder. If you look there you’ll find a few different image files, several of which are named <code>logo.png</code>.\n\nAlthough more complex than putting an image directly in the <code>app</code> folder, using platform-specific images gives you more control over image display on different device dimensions. For example iOS lets you provide three different image files for devices with different pixel densities. As such you’ll find logos named <code>logo.png</code>, <code>logo@2x.png</code>, and <code>logo@3x.png</code> in your <code>App_Resources/iOS</code> folder. For Android you’ll find similar image files in <code>App_Resources/Android/drawable-hdpi</code> (for “high” dpi, or high dots-per-inch), <code>App_Resources/Android/drawable-mdpi</code> (for medium-dpi), and <code>App_Resources/Android/drawable-ldpi</code> (for low-dpi).\n\nOnce these files are in place the NativeScript framework knows how to pick the correct file; all you have to do is reference the image using <code>res://</code> and its base file name—i.e. <code>res://logo</code>. Here’s what your login screen should look like on iOS and Android:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/ios/4.png\" alt=\"login 4\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter2/android/4.png\" alt=\"login 4\">\n\nAt this point your UI looks good, but the app still doesn’t actually do anything. Let’s look at how you can use JavaScript to add some functionality.\n\n&gt; <strong>TIP</strong>: The community-written <a href=\"http://nsimage.brosteins.com/\">NativeScript Image Builder</a> can help you generate images in the appropriate resolutions for iOS and Android.\n\n</div>"},{"_content":"# Chapter 6—Accessing Native APIs\n\nThe beauty of NativeScript is that you can write a native iOS or Android app in JavaScript, XML, and CSS without touching Swift, Objective-C, or Java, if you choose. But what if you want to present a different, more platform-specific UI to your users? Or if you want to access an iOS or Android API that NativeScript doesn't expose through a NativeScript module or plugin?\n\nNativeScript gives you the option to dig into native code as needed, and to do so without leaving JavaScript. To show how this works in action, let's start by adding some color to the ActionBar in the iOS version of the Groceries app.\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [6.1: Customize the ActionBar - iOS](#61-customize-the-actionbar---ios)\n- [6.2: Deleting from a list - Android](#62-deleting-from-a-list---android)\n- [6.3: Deleting from a list - iOS](#63-deleting-from-a-list---ios)\n\n## 6.1: Customize the ActionBar - iOS\n\nWhen you use the ActionBar UI component, NativeScript is actually creating and managing an iOS `UINavigationController` for you. You can see this for yourself by digging into the implementation code, specifically `node_modules/tns-core-modules/ui/action-bar/action-bar.ios.js`, and `node_modules/tns-core-modules/ui/frame/frame.ios.js`.\n\nWhat you might not realize is that the code that you see in these NativeScript modules, the code that looks like Objective-C-ified or Java-ified JavaScript code, is available for you to use in your own JavaScript modules. For example, you can easily get a reference to the `UINavigationBar` and simply call its [documented methods](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UINavigationBar_Class/index.html) to change its look and feel. Let's look at how to do that.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Modify the ActionBar\n</h4>\n\nBefore you start tinkering with the `UINavigationBar` let's add an `<ActionBar>` to the login and register pages, so that the app's three pages all have a consistent look.\n\nOpen `app/views/register/register.xml` and paste the following code in directly after the opening `<Page>` tag:\n\n```xml\n<Page.actionBar>\n    <ActionBar title=\"Sign up\"></ActionBar>\n</Page.actionBar>\n```\n\nNext, open `app/views/login/login.xml` and paste in the following code, again directly after the opening `<Page>` tag:\n\n```xml\n<Page.actionBar>\n    <ActionBar title=\"Sign in\"></ActionBar>\n</Page.actionBar>\n```\n\nFinally, open `app/app.css` and paste the following CSS to modify the ActionBar’s colors:\n\n```css\nActionBar {\n    color: white;\n    background-color: #2E6DAD;\n}\n```\n\nWith the ActionBar in place, let's look at how to customize its look with some native iOS APIs. Open `app/views/login/login.js` and paste the following code in the `exports.loaded()` function, directly after the `var page = args.object;` assignment:\n\n```javascript\nif (page.ios) {\n    var navigationBar = frameModule.topmost().ios.controller.navigationBar;\n    navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;\n}\n```\n\n</div>\n\n<div class=\"explain\">\n\nOk, let's break down what just happened, starting with the `if (page.ios)` check. NativeScript modules, in general, follow the pattern of exposing their native implementations through `ios` and `android` properties. You can see this in the if check (`page.ios`), and also on the first line within the if check, as `frameModule.topMost().ios` is used to retrieve a reference to the underlying `UINavigationController`. Testing for the existence of these properties (e.g. `if (page.ios)`) is a convenient way to fork your code, to ensure that iOS-specific code only runs on iOS, and Android-specific code only runs on Android.\n\n> **TIP**: As a best practice, testing for a platform with an if check is the way to go when you have a small number of platform-specific changes to make. If, on the contrary, you have big, entirely different chunks of code for iOS and Android, you might want to go with [platform-specific code-behind files](#platform-specific-files)—e.g. `login.ios.js` and `login.android.js`.\n\nWithin the if block, you start by getting a reference to the `UINavigationBar`, and then you set its [`barStyle` property](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitDataTypesReference/index.html#//apple_ref/c/tdef/UIBarStyle) to `UIBarStyle.UIBarStyleBlack`, which (counter intuitively) makes the iOS status bar use white text. This produces the look shown below:\n\n![The iOS actionbar with updated colors](/docs/img/cli-getting-started/nativescript/chapter6/ios/1.png)\n\nLearning how to transfer iOS and Android APIs into valid NativeScript code can take a little trial and error to get right. You can always refer to the NativeScript docs for detailed discussions of how to handle the code conversion. Here are the [docs for Android](/runtimes/android/marshalling/java-to-js.html), and here are the [docs for iOS](/runtimes/ios/marshalling/Marshalling-Overview.html).\n\n> **TIP**: NativeScript provides TypeScript declaration files for all iOS and Android APIs. If you're using TypeScript you can reference these declaration files to enable code completion in your editor. Even if you're not using TypeScript, these declaration files can be invaluable references when you're transferring native APIs to NativeScript code. For instance try searching for “UINavigationBar” in the iOS declaration file below to see which other properties are available.\n> - [iOS TypeScript declaration file](https://raw.githubusercontent.com/NativeScript/NativeScript/master/tns-core-modules/ios.d.ts)\n> - [Android TypeScript declaration file](https://raw.githubusercontent.com/NativeScript/NativeScript/master/tns-core-modules/android17.d.ts)\n\nForking the user experience can entail more than just changing some colors. For example, sliding to delete list items is a common UI interaction on iOS, but not Android. But as you've seen, NativeScript makes it relatively easy to fork your code to provide a more platform-specific experience. So to allow a user to delete an item from a list, let's create a slide-to-delete UI for iOS, and use a more-Android-friendly trash can icon to let the user delete items from our Android app.\n\n## 6.2: Deleting from a list - Android\n\nFor Android you're going to add tappable trash cans to each item in the grocery list; so the first challenge is figuring out how to show these images only for Android, as you'll be using a completely different UI on iOS.\n\nTo do so you'll use a new bit of syntax in your XML. NativeScript allows you to set an attribute for only one platform using the `platform:attributeName` syntax. For example the following sets a button's text to “foo” on iOS, and “bar” on Android:\n\n```xml\n<Button ios:text=\"foo\" android:text=\"bar\" />\n```\n\nThis same syntax is available for all attributes for all UI components, and this mechanism is another convenient way NativeScript lets you fork your code for separate iOS and Android implementations. Let's use this technique to show a trash can only on Android.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Add an Android-only UI element\n</h4>\n\nOpen `app/views/list/list.xml`, find the `<ListView.itemTemplate>` tag, and replace it with the code below:\n\n```xml\n<ListView.itemTemplate>\n    <GridLayout columns=\"*, auto\">\n        <Label text=\"{% raw %}{{ name }}{% endraw %}\"/>\n        <Image src=\"res://ic_menu_delete\" ios:visibility=\"collapsed\" col=\"1\" tap=\"delete\" />\n    </GridLayout>\n</ListView.itemTemplate>\n```\n\n</div>\n\n<div class=\"explain\">\n\nWith this code you're primarily adding an `<Image>` to the existing ListView template. But now that you have multiple UI components in this template, you have to tell NativeScript how to layout these two components, which is what the `<GridLayout>` handles. By specifying `columns=\"*, auto\"` you divide each item into two columns: the first containing the label and the second containing the new image.\n\nFor the image itself, the `ios:visibility=\"collapsed\"` attribute sets the image's `visibility` CSS property to `\"collapsed\"`, which hides it. Because the attribute was prefixed with `ios:`, that CSS property is only applied on iOS; therefore the button displays on Android devices, but not on iOS ones. The trash can image itself has already been placed in the app for you, and can be found in appropriate sizes in the four drawable folders in `/app/App_Resources/Android`. Here's what the trash can UI looks like on Android:\n\n![Trash can icons on Android](/docs/img/cli-getting-started/nativescript/chapter6/android/1.png)\n\nFinally, make the trash actually delete items. To do that you'll need to implement the `tap=\"delete\"` handler in the list code-behind file.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Build the delete functions\n</h4>\n\nOpen `app/views/list/list.js` and paste the following code at the bottom of the file:\n\n```javascript\nexports.delete = function(args) {\n    var item = args.view.bindingContext;\n    var index = groceryList.indexOf(item);\n    groceryList.delete(index);\n};\n```\n\nThis code gets the index of the grocery the user tapped, matches that to the corresponding item in the view model, and then passes that index to the view model's `delete()` method—which doesn't exist yet, so let's create it.\n\nOpen `app/shared/view-models/grocery-list-view-model.js` and paste in the code below. Remember to add this function toward the end of the file, right above the `return viewModel` line:\n\n```javascript\nviewModel.delete = function(index) {\n    return fetch(config.apiUrl + \"Groceries/\" + viewModel.getItem(index).id, {\n        method: \"DELETE\",\n        headers: {\n            \"Authorization\": \"Bearer \" + config.token,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(handleErrors)\n    .then(function() {\n        viewModel.splice(index, 1);\n    });\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThis code probably looks fairly familiar by now. You're again calling the fetch module's `fetch()` method, this time specifying a `method` of `\"DELETE\"` to delete a grocery from the backend. You again return a `Promise` so the calling function can handle successful and unsuccessful calls. Note again the power of using the MVVM approach for building your app. To update the grocery list UI, all you have to do is remove the item from the ObservableArray (`viewModel.splice(index, 1)`), and let the list's presentation take care of itself.\n\nIf you run your app on Android you should be able to delete items from the list.\n\n![deleting from a list on Android](/docs/img/cli-getting-started/nativescript/chapter6/android/2.gif)\n\nNow that you have built the interface for Android's tappable icon, let's add a swipe delete interface for iOS.\n\n## 6.3: Deleting from a list - iOS\n\nIf you're an iOS user you're probably familiar with the slide-to-delete gesture as it's common in a number of iOS applications. The code to implement the gesture is actually baked into the iOS SDK itself (see [`UITableViewCellEditingStyle`'s docs](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewCell_Class/#//apple_ref/c/tdef/UITableViewCellEditingStyle)), so you can directly use those APIs in your NativeScript apps.\n\nThe code to do so is a little trickier than our previous example for Android, so we've provided a ready-built module to implement this functionality in the `shared/utils/ios-swipe-delete.js` file. In this file you'll find a custom implementation of a data source that adheres to the `UITableViewDataSource` protocol. The file exports a single `enable()` function, which takes a reference to a ListView, and injects that ListView with the custom data source behavior.\n\nDon't worry too much about exactly what this code is doing, as it involves a bit of understanding of how iOS APIs works. What is cool is that you *can* implement this relatively advanced iOS API in a few dozen lines of code, and that it's really easy to wrap this code with a very simple JavaScript API. This ease of use is exactly why NativeScript modules and NativeScript plugins are so easy to consume. Let's look at how to use this module.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Edit the ListView\n</h4>\n\nAdd the following line of code to the top of `app/views/list/list.js`:\n\n```javascript\nvar swipeDelete = require(\"../../shared/utils/ios-swipe-delete\");\n```\n\nThen, add the following code to the `exports.loaded()` function, directly under the `page = args.object;` assignment:\n\n```javascript\nif (page.ios) {\n    var listView = page.getViewById(\"groceryList\");\n    swipeDelete.enable(listView, function(index) {\n        groceryList.delete(index);\n    });\n}\n```\n\n</div>\n\nThis code gets a reference to the page's `<ListView>` id and then passes that reference to the swipe-to-delete module's `enable()` function. The `enable()` function also takes a callback, so you additionally pass an inline function that calls the view model's `delete()` function that you built in the previous section. Here's what the swipe-to-delete functionality looks like on iOS:\n\n![deleting from a list on iOS](/docs/img/cli-getting-started/nativescript/chapter6/ios/2.gif)\n\nAnd... that's it! You've created a functional, cross-platform, backend-driven app to manage your grocery list. In the process you've created a unique UI for Android and iOS, leveraged NativeScript plugins and npm modules, learned how to log in and register, managed backend services, created a list with add and delete functionality, and more. \n\nCongratulations! Feel free to [share your accomplishment on Twitter](https://twitter.com/intent/tweet?text=I%20just%20built%20an%20iOS%20and%20Android%20app%20using%20@NativeScript%20%F0%9F%8E%89.%20You%20can%20too!%20http://docs.nativescript.org/tutorial/chapter-0%20%23opensource) or [Facebook](https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fdocs.nativescript.org%2Ftutorial%2Fchapter-0&p%5B) to impress your friends 😀.\n\n> **TIP**:\n> * If you're curious about how NativeScript makes it possible to directly invoke iOS and Android APIs, you can read about [“How NativeScript Works”](http://developer.telerik.com/featured/nativescript-works/) on our blog.\n> * Remember that the [Groceries app's “end” branch](https://github.com/NativeScript/sample-Groceries/tree/end) has the final state of this tutorial. Feel free to refer back to it at any time.\n> * Advanced ListView interactions like swipe-to-delete, pull-to-refresh, as well as other components such as calendars and charts are available out-of-the-box as part of Telerik [UI For NativeScript](http://docs.telerik.com/devtools/nativescript-ui/introduction).\n","source":"tutorial/6.md","raw":"# Chapter 6—Accessing Native APIs\n\nThe beauty of NativeScript is that you can write a native iOS or Android app in JavaScript, XML, and CSS without touching Swift, Objective-C, or Java, if you choose. But what if you want to present a different, more platform-specific UI to your users? Or if you want to access an iOS or Android API that NativeScript doesn't expose through a NativeScript module or plugin?\n\nNativeScript gives you the option to dig into native code as needed, and to do so without leaving JavaScript. To show how this works in action, let's start by adding some color to the ActionBar in the iOS version of the Groceries app.\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [6.1: Customize the ActionBar - iOS](#61-customize-the-actionbar---ios)\n- [6.2: Deleting from a list - Android](#62-deleting-from-a-list---android)\n- [6.3: Deleting from a list - iOS](#63-deleting-from-a-list---ios)\n\n## 6.1: Customize the ActionBar - iOS\n\nWhen you use the ActionBar UI component, NativeScript is actually creating and managing an iOS `UINavigationController` for you. You can see this for yourself by digging into the implementation code, specifically `node_modules/tns-core-modules/ui/action-bar/action-bar.ios.js`, and `node_modules/tns-core-modules/ui/frame/frame.ios.js`.\n\nWhat you might not realize is that the code that you see in these NativeScript modules, the code that looks like Objective-C-ified or Java-ified JavaScript code, is available for you to use in your own JavaScript modules. For example, you can easily get a reference to the `UINavigationBar` and simply call its [documented methods](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UINavigationBar_Class/index.html) to change its look and feel. Let's look at how to do that.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Modify the ActionBar\n</h4>\n\nBefore you start tinkering with the `UINavigationBar` let's add an `<ActionBar>` to the login and register pages, so that the app's three pages all have a consistent look.\n\nOpen `app/views/register/register.xml` and paste the following code in directly after the opening `<Page>` tag:\n\n```xml\n<Page.actionBar>\n    <ActionBar title=\"Sign up\"></ActionBar>\n</Page.actionBar>\n```\n\nNext, open `app/views/login/login.xml` and paste in the following code, again directly after the opening `<Page>` tag:\n\n```xml\n<Page.actionBar>\n    <ActionBar title=\"Sign in\"></ActionBar>\n</Page.actionBar>\n```\n\nFinally, open `app/app.css` and paste the following CSS to modify the ActionBar’s colors:\n\n```css\nActionBar {\n    color: white;\n    background-color: #2E6DAD;\n}\n```\n\nWith the ActionBar in place, let's look at how to customize its look with some native iOS APIs. Open `app/views/login/login.js` and paste the following code in the `exports.loaded()` function, directly after the `var page = args.object;` assignment:\n\n```javascript\nif (page.ios) {\n    var navigationBar = frameModule.topmost().ios.controller.navigationBar;\n    navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;\n}\n```\n\n</div>\n\n<div class=\"explain\">\n\nOk, let's break down what just happened, starting with the `if (page.ios)` check. NativeScript modules, in general, follow the pattern of exposing their native implementations through `ios` and `android` properties. You can see this in the if check (`page.ios`), and also on the first line within the if check, as `frameModule.topMost().ios` is used to retrieve a reference to the underlying `UINavigationController`. Testing for the existence of these properties (e.g. `if (page.ios)`) is a convenient way to fork your code, to ensure that iOS-specific code only runs on iOS, and Android-specific code only runs on Android.\n\n> **TIP**: As a best practice, testing for a platform with an if check is the way to go when you have a small number of platform-specific changes to make. If, on the contrary, you have big, entirely different chunks of code for iOS and Android, you might want to go with [platform-specific code-behind files](#platform-specific-files)—e.g. `login.ios.js` and `login.android.js`.\n\nWithin the if block, you start by getting a reference to the `UINavigationBar`, and then you set its [`barStyle` property](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitDataTypesReference/index.html#//apple_ref/c/tdef/UIBarStyle) to `UIBarStyle.UIBarStyleBlack`, which (counter intuitively) makes the iOS status bar use white text. This produces the look shown below:\n\n![The iOS actionbar with updated colors](/docs/img/cli-getting-started/nativescript/chapter6/ios/1.png)\n\nLearning how to transfer iOS and Android APIs into valid NativeScript code can take a little trial and error to get right. You can always refer to the NativeScript docs for detailed discussions of how to handle the code conversion. Here are the [docs for Android](/runtimes/android/marshalling/java-to-js.html), and here are the [docs for iOS](/runtimes/ios/marshalling/Marshalling-Overview.html).\n\n> **TIP**: NativeScript provides TypeScript declaration files for all iOS and Android APIs. If you're using TypeScript you can reference these declaration files to enable code completion in your editor. Even if you're not using TypeScript, these declaration files can be invaluable references when you're transferring native APIs to NativeScript code. For instance try searching for “UINavigationBar” in the iOS declaration file below to see which other properties are available.\n> - [iOS TypeScript declaration file](https://raw.githubusercontent.com/NativeScript/NativeScript/master/tns-core-modules/ios.d.ts)\n> - [Android TypeScript declaration file](https://raw.githubusercontent.com/NativeScript/NativeScript/master/tns-core-modules/android17.d.ts)\n\nForking the user experience can entail more than just changing some colors. For example, sliding to delete list items is a common UI interaction on iOS, but not Android. But as you've seen, NativeScript makes it relatively easy to fork your code to provide a more platform-specific experience. So to allow a user to delete an item from a list, let's create a slide-to-delete UI for iOS, and use a more-Android-friendly trash can icon to let the user delete items from our Android app.\n\n## 6.2: Deleting from a list - Android\n\nFor Android you're going to add tappable trash cans to each item in the grocery list; so the first challenge is figuring out how to show these images only for Android, as you'll be using a completely different UI on iOS.\n\nTo do so you'll use a new bit of syntax in your XML. NativeScript allows you to set an attribute for only one platform using the `platform:attributeName` syntax. For example the following sets a button's text to “foo” on iOS, and “bar” on Android:\n\n```xml\n<Button ios:text=\"foo\" android:text=\"bar\" />\n```\n\nThis same syntax is available for all attributes for all UI components, and this mechanism is another convenient way NativeScript lets you fork your code for separate iOS and Android implementations. Let's use this technique to show a trash can only on Android.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Add an Android-only UI element\n</h4>\n\nOpen `app/views/list/list.xml`, find the `<ListView.itemTemplate>` tag, and replace it with the code below:\n\n```xml\n<ListView.itemTemplate>\n    <GridLayout columns=\"*, auto\">\n        <Label text=\"{% raw %}{{ name }}{% endraw %}\"/>\n        <Image src=\"res://ic_menu_delete\" ios:visibility=\"collapsed\" col=\"1\" tap=\"delete\" />\n    </GridLayout>\n</ListView.itemTemplate>\n```\n\n</div>\n\n<div class=\"explain\">\n\nWith this code you're primarily adding an `<Image>` to the existing ListView template. But now that you have multiple UI components in this template, you have to tell NativeScript how to layout these two components, which is what the `<GridLayout>` handles. By specifying `columns=\"*, auto\"` you divide each item into two columns: the first containing the label and the second containing the new image.\n\nFor the image itself, the `ios:visibility=\"collapsed\"` attribute sets the image's `visibility` CSS property to `\"collapsed\"`, which hides it. Because the attribute was prefixed with `ios:`, that CSS property is only applied on iOS; therefore the button displays on Android devices, but not on iOS ones. The trash can image itself has already been placed in the app for you, and can be found in appropriate sizes in the four drawable folders in `/app/App_Resources/Android`. Here's what the trash can UI looks like on Android:\n\n![Trash can icons on Android](/docs/img/cli-getting-started/nativescript/chapter6/android/1.png)\n\nFinally, make the trash actually delete items. To do that you'll need to implement the `tap=\"delete\"` handler in the list code-behind file.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Build the delete functions\n</h4>\n\nOpen `app/views/list/list.js` and paste the following code at the bottom of the file:\n\n```javascript\nexports.delete = function(args) {\n    var item = args.view.bindingContext;\n    var index = groceryList.indexOf(item);\n    groceryList.delete(index);\n};\n```\n\nThis code gets the index of the grocery the user tapped, matches that to the corresponding item in the view model, and then passes that index to the view model's `delete()` method—which doesn't exist yet, so let's create it.\n\nOpen `app/shared/view-models/grocery-list-view-model.js` and paste in the code below. Remember to add this function toward the end of the file, right above the `return viewModel` line:\n\n```javascript\nviewModel.delete = function(index) {\n    return fetch(config.apiUrl + \"Groceries/\" + viewModel.getItem(index).id, {\n        method: \"DELETE\",\n        headers: {\n            \"Authorization\": \"Bearer \" + config.token,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(handleErrors)\n    .then(function() {\n        viewModel.splice(index, 1);\n    });\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThis code probably looks fairly familiar by now. You're again calling the fetch module's `fetch()` method, this time specifying a `method` of `\"DELETE\"` to delete a grocery from the backend. You again return a `Promise` so the calling function can handle successful and unsuccessful calls. Note again the power of using the MVVM approach for building your app. To update the grocery list UI, all you have to do is remove the item from the ObservableArray (`viewModel.splice(index, 1)`), and let the list's presentation take care of itself.\n\nIf you run your app on Android you should be able to delete items from the list.\n\n![deleting from a list on Android](/docs/img/cli-getting-started/nativescript/chapter6/android/2.gif)\n\nNow that you have built the interface for Android's tappable icon, let's add a swipe delete interface for iOS.\n\n## 6.3: Deleting from a list - iOS\n\nIf you're an iOS user you're probably familiar with the slide-to-delete gesture as it's common in a number of iOS applications. The code to implement the gesture is actually baked into the iOS SDK itself (see [`UITableViewCellEditingStyle`'s docs](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewCell_Class/#//apple_ref/c/tdef/UITableViewCellEditingStyle)), so you can directly use those APIs in your NativeScript apps.\n\nThe code to do so is a little trickier than our previous example for Android, so we've provided a ready-built module to implement this functionality in the `shared/utils/ios-swipe-delete.js` file. In this file you'll find a custom implementation of a data source that adheres to the `UITableViewDataSource` protocol. The file exports a single `enable()` function, which takes a reference to a ListView, and injects that ListView with the custom data source behavior.\n\nDon't worry too much about exactly what this code is doing, as it involves a bit of understanding of how iOS APIs works. What is cool is that you *can* implement this relatively advanced iOS API in a few dozen lines of code, and that it's really easy to wrap this code with a very simple JavaScript API. This ease of use is exactly why NativeScript modules and NativeScript plugins are so easy to consume. Let's look at how to use this module.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Edit the ListView\n</h4>\n\nAdd the following line of code to the top of `app/views/list/list.js`:\n\n```javascript\nvar swipeDelete = require(\"../../shared/utils/ios-swipe-delete\");\n```\n\nThen, add the following code to the `exports.loaded()` function, directly under the `page = args.object;` assignment:\n\n```javascript\nif (page.ios) {\n    var listView = page.getViewById(\"groceryList\");\n    swipeDelete.enable(listView, function(index) {\n        groceryList.delete(index);\n    });\n}\n```\n\n</div>\n\nThis code gets a reference to the page's `<ListView>` id and then passes that reference to the swipe-to-delete module's `enable()` function. The `enable()` function also takes a callback, so you additionally pass an inline function that calls the view model's `delete()` function that you built in the previous section. Here's what the swipe-to-delete functionality looks like on iOS:\n\n![deleting from a list on iOS](/docs/img/cli-getting-started/nativescript/chapter6/ios/2.gif)\n\nAnd... that's it! You've created a functional, cross-platform, backend-driven app to manage your grocery list. In the process you've created a unique UI for Android and iOS, leveraged NativeScript plugins and npm modules, learned how to log in and register, managed backend services, created a list with add and delete functionality, and more. \n\nCongratulations! Feel free to [share your accomplishment on Twitter](https://twitter.com/intent/tweet?text=I%20just%20built%20an%20iOS%20and%20Android%20app%20using%20@NativeScript%20%F0%9F%8E%89.%20You%20can%20too!%20http://docs.nativescript.org/tutorial/chapter-0%20%23opensource) or [Facebook](https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fdocs.nativescript.org%2Ftutorial%2Fchapter-0&p%5B) to impress your friends 😀.\n\n> **TIP**:\n> * If you're curious about how NativeScript makes it possible to directly invoke iOS and Android APIs, you can read about [“How NativeScript Works”](http://developer.telerik.com/featured/nativescript-works/) on our blog.\n> * Remember that the [Groceries app's “end” branch](https://github.com/NativeScript/sample-Groceries/tree/end) has the final state of this tutorial. Feel free to refer back to it at any time.\n> * Advanced ListView interactions like swipe-to-delete, pull-to-refresh, as well as other components such as calendars and charts are available out-of-the-box as part of Telerik [UI For NativeScript](http://docs.telerik.com/devtools/nativescript-ui/introduction).\n","date":"2016-08-26T21:05:54.538Z","updated":"2016-08-26T21:05:54.538Z","path":"tutorial/6.html","title":"","comments":1,"layout":"page","_id":"cisn95c7v000qwsl0fx6undxw","content":"<h1 id=\"Chapter-6—Accessing-Native-APIs\"><a href=\"#Chapter-6—Accessing-Native-APIs\" class=\"headerlink\" title=\"Chapter 6—Accessing Native APIs\"></a>Chapter 6—Accessing Native APIs</h1><p>The beauty of NativeScript is that you can write a native iOS or Android app in JavaScript, XML, and CSS without touching Swift, Objective-C, or Java, if you choose. But what if you want to present a different, more platform-specific UI to your users? Or if you want to access an iOS or Android API that NativeScript doesn’t expose through a NativeScript module or plugin?</p>\n<p>NativeScript gives you the option to dig into native code as needed, and to do so without leaving JavaScript. To show how this works in action, let’s start by adding some color to the ActionBar in the iOS version of the Groceries app.</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#61-customize-the-actionbar---ios\">6.1: Customize the ActionBar - iOS</a>\n- <a href=\"#62-deleting-from-a-list---android\">6.2: Deleting from a list - Android</a>\n- <a href=\"#63-deleting-from-a-list---ios\">6.3: Deleting from a list - iOS</a>\n\n## 6.1: Customize the ActionBar - iOS\n\nWhen you use the ActionBar UI component, NativeScript is actually creating and managing an iOS <code>UINavigationController</code> for you. You can see this for yourself by digging into the implementation code, specifically <code>node_modules/tns-core-modules/ui/action-bar/action-bar.ios.js</code>, and <code>node_modules/tns-core-modules/ui/frame/frame.ios.js</code>.\n\nWhat you might not realize is that the code that you see in these NativeScript modules, the code that looks like Objective-C-ified or Java-ified JavaScript code, is available for you to use in your own JavaScript modules. For example, you can easily get a reference to the <code>UINavigationBar</code> and simply call its <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UINavigationBar_Class/index.html\" target=\"_blank\" rel=\"external\">documented methods</a> to change its look and feel. Let’s look at how to do that.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Modify the ActionBar\n</h4>\n\nBefore you start tinkering with the <code>UINavigationBar</code> let’s add an <code>&lt;ActionBar&gt;</code> to the login and register pages, so that the app’s three pages all have a consistent look.\n\nOpen <code>app/views/register/register.xml</code> and paste the following code in directly after the opening <code>&lt;Page&gt;</code> tag:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Sign up\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n\nNext, open <code>app/views/login/login.xml</code> and paste in the following code, again directly after the opening <code>&lt;Page&gt;</code> tag:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Sign in\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n\nFinally, open <code>app/app.css</code> and paste the following CSS to modify the ActionBar’s colors:\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ActionBar</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#2E6DAD</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\nWith the ActionBar in place, let’s look at how to customize its look with some native iOS APIs. Open <code>app/views/login/login.js</code> and paste the following code in the <code>exports.loaded()</code> function, directly after the <code>var page = args.object;</code> assignment:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (page.ios) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> navigationBar = frameModule.topmost().ios.controller.navigationBar;</div><div class=\"line\">    navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nOk, let’s break down what just happened, starting with the <code>if (page.ios)</code> check. NativeScript modules, in general, follow the pattern of exposing their native implementations through <code>ios</code> and <code>android</code> properties. You can see this in the if check (<code>page.ios</code>), and also on the first line within the if check, as <code>frameModule.topMost().ios</code> is used to retrieve a reference to the underlying <code>UINavigationController</code>. Testing for the existence of these properties (e.g. <code>if (page.ios)</code>) is a convenient way to fork your code, to ensure that iOS-specific code only runs on iOS, and Android-specific code only runs on Android.\n\n&gt; <strong>TIP</strong>: As a best practice, testing for a platform with an if check is the way to go when you have a small number of platform-specific changes to make. If, on the contrary, you have big, entirely different chunks of code for iOS and Android, you might want to go with <a href=\"#platform-specific-files\">platform-specific code-behind files</a>—e.g. <code>login.ios.js</code> and <code>login.android.js</code>.\n\nWithin the if block, you start by getting a reference to the <code>UINavigationBar</code>, and then you set its <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitDataTypesReference/index.html#//apple_ref/c/tdef/UIBarStyle\" target=\"_blank\" rel=\"external\"><code>barStyle</code> property</a> to <code>UIBarStyle.UIBarStyleBlack</code>, which (counter intuitively) makes the iOS status bar use white text. This produces the look shown below:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter6/ios/1.png\" alt=\"The iOS actionbar with updated colors\">\n\nLearning how to transfer iOS and Android APIs into valid NativeScript code can take a little trial and error to get right. You can always refer to the NativeScript docs for detailed discussions of how to handle the code conversion. Here are the <a href=\"/runtimes/android/marshalling/java-to-js.html\">docs for Android</a>, and here are the <a href=\"/runtimes/ios/marshalling/Marshalling-Overview.html\">docs for iOS</a>.\n\n&gt; <strong>TIP</strong>: NativeScript provides TypeScript declaration files for all iOS and Android APIs. If you’re using TypeScript you can reference these declaration files to enable code completion in your editor. Even if you’re not using TypeScript, these declaration files can be invaluable references when you’re transferring native APIs to NativeScript code. For instance try searching for “UINavigationBar” in the iOS declaration file below to see which other properties are available.\n&gt; - <a href=\"https://raw.githubusercontent.com/NativeScript/NativeScript/master/tns-core-modules/ios.d.ts\" target=\"_blank\" rel=\"external\">iOS TypeScript declaration file</a>\n&gt; - <a href=\"https://raw.githubusercontent.com/NativeScript/NativeScript/master/tns-core-modules/android17.d.ts\" target=\"_blank\" rel=\"external\">Android TypeScript declaration file</a>\n\nForking the user experience can entail more than just changing some colors. For example, sliding to delete list items is a common UI interaction on iOS, but not Android. But as you’ve seen, NativeScript makes it relatively easy to fork your code to provide a more platform-specific experience. So to allow a user to delete an item from a list, let’s create a slide-to-delete UI for iOS, and use a more-Android-friendly trash can icon to let the user delete items from our Android app.\n\n## 6.2: Deleting from a list - Android\n\nFor Android you’re going to add tappable trash cans to each item in the grocery list; so the first challenge is figuring out how to show these images only for Android, as you’ll be using a completely different UI on iOS.\n\nTo do so you’ll use a new bit of syntax in your XML. NativeScript allows you to set an attribute for only one platform using the <code>platform:attributeName</code> syntax. For example the following sets a button’s text to “foo” on iOS, and “bar” on Android:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">ios:text</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">android:text</span>=<span class=\"string\">\"bar\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThis same syntax is available for all attributes for all UI components, and this mechanism is another convenient way NativeScript lets you fork your code for separate iOS and Android implementations. Let’s use this technique to show a trash can only on Android.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Add an Android-only UI element\n</h4>\n\nOpen <code>app/views/list/list.xml</code>, find the <code>&lt;ListView.itemTemplate&gt;</code> tag, and replace it with the code below:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">columns</span>=<span class=\"string\">\"*, auto\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; name &#125;&#125;&#123;% endraw %&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res://ic_menu_delete\"</span> <span class=\"attr\">ios:visibility</span>=<span class=\"string\">\"collapsed\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"delete\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">GridLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nWith this code you’re primarily adding an <code>&lt;Image&gt;</code> to the existing ListView template. But now that you have multiple UI components in this template, you have to tell NativeScript how to layout these two components, which is what the <code>&lt;GridLayout&gt;</code> handles. By specifying <code>columns=&quot;*, auto&quot;</code> you divide each item into two columns: the first containing the label and the second containing the new image.\n\nFor the image itself, the <code>ios:visibility=&quot;collapsed&quot;</code> attribute sets the image’s <code>visibility</code> CSS property to <code>&quot;collapsed&quot;</code>, which hides it. Because the attribute was prefixed with <code>ios:</code>, that CSS property is only applied on iOS; therefore the button displays on Android devices, but not on iOS ones. The trash can image itself has already been placed in the app for you, and can be found in appropriate sizes in the four drawable folders in <code>/app/App_Resources/Android</code>. Here’s what the trash can UI looks like on Android:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter6/android/1.png\" alt=\"Trash can icons on Android\">\n\nFinally, make the trash actually delete items. To do that you’ll need to implement the <code>tap=&quot;delete&quot;</code> handler in the list code-behind file.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Build the delete functions\n</h4>\n\nOpen <code>app/views/list/list.js</code> and paste the following code at the bottom of the file:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.delete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> item = args.view.bindingContext;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = groceryList.indexOf(item);</div><div class=\"line\">    groceryList.delete(index);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\nThis code gets the index of the grocery the user tapped, matches that to the corresponding item in the view model, and then passes that index to the view model’s <code>delete()</code> method—which doesn’t exist yet, so let’s create it.\n\nOpen <code>app/shared/view-models/grocery-list-view-model.js</code> and paste in the code below. Remember to add this function toward the end of the file, right above the <code>return viewModel</code> line:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.delete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(config.apiUrl + <span class=\"string\">\"Groceries/\"</span> + viewModel.getItem(index).id, &#123;</div><div class=\"line\">        method: <span class=\"string\">\"DELETE\"</span>,</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Bearer \"</span> + config.token,</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(handleErrors)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        viewModel.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThis code probably looks fairly familiar by now. You’re again calling the fetch module’s <code>fetch()</code> method, this time specifying a <code>method</code> of <code>&quot;DELETE&quot;</code> to delete a grocery from the backend. You again return a <code>Promise</code> so the calling function can handle successful and unsuccessful calls. Note again the power of using the MVVM approach for building your app. To update the grocery list UI, all you have to do is remove the item from the ObservableArray (<code>viewModel.splice(index, 1)</code>), and let the list’s presentation take care of itself.\n\nIf you run your app on Android you should be able to delete items from the list.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter6/android/2.gif\" alt=\"deleting from a list on Android\">\n\nNow that you have built the interface for Android’s tappable icon, let’s add a swipe delete interface for iOS.\n\n## 6.3: Deleting from a list - iOS\n\nIf you’re an iOS user you’re probably familiar with the slide-to-delete gesture as it’s common in a number of iOS applications. The code to implement the gesture is actually baked into the iOS SDK itself (see <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewCell_Class/#//apple_ref/c/tdef/UITableViewCellEditingStyle\" target=\"_blank\" rel=\"external\"><code>UITableViewCellEditingStyle</code>‘s docs</a>), so you can directly use those APIs in your NativeScript apps.\n\nThe code to do so is a little trickier than our previous example for Android, so we’ve provided a ready-built module to implement this functionality in the <code>shared/utils/ios-swipe-delete.js</code> file. In this file you’ll find a custom implementation of a data source that adheres to the <code>UITableViewDataSource</code> protocol. The file exports a single <code>enable()</code> function, which takes a reference to a ListView, and injects that ListView with the custom data source behavior.\n\nDon’t worry too much about exactly what this code is doing, as it involves a bit of understanding of how iOS APIs works. What is cool is that you <em>can</em> implement this relatively advanced iOS API in a few dozen lines of code, and that it’s really easy to wrap this code with a very simple JavaScript API. This ease of use is exactly why NativeScript modules and NativeScript plugins are so easy to consume. Let’s look at how to use this module.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Edit the ListView\n</h4>\n\nAdd the following line of code to the top of <code>app/views/list/list.js</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> swipeDelete = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/utils/ios-swipe-delete\"</span>);</div></pre></td></tr></table></figure>\n\nThen, add the following code to the <code>exports.loaded()</code> function, directly under the <code>page = args.object;</code> assignment:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (page.ios) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> listView = page.getViewById(<span class=\"string\">\"groceryList\"</span>);</div><div class=\"line\">    swipeDelete.enable(listView, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">        groceryList.delete(index);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n</div>\n\n<p>This code gets a reference to the page’s <code>&lt;ListView&gt;</code> id and then passes that reference to the swipe-to-delete module’s <code>enable()</code> function. The <code>enable()</code> function also takes a callback, so you additionally pass an inline function that calls the view model’s <code>delete()</code> function that you built in the previous section. Here’s what the swipe-to-delete functionality looks like on iOS:</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter6/ios/2.gif\" alt=\"deleting from a list on iOS\"></p>\n<p>And… that’s it! You’ve created a functional, cross-platform, backend-driven app to manage your grocery list. In the process you’ve created a unique UI for Android and iOS, leveraged NativeScript plugins and npm modules, learned how to log in and register, managed backend services, created a list with add and delete functionality, and more. </p>\n<p>Congratulations! Feel free to <a href=\"https://twitter.com/intent/tweet?text=I%20just%20built%20an%20iOS%20and%20Android%20app%20using%20@NativeScript%20%F0%9F%8E%89.%20You%20can%20too!%20http://docs.nativescript.org/tutorial/chapter-0%20%23opensource\" target=\"_blank\" rel=\"external\">share your accomplishment on Twitter</a> or <a href=\"https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fdocs.nativescript.org%2Ftutorial%2Fchapter-0&amp;p%5B\" target=\"_blank\" rel=\"external\">Facebook</a> to impress your friends 😀.</p>\n<blockquote>\n<p><strong>TIP</strong>:</p>\n<ul>\n<li>If you’re curious about how NativeScript makes it possible to directly invoke iOS and Android APIs, you can read about <a href=\"http://developer.telerik.com/featured/nativescript-works/\" target=\"_blank\" rel=\"external\">“How NativeScript Works”</a> on our blog.</li>\n<li>Remember that the <a href=\"https://github.com/NativeScript/sample-Groceries/tree/end\" target=\"_blank\" rel=\"external\">Groceries app’s “end” branch</a> has the final state of this tutorial. Feel free to refer back to it at any time.</li>\n<li>Advanced ListView interactions like swipe-to-delete, pull-to-refresh, as well as other components such as calendars and charts are available out-of-the-box as part of Telerik <a href=\"http://docs.telerik.com/devtools/nativescript-ui/introduction\" target=\"_blank\" rel=\"external\">UI For NativeScript</a>.</li>\n</ul>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"Chapter-6—Accessing-Native-APIs\"><a href=\"#Chapter-6—Accessing-Native-APIs\" class=\"headerlink\" title=\"Chapter 6—Accessing Native APIs\"></a>Chapter 6—Accessing Native APIs</h1><p>The beauty of NativeScript is that you can write a native iOS or Android app in JavaScript, XML, and CSS without touching Swift, Objective-C, or Java, if you choose. But what if you want to present a different, more platform-specific UI to your users? Or if you want to access an iOS or Android API that NativeScript doesn’t expose through a NativeScript module or plugin?</p>\n<p>NativeScript gives you the option to dig into native code as needed, and to do so without leaving JavaScript. To show how this works in action, let’s start by adding some color to the ActionBar in the iOS version of the Groceries app.</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#61-customize-the-actionbar---ios\">6.1: Customize the ActionBar - iOS</a>\n- <a href=\"#62-deleting-from-a-list---android\">6.2: Deleting from a list - Android</a>\n- <a href=\"#63-deleting-from-a-list---ios\">6.3: Deleting from a list - iOS</a>\n\n## 6.1: Customize the ActionBar - iOS\n\nWhen you use the ActionBar UI component, NativeScript is actually creating and managing an iOS <code>UINavigationController</code> for you. You can see this for yourself by digging into the implementation code, specifically <code>node_modules/tns-core-modules/ui/action-bar/action-bar.ios.js</code>, and <code>node_modules/tns-core-modules/ui/frame/frame.ios.js</code>.\n\nWhat you might not realize is that the code that you see in these NativeScript modules, the code that looks like Objective-C-ified or Java-ified JavaScript code, is available for you to use in your own JavaScript modules. For example, you can easily get a reference to the <code>UINavigationBar</code> and simply call its <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UINavigationBar_Class/index.html\">documented methods</a> to change its look and feel. Let’s look at how to do that.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Modify the ActionBar\n</h4>\n\nBefore you start tinkering with the <code>UINavigationBar</code> let’s add an <code>&lt;ActionBar&gt;</code> to the login and register pages, so that the app’s three pages all have a consistent look.\n\nOpen <code>app/views/register/register.xml</code> and paste the following code in directly after the opening <code>&lt;Page&gt;</code> tag:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Sign up\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n\nNext, open <code>app/views/login/login.xml</code> and paste in the following code, again directly after the opening <code>&lt;Page&gt;</code> tag:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Sign in\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n\nFinally, open <code>app/app.css</code> and paste the following CSS to modify the ActionBar’s colors:\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ActionBar</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#2E6DAD</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\nWith the ActionBar in place, let’s look at how to customize its look with some native iOS APIs. Open <code>app/views/login/login.js</code> and paste the following code in the <code>exports.loaded()</code> function, directly after the <code>var page = args.object;</code> assignment:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (page.ios) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> navigationBar = frameModule.topmost().ios.controller.navigationBar;</div><div class=\"line\">    navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nOk, let’s break down what just happened, starting with the <code>if (page.ios)</code> check. NativeScript modules, in general, follow the pattern of exposing their native implementations through <code>ios</code> and <code>android</code> properties. You can see this in the if check (<code>page.ios</code>), and also on the first line within the if check, as <code>frameModule.topMost().ios</code> is used to retrieve a reference to the underlying <code>UINavigationController</code>. Testing for the existence of these properties (e.g. <code>if (page.ios)</code>) is a convenient way to fork your code, to ensure that iOS-specific code only runs on iOS, and Android-specific code only runs on Android.\n\n&gt; <strong>TIP</strong>: As a best practice, testing for a platform with an if check is the way to go when you have a small number of platform-specific changes to make. If, on the contrary, you have big, entirely different chunks of code for iOS and Android, you might want to go with <a href=\"#platform-specific-files\">platform-specific code-behind files</a>—e.g. <code>login.ios.js</code> and <code>login.android.js</code>.\n\nWithin the if block, you start by getting a reference to the <code>UINavigationBar</code>, and then you set its <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitDataTypesReference/index.html#//apple_ref/c/tdef/UIBarStyle\"><code>barStyle</code> property</a> to <code>UIBarStyle.UIBarStyleBlack</code>, which (counter intuitively) makes the iOS status bar use white text. This produces the look shown below:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter6/ios/1.png\" alt=\"The iOS actionbar with updated colors\">\n\nLearning how to transfer iOS and Android APIs into valid NativeScript code can take a little trial and error to get right. You can always refer to the NativeScript docs for detailed discussions of how to handle the code conversion. Here are the <a href=\"/runtimes/android/marshalling/java-to-js.html\">docs for Android</a>, and here are the <a href=\"/runtimes/ios/marshalling/Marshalling-Overview.html\">docs for iOS</a>.\n\n&gt; <strong>TIP</strong>: NativeScript provides TypeScript declaration files for all iOS and Android APIs. If you’re using TypeScript you can reference these declaration files to enable code completion in your editor. Even if you’re not using TypeScript, these declaration files can be invaluable references when you’re transferring native APIs to NativeScript code. For instance try searching for “UINavigationBar” in the iOS declaration file below to see which other properties are available.\n&gt; - <a href=\"https://raw.githubusercontent.com/NativeScript/NativeScript/master/tns-core-modules/ios.d.ts\">iOS TypeScript declaration file</a>\n&gt; - <a href=\"https://raw.githubusercontent.com/NativeScript/NativeScript/master/tns-core-modules/android17.d.ts\">Android TypeScript declaration file</a>\n\nForking the user experience can entail more than just changing some colors. For example, sliding to delete list items is a common UI interaction on iOS, but not Android. But as you’ve seen, NativeScript makes it relatively easy to fork your code to provide a more platform-specific experience. So to allow a user to delete an item from a list, let’s create a slide-to-delete UI for iOS, and use a more-Android-friendly trash can icon to let the user delete items from our Android app.\n\n## 6.2: Deleting from a list - Android\n\nFor Android you’re going to add tappable trash cans to each item in the grocery list; so the first challenge is figuring out how to show these images only for Android, as you’ll be using a completely different UI on iOS.\n\nTo do so you’ll use a new bit of syntax in your XML. NativeScript allows you to set an attribute for only one platform using the <code>platform:attributeName</code> syntax. For example the following sets a button’s text to “foo” on iOS, and “bar” on Android:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">ios:text</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">android:text</span>=<span class=\"string\">\"bar\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThis same syntax is available for all attributes for all UI components, and this mechanism is another convenient way NativeScript lets you fork your code for separate iOS and Android implementations. Let’s use this technique to show a trash can only on Android.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Add an Android-only UI element\n</h4>\n\nOpen <code>app/views/list/list.xml</code>, find the <code>&lt;ListView.itemTemplate&gt;</code> tag, and replace it with the code below:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">columns</span>=<span class=\"string\">\"*, auto\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; name &#125;&#125;&#123;% endraw %&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res://ic_menu_delete\"</span> <span class=\"attr\">ios:visibility</span>=<span class=\"string\">\"collapsed\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"delete\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">GridLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nWith this code you’re primarily adding an <code>&lt;Image&gt;</code> to the existing ListView template. But now that you have multiple UI components in this template, you have to tell NativeScript how to layout these two components, which is what the <code>&lt;GridLayout&gt;</code> handles. By specifying <code>columns=&quot;*, auto&quot;</code> you divide each item into two columns: the first containing the label and the second containing the new image.\n\nFor the image itself, the <code>ios:visibility=&quot;collapsed&quot;</code> attribute sets the image’s <code>visibility</code> CSS property to <code>&quot;collapsed&quot;</code>, which hides it. Because the attribute was prefixed with <code>ios:</code>, that CSS property is only applied on iOS; therefore the button displays on Android devices, but not on iOS ones. The trash can image itself has already been placed in the app for you, and can be found in appropriate sizes in the four drawable folders in <code>/app/App_Resources/Android</code>. Here’s what the trash can UI looks like on Android:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter6/android/1.png\" alt=\"Trash can icons on Android\">\n\nFinally, make the trash actually delete items. To do that you’ll need to implement the <code>tap=&quot;delete&quot;</code> handler in the list code-behind file.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Build the delete functions\n</h4>\n\nOpen <code>app/views/list/list.js</code> and paste the following code at the bottom of the file:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.delete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> item = args.view.bindingContext;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = groceryList.indexOf(item);</div><div class=\"line\">    groceryList.delete(index);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\nThis code gets the index of the grocery the user tapped, matches that to the corresponding item in the view model, and then passes that index to the view model’s <code>delete()</code> method—which doesn’t exist yet, so let’s create it.\n\nOpen <code>app/shared/view-models/grocery-list-view-model.js</code> and paste in the code below. Remember to add this function toward the end of the file, right above the <code>return viewModel</code> line:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.delete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(config.apiUrl + <span class=\"string\">\"Groceries/\"</span> + viewModel.getItem(index).id, &#123;</div><div class=\"line\">        method: <span class=\"string\">\"DELETE\"</span>,</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Bearer \"</span> + config.token,</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(handleErrors)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        viewModel.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThis code probably looks fairly familiar by now. You’re again calling the fetch module’s <code>fetch()</code> method, this time specifying a <code>method</code> of <code>&quot;DELETE&quot;</code> to delete a grocery from the backend. You again return a <code>Promise</code> so the calling function can handle successful and unsuccessful calls. Note again the power of using the MVVM approach for building your app. To update the grocery list UI, all you have to do is remove the item from the ObservableArray (<code>viewModel.splice(index, 1)</code>), and let the list’s presentation take care of itself.\n\nIf you run your app on Android you should be able to delete items from the list.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter6/android/2.gif\" alt=\"deleting from a list on Android\">\n\nNow that you have built the interface for Android’s tappable icon, let’s add a swipe delete interface for iOS.\n\n## 6.3: Deleting from a list - iOS\n\nIf you’re an iOS user you’re probably familiar with the slide-to-delete gesture as it’s common in a number of iOS applications. The code to implement the gesture is actually baked into the iOS SDK itself (see <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewCell_Class/#//apple_ref/c/tdef/UITableViewCellEditingStyle\"><code>UITableViewCellEditingStyle</code>‘s docs</a>), so you can directly use those APIs in your NativeScript apps.\n\nThe code to do so is a little trickier than our previous example for Android, so we’ve provided a ready-built module to implement this functionality in the <code>shared/utils/ios-swipe-delete.js</code> file. In this file you’ll find a custom implementation of a data source that adheres to the <code>UITableViewDataSource</code> protocol. The file exports a single <code>enable()</code> function, which takes a reference to a ListView, and injects that ListView with the custom data source behavior.\n\nDon’t worry too much about exactly what this code is doing, as it involves a bit of understanding of how iOS APIs works. What is cool is that you <em>can</em> implement this relatively advanced iOS API in a few dozen lines of code, and that it’s really easy to wrap this code with a very simple JavaScript API. This ease of use is exactly why NativeScript modules and NativeScript plugins are so easy to consume. Let’s look at how to use this module.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4>\n    <b>Exercise</b>: Edit the ListView\n</h4>\n\nAdd the following line of code to the top of <code>app/views/list/list.js</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> swipeDelete = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/utils/ios-swipe-delete\"</span>);</div></pre></td></tr></table></figure>\n\nThen, add the following code to the <code>exports.loaded()</code> function, directly under the <code>page = args.object;</code> assignment:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (page.ios) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> listView = page.getViewById(<span class=\"string\">\"groceryList\"</span>);</div><div class=\"line\">    swipeDelete.enable(listView, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">        groceryList.delete(index);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n</div>\n\n<p>This code gets a reference to the page’s <code>&lt;ListView&gt;</code> id and then passes that reference to the swipe-to-delete module’s <code>enable()</code> function. The <code>enable()</code> function also takes a callback, so you additionally pass an inline function that calls the view model’s <code>delete()</code> function that you built in the previous section. Here’s what the swipe-to-delete functionality looks like on iOS:</p>\n<p><img src=\"/docs/img/cli-getting-started/nativescript/chapter6/ios/2.gif\" alt=\"deleting from a list on iOS\"></p>\n<p>And… that’s it! You’ve created a functional, cross-platform, backend-driven app to manage your grocery list. In the process you’ve created a unique UI for Android and iOS, leveraged NativeScript plugins and npm modules, learned how to log in and register, managed backend services, created a list with add and delete functionality, and more. </p>\n<p>Congratulations! Feel free to <a href=\"https://twitter.com/intent/tweet?text=I%20just%20built%20an%20iOS%20and%20Android%20app%20using%20@NativeScript%20%F0%9F%8E%89.%20You%20can%20too!%20http://docs.nativescript.org/tutorial/chapter-0%20%23opensource\">share your accomplishment on Twitter</a> or <a href=\"https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fdocs.nativescript.org%2Ftutorial%2Fchapter-0&amp;p%5B\">Facebook</a> to impress your friends 😀.</p>\n<blockquote>\n<p><strong>TIP</strong>:</p>\n<ul>\n<li>If you’re curious about how NativeScript makes it possible to directly invoke iOS and Android APIs, you can read about <a href=\"http://developer.telerik.com/featured/nativescript-works/\">“How NativeScript Works”</a> on our blog.</li>\n<li>Remember that the <a href=\"https://github.com/NativeScript/sample-Groceries/tree/end\">Groceries app’s “end” branch</a> has the final state of this tutorial. Feel free to refer back to it at any time.</li>\n<li>Advanced ListView interactions like swipe-to-delete, pull-to-refresh, as well as other components such as calendars and charts are available out-of-the-box as part of Telerik <a href=\"http://docs.telerik.com/devtools/nativescript-ui/introduction\">UI For NativeScript</a>.</li>\n</ul>\n</blockquote>\n"},{"_content":"# Chapter 4—NativeScript Modules\n\nIn this chapter you'll learn about NativeScript modules, which are the JavaScript modules in your app's `node_modules/tns-core-modules` folder. Whether you've realized it or not, you've already used several NativeScript modules. This includes the modules you've brought in via `require()` (the view, frame and observable modules) and also the UI components you've been using in XML (the page, image, text field and button modules).\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [4.1: Connecting to a backend](#41-connecting-to-a-backend)\n- [4.2: Dialog module](#42-dialog-module)\n- [4.3: ListView](#43-listview)\n- [4.4: Working with arrays](#44-working-with-arrays)\n- [4.5: GridLayout](#45-gridlayout)\n- [4.6: ActivityIndicator](#46-activityindicator)\n- [4.7: Animations](#47-animations)\n\nIf you dig into `node_modules/tns-core-modules` you can get an idea of how these modules work. Start by finding the `node_modules/tns-core-modules/camera` folder, which includes the implementation of the camera module. It includes:\n\n- a `package.json` file that sets the name of the module;\n- a file containing the module's Android implementation (`camera.android.js`);\n- a file containing the module's iOS implementation (`camera.ios.js`);\n- a file containing code shared by the Android and iOS implementations (`camera-common.js`)\n\n> **NOTE**: You can refer to the [Node.js documentation on folders as modules](https://nodejs.org/api/modules.html#modules_folders_as_modules) for more detailed information on how NativeScript organizes its modules.\n\nThe \\*.ios.\\* and \\*.android.\\* naming convention should look familiar, as it's the exact same convention we used to include Android- and iOS-specific styling in [chapter 2.4](#24-css). NativeScript uses this same convention to implement its modules on iOS and Android. Now that you know where these modules are, let's take a closer look at what else they can do for your app.\n\n## 4.1: Connecting to a backend\n\nWhen you created your own account on the registration page, you probably noticed that data was magically going... somewhere. But there's actually no magic involved; the register page invokes a RESTful API provided by [Telerik Backend Services](http://www.telerik.com/backend-services) to register the user for the Groceries service.\n\n> **NOTE**: You don't have to use Telerik Backend Services to hit your backend service; you can use any HTTP API in a NativeScript app. Telerik Backend Services is convenient for us to use for this tutorial because it lets us spin up HTTP endpoints quickly.\n\nTake a look at `app/shared/config.js`. There's only a small code snippet there, but it includes a hardcoded root path to the Groceries backend that the register page uses, and that you'll be using momentarily:\n\n```javascript\nmodule.exports = {\n    apiUrl: \"https://api.everlive.com/v1/GWfRtXi1Lwt4jcqK/\"\n};\n```\n\n> **TIP**: `config.js` also shows a convenient pattern you can use for sharing configuration variables throughout your app.\n\nNext, take a look in the `app/shared/view-models` folder, which contains a few view models that we've pre-packaged into Groceries, and those view models contain the code to hit our backend. You can see this demonstrated in the `user-view-model.js` file's `register()` function.\n\n> **NOTE**: In a larger app, it's pretty common to place code that interacts with the backend in separate files, and not directly in the view models. But in our case, the connection code lives directly in the view model for simplicity—which is perfectly reasonable for small apps. \n\nNote that the `register()` function uses the config module to get the path to the backend, as well as the [fetch module]() to make HTTP calls.\n\n```javascript\nvar config = require(\"../../shared/config\");\nvar fetchModule = require(\"fetch\");\n```\n\nNativeScript's fetch module uses the same API as the [browser's new fetch() API](https://fetch.spec.whatwg.org/). Therefore, if you already know how to use the web's `fetch()` method, you already know how to make HTTP calls in NativeScript. Let's look at how the fetch module works by adding another method to the user view model.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Complete the login in the view model</h4>\n\nOpen `app/shared/view-models/user-view-model.js` and paste the following code directly above the existing `viewModel.register()` function:\n\n```javascript\nviewModel.login = function() {\n    return fetchModule.fetch(config.apiUrl + \"oauth/token\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            username: viewModel.get(\"email\"),\n            password: viewModel.get(\"password\"),\n            grant_type: \"password\"\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(handleErrors)\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        config.token = data.Result.access_token;\n    });\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nLet's break down what the code you just pasted in does.\n\n- You use the fetch module's `fetch()` method to POST data to the `apiUrl` stored in `shared/config.js`. The username, password and grant_type are sent to this endpoint as a JSON string. (Telerik Backend Services [requires a grant_type parameter](http://docs.telerik.com/platform/backend-services/development/rest-api/users/authenticate-user) for logins.)\n\n- The `fetch()` method returns a `Promise`, which allows you to execute code after the asynchronous login either completes successfully or fails. You use this functionality to do three things (the three `then()` handlers).\n    - First, you handle any errors in the HTTP response with a `handleErrors()` function defined at the bottom of `user-view-model.js`. (If you want more details on how handling HTTP response errors with `fetch()` works check out [this article](http://tjvantoll.com/2015/09/13/fetch-and-errors/).)\n    - Next, you convert the returned data into JSON by calling the [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object's `json()` method.\n    - Finally, you save a reference to the user's authentication token in the config module. You'll use that token on subsequent HTTP requests later in this guide.\n\n> **TIP**:\n> * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) are a part of ECMAScript 6 (the scripting language of which JavaScript is an implementation). Because Promises have been implemented in the two JavaScript engines NativeScript uses—V8 for Android and JavaScriptCore for iOS—Promises are available for use in NativeScript apps.\n> * NativeScript makes `fetch()` available as a global variable for convenience. This means you can replace `fetchModule.fetch()` with `fetch()`. The global `fetch()` shortcut will be used for the remainder of this guide.\n\nWith this code in place let's return to `login.js` to use this new function.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise: Add UserViewModel to the login code-behind</b></h4>\n\nIn `login.js`, at the top of the file, add the following reference to `shared/view-models/user-view-model`:\n\n```javascript\nvar UserViewModel = require(\"../../shared/view-models/user-view-model\");\n```\n\n**Remove** the following five lines of code, as you'll be using the `UserViewModel` instead of the `user` you added in the previous chapter.\n\n<div class=\"no-copy-button\"></div>\n\n```javascript\n// Remove these lines of code\nvar Observable = require(\"data/observable\").Observable;\nvar user = new Observable({\n    email: \"user@domain.com\",\n    password: \"password\"\n});\n```\n\nNext, add the following line of code after the `var UserViewModel = require(...)` line:\n\n```javascript\nvar user = new UserViewModel();\n```\n\nFinally, replace the `exports.signIn()` function with the code below:\n\n```javascript\nexports.signIn = function() {\n    user.login();\n};\n```\n\n> **TIP**: You can always view the completed codebase in the “end” branch of the [sample-Groceries repo](https://github.com/NativeScript/sample-Groceries/tree/end).\n\n</div>\n\n<div class=\"explain\">\n\nTake a moment to look at just how clean your code-behind file is now. The code-behind instantiates a view model (`UserViewModel`), and calls its `signIn()` method when the user taps the view's sign in button. Because the view model is bound to the page's two text fields (remember `{% raw %}{{ email }}{% endraw %}` and `{% raw %}{{ password }}{% endraw %}`), the view model already has the data it needs to perform the actual login.\n\nAnd if you try running your app, and input your account's credentials, you can indeed login, but... you don't see anything. That's because view models aren't responsible for updating the UI. Instead the view model returns a `Promise` to let the code-behind handle the UI. (Remember that `fetch()` returns a `Promise`.) Let's see how you can use that `Promise`, and introduce a new NativeScript module in the process.\n\n## 4.2: Dialog module\n\nTo utilize the `Promise` that the view model's `login()` function returns, you need to handle two scenarios: what to do when the login works, and what to do when it doesn't.\n\nIn the case of Groceries, when the login works you're going to navigate the user to the list page, which you'll be building momentarily, and which will let the user add and remove groceries from a list. To do the navigation you'll use the same frame module you used earlier in this guide.\n\nThe trickier situation is handling login failures, and for that you're going to use the dialog module. You can use this module to show [several types]() of popup UIs in your app, including action sheets, confirmation boxes, alert boxes, and prompts. It is a highly customizable module, and it lets you control the buttons in your alerts, their text, and the messaging in the alert itself. The dialog module's code is in the `node_modules/tns-core-modules/ui` folder with other UI widgets. Let's see how to use this widget on the login page.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Handle an error with a dialog window</h4>\n\nAdd the following line to the top of `login.js` to import the dialog module:\n\n```javascript\nvar dialogsModule = require(\"ui/dialogs\");\n```\n\nNext, re-write your `signIn()` function to look like this:\n\n```javascript\nexports.signIn = function() {\n    user.login()\n        .catch(function(error) {\n            console.log(error);\n            dialogsModule.alert({\n                message: \"Unfortunately we could not find your account.\",\n                okButtonText: \"OK\"\n            });\n            return Promise.reject();\n        })\n        .then(function() {\n            frameModule.topmost().navigate(\"views/list/list\");\n        });\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThis code handles both a successful and unsuccessful login. On success, you call the frame module's `navigate()` method to navigate the user to the (currently empty) list page. On failure, you use the dialog module to show the user an error message. Try inputting some invalid credentials to see what the dialog looks like.\n\n![login 8](/docs/img/cli-getting-started/nativescript/chapter4/ios/1.png)\n![login 8](/docs/img/cli-getting-started/nativescript/chapter4/android/1.png)\n\nWith that, the login page is completely functional. Now that you have user management working in your NativeScript app, let's move onto the page where users will manage their grocery list. To do that, you need a module that shows items in a list, which is exactly what the ListView module does.\n\n> **TIP**: From this point forward in the guide you'll have to log in a lot, so you may find it helpful to hardcode your credentials in the app during development. The easiest way to do that is to pass an email address and password to the `UserViewModel()` constructor, for example:\n\n> ```javascript\n> var user = new UserViewModel({\n>     email: \"username@domain.com\",\n>     password: \"password\"\n> });\n> ```\n\n## 4.3: ListView\n\nThe ListView widget lets you show a list of things on the screen, which is exactly what you need for showing a list of groceries. Before tying the grocery list to a backend API, let's start by seeing how to show a hardcoded list of items on the screen.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Construct the list view</h4>\n\nOpen `app/views/list/list.xml` and paste in the code below, which creates the list where your groceries will reside:\n\n```xml\n<Page loaded=\"loaded\">\n    <GridLayout>\n        <ListView items=\"{% raw %}{{ groceryList }}{% endraw %}\">\n            <ListView.itemTemplate>\n                <Label text=\"{% raw %}{{ name }}{% endraw %}\" horizontalAlignment=\"left\" verticalAlignment=\"center\"/>\n            </ListView.itemTemplate>\n        </ListView>\n    </GridLayout>\n</Page>\n```\n\n</div>\n\n<div class=\"explain\">\n\n> **NOTE**: Notice that this page is going to use a `<GridLayout>` to layout the UI components on the screen. As you add more UI components, you'll start dividing the screen into rows and columns, but for now you're just going to let the `<ListView>` take up the full screen (which is the default behavior of a `<GridLayout>` with no attributes).\n\nAs discussed earlier, even though you're using `<ListView>` in XML, the ListView module is still a NativeScript module. You can find its implementation in the `node_modules/tns-core-modules/ui/list-view` folder. If you want to, you could construct a ListView in pure JavaScript code in the code-behind file as shown in [this example](). For most situations using the NativeScript UI modules in XML is easier, so we'll be sticking with XML usage throughout this tutorial.\n\nNote the use of `<ListView.itemTemplate>`. This tag gives you the ability to control how each of the ListView's items displays within the list. For now you're using a simple `<Label>` UI component to display the `{% raw %}{{ name }}{% endraw %}` of each grocery.\n\nIf you run this code as is, you won't see any items in the grocery list. First you need to build out a way to manage data within the ListView module, and to do that you're going to need a new NativeScript module: the ObservableArray.\n\n## 4.4: Working with arrays\n\nIn the previous section of this guide you saw how to create observables and how to use them to connect XML views with code-behind files and view models. You're going to do the same thing in this section with one additional twist, and it involves making this `items` attribute work:\n\n```xml\n<ListView items=\"{% raw %}{{ groceryList }}{% endraw %}\">\n```\n\nThe ListView module's `items` attribute takes an array, and to create that array on the view model, NativeScript provides a special ObservableArray module. To see how it works, let's start building the list page's code-behind file.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Populate the list view</h4>\n\nOpen `app/views/list/list.js` and paste in the following code:\n\n```javascript\nvar dialogsModule = require(\"ui/dialogs\");\nvar Observable = require(\"data/observable\").Observable;\nvar ObservableArray = require(\"data/observable-array\").ObservableArray;\nvar page;\n\nvar pageData = new Observable({\n    groceryList: new ObservableArray([\n        { name: \"eggs\" },\n        { name: \"bread\" },\n        { name: \"cereal\" }\n    ])\n});\n\nexports.loaded = function(args) {\n    page = args.object;\n    page.bindingContext = pageData;\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nHere, you're creating a new Observable object called `pageData`, which you set as the page's `bindingContext` in the `load()` function. Inside the Observable, you set a single `\"groceryList\"` property to be a new instance of the ObservableArray class. Notice how the `\"groceryList\"` property corresponds to `<ListView items=\"{% raw %}{{ groceryList }}{% endraw %}\">`, and each array entry's `\"name\"` property corresponds to `<Label text=\"{% raw %}{{ name }}{% endraw %}\">`. If you run your app you'll see the list screen shows the hardcoded data:\n\n![list 1](/docs/img/cli-getting-started/nativescript/chapter4/ios/2.png)\n![list 1](/docs/img/cli-getting-started/nativescript/chapter4/android/2.png)\n\nNow that we have items on the screen let's look at how you can tie this list to a backend instead of hardcoded data. To do so you'll switch the list page to use a view model, much like you did with the login page.\n\nA starting view model for this page is already in the file at `app/shared/view-models/grocery-list-view-model.js`, which contains code that looks a lot like what you already have in `list.js`:\n\n```javascript\nvar config = require(\"../../shared/config\");\nvar fetchModule = require(\"fetch\");\nvar ObservableArray = require(\"data/observable-array\").ObservableArray;\n\nfunction GroceryListViewModel(items) {\n    var viewModel = new ObservableArray(items);\n    return viewModel;\n}\n\nmodule.exports = GroceryListViewModel;\n```\n\nLet's expand on this to tie this view model to a backend.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Populate a list view from a backend</h4>\n\nYou're going to start by changing `list.js` to use the `GroceryListViewModel`. First, `require()` the `GroceryListViewModel` so you can use it:\n\n```javascript\nvar GroceryListViewModel = require(\"../../shared/view-models/grocery-list-view-model\");\n```\n\nNext, **remove** the existing `var pageData` assignment:\n\n<div class=\"no-copy-button\"></div>\n\n```javascript\n// Remove these seven lines of code\nvar pageData = new Observable({\n    groceryList: new ObservableArray([\n        { name: \"eggs\" },\n        { name: \"bread\" },\n        { name: \"cereal\" }\n    ])\n});\n```\n\nAnd add the code below in the same location:\n\n```javascript\nvar groceryList = new GroceryListViewModel([]);\nvar pageData = new Observable({\n    groceryList: groceryList\n});\n```\n\nFinally, replace the existing `exports.loaded()` function with the one below, which calls two new methods on the view model—`empty()` and `load()`.\n\n```javascript\nexports.loaded = function(args) {\n    page = args.object;\n    page.bindingContext = pageData;\n\n    groceryList.empty();\n    groceryList.load();\n};\n```\n\nIn this code, `groceryList` is referencing the grocery list model, and the `empty()` function empties the list, and then calls the view model's `load()` function to reload the data from the backend.\n\nThe last piece to make this work is actually implementing the `empty()` and `load()` functions in the view model. Open `app/shared/view-models/grocery-list-view-model.js`, and paste the following code between the `var viewModel` assignment, and the `return viewModel` statement.\n\n```javascript\nviewModel.load = function() {\n    return fetch(config.apiUrl + \"Groceries\", {\n        headers: {\n            \"Authorization\": \"Bearer \" + config.token\n        }\n    })\n    .then(handleErrors)\n    .then(function(response) {\n        return response.json();\n    }).then(function(data) {\n        data.Result.forEach(function(grocery) {\n            viewModel.push({\n                name: grocery.Name,\n                id: grocery.Id\n            });\n        });\n    });\n};\n\nviewModel.empty = function() {\n    while (viewModel.length) {\n        viewModel.pop();\n    }\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThe code to make an HTTP call should look familiar, as it leverages the same fetch module you used in the previous section. Here, the fetch module's first `then()` handler checks for HTTP errors, the second `then()` handler converts the data from the response into JSON format, and the third handler pushes each grocery item from the response into the ObservableArray.\n\nIf you load the app and log in with email address \"user@nativescript.org\" and password \"password\", you should see a list of groceries that looks something like this:\n\n![list 2](/docs/img/cli-getting-started/nativescript/chapter4/ios/3.png)\n![list 2](/docs/img/cli-getting-started/nativescript/chapter4/android/3.png)\n\nThe cool thing here is the code you didn't have to write. Notice that there is no need to refresh the UI, or manually access the ListView UI component—all the view model does is push the JSON response to the ObservableArray, and the UI takes care of itself.\n\nLet's see how you can build on top of this and enable users to add to their grocery list directly from the app.\n\n## 4.5: GridLayout\n\nYou already know how to add items to a `<ListView>`, because you just did so in the previous section—all you need to do is call the ObservableArray module's `push()` method.\n\nTo give the user the ability to manage their grocery list you're going to have to put some more UI components on the screen, and to do that you're going to need to divide the screen into rows and columns using the `<GridLayout>` UI component.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Implement the ability to add groceries to the list</h4>\n\nOpen `app/views/list/list.xml` and change the `<GridLayout>` tag to use the code below:\n\n```xml\n<GridLayout rows=\"auto, *\" columns=\"2*, *\">\n```\n\nThe `rows` attribute divides the screen into two rows, the first auto-sized according to its childrens' height, and the other to contain \\*, or the remaining height of the screen. The `columns` attribute divides the screen into two columns, where the first column takes up 2/3 of the screen, and the second takes up the remaining third.\n\nNext, to give the user a means of adding groceries to the list, add a text field and a button to the page. Add these two lines of code directly after the initial `<GridLayout>` tag:\n\n```xml\n<TextField id=\"grocery\" text=\"{% raw %}{{ grocery }}{% endraw %}\" hint=\"Enter a grocery item\" row=\"0\" col=\"0\" />\n<Button text=\"Add\" tap=\"add\" row=\"0\" col=\"1\" />\n```\n\nThe text field has an id attribute of `\"grocery\"`, and is bound to the `{% raw %}{{ grocery }}{% endraw %}` property of the page's binding context. The button's `tap` event refers to an `add()` function, that you'll add to the code-behind file momentarily.\n\nBut the most important thing to note here is the use of the `row` and `col` attributes. These attributes are zero-based, so the text field's `row=\"0\" col=\"0\"` attributes place it in the first row and first column, whereas the button's `row=\"0\" col=\"1\"` attributes place it in the first row and second column.\n\nFinally, replace the `<ListView>` tag with the code below to place it in the second row, to have it span both columns, and also to give it an `id` attribute that you'll need later.\n\n```xml\n<ListView items=\"{% raw %}{{ groceryList }}{% endraw %}\" id=\"groceryList\" row=\"1\" colSpan=\"2\">\n```\n\nNow you just need to make the necessary changes to the code-behind file to support these XML changes. Open `list.js` and start by adding a new `\"grocery\"` property to the `pageData` Observable. The `pageData` assignment should look like this:\n\n```javascript\nvar pageData = new Observable({\n    groceryList: groceryList,\n    grocery: \"\"\n});\n```\n\nNext, you need to add an `add()` function to handle the button tap event. Paste in the following code at the bottom of `list.js`:\n\n```javascript\nexports.add = function() {\n    // Check for empty submissions\n    if (pageData.get(\"grocery\").trim() === \"\") {\n        dialogsModule.alert({\n            message: \"Enter a grocery item\",\n            okButtonText: \"OK\"\n        });\n        return;\n    }\n\n    // Dismiss the keyboard\n    page.getViewById(\"grocery\").dismissSoftInput();\n    groceryList.add(pageData.get(\"grocery\"))\n        .catch(function() {\n            dialogsModule.alert({\n                message: \"An error occurred while adding an item to your list.\",\n                okButtonText: \"OK\"\n            });\n        });\n\n    // Empty the input field\n    pageData.set(\"grocery\", \"\");\n};\n```\n\nIn this function, you first ensure the user didn't submit without typing a grocery. If the user did type something, you dismiss the device's keyboard, then you get the `\"grocery\"` property from the page's binding context (which is bound to the new `<TextField>`), and pass that value to the view model's `add()` function.\n\nFinally, define that `add()` function. To do so, open `app/shared/view-models/grocery-list-view-model.js` and paste the following function under the `empty()` function, but before the `return viewModel` statement.\n\n```javascript\nviewModel.add = function(grocery) {\n    return fetch(config.apiUrl + \"Groceries\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            Name: grocery\n        }),\n        headers: {\n            \"Authorization\": \"Bearer \" + config.token,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(handleErrors)\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        viewModel.push({ name: grocery, id: data.Result.Id });\n    });\n};\n```\n</div>\n\n<div class=\"explain\">\n\nIf you build and rerun your app, you'll find that you can add a grocery item and it will appear immediately in your list—and, all of this is completely driven by a backend service. Pretty cool, huh?\n\n![list 3](/docs/img/cli-getting-started/nativescript/chapter4/ios/4.gif)\n![list 3](/docs/img/cli-getting-started/nativescript/chapter4/android/4.gif)\n\nLet's look at how you can polish this page with a NativeScript module for showing activity indicators.\n\n## 4.6: ActivityIndicator\n\nCurrently there's a bit of a delay when you first visit the list page before groceries appear. This delay could confuse a new user, who might think the app is stuck rather than retrieving data from a backend.\n\nIn NativeScript apps you can use the ActivityIndicator module to show a spinner icon in your UI while your app is busy performing actions. The ActivityIndicator is a relatively simple UI element as it primarily uses one attribute—`busy`. When an ActivityIndicator's `busy` attribute is set to `true` the ActivityIndicator shows, and when its `busy` attribute is set to `false` it doesn't. Let's see how the module works by adding an ActivityIndicator to the list page.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add an ActivityIndicator</h4>\n\nOpen `app/views/list/list.xml` and add the following element directly before the closing `</GridLayout>` tag.\n\n```xml\n<ActivityIndicator busy=\"{% raw %}{{ isLoading }}{% endraw %}\" rowSpan=\"2\" colSpan=\"2\" />\n```\n\nThen, in `app/views/list/list.js`, replace the existing `groceryList.load()` call in `loaded()` with the following four lines of code:\n\n```javascript\npageData.set(\"isLoading\", true);\ngroceryList.load().then(function() {\n    pageData.set(\"isLoading\", false);\n});\n```\n\n</div>\n\n<div class=\"explain\">\n\nIn the code above you add a new `\"isLoading\"` flag to the list page's Observable, and then bind the ActivityIndicator's `busy` attribute to that value. You set the initial value of the `\"isLoading\"` flag to `true` in the list page's `loaded()` function, which shows the ActivityIndicator. When the grocery list finishes loading, you flip the `\"isLoading\"` flag back to `false`, which hides the ActivityIndicator.\n\nYou control where the ActivityIndicator displays by setting its `rowSpan` and `colSpan` attributes. In this case `rowSpan=\"2\" colSpan=\"2\"` makes the ActivityIndicator take up both rows and both columns of its parent GridLayout. Here's what the new ActivityIndicator looks like:\n\n![ActivityIndicator on iOS](/docs/img/cli-getting-started/nativescript/chapter4/ios/5.gif)\n![ActivityIndicator on Android](/docs/img/cli-getting-started/nativescript/chapter4/android/5.gif)\n\nThe list page is now more user friendly, but we can improve the experience with one of the more powerful NativeScript modules: the animation module.\n\n## 4.7: Animations\n\nThe ability to run robust and performant animations is the one of the biggest reasons people choose to build native mobile apps, and NativeScript makes running these animations simple. The NativeScript animation modules provides a [series of JavaScript APIs](/ui/animation) that let you perform a wide variety of animations to elements on the screen, including the following:\n\n- [Opacity](/ui/animation#opacity)\n- [Background Color](/ui/animation#background-color)\n- [Translations](/ui/animation#translate)\n- [Scaling](/ui/animation#scale)\n- [Rotating](/ui/animation#rotate)\n\nFor our list page you’re going to use an [opacity animation](/ui/animation#opacity) to fade in your grocery list after your data loads. Let’s add in the code and then discuss how it all works.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add an animation</h4>\n\nOpen `app/views/list/list.css` and add an `opacity: 0` rule to the existing `ListView` selector. The full set of rules should look like this:\n\n```css\nListView {\n    margin: 5;\n    opacity: 0;\n}\n```\n\nThen, in `app/views/list/list.js`, replace the existing `exports.loaded()` function with the code below, which does two new things: gets a reference to the `<ListView>` (`page.getViewById(\"groceryList\")`), and then calls that element’s `animate()` function after the `groceryList.load()` call completes.\n\n```javascript\nexports.loaded = function(args) {\n    page = args.object;\n    var listView = page.getViewById(\"groceryList\");\n    page.bindingContext = pageData;\n\n    groceryList.empty();\n    pageData.set(\"isLoading\", true);\n    groceryList.load().then(function() {\n        pageData.set(\"isLoading\", false);\n        listView.animate({\n            opacity: 1,\n            duration: 1000\n        });\n    });\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nA few things are happening in the code above.\n\nFirst, in CSS, you assign an `opacity` of `0` to the grocery list `<ListView>`. This hides the grocery list completely when the page loads. Next, in JavaScript, after the `groceryList.load()` call completes, you call the list view’s `animate()` function. This changes the element's `opacity` from `0` (completely hidden) to `1` (completely visible) over one full second.\n\n> **NOTE**: The animation function’s `duration` property takes a time in milliseconds. Therefore, `1000` equates to one second.\n\nThe result of this code is a nice fade-in animation:\n\n![Animations on iOS](/docs/img/cli-getting-started/nativescript/chapter4/ios/6.gif)\n![Animations on Android](/docs/img/cli-getting-started/nativescript/chapter4/android/6.gif)\n\nThe animation module is a lot of fun to play with, and it’s easy to use too. All you need to do is get a reference to an element using `getViewById()`, and then call that element’s `animate` method. You may want to take a few minutes to look through our [animation samples](/ui/animation#examples) and try a few of these animations for yourself in Groceries.\n\nNow that you have the login, registration, and list pages complete, let’s enhance the app's functionality as a grocery list management tool. In the next chapters you'll add functionality such as email validation, social sharing, and more. And you'll use one of NativeScript's most useful features to do so: npm modules.\n\n> **TIP**: There are several modules that come out of the box with your NativeScript installation that we did not have time to cover in this guide—including a [location service](), a [file-system helper](), a [timer module](), a [camera module](), a [color module](), and a whole lot more. Make sure to peruse the “Modules API” of the docs, or just look around `node_modules/tns-core-modules` to see all of what's available.\n\n</div>","source":"tutorial/4.md","raw":"# Chapter 4—NativeScript Modules\n\nIn this chapter you'll learn about NativeScript modules, which are the JavaScript modules in your app's `node_modules/tns-core-modules` folder. Whether you've realized it or not, you've already used several NativeScript modules. This includes the modules you've brought in via `require()` (the view, frame and observable modules) and also the UI components you've been using in XML (the page, image, text field and button modules).\n\n<div class=\"explain\">\n\n## Table of contents\n\n- [4.1: Connecting to a backend](#41-connecting-to-a-backend)\n- [4.2: Dialog module](#42-dialog-module)\n- [4.3: ListView](#43-listview)\n- [4.4: Working with arrays](#44-working-with-arrays)\n- [4.5: GridLayout](#45-gridlayout)\n- [4.6: ActivityIndicator](#46-activityindicator)\n- [4.7: Animations](#47-animations)\n\nIf you dig into `node_modules/tns-core-modules` you can get an idea of how these modules work. Start by finding the `node_modules/tns-core-modules/camera` folder, which includes the implementation of the camera module. It includes:\n\n- a `package.json` file that sets the name of the module;\n- a file containing the module's Android implementation (`camera.android.js`);\n- a file containing the module's iOS implementation (`camera.ios.js`);\n- a file containing code shared by the Android and iOS implementations (`camera-common.js`)\n\n> **NOTE**: You can refer to the [Node.js documentation on folders as modules](https://nodejs.org/api/modules.html#modules_folders_as_modules) for more detailed information on how NativeScript organizes its modules.\n\nThe \\*.ios.\\* and \\*.android.\\* naming convention should look familiar, as it's the exact same convention we used to include Android- and iOS-specific styling in [chapter 2.4](#24-css). NativeScript uses this same convention to implement its modules on iOS and Android. Now that you know where these modules are, let's take a closer look at what else they can do for your app.\n\n## 4.1: Connecting to a backend\n\nWhen you created your own account on the registration page, you probably noticed that data was magically going... somewhere. But there's actually no magic involved; the register page invokes a RESTful API provided by [Telerik Backend Services](http://www.telerik.com/backend-services) to register the user for the Groceries service.\n\n> **NOTE**: You don't have to use Telerik Backend Services to hit your backend service; you can use any HTTP API in a NativeScript app. Telerik Backend Services is convenient for us to use for this tutorial because it lets us spin up HTTP endpoints quickly.\n\nTake a look at `app/shared/config.js`. There's only a small code snippet there, but it includes a hardcoded root path to the Groceries backend that the register page uses, and that you'll be using momentarily:\n\n```javascript\nmodule.exports = {\n    apiUrl: \"https://api.everlive.com/v1/GWfRtXi1Lwt4jcqK/\"\n};\n```\n\n> **TIP**: `config.js` also shows a convenient pattern you can use for sharing configuration variables throughout your app.\n\nNext, take a look in the `app/shared/view-models` folder, which contains a few view models that we've pre-packaged into Groceries, and those view models contain the code to hit our backend. You can see this demonstrated in the `user-view-model.js` file's `register()` function.\n\n> **NOTE**: In a larger app, it's pretty common to place code that interacts with the backend in separate files, and not directly in the view models. But in our case, the connection code lives directly in the view model for simplicity—which is perfectly reasonable for small apps. \n\nNote that the `register()` function uses the config module to get the path to the backend, as well as the [fetch module]() to make HTTP calls.\n\n```javascript\nvar config = require(\"../../shared/config\");\nvar fetchModule = require(\"fetch\");\n```\n\nNativeScript's fetch module uses the same API as the [browser's new fetch() API](https://fetch.spec.whatwg.org/). Therefore, if you already know how to use the web's `fetch()` method, you already know how to make HTTP calls in NativeScript. Let's look at how the fetch module works by adding another method to the user view model.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Complete the login in the view model</h4>\n\nOpen `app/shared/view-models/user-view-model.js` and paste the following code directly above the existing `viewModel.register()` function:\n\n```javascript\nviewModel.login = function() {\n    return fetchModule.fetch(config.apiUrl + \"oauth/token\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            username: viewModel.get(\"email\"),\n            password: viewModel.get(\"password\"),\n            grant_type: \"password\"\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(handleErrors)\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        config.token = data.Result.access_token;\n    });\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nLet's break down what the code you just pasted in does.\n\n- You use the fetch module's `fetch()` method to POST data to the `apiUrl` stored in `shared/config.js`. The username, password and grant_type are sent to this endpoint as a JSON string. (Telerik Backend Services [requires a grant_type parameter](http://docs.telerik.com/platform/backend-services/development/rest-api/users/authenticate-user) for logins.)\n\n- The `fetch()` method returns a `Promise`, which allows you to execute code after the asynchronous login either completes successfully or fails. You use this functionality to do three things (the three `then()` handlers).\n    - First, you handle any errors in the HTTP response with a `handleErrors()` function defined at the bottom of `user-view-model.js`. (If you want more details on how handling HTTP response errors with `fetch()` works check out [this article](http://tjvantoll.com/2015/09/13/fetch-and-errors/).)\n    - Next, you convert the returned data into JSON by calling the [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object's `json()` method.\n    - Finally, you save a reference to the user's authentication token in the config module. You'll use that token on subsequent HTTP requests later in this guide.\n\n> **TIP**:\n> * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) are a part of ECMAScript 6 (the scripting language of which JavaScript is an implementation). Because Promises have been implemented in the two JavaScript engines NativeScript uses—V8 for Android and JavaScriptCore for iOS—Promises are available for use in NativeScript apps.\n> * NativeScript makes `fetch()` available as a global variable for convenience. This means you can replace `fetchModule.fetch()` with `fetch()`. The global `fetch()` shortcut will be used for the remainder of this guide.\n\nWith this code in place let's return to `login.js` to use this new function.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise: Add UserViewModel to the login code-behind</b></h4>\n\nIn `login.js`, at the top of the file, add the following reference to `shared/view-models/user-view-model`:\n\n```javascript\nvar UserViewModel = require(\"../../shared/view-models/user-view-model\");\n```\n\n**Remove** the following five lines of code, as you'll be using the `UserViewModel` instead of the `user` you added in the previous chapter.\n\n<div class=\"no-copy-button\"></div>\n\n```javascript\n// Remove these lines of code\nvar Observable = require(\"data/observable\").Observable;\nvar user = new Observable({\n    email: \"user@domain.com\",\n    password: \"password\"\n});\n```\n\nNext, add the following line of code after the `var UserViewModel = require(...)` line:\n\n```javascript\nvar user = new UserViewModel();\n```\n\nFinally, replace the `exports.signIn()` function with the code below:\n\n```javascript\nexports.signIn = function() {\n    user.login();\n};\n```\n\n> **TIP**: You can always view the completed codebase in the “end” branch of the [sample-Groceries repo](https://github.com/NativeScript/sample-Groceries/tree/end).\n\n</div>\n\n<div class=\"explain\">\n\nTake a moment to look at just how clean your code-behind file is now. The code-behind instantiates a view model (`UserViewModel`), and calls its `signIn()` method when the user taps the view's sign in button. Because the view model is bound to the page's two text fields (remember `{% raw %}{{ email }}{% endraw %}` and `{% raw %}{{ password }}{% endraw %}`), the view model already has the data it needs to perform the actual login.\n\nAnd if you try running your app, and input your account's credentials, you can indeed login, but... you don't see anything. That's because view models aren't responsible for updating the UI. Instead the view model returns a `Promise` to let the code-behind handle the UI. (Remember that `fetch()` returns a `Promise`.) Let's see how you can use that `Promise`, and introduce a new NativeScript module in the process.\n\n## 4.2: Dialog module\n\nTo utilize the `Promise` that the view model's `login()` function returns, you need to handle two scenarios: what to do when the login works, and what to do when it doesn't.\n\nIn the case of Groceries, when the login works you're going to navigate the user to the list page, which you'll be building momentarily, and which will let the user add and remove groceries from a list. To do the navigation you'll use the same frame module you used earlier in this guide.\n\nThe trickier situation is handling login failures, and for that you're going to use the dialog module. You can use this module to show [several types]() of popup UIs in your app, including action sheets, confirmation boxes, alert boxes, and prompts. It is a highly customizable module, and it lets you control the buttons in your alerts, their text, and the messaging in the alert itself. The dialog module's code is in the `node_modules/tns-core-modules/ui` folder with other UI widgets. Let's see how to use this widget on the login page.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Handle an error with a dialog window</h4>\n\nAdd the following line to the top of `login.js` to import the dialog module:\n\n```javascript\nvar dialogsModule = require(\"ui/dialogs\");\n```\n\nNext, re-write your `signIn()` function to look like this:\n\n```javascript\nexports.signIn = function() {\n    user.login()\n        .catch(function(error) {\n            console.log(error);\n            dialogsModule.alert({\n                message: \"Unfortunately we could not find your account.\",\n                okButtonText: \"OK\"\n            });\n            return Promise.reject();\n        })\n        .then(function() {\n            frameModule.topmost().navigate(\"views/list/list\");\n        });\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThis code handles both a successful and unsuccessful login. On success, you call the frame module's `navigate()` method to navigate the user to the (currently empty) list page. On failure, you use the dialog module to show the user an error message. Try inputting some invalid credentials to see what the dialog looks like.\n\n![login 8](/docs/img/cli-getting-started/nativescript/chapter4/ios/1.png)\n![login 8](/docs/img/cli-getting-started/nativescript/chapter4/android/1.png)\n\nWith that, the login page is completely functional. Now that you have user management working in your NativeScript app, let's move onto the page where users will manage their grocery list. To do that, you need a module that shows items in a list, which is exactly what the ListView module does.\n\n> **TIP**: From this point forward in the guide you'll have to log in a lot, so you may find it helpful to hardcode your credentials in the app during development. The easiest way to do that is to pass an email address and password to the `UserViewModel()` constructor, for example:\n\n> ```javascript\n> var user = new UserViewModel({\n>     email: \"username@domain.com\",\n>     password: \"password\"\n> });\n> ```\n\n## 4.3: ListView\n\nThe ListView widget lets you show a list of things on the screen, which is exactly what you need for showing a list of groceries. Before tying the grocery list to a backend API, let's start by seeing how to show a hardcoded list of items on the screen.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Construct the list view</h4>\n\nOpen `app/views/list/list.xml` and paste in the code below, which creates the list where your groceries will reside:\n\n```xml\n<Page loaded=\"loaded\">\n    <GridLayout>\n        <ListView items=\"{% raw %}{{ groceryList }}{% endraw %}\">\n            <ListView.itemTemplate>\n                <Label text=\"{% raw %}{{ name }}{% endraw %}\" horizontalAlignment=\"left\" verticalAlignment=\"center\"/>\n            </ListView.itemTemplate>\n        </ListView>\n    </GridLayout>\n</Page>\n```\n\n</div>\n\n<div class=\"explain\">\n\n> **NOTE**: Notice that this page is going to use a `<GridLayout>` to layout the UI components on the screen. As you add more UI components, you'll start dividing the screen into rows and columns, but for now you're just going to let the `<ListView>` take up the full screen (which is the default behavior of a `<GridLayout>` with no attributes).\n\nAs discussed earlier, even though you're using `<ListView>` in XML, the ListView module is still a NativeScript module. You can find its implementation in the `node_modules/tns-core-modules/ui/list-view` folder. If you want to, you could construct a ListView in pure JavaScript code in the code-behind file as shown in [this example](). For most situations using the NativeScript UI modules in XML is easier, so we'll be sticking with XML usage throughout this tutorial.\n\nNote the use of `<ListView.itemTemplate>`. This tag gives you the ability to control how each of the ListView's items displays within the list. For now you're using a simple `<Label>` UI component to display the `{% raw %}{{ name }}{% endraw %}` of each grocery.\n\nIf you run this code as is, you won't see any items in the grocery list. First you need to build out a way to manage data within the ListView module, and to do that you're going to need a new NativeScript module: the ObservableArray.\n\n## 4.4: Working with arrays\n\nIn the previous section of this guide you saw how to create observables and how to use them to connect XML views with code-behind files and view models. You're going to do the same thing in this section with one additional twist, and it involves making this `items` attribute work:\n\n```xml\n<ListView items=\"{% raw %}{{ groceryList }}{% endraw %}\">\n```\n\nThe ListView module's `items` attribute takes an array, and to create that array on the view model, NativeScript provides a special ObservableArray module. To see how it works, let's start building the list page's code-behind file.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Populate the list view</h4>\n\nOpen `app/views/list/list.js` and paste in the following code:\n\n```javascript\nvar dialogsModule = require(\"ui/dialogs\");\nvar Observable = require(\"data/observable\").Observable;\nvar ObservableArray = require(\"data/observable-array\").ObservableArray;\nvar page;\n\nvar pageData = new Observable({\n    groceryList: new ObservableArray([\n        { name: \"eggs\" },\n        { name: \"bread\" },\n        { name: \"cereal\" }\n    ])\n});\n\nexports.loaded = function(args) {\n    page = args.object;\n    page.bindingContext = pageData;\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nHere, you're creating a new Observable object called `pageData`, which you set as the page's `bindingContext` in the `load()` function. Inside the Observable, you set a single `\"groceryList\"` property to be a new instance of the ObservableArray class. Notice how the `\"groceryList\"` property corresponds to `<ListView items=\"{% raw %}{{ groceryList }}{% endraw %}\">`, and each array entry's `\"name\"` property corresponds to `<Label text=\"{% raw %}{{ name }}{% endraw %}\">`. If you run your app you'll see the list screen shows the hardcoded data:\n\n![list 1](/docs/img/cli-getting-started/nativescript/chapter4/ios/2.png)\n![list 1](/docs/img/cli-getting-started/nativescript/chapter4/android/2.png)\n\nNow that we have items on the screen let's look at how you can tie this list to a backend instead of hardcoded data. To do so you'll switch the list page to use a view model, much like you did with the login page.\n\nA starting view model for this page is already in the file at `app/shared/view-models/grocery-list-view-model.js`, which contains code that looks a lot like what you already have in `list.js`:\n\n```javascript\nvar config = require(\"../../shared/config\");\nvar fetchModule = require(\"fetch\");\nvar ObservableArray = require(\"data/observable-array\").ObservableArray;\n\nfunction GroceryListViewModel(items) {\n    var viewModel = new ObservableArray(items);\n    return viewModel;\n}\n\nmodule.exports = GroceryListViewModel;\n```\n\nLet's expand on this to tie this view model to a backend.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Populate a list view from a backend</h4>\n\nYou're going to start by changing `list.js` to use the `GroceryListViewModel`. First, `require()` the `GroceryListViewModel` so you can use it:\n\n```javascript\nvar GroceryListViewModel = require(\"../../shared/view-models/grocery-list-view-model\");\n```\n\nNext, **remove** the existing `var pageData` assignment:\n\n<div class=\"no-copy-button\"></div>\n\n```javascript\n// Remove these seven lines of code\nvar pageData = new Observable({\n    groceryList: new ObservableArray([\n        { name: \"eggs\" },\n        { name: \"bread\" },\n        { name: \"cereal\" }\n    ])\n});\n```\n\nAnd add the code below in the same location:\n\n```javascript\nvar groceryList = new GroceryListViewModel([]);\nvar pageData = new Observable({\n    groceryList: groceryList\n});\n```\n\nFinally, replace the existing `exports.loaded()` function with the one below, which calls two new methods on the view model—`empty()` and `load()`.\n\n```javascript\nexports.loaded = function(args) {\n    page = args.object;\n    page.bindingContext = pageData;\n\n    groceryList.empty();\n    groceryList.load();\n};\n```\n\nIn this code, `groceryList` is referencing the grocery list model, and the `empty()` function empties the list, and then calls the view model's `load()` function to reload the data from the backend.\n\nThe last piece to make this work is actually implementing the `empty()` and `load()` functions in the view model. Open `app/shared/view-models/grocery-list-view-model.js`, and paste the following code between the `var viewModel` assignment, and the `return viewModel` statement.\n\n```javascript\nviewModel.load = function() {\n    return fetch(config.apiUrl + \"Groceries\", {\n        headers: {\n            \"Authorization\": \"Bearer \" + config.token\n        }\n    })\n    .then(handleErrors)\n    .then(function(response) {\n        return response.json();\n    }).then(function(data) {\n        data.Result.forEach(function(grocery) {\n            viewModel.push({\n                name: grocery.Name,\n                id: grocery.Id\n            });\n        });\n    });\n};\n\nviewModel.empty = function() {\n    while (viewModel.length) {\n        viewModel.pop();\n    }\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nThe code to make an HTTP call should look familiar, as it leverages the same fetch module you used in the previous section. Here, the fetch module's first `then()` handler checks for HTTP errors, the second `then()` handler converts the data from the response into JSON format, and the third handler pushes each grocery item from the response into the ObservableArray.\n\nIf you load the app and log in with email address \"user@nativescript.org\" and password \"password\", you should see a list of groceries that looks something like this:\n\n![list 2](/docs/img/cli-getting-started/nativescript/chapter4/ios/3.png)\n![list 2](/docs/img/cli-getting-started/nativescript/chapter4/android/3.png)\n\nThe cool thing here is the code you didn't have to write. Notice that there is no need to refresh the UI, or manually access the ListView UI component—all the view model does is push the JSON response to the ObservableArray, and the UI takes care of itself.\n\nLet's see how you can build on top of this and enable users to add to their grocery list directly from the app.\n\n## 4.5: GridLayout\n\nYou already know how to add items to a `<ListView>`, because you just did so in the previous section—all you need to do is call the ObservableArray module's `push()` method.\n\nTo give the user the ability to manage their grocery list you're going to have to put some more UI components on the screen, and to do that you're going to need to divide the screen into rows and columns using the `<GridLayout>` UI component.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Implement the ability to add groceries to the list</h4>\n\nOpen `app/views/list/list.xml` and change the `<GridLayout>` tag to use the code below:\n\n```xml\n<GridLayout rows=\"auto, *\" columns=\"2*, *\">\n```\n\nThe `rows` attribute divides the screen into two rows, the first auto-sized according to its childrens' height, and the other to contain \\*, or the remaining height of the screen. The `columns` attribute divides the screen into two columns, where the first column takes up 2/3 of the screen, and the second takes up the remaining third.\n\nNext, to give the user a means of adding groceries to the list, add a text field and a button to the page. Add these two lines of code directly after the initial `<GridLayout>` tag:\n\n```xml\n<TextField id=\"grocery\" text=\"{% raw %}{{ grocery }}{% endraw %}\" hint=\"Enter a grocery item\" row=\"0\" col=\"0\" />\n<Button text=\"Add\" tap=\"add\" row=\"0\" col=\"1\" />\n```\n\nThe text field has an id attribute of `\"grocery\"`, and is bound to the `{% raw %}{{ grocery }}{% endraw %}` property of the page's binding context. The button's `tap` event refers to an `add()` function, that you'll add to the code-behind file momentarily.\n\nBut the most important thing to note here is the use of the `row` and `col` attributes. These attributes are zero-based, so the text field's `row=\"0\" col=\"0\"` attributes place it in the first row and first column, whereas the button's `row=\"0\" col=\"1\"` attributes place it in the first row and second column.\n\nFinally, replace the `<ListView>` tag with the code below to place it in the second row, to have it span both columns, and also to give it an `id` attribute that you'll need later.\n\n```xml\n<ListView items=\"{% raw %}{{ groceryList }}{% endraw %}\" id=\"groceryList\" row=\"1\" colSpan=\"2\">\n```\n\nNow you just need to make the necessary changes to the code-behind file to support these XML changes. Open `list.js` and start by adding a new `\"grocery\"` property to the `pageData` Observable. The `pageData` assignment should look like this:\n\n```javascript\nvar pageData = new Observable({\n    groceryList: groceryList,\n    grocery: \"\"\n});\n```\n\nNext, you need to add an `add()` function to handle the button tap event. Paste in the following code at the bottom of `list.js`:\n\n```javascript\nexports.add = function() {\n    // Check for empty submissions\n    if (pageData.get(\"grocery\").trim() === \"\") {\n        dialogsModule.alert({\n            message: \"Enter a grocery item\",\n            okButtonText: \"OK\"\n        });\n        return;\n    }\n\n    // Dismiss the keyboard\n    page.getViewById(\"grocery\").dismissSoftInput();\n    groceryList.add(pageData.get(\"grocery\"))\n        .catch(function() {\n            dialogsModule.alert({\n                message: \"An error occurred while adding an item to your list.\",\n                okButtonText: \"OK\"\n            });\n        });\n\n    // Empty the input field\n    pageData.set(\"grocery\", \"\");\n};\n```\n\nIn this function, you first ensure the user didn't submit without typing a grocery. If the user did type something, you dismiss the device's keyboard, then you get the `\"grocery\"` property from the page's binding context (which is bound to the new `<TextField>`), and pass that value to the view model's `add()` function.\n\nFinally, define that `add()` function. To do so, open `app/shared/view-models/grocery-list-view-model.js` and paste the following function under the `empty()` function, but before the `return viewModel` statement.\n\n```javascript\nviewModel.add = function(grocery) {\n    return fetch(config.apiUrl + \"Groceries\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            Name: grocery\n        }),\n        headers: {\n            \"Authorization\": \"Bearer \" + config.token,\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(handleErrors)\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        viewModel.push({ name: grocery, id: data.Result.Id });\n    });\n};\n```\n</div>\n\n<div class=\"explain\">\n\nIf you build and rerun your app, you'll find that you can add a grocery item and it will appear immediately in your list—and, all of this is completely driven by a backend service. Pretty cool, huh?\n\n![list 3](/docs/img/cli-getting-started/nativescript/chapter4/ios/4.gif)\n![list 3](/docs/img/cli-getting-started/nativescript/chapter4/android/4.gif)\n\nLet's look at how you can polish this page with a NativeScript module for showing activity indicators.\n\n## 4.6: ActivityIndicator\n\nCurrently there's a bit of a delay when you first visit the list page before groceries appear. This delay could confuse a new user, who might think the app is stuck rather than retrieving data from a backend.\n\nIn NativeScript apps you can use the ActivityIndicator module to show a spinner icon in your UI while your app is busy performing actions. The ActivityIndicator is a relatively simple UI element as it primarily uses one attribute—`busy`. When an ActivityIndicator's `busy` attribute is set to `true` the ActivityIndicator shows, and when its `busy` attribute is set to `false` it doesn't. Let's see how the module works by adding an ActivityIndicator to the list page.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add an ActivityIndicator</h4>\n\nOpen `app/views/list/list.xml` and add the following element directly before the closing `</GridLayout>` tag.\n\n```xml\n<ActivityIndicator busy=\"{% raw %}{{ isLoading }}{% endraw %}\" rowSpan=\"2\" colSpan=\"2\" />\n```\n\nThen, in `app/views/list/list.js`, replace the existing `groceryList.load()` call in `loaded()` with the following four lines of code:\n\n```javascript\npageData.set(\"isLoading\", true);\ngroceryList.load().then(function() {\n    pageData.set(\"isLoading\", false);\n});\n```\n\n</div>\n\n<div class=\"explain\">\n\nIn the code above you add a new `\"isLoading\"` flag to the list page's Observable, and then bind the ActivityIndicator's `busy` attribute to that value. You set the initial value of the `\"isLoading\"` flag to `true` in the list page's `loaded()` function, which shows the ActivityIndicator. When the grocery list finishes loading, you flip the `\"isLoading\"` flag back to `false`, which hides the ActivityIndicator.\n\nYou control where the ActivityIndicator displays by setting its `rowSpan` and `colSpan` attributes. In this case `rowSpan=\"2\" colSpan=\"2\"` makes the ActivityIndicator take up both rows and both columns of its parent GridLayout. Here's what the new ActivityIndicator looks like:\n\n![ActivityIndicator on iOS](/docs/img/cli-getting-started/nativescript/chapter4/ios/5.gif)\n![ActivityIndicator on Android](/docs/img/cli-getting-started/nativescript/chapter4/android/5.gif)\n\nThe list page is now more user friendly, but we can improve the experience with one of the more powerful NativeScript modules: the animation module.\n\n## 4.7: Animations\n\nThe ability to run robust and performant animations is the one of the biggest reasons people choose to build native mobile apps, and NativeScript makes running these animations simple. The NativeScript animation modules provides a [series of JavaScript APIs](/ui/animation) that let you perform a wide variety of animations to elements on the screen, including the following:\n\n- [Opacity](/ui/animation#opacity)\n- [Background Color](/ui/animation#background-color)\n- [Translations](/ui/animation#translate)\n- [Scaling](/ui/animation#scale)\n- [Rotating](/ui/animation#rotate)\n\nFor our list page you’re going to use an [opacity animation](/ui/animation#opacity) to fade in your grocery list after your data loads. Let’s add in the code and then discuss how it all works.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add an animation</h4>\n\nOpen `app/views/list/list.css` and add an `opacity: 0` rule to the existing `ListView` selector. The full set of rules should look like this:\n\n```css\nListView {\n    margin: 5;\n    opacity: 0;\n}\n```\n\nThen, in `app/views/list/list.js`, replace the existing `exports.loaded()` function with the code below, which does two new things: gets a reference to the `<ListView>` (`page.getViewById(\"groceryList\")`), and then calls that element’s `animate()` function after the `groceryList.load()` call completes.\n\n```javascript\nexports.loaded = function(args) {\n    page = args.object;\n    var listView = page.getViewById(\"groceryList\");\n    page.bindingContext = pageData;\n\n    groceryList.empty();\n    pageData.set(\"isLoading\", true);\n    groceryList.load().then(function() {\n        pageData.set(\"isLoading\", false);\n        listView.animate({\n            opacity: 1,\n            duration: 1000\n        });\n    });\n};\n```\n\n</div>\n\n<div class=\"explain\">\n\nA few things are happening in the code above.\n\nFirst, in CSS, you assign an `opacity` of `0` to the grocery list `<ListView>`. This hides the grocery list completely when the page loads. Next, in JavaScript, after the `groceryList.load()` call completes, you call the list view’s `animate()` function. This changes the element's `opacity` from `0` (completely hidden) to `1` (completely visible) over one full second.\n\n> **NOTE**: The animation function’s `duration` property takes a time in milliseconds. Therefore, `1000` equates to one second.\n\nThe result of this code is a nice fade-in animation:\n\n![Animations on iOS](/docs/img/cli-getting-started/nativescript/chapter4/ios/6.gif)\n![Animations on Android](/docs/img/cli-getting-started/nativescript/chapter4/android/6.gif)\n\nThe animation module is a lot of fun to play with, and it’s easy to use too. All you need to do is get a reference to an element using `getViewById()`, and then call that element’s `animate` method. You may want to take a few minutes to look through our [animation samples](/ui/animation#examples) and try a few of these animations for yourself in Groceries.\n\nNow that you have the login, registration, and list pages complete, let’s enhance the app's functionality as a grocery list management tool. In the next chapters you'll add functionality such as email validation, social sharing, and more. And you'll use one of NativeScript's most useful features to do so: npm modules.\n\n> **TIP**: There are several modules that come out of the box with your NativeScript installation that we did not have time to cover in this guide—including a [location service](), a [file-system helper](), a [timer module](), a [camera module](), a [color module](), and a whole lot more. Make sure to peruse the “Modules API” of the docs, or just look around `node_modules/tns-core-modules` to see all of what's available.\n\n</div>","date":"2016-08-26T21:05:54.510Z","updated":"2016-08-26T21:05:54.510Z","path":"tutorial/4.html","title":"","comments":1,"layout":"page","_id":"cisn95c7w000rwsl09nl22bkc","content":"<h1 id=\"Chapter-4—NativeScript-Modules\"><a href=\"#Chapter-4—NativeScript-Modules\" class=\"headerlink\" title=\"Chapter 4—NativeScript Modules\"></a>Chapter 4—NativeScript Modules</h1><p>In this chapter you’ll learn about NativeScript modules, which are the JavaScript modules in your app’s <code>node_modules/tns-core-modules</code> folder. Whether you’ve realized it or not, you’ve already used several NativeScript modules. This includes the modules you’ve brought in via <code>require()</code> (the view, frame and observable modules) and also the UI components you’ve been using in XML (the page, image, text field and button modules).</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#41-connecting-to-a-backend\">4.1: Connecting to a backend</a>\n- <a href=\"#42-dialog-module\">4.2: Dialog module</a>\n- <a href=\"#43-listview\">4.3: ListView</a>\n- <a href=\"#44-working-with-arrays\">4.4: Working with arrays</a>\n- <a href=\"#45-gridlayout\">4.5: GridLayout</a>\n- <a href=\"#46-activityindicator\">4.6: ActivityIndicator</a>\n- <a href=\"#47-animations\">4.7: Animations</a>\n\nIf you dig into <code>node_modules/tns-core-modules</code> you can get an idea of how these modules work. Start by finding the <code>node_modules/tns-core-modules/camera</code> folder, which includes the implementation of the camera module. It includes:\n\n- a <code>package.json</code> file that sets the name of the module;\n- a file containing the module’s Android implementation (<code>camera.android.js</code>);\n- a file containing the module’s iOS implementation (<code>camera.ios.js</code>);\n- a file containing code shared by the Android and iOS implementations (<code>camera-common.js</code>)\n\n&gt; <strong>NOTE</strong>: You can refer to the <a href=\"https://nodejs.org/api/modules.html#modules_folders_as_modules\" target=\"_blank\" rel=\"external\">Node.js documentation on folders as modules</a> for more detailed information on how NativeScript organizes its modules.\n\nThe *.ios.* and *.android.* naming convention should look familiar, as it’s the exact same convention we used to include Android- and iOS-specific styling in <a href=\"#24-css\">chapter 2.4</a>. NativeScript uses this same convention to implement its modules on iOS and Android. Now that you know where these modules are, let’s take a closer look at what else they can do for your app.\n\n## 4.1: Connecting to a backend\n\nWhen you created your own account on the registration page, you probably noticed that data was magically going… somewhere. But there’s actually no magic involved; the register page invokes a RESTful API provided by <a href=\"http://www.telerik.com/backend-services\" target=\"_blank\" rel=\"external\">Telerik Backend Services</a> to register the user for the Groceries service.\n\n&gt; <strong>NOTE</strong>: You don’t have to use Telerik Backend Services to hit your backend service; you can use any HTTP API in a NativeScript app. Telerik Backend Services is convenient for us to use for this tutorial because it lets us spin up HTTP endpoints quickly.\n\nTake a look at <code>app/shared/config.js</code>. There’s only a small code snippet there, but it includes a hardcoded root path to the Groceries backend that the register page uses, and that you’ll be using momentarily:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    apiUrl: <span class=\"string\">\"https://api.everlive.com/v1/GWfRtXi1Lwt4jcqK/\"</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n&gt; <strong>TIP</strong>: <code>config.js</code> also shows a convenient pattern you can use for sharing configuration variables throughout your app.\n\nNext, take a look in the <code>app/shared/view-models</code> folder, which contains a few view models that we’ve pre-packaged into Groceries, and those view models contain the code to hit our backend. You can see this demonstrated in the <code>user-view-model.js</code> file’s <code>register()</code> function.\n\n&gt; <strong>NOTE</strong>: In a larger app, it’s pretty common to place code that interacts with the backend in separate files, and not directly in the view models. But in our case, the connection code lives directly in the view model for simplicity—which is perfectly reasonable for small apps. \n\nNote that the <code>register()</code> function uses the config module to get the path to the backend, as well as the <a href=\"\">fetch module</a> to make HTTP calls.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/config\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fetchModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"fetch\"</span>);</div></pre></td></tr></table></figure>\n\nNativeScript’s fetch module uses the same API as the <a href=\"https://fetch.spec.whatwg.org/\" target=\"_blank\" rel=\"external\">browser’s new fetch() API</a>. Therefore, if you already know how to use the web’s <code>fetch()</code> method, you already know how to make HTTP calls in NativeScript. Let’s look at how the fetch module works by adding another method to the user view model.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Complete the login in the view model</h4>\n\nOpen <code>app/shared/view-models/user-view-model.js</code> and paste the following code directly above the existing <code>viewModel.register()</code> function:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.login = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetchModule.fetch(config.apiUrl + <span class=\"string\">\"oauth/token\"</span>, &#123;</div><div class=\"line\">        method: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">        body: <span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">            username: viewModel.get(<span class=\"string\">\"email\"</span>),</div><div class=\"line\">            password: viewModel.get(<span class=\"string\">\"password\"</span>),</div><div class=\"line\">            grant_type: <span class=\"string\">\"password\"</span></div><div class=\"line\">        &#125;),</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(handleErrors)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> response.json();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        config.token = data.Result.access_token;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nLet’s break down what the code you just pasted in does.\n\n- You use the fetch module’s <code>fetch()</code> method to POST data to the <code>apiUrl</code> stored in <code>shared/config.js</code>. The username, password and grant_type are sent to this endpoint as a JSON string. (Telerik Backend Services <a href=\"http://docs.telerik.com/platform/backend-services/development/rest-api/users/authenticate-user\" target=\"_blank\" rel=\"external\">requires a grant_type parameter</a> for logins.)\n\n- The <code>fetch()</code> method returns a <code>Promise</code>, which allows you to execute code after the asynchronous login either completes successfully or fails. You use this functionality to do three things (the three <code>then()</code> handlers).\n    - First, you handle any errors in the HTTP response with a <code>handleErrors()</code> function defined at the bottom of <code>user-view-model.js</code>. (If you want more details on how handling HTTP response errors with <code>fetch()</code> works check out <a href=\"http://tjvantoll.com/2015/09/13/fetch-and-errors/\" target=\"_blank\" rel=\"external\">this article</a>.)\n    - Next, you convert the returned data into JSON by calling the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\" target=\"_blank\" rel=\"external\"><code>Response</code></a> object’s <code>json()</code> method.\n    - Finally, you save a reference to the user’s authentication token in the config module. You’ll use that token on subsequent HTTP requests later in this guide.\n\n&gt; <strong>TIP</strong>:\n&gt; <em> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">Promises</a> are a part of ECMAScript 6 (the scripting language of which JavaScript is an implementation). Because Promises have been implemented in the two JavaScript engines NativeScript uses—V8 for Android and JavaScriptCore for iOS—Promises are available for use in NativeScript apps.\n&gt; </em> NativeScript makes <code>fetch()</code> available as a global variable for convenience. This means you can replace <code>fetchModule.fetch()</code> with <code>fetch()</code>. The global <code>fetch()</code> shortcut will be used for the remainder of this guide.\n\nWith this code in place let’s return to <code>login.js</code> to use this new function.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise: Add UserViewModel to the login code-behind</b></h4>\n\nIn <code>login.js</code>, at the top of the file, add the following reference to <code>shared/view-models/user-view-model</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> UserViewModel = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/view-models/user-view-model\"</span>);</div></pre></td></tr></table></figure>\n\n<strong>Remove</strong> the following five lines of code, as you’ll be using the <code>UserViewModel</code> instead of the <code>user</code> you added in the previous chapter.\n\n<div class=\"no-copy-button\"></div>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Remove these lines of code</span></div><div class=\"line\"><span class=\"keyword\">var</span> Observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>).Observable;</div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    email: <span class=\"string\">\"user@domain.com\"</span>,</div><div class=\"line\">    password: <span class=\"string\">\"password\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Next, add the following line of code after the <code>var UserViewModel = require(...)</code> line:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> UserViewModel();</div></pre></td></tr></table></figure>\n<p>Finally, replace the <code>exports.signIn()</code> function with the code below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.signIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    user.login();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>TIP</strong>: You can always view the completed codebase in the “end” branch of the <a href=\"https://github.com/NativeScript/sample-Groceries/tree/end\" target=\"_blank\" rel=\"external\">sample-Groceries repo</a>.</p>\n</blockquote>\n<p></p></div><p></p>\n<div class=\"explain\">\n\nTake a moment to look at just how clean your code-behind file is now. The code-behind instantiates a view model (<code>UserViewModel</code>), and calls its <code>signIn()</code> method when the user taps the view’s sign in button. Because the view model is bound to the page’s two text fields (remember <code>{{ email }}</code> and <code>{{ password }}</code>), the view model already has the data it needs to perform the actual login.\n\nAnd if you try running your app, and input your account’s credentials, you can indeed login, but… you don’t see anything. That’s because view models aren’t responsible for updating the UI. Instead the view model returns a <code>Promise</code> to let the code-behind handle the UI. (Remember that <code>fetch()</code> returns a <code>Promise</code>.) Let’s see how you can use that <code>Promise</code>, and introduce a new NativeScript module in the process.\n\n## 4.2: Dialog module\n\nTo utilize the <code>Promise</code> that the view model’s <code>login()</code> function returns, you need to handle two scenarios: what to do when the login works, and what to do when it doesn’t.\n\nIn the case of Groceries, when the login works you’re going to navigate the user to the list page, which you’ll be building momentarily, and which will let the user add and remove groceries from a list. To do the navigation you’ll use the same frame module you used earlier in this guide.\n\nThe trickier situation is handling login failures, and for that you’re going to use the dialog module. You can use this module to show <a href=\"\">several types</a> of popup UIs in your app, including action sheets, confirmation boxes, alert boxes, and prompts. It is a highly customizable module, and it lets you control the buttons in your alerts, their text, and the messaging in the alert itself. The dialog module’s code is in the <code>node_modules/tns-core-modules/ui</code> folder with other UI widgets. Let’s see how to use this widget on the login page.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Handle an error with a dialog window</h4>\n\nAdd the following line to the top of <code>login.js</code> to import the dialog module:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogsModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div></pre></td></tr></table></figure>\n\nNext, re-write your <code>signIn()</code> function to look like this:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.signIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    user.login()</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">            dialogsModule.alert(&#123;</div><div class=\"line\">                message: <span class=\"string\">\"Unfortunately we could not find your account.\"</span>,</div><div class=\"line\">                okButtonText: <span class=\"string\">\"OK\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject();</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            frameModule.topmost().navigate(<span class=\"string\">\"views/list/list\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThis code handles both a successful and unsuccessful login. On success, you call the frame module’s <code>navigate()</code> method to navigate the user to the (currently empty) list page. On failure, you use the dialog module to show the user an error message. Try inputting some invalid credentials to see what the dialog looks like.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/1.png\" alt=\"login 8\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/1.png\" alt=\"login 8\">\n\nWith that, the login page is completely functional. Now that you have user management working in your NativeScript app, let’s move onto the page where users will manage their grocery list. To do that, you need a module that shows items in a list, which is exactly what the ListView module does.\n\n&gt; <strong>TIP</strong>: From this point forward in the guide you’ll have to log in a lot, so you may find it helpful to hardcode your credentials in the app during development. The easiest way to do that is to pass an email address and password to the <code>UserViewModel()</code> constructor, for example:\n\n&gt; <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> UserViewModel(&#123;</div><div class=\"line\">&gt;     email: <span class=\"string\">\"username@domain.com\"</span>,</div><div class=\"line\">&gt;     password: <span class=\"string\">\"password\"</span></div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n\n## 4.3: ListView\n\nThe ListView widget lets you show a list of things on the screen, which is exactly what you need for showing a list of groceries. Before tying the grocery list to a backend API, let’s start by seeing how to show a hardcoded list of items on the screen.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Construct the list view</h4>\n\nOpen <code>app/views/list/list.xml</code> and paste in the code below, which creates the list where your groceries will reside:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"loaded\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GridLayout</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; groceryList &#125;&#125;&#123;% endraw %&#125;\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; name &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">horizontalAlignment</span>=<span class=\"string\">\"left\"</span> <span class=\"attr\">verticalAlignment</span>=<span class=\"string\">\"center\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">GridLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\n&gt; <strong>NOTE</strong>: Notice that this page is going to use a <code>&lt;GridLayout&gt;</code> to layout the UI components on the screen. As you add more UI components, you’ll start dividing the screen into rows and columns, but for now you’re just going to let the <code>&lt;ListView&gt;</code> take up the full screen (which is the default behavior of a <code>&lt;GridLayout&gt;</code> with no attributes).\n\nAs discussed earlier, even though you’re using <code>&lt;ListView&gt;</code> in XML, the ListView module is still a NativeScript module. You can find its implementation in the <code>node_modules/tns-core-modules/ui/list-view</code> folder. If you want to, you could construct a ListView in pure JavaScript code in the code-behind file as shown in <a href=\"\">this example</a>. For most situations using the NativeScript UI modules in XML is easier, so we’ll be sticking with XML usage throughout this tutorial.\n\nNote the use of <code>&lt;ListView.itemTemplate&gt;</code>. This tag gives you the ability to control how each of the ListView’s items displays within the list. For now you’re using a simple <code>&lt;Label&gt;</code> UI component to display the <code>{{ name }}</code> of each grocery.\n\nIf you run this code as is, you won’t see any items in the grocery list. First you need to build out a way to manage data within the ListView module, and to do that you’re going to need a new NativeScript module: the ObservableArray.\n\n## 4.4: Working with arrays\n\nIn the previous section of this guide you saw how to create observables and how to use them to connect XML views with code-behind files and view models. You’re going to do the same thing in this section with one additional twist, and it involves making this <code>items</code> attribute work:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; groceryList &#125;&#125;&#123;% endraw %&#125;\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\nThe ListView module’s <code>items</code> attribute takes an array, and to create that array on the view model, NativeScript provides a special ObservableArray module. To see how it works, let’s start building the list page’s code-behind file.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Populate the list view</h4>\n\nOpen <code>app/views/list/list.js</code> and paste in the following code:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogsModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>).Observable;</div><div class=\"line\"><span class=\"keyword\">var</span> ObservableArray = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable-array\"</span>).ObservableArray;</div><div class=\"line\"><span class=\"keyword\">var</span> page;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> pageData = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    groceryList: <span class=\"keyword\">new</span> ObservableArray([</div><div class=\"line\">        &#123; name: <span class=\"string\">\"eggs\"</span> &#125;,</div><div class=\"line\">        &#123; name: <span class=\"string\">\"bread\"</span> &#125;,</div><div class=\"line\">        &#123; name: <span class=\"string\">\"cereal\"</span> &#125;</div><div class=\"line\">    ])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">    page.bindingContext = pageData;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nHere, you’re creating a new Observable object called <code>pageData</code>, which you set as the page’s <code>bindingContext</code> in the <code>load()</code> function. Inside the Observable, you set a single <code>&quot;groceryList&quot;</code> property to be a new instance of the ObservableArray class. Notice how the <code>&quot;groceryList&quot;</code> property corresponds to <code>&lt;ListView items=&quot;{{ groceryList }}&quot;&gt;</code>, and each array entry’s <code>&quot;name&quot;</code> property corresponds to <code>&lt;Label text=&quot;{{ name }}&quot;&gt;</code>. If you run your app you’ll see the list screen shows the hardcoded data:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/2.png\" alt=\"list 1\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/2.png\" alt=\"list 1\">\n\nNow that we have items on the screen let’s look at how you can tie this list to a backend instead of hardcoded data. To do so you’ll switch the list page to use a view model, much like you did with the login page.\n\nA starting view model for this page is already in the file at <code>app/shared/view-models/grocery-list-view-model.js</code>, which contains code that looks a lot like what you already have in <code>list.js</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/config\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fetchModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"fetch\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ObservableArray = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable-array\"</span>).ObservableArray;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GroceryListViewModel</span>(<span class=\"params\">items</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> viewModel = <span class=\"keyword\">new</span> ObservableArray(items);</div><div class=\"line\">    <span class=\"keyword\">return</span> viewModel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = GroceryListViewModel;</div></pre></td></tr></table></figure>\n\nLet’s expand on this to tie this view model to a backend.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Populate a list view from a backend</h4>\n\nYou’re going to start by changing <code>list.js</code> to use the <code>GroceryListViewModel</code>. First, <code>require()</code> the <code>GroceryListViewModel</code> so you can use it:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> GroceryListViewModel = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/view-models/grocery-list-view-model\"</span>);</div></pre></td></tr></table></figure>\n\nNext, <strong>remove</strong> the existing <code>var pageData</code> assignment:\n\n<div class=\"no-copy-button\"></div>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Remove these seven lines of code</span></div><div class=\"line\"><span class=\"keyword\">var</span> pageData = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    groceryList: <span class=\"keyword\">new</span> ObservableArray([</div><div class=\"line\">        &#123; name: <span class=\"string\">\"eggs\"</span> &#125;,</div><div class=\"line\">        &#123; name: <span class=\"string\">\"bread\"</span> &#125;,</div><div class=\"line\">        &#123; name: <span class=\"string\">\"cereal\"</span> &#125;</div><div class=\"line\">    ])</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>And add the code below in the same location:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> groceryList = <span class=\"keyword\">new</span> GroceryListViewModel([]);</div><div class=\"line\"><span class=\"keyword\">var</span> pageData = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    groceryList: groceryList</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Finally, replace the existing <code>exports.loaded()</code> function with the one below, which calls two new methods on the view model—<code>empty()</code> and <code>load()</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">    page.bindingContext = pageData;</div><div class=\"line\"></div><div class=\"line\">    groceryList.empty();</div><div class=\"line\">    groceryList.load();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>In this code, <code>groceryList</code> is referencing the grocery list model, and the <code>empty()</code> function empties the list, and then calls the view model’s <code>load()</code> function to reload the data from the backend.</p>\n<p>The last piece to make this work is actually implementing the <code>empty()</code> and <code>load()</code> functions in the view model. Open <code>app/shared/view-models/grocery-list-view-model.js</code>, and paste the following code between the <code>var viewModel</code> assignment, and the <code>return viewModel</code> statement.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.load = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(config.apiUrl + <span class=\"string\">\"Groceries\"</span>, &#123;</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Bearer \"</span> + config.token</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(handleErrors)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> response.json();</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        data.Result.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grocery</span>) </span>&#123;</div><div class=\"line\">            viewModel.push(&#123;</div><div class=\"line\">                name: grocery.Name,</div><div class=\"line\">                id: grocery.Id</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">viewModel.empty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (viewModel.length) &#123;</div><div class=\"line\">        viewModel.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p></p></div><p></p>\n<div class=\"explain\">\n\nThe code to make an HTTP call should look familiar, as it leverages the same fetch module you used in the previous section. Here, the fetch module’s first <code>then()</code> handler checks for HTTP errors, the second <code>then()</code> handler converts the data from the response into JSON format, and the third handler pushes each grocery item from the response into the ObservableArray.\n\nIf you load the app and log in with email address “user@nativescript.org” and password “password”, you should see a list of groceries that looks something like this:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/3.png\" alt=\"list 2\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/3.png\" alt=\"list 2\">\n\nThe cool thing here is the code you didn’t have to write. Notice that there is no need to refresh the UI, or manually access the ListView UI component—all the view model does is push the JSON response to the ObservableArray, and the UI takes care of itself.\n\nLet’s see how you can build on top of this and enable users to add to their grocery list directly from the app.\n\n## 4.5: GridLayout\n\nYou already know how to add items to a <code>&lt;ListView&gt;</code>, because you just did so in the previous section—all you need to do is call the ObservableArray module’s <code>push()</code> method.\n\nTo give the user the ability to manage their grocery list you’re going to have to put some more UI components on the screen, and to do that you’re going to need to divide the screen into rows and columns using the <code>&lt;GridLayout&gt;</code> UI component.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Implement the ability to add groceries to the list</h4>\n\nOpen <code>app/views/list/list.xml</code> and change the <code>&lt;GridLayout&gt;</code> tag to use the code below:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"auto, *\"</span> <span class=\"attr\">columns</span>=<span class=\"string\">\"2*, *\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\nThe <code>rows</code> attribute divides the screen into two rows, the first auto-sized according to its childrens’ height, and the other to contain *, or the remaining height of the screen. The <code>columns</code> attribute divides the screen into two columns, where the first column takes up 2/3 of the screen, and the second takes up the remaining third.\n\nNext, to give the user a means of adding groceries to the list, add a text field and a button to the page. Add these two lines of code directly after the initial <code>&lt;GridLayout&gt;</code> tag:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">id</span>=<span class=\"string\">\"grocery\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; grocery &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Enter a grocery item\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"0\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Add\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThe text field has an id attribute of <code>&quot;grocery&quot;</code>, and is bound to the <code>{{ grocery }}</code> property of the page’s binding context. The button’s <code>tap</code> event refers to an <code>add()</code> function, that you’ll add to the code-behind file momentarily.\n\nBut the most important thing to note here is the use of the <code>row</code> and <code>col</code> attributes. These attributes are zero-based, so the text field’s <code>row=&quot;0&quot; col=&quot;0&quot;</code> attributes place it in the first row and first column, whereas the button’s <code>row=&quot;0&quot; col=&quot;1&quot;</code> attributes place it in the first row and second column.\n\nFinally, replace the <code>&lt;ListView&gt;</code> tag with the code below to place it in the second row, to have it span both columns, and also to give it an <code>id</code> attribute that you’ll need later.\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; groceryList &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"groceryList\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">colSpan</span>=<span class=\"string\">\"2\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\nNow you just need to make the necessary changes to the code-behind file to support these XML changes. Open <code>list.js</code> and start by adding a new <code>&quot;grocery&quot;</code> property to the <code>pageData</code> Observable. The <code>pageData</code> assignment should look like this:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pageData = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    groceryList: groceryList,</div><div class=\"line\">    grocery: <span class=\"string\">\"\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n\nNext, you need to add an <code>add()</code> function to handle the button tap event. Paste in the following code at the bottom of <code>list.js</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Check for empty submissions</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (pageData.get(<span class=\"string\">\"grocery\"</span>).trim() === <span class=\"string\">\"\"</span>) &#123;</div><div class=\"line\">        dialogsModule.alert(&#123;</div><div class=\"line\">            message: <span class=\"string\">\"Enter a grocery item\"</span>,</div><div class=\"line\">            okButtonText: <span class=\"string\">\"OK\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Dismiss the keyboard</span></div><div class=\"line\">    page.getViewById(<span class=\"string\">\"grocery\"</span>).dismissSoftInput();</div><div class=\"line\">    groceryList.add(pageData.get(<span class=\"string\">\"grocery\"</span>))</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            dialogsModule.alert(&#123;</div><div class=\"line\">                message: <span class=\"string\">\"An error occurred while adding an item to your list.\"</span>,</div><div class=\"line\">                okButtonText: <span class=\"string\">\"OK\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty the input field</span></div><div class=\"line\">    pageData.set(<span class=\"string\">\"grocery\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\nIn this function, you first ensure the user didn’t submit without typing a grocery. If the user did type something, you dismiss the device’s keyboard, then you get the <code>&quot;grocery&quot;</code> property from the page’s binding context (which is bound to the new <code>&lt;TextField&gt;</code>), and pass that value to the view model’s <code>add()</code> function.\n\nFinally, define that <code>add()</code> function. To do so, open <code>app/shared/view-models/grocery-list-view-model.js</code> and paste the following function under the <code>empty()</code> function, but before the <code>return viewModel</code> statement.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grocery</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(config.apiUrl + <span class=\"string\">\"Groceries\"</span>, &#123;</div><div class=\"line\">        method: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">        body: <span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">            Name: grocery</div><div class=\"line\">        &#125;),</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Bearer \"</span> + config.token,</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(handleErrors)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> response.json();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        viewModel.push(&#123; name: grocery, id: data.Result.Id &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nIf you build and rerun your app, you’ll find that you can add a grocery item and it will appear immediately in your list—and, all of this is completely driven by a backend service. Pretty cool, huh?\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/4.gif\" alt=\"list 3\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/4.gif\" alt=\"list 3\">\n\nLet’s look at how you can polish this page with a NativeScript module for showing activity indicators.\n\n## 4.6: ActivityIndicator\n\nCurrently there’s a bit of a delay when you first visit the list page before groceries appear. This delay could confuse a new user, who might think the app is stuck rather than retrieving data from a backend.\n\nIn NativeScript apps you can use the ActivityIndicator module to show a spinner icon in your UI while your app is busy performing actions. The ActivityIndicator is a relatively simple UI element as it primarily uses one attribute—<code>busy</code>. When an ActivityIndicator’s <code>busy</code> attribute is set to <code>true</code> the ActivityIndicator shows, and when its <code>busy</code> attribute is set to <code>false</code> it doesn’t. Let’s see how the module works by adding an ActivityIndicator to the list page.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add an ActivityIndicator</h4>\n\nOpen <code>app/views/list/list.xml</code> and add the following element directly before the closing <code>&lt;/GridLayout&gt;</code> tag.\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActivityIndicator</span> <span class=\"attr\">busy</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; isLoading &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">rowSpan</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">colSpan</span>=<span class=\"string\">\"2\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThen, in <code>app/views/list/list.js</code>, replace the existing <code>groceryList.load()</code> call in <code>loaded()</code> with the following four lines of code:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pageData.set(<span class=\"string\">\"isLoading\"</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">groceryList.load().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    pageData.set(<span class=\"string\">\"isLoading\"</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nIn the code above you add a new <code>&quot;isLoading&quot;</code> flag to the list page’s Observable, and then bind the ActivityIndicator’s <code>busy</code> attribute to that value. You set the initial value of the <code>&quot;isLoading&quot;</code> flag to <code>true</code> in the list page’s <code>loaded()</code> function, which shows the ActivityIndicator. When the grocery list finishes loading, you flip the <code>&quot;isLoading&quot;</code> flag back to <code>false</code>, which hides the ActivityIndicator.\n\nYou control where the ActivityIndicator displays by setting its <code>rowSpan</code> and <code>colSpan</code> attributes. In this case <code>rowSpan=&quot;2&quot; colSpan=&quot;2&quot;</code> makes the ActivityIndicator take up both rows and both columns of its parent GridLayout. Here’s what the new ActivityIndicator looks like:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/5.gif\" alt=\"ActivityIndicator on iOS\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/5.gif\" alt=\"ActivityIndicator on Android\">\n\nThe list page is now more user friendly, but we can improve the experience with one of the more powerful NativeScript modules: the animation module.\n\n## 4.7: Animations\n\nThe ability to run robust and performant animations is the one of the biggest reasons people choose to build native mobile apps, and NativeScript makes running these animations simple. The NativeScript animation modules provides a <a href=\"/ui/animation\">series of JavaScript APIs</a> that let you perform a wide variety of animations to elements on the screen, including the following:\n\n- <a href=\"/ui/animation#opacity\">Opacity</a>\n- <a href=\"/ui/animation#background-color\">Background Color</a>\n- <a href=\"/ui/animation#translate\">Translations</a>\n- <a href=\"/ui/animation#scale\">Scaling</a>\n- <a href=\"/ui/animation#rotate\">Rotating</a>\n\nFor our list page you’re going to use an <a href=\"/ui/animation#opacity\">opacity animation</a> to fade in your grocery list after your data loads. Let’s add in the code and then discuss how it all works.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add an animation</h4>\n\nOpen <code>app/views/list/list.css</code> and add an <code>opacity: 0</code> rule to the existing <code>ListView</code> selector. The full set of rules should look like this:\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ListView</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\nThen, in <code>app/views/list/list.js</code>, replace the existing <code>exports.loaded()</code> function with the code below, which does two new things: gets a reference to the <code>&lt;ListView&gt;</code> (<code>page.getViewById(&quot;groceryList&quot;)</code>), and then calls that element’s <code>animate()</code> function after the <code>groceryList.load()</code> call completes.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> listView = page.getViewById(<span class=\"string\">\"groceryList\"</span>);</div><div class=\"line\">    page.bindingContext = pageData;</div><div class=\"line\"></div><div class=\"line\">    groceryList.empty();</div><div class=\"line\">    pageData.set(<span class=\"string\">\"isLoading\"</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">    groceryList.load().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        pageData.set(<span class=\"string\">\"isLoading\"</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">        listView.animate(&#123;</div><div class=\"line\">            opacity: <span class=\"number\">1</span>,</div><div class=\"line\">            duration: <span class=\"number\">1000</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nA few things are happening in the code above.\n\nFirst, in CSS, you assign an <code>opacity</code> of <code>0</code> to the grocery list <code>&lt;ListView&gt;</code>. This hides the grocery list completely when the page loads. Next, in JavaScript, after the <code>groceryList.load()</code> call completes, you call the list view’s <code>animate()</code> function. This changes the element’s <code>opacity</code> from <code>0</code> (completely hidden) to <code>1</code> (completely visible) over one full second.\n\n&gt; <strong>NOTE</strong>: The animation function’s <code>duration</code> property takes a time in milliseconds. Therefore, <code>1000</code> equates to one second.\n\nThe result of this code is a nice fade-in animation:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/6.gif\" alt=\"Animations on iOS\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/6.gif\" alt=\"Animations on Android\">\n\nThe animation module is a lot of fun to play with, and it’s easy to use too. All you need to do is get a reference to an element using <code>getViewById()</code>, and then call that element’s <code>animate</code> method. You may want to take a few minutes to look through our <a href=\"/ui/animation#examples\">animation samples</a> and try a few of these animations for yourself in Groceries.\n\nNow that you have the login, registration, and list pages complete, let’s enhance the app’s functionality as a grocery list management tool. In the next chapters you’ll add functionality such as email validation, social sharing, and more. And you’ll use one of NativeScript’s most useful features to do so: npm modules.\n\n&gt; <strong>TIP</strong>: There are several modules that come out of the box with your NativeScript installation that we did not have time to cover in this guide—including a <a href=\"\">location service</a>, a <a href=\"\">file-system helper</a>, a <a href=\"\">timer module</a>, a <a href=\"\">camera module</a>, a <a href=\"\">color module</a>, and a whole lot more. Make sure to peruse the “Modules API” of the docs, or just look around <code>node_modules/tns-core-modules</code> to see all of what’s available.\n\n</div>","excerpt":"","more":"<h1 id=\"Chapter-4—NativeScript-Modules\"><a href=\"#Chapter-4—NativeScript-Modules\" class=\"headerlink\" title=\"Chapter 4—NativeScript Modules\"></a>Chapter 4—NativeScript Modules</h1><p>In this chapter you’ll learn about NativeScript modules, which are the JavaScript modules in your app’s <code>node_modules/tns-core-modules</code> folder. Whether you’ve realized it or not, you’ve already used several NativeScript modules. This includes the modules you’ve brought in via <code>require()</code> (the view, frame and observable modules) and also the UI components you’ve been using in XML (the page, image, text field and button modules).</p>\n<div class=\"explain\">\n\n## Table of contents\n\n- <a href=\"#41-connecting-to-a-backend\">4.1: Connecting to a backend</a>\n- <a href=\"#42-dialog-module\">4.2: Dialog module</a>\n- <a href=\"#43-listview\">4.3: ListView</a>\n- <a href=\"#44-working-with-arrays\">4.4: Working with arrays</a>\n- <a href=\"#45-gridlayout\">4.5: GridLayout</a>\n- <a href=\"#46-activityindicator\">4.6: ActivityIndicator</a>\n- <a href=\"#47-animations\">4.7: Animations</a>\n\nIf you dig into <code>node_modules/tns-core-modules</code> you can get an idea of how these modules work. Start by finding the <code>node_modules/tns-core-modules/camera</code> folder, which includes the implementation of the camera module. It includes:\n\n- a <code>package.json</code> file that sets the name of the module;\n- a file containing the module’s Android implementation (<code>camera.android.js</code>);\n- a file containing the module’s iOS implementation (<code>camera.ios.js</code>);\n- a file containing code shared by the Android and iOS implementations (<code>camera-common.js</code>)\n\n&gt; <strong>NOTE</strong>: You can refer to the <a href=\"https://nodejs.org/api/modules.html#modules_folders_as_modules\">Node.js documentation on folders as modules</a> for more detailed information on how NativeScript organizes its modules.\n\nThe *.ios.* and *.android.* naming convention should look familiar, as it’s the exact same convention we used to include Android- and iOS-specific styling in <a href=\"#24-css\">chapter 2.4</a>. NativeScript uses this same convention to implement its modules on iOS and Android. Now that you know where these modules are, let’s take a closer look at what else they can do for your app.\n\n## 4.1: Connecting to a backend\n\nWhen you created your own account on the registration page, you probably noticed that data was magically going… somewhere. But there’s actually no magic involved; the register page invokes a RESTful API provided by <a href=\"http://www.telerik.com/backend-services\">Telerik Backend Services</a> to register the user for the Groceries service.\n\n&gt; <strong>NOTE</strong>: You don’t have to use Telerik Backend Services to hit your backend service; you can use any HTTP API in a NativeScript app. Telerik Backend Services is convenient for us to use for this tutorial because it lets us spin up HTTP endpoints quickly.\n\nTake a look at <code>app/shared/config.js</code>. There’s only a small code snippet there, but it includes a hardcoded root path to the Groceries backend that the register page uses, and that you’ll be using momentarily:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    apiUrl: <span class=\"string\">\"https://api.everlive.com/v1/GWfRtXi1Lwt4jcqK/\"</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n&gt; <strong>TIP</strong>: <code>config.js</code> also shows a convenient pattern you can use for sharing configuration variables throughout your app.\n\nNext, take a look in the <code>app/shared/view-models</code> folder, which contains a few view models that we’ve pre-packaged into Groceries, and those view models contain the code to hit our backend. You can see this demonstrated in the <code>user-view-model.js</code> file’s <code>register()</code> function.\n\n&gt; <strong>NOTE</strong>: In a larger app, it’s pretty common to place code that interacts with the backend in separate files, and not directly in the view models. But in our case, the connection code lives directly in the view model for simplicity—which is perfectly reasonable for small apps. \n\nNote that the <code>register()</code> function uses the config module to get the path to the backend, as well as the <a href=\"\">fetch module</a> to make HTTP calls.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/config\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fetchModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"fetch\"</span>);</div></pre></td></tr></table></figure>\n\nNativeScript’s fetch module uses the same API as the <a href=\"https://fetch.spec.whatwg.org/\">browser’s new fetch() API</a>. Therefore, if you already know how to use the web’s <code>fetch()</code> method, you already know how to make HTTP calls in NativeScript. Let’s look at how the fetch module works by adding another method to the user view model.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Complete the login in the view model</h4>\n\nOpen <code>app/shared/view-models/user-view-model.js</code> and paste the following code directly above the existing <code>viewModel.register()</code> function:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.login = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetchModule.fetch(config.apiUrl + <span class=\"string\">\"oauth/token\"</span>, &#123;</div><div class=\"line\">        method: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">        body: <span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">            username: viewModel.get(<span class=\"string\">\"email\"</span>),</div><div class=\"line\">            password: viewModel.get(<span class=\"string\">\"password\"</span>),</div><div class=\"line\">            grant_type: <span class=\"string\">\"password\"</span></div><div class=\"line\">        &#125;),</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(handleErrors)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> response.json();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        config.token = data.Result.access_token;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nLet’s break down what the code you just pasted in does.\n\n- You use the fetch module’s <code>fetch()</code> method to POST data to the <code>apiUrl</code> stored in <code>shared/config.js</code>. The username, password and grant_type are sent to this endpoint as a JSON string. (Telerik Backend Services <a href=\"http://docs.telerik.com/platform/backend-services/development/rest-api/users/authenticate-user\">requires a grant_type parameter</a> for logins.)\n\n- The <code>fetch()</code> method returns a <code>Promise</code>, which allows you to execute code after the asynchronous login either completes successfully or fails. You use this functionality to do three things (the three <code>then()</code> handlers).\n    - First, you handle any errors in the HTTP response with a <code>handleErrors()</code> function defined at the bottom of <code>user-view-model.js</code>. (If you want more details on how handling HTTP response errors with <code>fetch()</code> works check out <a href=\"http://tjvantoll.com/2015/09/13/fetch-and-errors/\">this article</a>.)\n    - Next, you convert the returned data into JSON by calling the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\"><code>Response</code></a> object’s <code>json()</code> method.\n    - Finally, you save a reference to the user’s authentication token in the config module. You’ll use that token on subsequent HTTP requests later in this guide.\n\n&gt; <strong>TIP</strong>:\n&gt; <em> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promises</a> are a part of ECMAScript 6 (the scripting language of which JavaScript is an implementation). Because Promises have been implemented in the two JavaScript engines NativeScript uses—V8 for Android and JavaScriptCore for iOS—Promises are available for use in NativeScript apps.\n&gt; </em> NativeScript makes <code>fetch()</code> available as a global variable for convenience. This means you can replace <code>fetchModule.fetch()</code> with <code>fetch()</code>. The global <code>fetch()</code> shortcut will be used for the remainder of this guide.\n\nWith this code in place let’s return to <code>login.js</code> to use this new function.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise: Add UserViewModel to the login code-behind</b></h4>\n\nIn <code>login.js</code>, at the top of the file, add the following reference to <code>shared/view-models/user-view-model</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> UserViewModel = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/view-models/user-view-model\"</span>);</div></pre></td></tr></table></figure>\n\n<strong>Remove</strong> the following five lines of code, as you’ll be using the <code>UserViewModel</code> instead of the <code>user</code> you added in the previous chapter.\n\n<div class=\"no-copy-button\"></div>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Remove these lines of code</span></div><div class=\"line\"><span class=\"keyword\">var</span> Observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>).Observable;</div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    email: <span class=\"string\">\"user@domain.com\"</span>,</div><div class=\"line\">    password: <span class=\"string\">\"password\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Next, add the following line of code after the <code>var UserViewModel = require(...)</code> line:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> UserViewModel();</div></pre></td></tr></table></figure>\n<p>Finally, replace the <code>exports.signIn()</code> function with the code below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.signIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    user.login();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>TIP</strong>: You can always view the completed codebase in the “end” branch of the <a href=\"https://github.com/NativeScript/sample-Groceries/tree/end\">sample-Groceries repo</a>.</p>\n</blockquote>\n<p></div></p>\n<div class=\"explain\">\n\nTake a moment to look at just how clean your code-behind file is now. The code-behind instantiates a view model (<code>UserViewModel</code>), and calls its <code>signIn()</code> method when the user taps the view’s sign in button. Because the view model is bound to the page’s two text fields (remember <code>{{ email }}</code> and <code>{{ password }}</code>), the view model already has the data it needs to perform the actual login.\n\nAnd if you try running your app, and input your account’s credentials, you can indeed login, but… you don’t see anything. That’s because view models aren’t responsible for updating the UI. Instead the view model returns a <code>Promise</code> to let the code-behind handle the UI. (Remember that <code>fetch()</code> returns a <code>Promise</code>.) Let’s see how you can use that <code>Promise</code>, and introduce a new NativeScript module in the process.\n\n## 4.2: Dialog module\n\nTo utilize the <code>Promise</code> that the view model’s <code>login()</code> function returns, you need to handle two scenarios: what to do when the login works, and what to do when it doesn’t.\n\nIn the case of Groceries, when the login works you’re going to navigate the user to the list page, which you’ll be building momentarily, and which will let the user add and remove groceries from a list. To do the navigation you’ll use the same frame module you used earlier in this guide.\n\nThe trickier situation is handling login failures, and for that you’re going to use the dialog module. You can use this module to show <a href=\"\">several types</a> of popup UIs in your app, including action sheets, confirmation boxes, alert boxes, and prompts. It is a highly customizable module, and it lets you control the buttons in your alerts, their text, and the messaging in the alert itself. The dialog module’s code is in the <code>node_modules/tns-core-modules/ui</code> folder with other UI widgets. Let’s see how to use this widget on the login page.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Handle an error with a dialog window</h4>\n\nAdd the following line to the top of <code>login.js</code> to import the dialog module:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogsModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div></pre></td></tr></table></figure>\n\nNext, re-write your <code>signIn()</code> function to look like this:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.signIn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    user.login()</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">            dialogsModule.alert(&#123;</div><div class=\"line\">                message: <span class=\"string\">\"Unfortunately we could not find your account.\"</span>,</div><div class=\"line\">                okButtonText: <span class=\"string\">\"OK\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject();</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            frameModule.topmost().navigate(<span class=\"string\">\"views/list/list\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nThis code handles both a successful and unsuccessful login. On success, you call the frame module’s <code>navigate()</code> method to navigate the user to the (currently empty) list page. On failure, you use the dialog module to show the user an error message. Try inputting some invalid credentials to see what the dialog looks like.\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/1.png\" alt=\"login 8\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/1.png\" alt=\"login 8\">\n\nWith that, the login page is completely functional. Now that you have user management working in your NativeScript app, let’s move onto the page where users will manage their grocery list. To do that, you need a module that shows items in a list, which is exactly what the ListView module does.\n\n&gt; <strong>TIP</strong>: From this point forward in the guide you’ll have to log in a lot, so you may find it helpful to hardcode your credentials in the app during development. The easiest way to do that is to pass an email address and password to the <code>UserViewModel()</code> constructor, for example:\n\n&gt; <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> UserViewModel(&#123;</div><div class=\"line\">&gt;     email: <span class=\"string\">\"username@domain.com\"</span>,</div><div class=\"line\">&gt;     password: <span class=\"string\">\"password\"</span></div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n\n## 4.3: ListView\n\nThe ListView widget lets you show a list of things on the screen, which is exactly what you need for showing a list of groceries. Before tying the grocery list to a backend API, let’s start by seeing how to show a hardcoded list of items on the screen.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Construct the list view</h4>\n\nOpen <code>app/views/list/list.xml</code> and paste in the code below, which creates the list where your groceries will reside:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"loaded\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">GridLayout</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; groceryList &#125;&#125;&#123;% endraw %&#125;\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; name &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">horizontalAlignment</span>=<span class=\"string\">\"left\"</span> <span class=\"attr\">verticalAlignment</span>=<span class=\"string\">\"center\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">GridLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\n&gt; <strong>NOTE</strong>: Notice that this page is going to use a <code>&lt;GridLayout&gt;</code> to layout the UI components on the screen. As you add more UI components, you’ll start dividing the screen into rows and columns, but for now you’re just going to let the <code>&lt;ListView&gt;</code> take up the full screen (which is the default behavior of a <code>&lt;GridLayout&gt;</code> with no attributes).\n\nAs discussed earlier, even though you’re using <code>&lt;ListView&gt;</code> in XML, the ListView module is still a NativeScript module. You can find its implementation in the <code>node_modules/tns-core-modules/ui/list-view</code> folder. If you want to, you could construct a ListView in pure JavaScript code in the code-behind file as shown in <a href=\"\">this example</a>. For most situations using the NativeScript UI modules in XML is easier, so we’ll be sticking with XML usage throughout this tutorial.\n\nNote the use of <code>&lt;ListView.itemTemplate&gt;</code>. This tag gives you the ability to control how each of the ListView’s items displays within the list. For now you’re using a simple <code>&lt;Label&gt;</code> UI component to display the <code>{{ name }}</code> of each grocery.\n\nIf you run this code as is, you won’t see any items in the grocery list. First you need to build out a way to manage data within the ListView module, and to do that you’re going to need a new NativeScript module: the ObservableArray.\n\n## 4.4: Working with arrays\n\nIn the previous section of this guide you saw how to create observables and how to use them to connect XML views with code-behind files and view models. You’re going to do the same thing in this section with one additional twist, and it involves making this <code>items</code> attribute work:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; groceryList &#125;&#125;&#123;% endraw %&#125;\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\nThe ListView module’s <code>items</code> attribute takes an array, and to create that array on the view model, NativeScript provides a special ObservableArray module. To see how it works, let’s start building the list page’s code-behind file.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Populate the list view</h4>\n\nOpen <code>app/views/list/list.js</code> and paste in the following code:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogsModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>).Observable;</div><div class=\"line\"><span class=\"keyword\">var</span> ObservableArray = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable-array\"</span>).ObservableArray;</div><div class=\"line\"><span class=\"keyword\">var</span> page;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> pageData = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    groceryList: <span class=\"keyword\">new</span> ObservableArray([</div><div class=\"line\">        &#123; name: <span class=\"string\">\"eggs\"</span> &#125;,</div><div class=\"line\">        &#123; name: <span class=\"string\">\"bread\"</span> &#125;,</div><div class=\"line\">        &#123; name: <span class=\"string\">\"cereal\"</span> &#125;</div><div class=\"line\">    ])</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">    page.bindingContext = pageData;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nHere, you’re creating a new Observable object called <code>pageData</code>, which you set as the page’s <code>bindingContext</code> in the <code>load()</code> function. Inside the Observable, you set a single <code>&quot;groceryList&quot;</code> property to be a new instance of the ObservableArray class. Notice how the <code>&quot;groceryList&quot;</code> property corresponds to <code>&lt;ListView items=&quot;{{ groceryList }}&quot;&gt;</code>, and each array entry’s <code>&quot;name&quot;</code> property corresponds to <code>&lt;Label text=&quot;{{ name }}&quot;&gt;</code>. If you run your app you’ll see the list screen shows the hardcoded data:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/2.png\" alt=\"list 1\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/2.png\" alt=\"list 1\">\n\nNow that we have items on the screen let’s look at how you can tie this list to a backend instead of hardcoded data. To do so you’ll switch the list page to use a view model, much like you did with the login page.\n\nA starting view model for this page is already in the file at <code>app/shared/view-models/grocery-list-view-model.js</code>, which contains code that looks a lot like what you already have in <code>list.js</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/config\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fetchModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"fetch\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ObservableArray = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable-array\"</span>).ObservableArray;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GroceryListViewModel</span>(<span class=\"params\">items</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> viewModel = <span class=\"keyword\">new</span> ObservableArray(items);</div><div class=\"line\">    <span class=\"keyword\">return</span> viewModel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = GroceryListViewModel;</div></pre></td></tr></table></figure>\n\nLet’s expand on this to tie this view model to a backend.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Populate a list view from a backend</h4>\n\nYou’re going to start by changing <code>list.js</code> to use the <code>GroceryListViewModel</code>. First, <code>require()</code> the <code>GroceryListViewModel</code> so you can use it:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> GroceryListViewModel = <span class=\"built_in\">require</span>(<span class=\"string\">\"../../shared/view-models/grocery-list-view-model\"</span>);</div></pre></td></tr></table></figure>\n\nNext, <strong>remove</strong> the existing <code>var pageData</code> assignment:\n\n<div class=\"no-copy-button\"></div>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Remove these seven lines of code</span></div><div class=\"line\"><span class=\"keyword\">var</span> pageData = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    groceryList: <span class=\"keyword\">new</span> ObservableArray([</div><div class=\"line\">        &#123; name: <span class=\"string\">\"eggs\"</span> &#125;,</div><div class=\"line\">        &#123; name: <span class=\"string\">\"bread\"</span> &#125;,</div><div class=\"line\">        &#123; name: <span class=\"string\">\"cereal\"</span> &#125;</div><div class=\"line\">    ])</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>And add the code below in the same location:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> groceryList = <span class=\"keyword\">new</span> GroceryListViewModel([]);</div><div class=\"line\"><span class=\"keyword\">var</span> pageData = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    groceryList: groceryList</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Finally, replace the existing <code>exports.loaded()</code> function with the one below, which calls two new methods on the view model—<code>empty()</code> and <code>load()</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">    page.bindingContext = pageData;</div><div class=\"line\"></div><div class=\"line\">    groceryList.empty();</div><div class=\"line\">    groceryList.load();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>In this code, <code>groceryList</code> is referencing the grocery list model, and the <code>empty()</code> function empties the list, and then calls the view model’s <code>load()</code> function to reload the data from the backend.</p>\n<p>The last piece to make this work is actually implementing the <code>empty()</code> and <code>load()</code> functions in the view model. Open <code>app/shared/view-models/grocery-list-view-model.js</code>, and paste the following code between the <code>var viewModel</code> assignment, and the <code>return viewModel</code> statement.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.load = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(config.apiUrl + <span class=\"string\">\"Groceries\"</span>, &#123;</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Bearer \"</span> + config.token</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(handleErrors)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> response.json();</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        data.Result.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grocery</span>) </span>&#123;</div><div class=\"line\">            viewModel.push(&#123;</div><div class=\"line\">                name: grocery.Name,</div><div class=\"line\">                id: grocery.Id</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">viewModel.empty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (viewModel.length) &#123;</div><div class=\"line\">        viewModel.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p></div></p>\n<div class=\"explain\">\n\nThe code to make an HTTP call should look familiar, as it leverages the same fetch module you used in the previous section. Here, the fetch module’s first <code>then()</code> handler checks for HTTP errors, the second <code>then()</code> handler converts the data from the response into JSON format, and the third handler pushes each grocery item from the response into the ObservableArray.\n\nIf you load the app and log in with email address “user@nativescript.org” and password “password”, you should see a list of groceries that looks something like this:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/3.png\" alt=\"list 2\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/3.png\" alt=\"list 2\">\n\nThe cool thing here is the code you didn’t have to write. Notice that there is no need to refresh the UI, or manually access the ListView UI component—all the view model does is push the JSON response to the ObservableArray, and the UI takes care of itself.\n\nLet’s see how you can build on top of this and enable users to add to their grocery list directly from the app.\n\n## 4.5: GridLayout\n\nYou already know how to add items to a <code>&lt;ListView&gt;</code>, because you just did so in the previous section—all you need to do is call the ObservableArray module’s <code>push()</code> method.\n\nTo give the user the ability to manage their grocery list you’re going to have to put some more UI components on the screen, and to do that you’re going to need to divide the screen into rows and columns using the <code>&lt;GridLayout&gt;</code> UI component.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Implement the ability to add groceries to the list</h4>\n\nOpen <code>app/views/list/list.xml</code> and change the <code>&lt;GridLayout&gt;</code> tag to use the code below:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"auto, *\"</span> <span class=\"attr\">columns</span>=<span class=\"string\">\"2*, *\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\nThe <code>rows</code> attribute divides the screen into two rows, the first auto-sized according to its childrens’ height, and the other to contain *, or the remaining height of the screen. The <code>columns</code> attribute divides the screen into two columns, where the first column takes up 2/3 of the screen, and the second takes up the remaining third.\n\nNext, to give the user a means of adding groceries to the list, add a text field and a button to the page. Add these two lines of code directly after the initial <code>&lt;GridLayout&gt;</code> tag:\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">id</span>=<span class=\"string\">\"grocery\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; grocery &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">hint</span>=<span class=\"string\">\"Enter a grocery item\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"0\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Add\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThe text field has an id attribute of <code>&quot;grocery&quot;</code>, and is bound to the <code>{{ grocery }}</code> property of the page’s binding context. The button’s <code>tap</code> event refers to an <code>add()</code> function, that you’ll add to the code-behind file momentarily.\n\nBut the most important thing to note here is the use of the <code>row</code> and <code>col</code> attributes. These attributes are zero-based, so the text field’s <code>row=&quot;0&quot; col=&quot;0&quot;</code> attributes place it in the first row and first column, whereas the button’s <code>row=&quot;0&quot; col=&quot;1&quot;</code> attributes place it in the first row and second column.\n\nFinally, replace the <code>&lt;ListView&gt;</code> tag with the code below to place it in the second row, to have it span both columns, and also to give it an <code>id</code> attribute that you’ll need later.\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; groceryList &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"groceryList\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">colSpan</span>=<span class=\"string\">\"2\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\nNow you just need to make the necessary changes to the code-behind file to support these XML changes. Open <code>list.js</code> and start by adding a new <code>&quot;grocery&quot;</code> property to the <code>pageData</code> Observable. The <code>pageData</code> assignment should look like this:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pageData = <span class=\"keyword\">new</span> Observable(&#123;</div><div class=\"line\">    groceryList: groceryList,</div><div class=\"line\">    grocery: <span class=\"string\">\"\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n\nNext, you need to add an <code>add()</code> function to handle the button tap event. Paste in the following code at the bottom of <code>list.js</code>:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Check for empty submissions</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (pageData.get(<span class=\"string\">\"grocery\"</span>).trim() === <span class=\"string\">\"\"</span>) &#123;</div><div class=\"line\">        dialogsModule.alert(&#123;</div><div class=\"line\">            message: <span class=\"string\">\"Enter a grocery item\"</span>,</div><div class=\"line\">            okButtonText: <span class=\"string\">\"OK\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Dismiss the keyboard</span></div><div class=\"line\">    page.getViewById(<span class=\"string\">\"grocery\"</span>).dismissSoftInput();</div><div class=\"line\">    groceryList.add(pageData.get(<span class=\"string\">\"grocery\"</span>))</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            dialogsModule.alert(&#123;</div><div class=\"line\">                message: <span class=\"string\">\"An error occurred while adding an item to your list.\"</span>,</div><div class=\"line\">                okButtonText: <span class=\"string\">\"OK\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty the input field</span></div><div class=\"line\">    pageData.set(<span class=\"string\">\"grocery\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\nIn this function, you first ensure the user didn’t submit without typing a grocery. If the user did type something, you dismiss the device’s keyboard, then you get the <code>&quot;grocery&quot;</code> property from the page’s binding context (which is bound to the new <code>&lt;TextField&gt;</code>), and pass that value to the view model’s <code>add()</code> function.\n\nFinally, define that <code>add()</code> function. To do so, open <code>app/shared/view-models/grocery-list-view-model.js</code> and paste the following function under the <code>empty()</code> function, but before the <code>return viewModel</code> statement.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">viewModel.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grocery</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(config.apiUrl + <span class=\"string\">\"Groceries\"</span>, &#123;</div><div class=\"line\">        method: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">        body: <span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">            Name: grocery</div><div class=\"line\">        &#125;),</div><div class=\"line\">        headers: &#123;</div><div class=\"line\">            <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Bearer \"</span> + config.token,</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(handleErrors)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> response.json();</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        viewModel.push(&#123; name: grocery, id: data.Result.Id &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nIf you build and rerun your app, you’ll find that you can add a grocery item and it will appear immediately in your list—and, all of this is completely driven by a backend service. Pretty cool, huh?\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/4.gif\" alt=\"list 3\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/4.gif\" alt=\"list 3\">\n\nLet’s look at how you can polish this page with a NativeScript module for showing activity indicators.\n\n## 4.6: ActivityIndicator\n\nCurrently there’s a bit of a delay when you first visit the list page before groceries appear. This delay could confuse a new user, who might think the app is stuck rather than retrieving data from a backend.\n\nIn NativeScript apps you can use the ActivityIndicator module to show a spinner icon in your UI while your app is busy performing actions. The ActivityIndicator is a relatively simple UI element as it primarily uses one attribute—<code>busy</code>. When an ActivityIndicator’s <code>busy</code> attribute is set to <code>true</code> the ActivityIndicator shows, and when its <code>busy</code> attribute is set to <code>false</code> it doesn’t. Let’s see how the module works by adding an ActivityIndicator to the list page.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add an ActivityIndicator</h4>\n\nOpen <code>app/views/list/list.xml</code> and add the following element directly before the closing <code>&lt;/GridLayout&gt;</code> tag.\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActivityIndicator</span> <span class=\"attr\">busy</span>=<span class=\"string\">\"&#123;% raw %&#125;&#123;&#123; isLoading &#125;&#125;&#123;% endraw %&#125;\"</span> <span class=\"attr\">rowSpan</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">colSpan</span>=<span class=\"string\">\"2\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n\nThen, in <code>app/views/list/list.js</code>, replace the existing <code>groceryList.load()</code> call in <code>loaded()</code> with the following four lines of code:\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pageData.set(<span class=\"string\">\"isLoading\"</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">groceryList.load().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    pageData.set(<span class=\"string\">\"isLoading\"</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nIn the code above you add a new <code>&quot;isLoading&quot;</code> flag to the list page’s Observable, and then bind the ActivityIndicator’s <code>busy</code> attribute to that value. You set the initial value of the <code>&quot;isLoading&quot;</code> flag to <code>true</code> in the list page’s <code>loaded()</code> function, which shows the ActivityIndicator. When the grocery list finishes loading, you flip the <code>&quot;isLoading&quot;</code> flag back to <code>false</code>, which hides the ActivityIndicator.\n\nYou control where the ActivityIndicator displays by setting its <code>rowSpan</code> and <code>colSpan</code> attributes. In this case <code>rowSpan=&quot;2&quot; colSpan=&quot;2&quot;</code> makes the ActivityIndicator take up both rows and both columns of its parent GridLayout. Here’s what the new ActivityIndicator looks like:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/5.gif\" alt=\"ActivityIndicator on iOS\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/5.gif\" alt=\"ActivityIndicator on Android\">\n\nThe list page is now more user friendly, but we can improve the experience with one of the more powerful NativeScript modules: the animation module.\n\n## 4.7: Animations\n\nThe ability to run robust and performant animations is the one of the biggest reasons people choose to build native mobile apps, and NativeScript makes running these animations simple. The NativeScript animation modules provides a <a href=\"/ui/animation\">series of JavaScript APIs</a> that let you perform a wide variety of animations to elements on the screen, including the following:\n\n- <a href=\"/ui/animation#opacity\">Opacity</a>\n- <a href=\"/ui/animation#background-color\">Background Color</a>\n- <a href=\"/ui/animation#translate\">Translations</a>\n- <a href=\"/ui/animation#scale\">Scaling</a>\n- <a href=\"/ui/animation#rotate\">Rotating</a>\n\nFor our list page you’re going to use an <a href=\"/ui/animation#opacity\">opacity animation</a> to fade in your grocery list after your data loads. Let’s add in the code and then discuss how it all works.\n\n</div>\n\n<div class=\"exercise-start\">\n\n<h4><b>Exercise</b>: Add an animation</h4>\n\nOpen <code>app/views/list/list.css</code> and add an <code>opacity: 0</code> rule to the existing <code>ListView</code> selector. The full set of rules should look like this:\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ListView</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\nThen, in <code>app/views/list/list.js</code>, replace the existing <code>exports.loaded()</code> function with the code below, which does two new things: gets a reference to the <code>&lt;ListView&gt;</code> (<code>page.getViewById(&quot;groceryList&quot;)</code>), and then calls that element’s <code>animate()</code> function after the <code>groceryList.load()</code> call completes.\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.loaded = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    page = args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> listView = page.getViewById(<span class=\"string\">\"groceryList\"</span>);</div><div class=\"line\">    page.bindingContext = pageData;</div><div class=\"line\"></div><div class=\"line\">    groceryList.empty();</div><div class=\"line\">    pageData.set(<span class=\"string\">\"isLoading\"</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">    groceryList.load().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        pageData.set(<span class=\"string\">\"isLoading\"</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">        listView.animate(&#123;</div><div class=\"line\">            opacity: <span class=\"number\">1</span>,</div><div class=\"line\">            duration: <span class=\"number\">1000</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n\n</div>\n\n<div class=\"explain\">\n\nA few things are happening in the code above.\n\nFirst, in CSS, you assign an <code>opacity</code> of <code>0</code> to the grocery list <code>&lt;ListView&gt;</code>. This hides the grocery list completely when the page loads. Next, in JavaScript, after the <code>groceryList.load()</code> call completes, you call the list view’s <code>animate()</code> function. This changes the element’s <code>opacity</code> from <code>0</code> (completely hidden) to <code>1</code> (completely visible) over one full second.\n\n&gt; <strong>NOTE</strong>: The animation function’s <code>duration</code> property takes a time in milliseconds. Therefore, <code>1000</code> equates to one second.\n\nThe result of this code is a nice fade-in animation:\n\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/ios/6.gif\" alt=\"Animations on iOS\">\n<img src=\"/docs/img/cli-getting-started/nativescript/chapter4/android/6.gif\" alt=\"Animations on Android\">\n\nThe animation module is a lot of fun to play with, and it’s easy to use too. All you need to do is get a reference to an element using <code>getViewById()</code>, and then call that element’s <code>animate</code> method. You may want to take a few minutes to look through our <a href=\"/ui/animation#examples\">animation samples</a> and try a few of these animations for yourself in Groceries.\n\nNow that you have the login, registration, and list pages complete, let’s enhance the app’s functionality as a grocery list management tool. In the next chapters you’ll add functionality such as email validation, social sharing, and more. And you’ll use one of NativeScript’s most useful features to do so: npm modules.\n\n&gt; <strong>TIP</strong>: There are several modules that come out of the box with your NativeScript installation that we did not have time to cover in this guide—including a <a href=\"\">location service</a>, a <a href=\"\">file-system helper</a>, a <a href=\"\">timer module</a>, a <a href=\"\">camera module</a>, a <a href=\"\">color module</a>, and a whole lot more. Make sure to peruse the “Modules API” of the docs, or just look around <code>node_modules/tns-core-modules</code> to see all of what’s available.\n\n</div>"},{"_content":"# Chapter 7—Next Steps\n\nSadly our tutorial is now complete, but your journey with NativeScript is just beginning. Let’s look at the next steps you can take to build your next app with NativeScript.\n\n## Table of contents\n\n- [7.1: Join the NativeScript community](#71-join-the-nativescript-community)\n- [7.2: Start your own app](#72-start-your-own-app)\n- [7.3: Bookmark NativeScript learning resources](#73-bookmark-nativescript-learning-resources)\n- [7.4: Let us know what you think](#74-let-us-know-what-you-think)\n\n## 7.1: Join the NativeScript community\n\nRegardless of what you choose to do next with NativeScript, joining the NativeScript community is a great way to keep up with the latest and greatest in the NativeScript world. Here are some ways you can get involved:\n\n- **Join the [NativeScript Community Slack](http://developer.telerik.com/wp-login.php?action=slack-invitation)**. The community Slack is a great place to ask questions, and chat with others in the NativeScript community.\n- **Follow [@nativescript](https://twitter.com/nativescript) on Twitter** for updates on all things NativeScript.\n- **Sign up for the [NativeScript newsletter](https://www.nativescript.org/nativescript-newsletter)**. The newsletter will deliver NativeScript articles, news, plugin updates, and more straight to your inbox.\n\n## 7.2: Start your own app\n\nAlthough you’re welcome to use Groceries as the basis of your own app, if you want to start a new app from scratch, the NativeScript CLI provides a number of built-in starting points. For example, you can start a new “hello world” app by running the `tns create` command:\n\n```bash\ntns create MyNextGreatApp\n```\n\nIf you want to start from a slightly more complete starting point, the `tns create` command also has a `--template` option that lets you start from a variety of pre-built templates. For instance, the following command creates a NativeScript project with tab navigation already setup.\n\n```bash\ntns create MyNextGreatApp --template tns-template-tab-navigation\n```\n\n> **TIP**: A number of other templates are available to use with the `--template` option, including TypeScript templates and more. Refer to [the full list of official templates](https://www.tjvantoll.com/2016/02/22/creating-nativescript-templates/) at any time.\n\nRegardless of which template you choose to start from, once you have your app up and running, let’s look at some of the resources you can use as you develop.\n\n## 7.3: Bookmark NativeScript learning resources\n\nThere is a variety of NativeScript learning material that goes above and beyond what was offered in this tutorial. You may wish to refer to any of the following as you take your app from a prototype to the app stores:\n\n- The NativeScript team provides a series of [real-world app samples](https://www.nativescript.org/app-samples-with-code) that are all open source on GitHub. These samples are great to reference as you’re developing your application.\n    - The NativeScript kitchen sink demo app shows off what NativeScript is capable of, and therefore is a great reference when you’re trying to implement a particular UI. You can refer to [its code on GitHub](https://github.com/NativeScript/nativescript-marketplace-demo), or [download the app from the iOS App Store](https://itunes.apple.com/us/app/examples-nativescript/id1046772499?ls=1&mt=8), or [Google Play](https://play.google.com/store/apps/details?id=org.nativescript.nativescriptmarketplacedemo&amp;hl=en), to see the app in action. \n- The [NativeScript resources page](https://www.nativescript.org/resources) lists further NativeScript learning material, such as training, books, and screencasts.\n- [NativeScript Snacks](http://www.nativescriptsnacks.com/) is a collection of bite-sized video tutorials—perfect for learning how a NativeScript concept works quickly.\n- This NativeScript documentation site has detailed guides on topics that were out of scope for this guide, including [unit testing](http://docs.nativescript.org/core-concepts/testing), [debugging](http://docs.nativescript.org/core-concepts/debugging), [transpiling Babel or TypeScript code](http://docs.nativescript.org/core-concepts/transpilers), and [publishing to the iOS App Store](http://docs.nativescript.org/core-concepts/publishing-ios-apps) and [Google Play](http://docs.nativescript.org/core-concepts/publishing-android-apps).\n\n## 7.4: Let us know what you think\n\nFinally, we’d love if you could take a minute to tell us what you thought about the this guide. Your feedback helps us make this tutorial better.\n\n<iframe src=\"https://docs.google.com/a/telerik.com/forms/d/1mT1dvvRfdxYLeRsbdi5aqfOIfHU6IJ1PrraX5xVsa_k/viewform?embedded=true\" width=\"760\" height=\"1300\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading...</iframe>\n","source":"tutorial/7.md","raw":"# Chapter 7—Next Steps\n\nSadly our tutorial is now complete, but your journey with NativeScript is just beginning. Let’s look at the next steps you can take to build your next app with NativeScript.\n\n## Table of contents\n\n- [7.1: Join the NativeScript community](#71-join-the-nativescript-community)\n- [7.2: Start your own app](#72-start-your-own-app)\n- [7.3: Bookmark NativeScript learning resources](#73-bookmark-nativescript-learning-resources)\n- [7.4: Let us know what you think](#74-let-us-know-what-you-think)\n\n## 7.1: Join the NativeScript community\n\nRegardless of what you choose to do next with NativeScript, joining the NativeScript community is a great way to keep up with the latest and greatest in the NativeScript world. Here are some ways you can get involved:\n\n- **Join the [NativeScript Community Slack](http://developer.telerik.com/wp-login.php?action=slack-invitation)**. The community Slack is a great place to ask questions, and chat with others in the NativeScript community.\n- **Follow [@nativescript](https://twitter.com/nativescript) on Twitter** for updates on all things NativeScript.\n- **Sign up for the [NativeScript newsletter](https://www.nativescript.org/nativescript-newsletter)**. The newsletter will deliver NativeScript articles, news, plugin updates, and more straight to your inbox.\n\n## 7.2: Start your own app\n\nAlthough you’re welcome to use Groceries as the basis of your own app, if you want to start a new app from scratch, the NativeScript CLI provides a number of built-in starting points. For example, you can start a new “hello world” app by running the `tns create` command:\n\n```bash\ntns create MyNextGreatApp\n```\n\nIf you want to start from a slightly more complete starting point, the `tns create` command also has a `--template` option that lets you start from a variety of pre-built templates. For instance, the following command creates a NativeScript project with tab navigation already setup.\n\n```bash\ntns create MyNextGreatApp --template tns-template-tab-navigation\n```\n\n> **TIP**: A number of other templates are available to use with the `--template` option, including TypeScript templates and more. Refer to [the full list of official templates](https://www.tjvantoll.com/2016/02/22/creating-nativescript-templates/) at any time.\n\nRegardless of which template you choose to start from, once you have your app up and running, let’s look at some of the resources you can use as you develop.\n\n## 7.3: Bookmark NativeScript learning resources\n\nThere is a variety of NativeScript learning material that goes above and beyond what was offered in this tutorial. You may wish to refer to any of the following as you take your app from a prototype to the app stores:\n\n- The NativeScript team provides a series of [real-world app samples](https://www.nativescript.org/app-samples-with-code) that are all open source on GitHub. These samples are great to reference as you’re developing your application.\n    - The NativeScript kitchen sink demo app shows off what NativeScript is capable of, and therefore is a great reference when you’re trying to implement a particular UI. You can refer to [its code on GitHub](https://github.com/NativeScript/nativescript-marketplace-demo), or [download the app from the iOS App Store](https://itunes.apple.com/us/app/examples-nativescript/id1046772499?ls=1&mt=8), or [Google Play](https://play.google.com/store/apps/details?id=org.nativescript.nativescriptmarketplacedemo&amp;hl=en), to see the app in action. \n- The [NativeScript resources page](https://www.nativescript.org/resources) lists further NativeScript learning material, such as training, books, and screencasts.\n- [NativeScript Snacks](http://www.nativescriptsnacks.com/) is a collection of bite-sized video tutorials—perfect for learning how a NativeScript concept works quickly.\n- This NativeScript documentation site has detailed guides on topics that were out of scope for this guide, including [unit testing](http://docs.nativescript.org/core-concepts/testing), [debugging](http://docs.nativescript.org/core-concepts/debugging), [transpiling Babel or TypeScript code](http://docs.nativescript.org/core-concepts/transpilers), and [publishing to the iOS App Store](http://docs.nativescript.org/core-concepts/publishing-ios-apps) and [Google Play](http://docs.nativescript.org/core-concepts/publishing-android-apps).\n\n## 7.4: Let us know what you think\n\nFinally, we’d love if you could take a minute to tell us what you thought about the this guide. Your feedback helps us make this tutorial better.\n\n<iframe src=\"https://docs.google.com/a/telerik.com/forms/d/1mT1dvvRfdxYLeRsbdi5aqfOIfHU6IJ1PrraX5xVsa_k/viewform?embedded=true\" width=\"760\" height=\"1300\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading...</iframe>\n","date":"2016-08-26T21:05:54.552Z","updated":"2016-08-26T21:05:54.552Z","path":"tutorial/7.html","title":"","comments":1,"layout":"page","_id":"cisn95ca8000swsl0u873kedl","content":"<h1 id=\"Chapter-7—Next-Steps\"><a href=\"#Chapter-7—Next-Steps\" class=\"headerlink\" title=\"Chapter 7—Next Steps\"></a>Chapter 7—Next Steps</h1><p>Sadly our tutorial is now complete, but your journey with NativeScript is just beginning. Let’s look at the next steps you can take to build your next app with NativeScript.</p>\n<h2 id=\"Table-of-contents\"><a href=\"#Table-of-contents\" class=\"headerlink\" title=\"Table of contents\"></a>Table of contents</h2><ul>\n<li><a href=\"#71-join-the-nativescript-community\">7.1: Join the NativeScript community</a></li>\n<li><a href=\"#72-start-your-own-app\">7.2: Start your own app</a></li>\n<li><a href=\"#73-bookmark-nativescript-learning-resources\">7.3: Bookmark NativeScript learning resources</a></li>\n<li><a href=\"#74-let-us-know-what-you-think\">7.4: Let us know what you think</a></li>\n</ul>\n<h2 id=\"7-1-Join-the-NativeScript-community\"><a href=\"#7-1-Join-the-NativeScript-community\" class=\"headerlink\" title=\"7.1: Join the NativeScript community\"></a>7.1: Join the NativeScript community</h2><p>Regardless of what you choose to do next with NativeScript, joining the NativeScript community is a great way to keep up with the latest and greatest in the NativeScript world. Here are some ways you can get involved:</p>\n<ul>\n<li><strong>Join the <a href=\"http://developer.telerik.com/wp-login.php?action=slack-invitation\" target=\"_blank\" rel=\"external\">NativeScript Community Slack</a></strong>. The community Slack is a great place to ask questions, and chat with others in the NativeScript community.</li>\n<li><strong>Follow <a href=\"https://twitter.com/nativescript\" target=\"_blank\" rel=\"external\">@nativescript</a> on Twitter</strong> for updates on all things NativeScript.</li>\n<li><strong>Sign up for the <a href=\"https://www.nativescript.org/nativescript-newsletter\" target=\"_blank\" rel=\"external\">NativeScript newsletter</a></strong>. The newsletter will deliver NativeScript articles, news, plugin updates, and more straight to your inbox.</li>\n</ul>\n<h2 id=\"7-2-Start-your-own-app\"><a href=\"#7-2-Start-your-own-app\" class=\"headerlink\" title=\"7.2: Start your own app\"></a>7.2: Start your own app</h2><p>Although you’re welcome to use Groceries as the basis of your own app, if you want to start a new app from scratch, the NativeScript CLI provides a number of built-in starting points. For example, you can start a new “hello world” app by running the <code>tns create</code> command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns create MyNextGreatApp</div></pre></td></tr></table></figure>\n<p>If you want to start from a slightly more complete starting point, the <code>tns create</code> command also has a <code>--template</code> option that lets you start from a variety of pre-built templates. For instance, the following command creates a NativeScript project with tab navigation already setup.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns create MyNextGreatApp --template tns-template-tab-navigation</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>TIP</strong>: A number of other templates are available to use with the <code>--template</code> option, including TypeScript templates and more. Refer to <a href=\"https://www.tjvantoll.com/2016/02/22/creating-nativescript-templates/\" target=\"_blank\" rel=\"external\">the full list of official templates</a> at any time.</p>\n</blockquote>\n<p>Regardless of which template you choose to start from, once you have your app up and running, let’s look at some of the resources you can use as you develop.</p>\n<h2 id=\"7-3-Bookmark-NativeScript-learning-resources\"><a href=\"#7-3-Bookmark-NativeScript-learning-resources\" class=\"headerlink\" title=\"7.3: Bookmark NativeScript learning resources\"></a>7.3: Bookmark NativeScript learning resources</h2><p>There is a variety of NativeScript learning material that goes above and beyond what was offered in this tutorial. You may wish to refer to any of the following as you take your app from a prototype to the app stores:</p>\n<ul>\n<li>The NativeScript team provides a series of <a href=\"https://www.nativescript.org/app-samples-with-code\" target=\"_blank\" rel=\"external\">real-world app samples</a> that are all open source on GitHub. These samples are great to reference as you’re developing your application.<ul>\n<li>The NativeScript kitchen sink demo app shows off what NativeScript is capable of, and therefore is a great reference when you’re trying to implement a particular UI. You can refer to <a href=\"https://github.com/NativeScript/nativescript-marketplace-demo\" target=\"_blank\" rel=\"external\">its code on GitHub</a>, or <a href=\"https://itunes.apple.com/us/app/examples-nativescript/id1046772499?ls=1&amp;mt=8\" target=\"_blank\" rel=\"external\">download the app from the iOS App Store</a>, or <a href=\"https://play.google.com/store/apps/details?id=org.nativescript.nativescriptmarketplacedemo&amp;hl=en\" target=\"_blank\" rel=\"external\">Google Play</a>, to see the app in action. </li>\n</ul>\n</li>\n<li>The <a href=\"https://www.nativescript.org/resources\" target=\"_blank\" rel=\"external\">NativeScript resources page</a> lists further NativeScript learning material, such as training, books, and screencasts.</li>\n<li><a href=\"http://www.nativescriptsnacks.com/\" target=\"_blank\" rel=\"external\">NativeScript Snacks</a> is a collection of bite-sized video tutorials—perfect for learning how a NativeScript concept works quickly.</li>\n<li>This NativeScript documentation site has detailed guides on topics that were out of scope for this guide, including <a href=\"http://docs.nativescript.org/core-concepts/testing\">unit testing</a>, <a href=\"http://docs.nativescript.org/core-concepts/debugging\">debugging</a>, <a href=\"http://docs.nativescript.org/core-concepts/transpilers\">transpiling Babel or TypeScript code</a>, and <a href=\"http://docs.nativescript.org/core-concepts/publishing-ios-apps\">publishing to the iOS App Store</a> and <a href=\"http://docs.nativescript.org/core-concepts/publishing-android-apps\">Google Play</a>.</li>\n</ul>\n<h2 id=\"7-4-Let-us-know-what-you-think\"><a href=\"#7-4-Let-us-know-what-you-think\" class=\"headerlink\" title=\"7.4: Let us know what you think\"></a>7.4: Let us know what you think</h2><p>Finally, we’d love if you could take a minute to tell us what you thought about the this guide. Your feedback helps us make this tutorial better.</p>\n<iframe src=\"https://docs.google.com/a/telerik.com/forms/d/1mT1dvvRfdxYLeRsbdi5aqfOIfHU6IJ1PrraX5xVsa_k/viewform?embedded=true\" width=\"760\" height=\"1300\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading…</iframe>\n","excerpt":"","more":"<h1 id=\"Chapter-7—Next-Steps\"><a href=\"#Chapter-7—Next-Steps\" class=\"headerlink\" title=\"Chapter 7—Next Steps\"></a>Chapter 7—Next Steps</h1><p>Sadly our tutorial is now complete, but your journey with NativeScript is just beginning. Let’s look at the next steps you can take to build your next app with NativeScript.</p>\n<h2 id=\"Table-of-contents\"><a href=\"#Table-of-contents\" class=\"headerlink\" title=\"Table of contents\"></a>Table of contents</h2><ul>\n<li><a href=\"#71-join-the-nativescript-community\">7.1: Join the NativeScript community</a></li>\n<li><a href=\"#72-start-your-own-app\">7.2: Start your own app</a></li>\n<li><a href=\"#73-bookmark-nativescript-learning-resources\">7.3: Bookmark NativeScript learning resources</a></li>\n<li><a href=\"#74-let-us-know-what-you-think\">7.4: Let us know what you think</a></li>\n</ul>\n<h2 id=\"7-1-Join-the-NativeScript-community\"><a href=\"#7-1-Join-the-NativeScript-community\" class=\"headerlink\" title=\"7.1: Join the NativeScript community\"></a>7.1: Join the NativeScript community</h2><p>Regardless of what you choose to do next with NativeScript, joining the NativeScript community is a great way to keep up with the latest and greatest in the NativeScript world. Here are some ways you can get involved:</p>\n<ul>\n<li><strong>Join the <a href=\"http://developer.telerik.com/wp-login.php?action=slack-invitation\">NativeScript Community Slack</a></strong>. The community Slack is a great place to ask questions, and chat with others in the NativeScript community.</li>\n<li><strong>Follow <a href=\"https://twitter.com/nativescript\">@nativescript</a> on Twitter</strong> for updates on all things NativeScript.</li>\n<li><strong>Sign up for the <a href=\"https://www.nativescript.org/nativescript-newsletter\">NativeScript newsletter</a></strong>. The newsletter will deliver NativeScript articles, news, plugin updates, and more straight to your inbox.</li>\n</ul>\n<h2 id=\"7-2-Start-your-own-app\"><a href=\"#7-2-Start-your-own-app\" class=\"headerlink\" title=\"7.2: Start your own app\"></a>7.2: Start your own app</h2><p>Although you’re welcome to use Groceries as the basis of your own app, if you want to start a new app from scratch, the NativeScript CLI provides a number of built-in starting points. For example, you can start a new “hello world” app by running the <code>tns create</code> command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns create MyNextGreatApp</div></pre></td></tr></table></figure>\n<p>If you want to start from a slightly more complete starting point, the <code>tns create</code> command also has a <code>--template</code> option that lets you start from a variety of pre-built templates. For instance, the following command creates a NativeScript project with tab navigation already setup.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns create MyNextGreatApp --template tns-template-tab-navigation</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>TIP</strong>: A number of other templates are available to use with the <code>--template</code> option, including TypeScript templates and more. Refer to <a href=\"https://www.tjvantoll.com/2016/02/22/creating-nativescript-templates/\">the full list of official templates</a> at any time.</p>\n</blockquote>\n<p>Regardless of which template you choose to start from, once you have your app up and running, let’s look at some of the resources you can use as you develop.</p>\n<h2 id=\"7-3-Bookmark-NativeScript-learning-resources\"><a href=\"#7-3-Bookmark-NativeScript-learning-resources\" class=\"headerlink\" title=\"7.3: Bookmark NativeScript learning resources\"></a>7.3: Bookmark NativeScript learning resources</h2><p>There is a variety of NativeScript learning material that goes above and beyond what was offered in this tutorial. You may wish to refer to any of the following as you take your app from a prototype to the app stores:</p>\n<ul>\n<li>The NativeScript team provides a series of <a href=\"https://www.nativescript.org/app-samples-with-code\">real-world app samples</a> that are all open source on GitHub. These samples are great to reference as you’re developing your application.<ul>\n<li>The NativeScript kitchen sink demo app shows off what NativeScript is capable of, and therefore is a great reference when you’re trying to implement a particular UI. You can refer to <a href=\"https://github.com/NativeScript/nativescript-marketplace-demo\">its code on GitHub</a>, or <a href=\"https://itunes.apple.com/us/app/examples-nativescript/id1046772499?ls=1&amp;mt=8\">download the app from the iOS App Store</a>, or <a href=\"https://play.google.com/store/apps/details?id=org.nativescript.nativescriptmarketplacedemo&amp;hl=en\">Google Play</a>, to see the app in action. </li>\n</ul>\n</li>\n<li>The <a href=\"https://www.nativescript.org/resources\">NativeScript resources page</a> lists further NativeScript learning material, such as training, books, and screencasts.</li>\n<li><a href=\"http://www.nativescriptsnacks.com/\">NativeScript Snacks</a> is a collection of bite-sized video tutorials—perfect for learning how a NativeScript concept works quickly.</li>\n<li>This NativeScript documentation site has detailed guides on topics that were out of scope for this guide, including <a href=\"http://docs.nativescript.org/core-concepts/testing\">unit testing</a>, <a href=\"http://docs.nativescript.org/core-concepts/debugging\">debugging</a>, <a href=\"http://docs.nativescript.org/core-concepts/transpilers\">transpiling Babel or TypeScript code</a>, and <a href=\"http://docs.nativescript.org/core-concepts/publishing-ios-apps\">publishing to the iOS App Store</a> and <a href=\"http://docs.nativescript.org/core-concepts/publishing-android-apps\">Google Play</a>.</li>\n</ul>\n<h2 id=\"7-4-Let-us-know-what-you-think\"><a href=\"#7-4-Let-us-know-what-you-think\" class=\"headerlink\" title=\"7.4: Let us know what you think\"></a>7.4: Let us know what you think</h2><p>Finally, we’d love if you could take a minute to tell us what you thought about the this guide. Your feedback helps us make this tutorial better.</p>\n<iframe src=\"https://docs.google.com/a/telerik.com/forms/d/1mT1dvvRfdxYLeRsbdi5aqfOIfHU6IJ1PrraX5xVsa_k/viewform?embedded=true\" width=\"760\" height=\"1300\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading…</iframe>\n"},{"title":"ActionBar","description":"Learn how to use and customize the ActionBar.","position":11,"slug":"action-bar","_content":"\n# Overview\n\nThe `ActionBar` is the NativeScript common abstraction over the Android ActionBar and iOS NavigationBar.\n\n* [Defining The ActionBar](#defining-the-action-bar)\n* [Title](#title)\n  * [Setting the Title Text](#setting-the-title-text)\n  * [Using a Custom Title View](#using-custom-title-view)\n  * [Setting the App Icon](#setting-app-icon)\n* [Navigation Button](#navigation-button)\n  * [iOS Specifics](#ios-specifics)\n  * [Android Specifics](#android-specifics)\n* [Action Items](#action-items)\n  * [Positioning](#positioning)\n  * [Setting Icons](#setting-icons)\n* [How To](#how-to)\n  * [Showing/Hiding the ActionBar](#showing-hiding-the-action-bar)\n  * [Hiding Action Items](#hiding-action-items)\n  * [Styling](#styling)\n  * [Creating SlideDrawer Button](#creating-slidedrawer-button)\n{% angular %}  * [Adding Actions To Existing ActionBar](#adding-actions-to-existing-action-bar){% endangular %}\n\n\n\n## Setting the Title Text\n\n{% nativescript %}\nHere is how to define the ActionBar inside your page:\n```XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\">\n  <Page.actionBar>\n      <ActionBar title=\"My ActionBar\"/>\n  </Page.actionBar>\n\n  <!-- page content ... -->\n</Page>\n```\nWe will include only the `ActionBar` tag in the rest of the code-snippets in this article. \n{% endnativescript %}\n{% angular %}\nTo define the ActionBar include the `ActionBar` tag inside a component template:\n```XML\n<ActionBar title=\"Custom Title\"></ActionBar>\n```\nIf more than one component defines an `ActionBar` - the last definition will be respected. You can also [add items to the current ActionBar](#adding-actions-to-existing-action-bar).\n\n>Note: To show the ActionBar on the initial page of your application use the `startPageActionBarHidden: false` app option when bootstrapping the application.\n\n```TypeScript\nnativeScriptBootstrap(AppComponent, [CUSTOM_PROVIDERS], { startPageActionBarHidden: false });\n```\n\n{% endangular %}\n\n# Title\n\n## Setting The Title Text\nUse the `title` property of the `ActionBar` to set the title:\n\n```XML\n<ActionBar title=\"Application Title\"></ActionBar>\n```\n\nThe result is:\n\n![title-ios](../docs/img/modules/action-bar/title-ios.png \"title-ios\")\n![title-android](../docs/img/modules/action-bar/title-android.png \"title-android\")\n\n## Using a Custom Title View\n\nYou can set a custom title view, which will render instead of the title.\nThe example below shows how to combine an image and label for a `titleView` (the example contains only the `ActionBar` definition):\n\n### How to create custom title view instead of the ActionBar title.\n\n```XML\n<ActionBar title=\"test\">\n  <StackLayout orientation=\"horizontal\"\n    ios:horizontalAlignment=\"center\"\n    android:horizontalAlignment=\"left\">\n    <Image src=\"res://nativescript_logo\" class=\"action-image\"></Image>\n    <Label text=\"ativeScript\"  class=\"action-label\"></Label>\n  </StackLayout>\n</ActionBar>\n```\n```CSS\n.action-image {\n    width: 40;\n    height: 40;\n    vertical-align: center;\n}\n\n.action-label {\n    color: #3C5AFD;\n    font-size: 24;\n    font-weight: bold;\n    vertical-align: center;\n}\n```\n\nThe result is:\n\n![title-view-ios](../docs/img/modules/action-bar/title-view-ios.png \"title-view-ios\")\n![title-view-android](../docs/img/modules/action-bar/title-view-android.png \"title-view-android\")\n\nNote that you can use CSS to style the elements inside the `titleView`.\n\n## Setting the App Icon for Android\nYou can set the application icon only for Android. By default, the application icon is hidden. You can show it by setting the `android.iconVisibility` property to `always`.\n\n```XML\n<ActionBar title=\"App Icon Demo\" android.icon=\"res://icon\" android.iconVisibility=\"always\"></ActionBar>\n```\n\nThe result is:\n\n![home-icon-android](../docs/img/modules/action-bar/home-icon-android.png \"home-icon-android\")\n\n# Navigation Button\n\nThe `NavigationButton` component is a common abstraction over the iOS back button and the Android navigation button.\n\n{% nativescript %}\n```XML\n<ActionBar title=\"App Icon Demo\">\n  <NavigationButton text=\"Go Back\" android.systemIcon=\"ic_menu_back\" tap=\"onNavBtnTap\"/>\n</ActionBar>\n```\n```JavaScript\nfunction onNavBtnTap() {\n    // This code will be called only in Android.\n    console.log(\"Navigation button tapped!\");\n}\nexports.onNavBtnTap = onNavBtnTap;\n```\n```TypeScript\nexport function onNavBtnTap(){\n    // This code will be called only in Android.\n    console.log(\"Navigation button tapped!\");\n}\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<ActionBar title=\"App Icon Demo\">\n  <NavigationButton text=\"Go Back\" android.systemIcon=\"ic_menu_back\" \n    (tap)=\"onNavBtnTap()\"></NavigationButton>\n</ActionBar>\n```\n```TypeScript\n@Component({ ... })\nclass MyComponent {\n    public onNavBtnTap(){\n        // This code will be called only in Android.\n        console.log(\"Navigation button tapped!\");\n    }\n}\n```\n{% endangular %}\n\nThe result is:\n\n![nav-btn-ios](../docs/img/modules/action-bar/nav-btn-ios.png \"nav-btn-ios\")\n![nav-btn-android](../docs/img/modules/action-bar/nav-btn-android.png \"nav-btn-android\")\n\n## iOS Specifics\n\nThe default text of the button is the title of the previous page; you can change it by setting the `text` property as shown in the example `Setting the Text Title`.\nIn iOS, the back button is used explicitly for navigation. It navigates to the previous page and you cannot handle the `tap` event to override this behavior.\n\nIf you want to place a button on the left side of the `ActionBar` and handle the tap event (e.g., show slide-out), you can use `ActionItem` with `ios.position=\"left\"`.\n\n## Android Specifics\n\nIn Android, you cannot set text inside the navigation button. You can use the `icon` property to set an image (e.g., `~\\images\\nav-image.png` or `res:\\\\ic_nav`). You can use `android.systemIcon` to set one of the system icons available in Android.\n\n# Action Items\n\nYou can define additional action buttons using the `actionItems` collection:\n\n{% nativescript %}\n```XML\n<ActionBar title=\"Action Items\">\n  <ActionItem tap=\"onShare\"\n      ios.systemIcon=\"9\" ios.position=\"left\"\n      android.systemIcon=\"ic_menu_share\" android.position=\"actionBar\"/>\n  <ActionItem tap=\"onDelete\"\n      ios.systemIcon=\"16\" ios.position=\"right\"\n      text=\"delete\" android.position=\"popup\"/>\n</ActionBar>\n```\n```JavaScript\nfunction onShare(args) {\n    console.log(\"Share action item tapped.\");\n}\nexports.onShare = onShare;\nfunction onDelete(args) {\n    console.log(\"Delete action item tapped.\");\n}\nexports.onDelete = onDelete;\n```\n```TypeScript\nexport function onShare(args: observable.EventData) {\n    console.log(\"Share action item tapped.\");\n}\n\nexport function onDelete(args: observable.EventData) {\n    console.log(\"Delete action item tapped.\");\n}\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<ActionBar title=\"Action Items\">\n  <ActionItem (tap)=\"onShare()\"\n      ios.systemIcon=\"9\" ios.position=\"left\"\n      android.systemIcon=\"ic_menu_share\" \n      android.position=\"actionBar\"></ActionItem>\n  <ActionItem (tap)=\"onDelete()\"\n      ios.systemIcon=\"16\" ios.position=\"right\"\n      text=\"delete\" android.position=\"popup\"></ActionItem>\n</ActionBar>\n```\n```TypeScript\n@Component({ ... })\nclass MyComponent {\n    onShare(args: observable.EventData) {\n        console.log(\"Share action item tapped.\");\n    }\n    \n    onDelete(args: observable.EventData) {\n        console.log(\"Delete action item tapped.\");\n    }\n}\n```\n{% endangular %}\nThe result is:\n\n![action-items-ios](../docs/img/modules/action-bar/action-items-ios.png \"action-items-ios\")\n![action-items-android](../docs/img/modules/action-bar/action-items-android.png \"action-items-android\")\n\n## Positioning\n\nThe following positioning options are available for iOS and Android.\n\nAndroid (set with `android.position`):\n\n* `actionBar`\\[default\\]: Puts the item in the ActionBar. Action item can be rendered both as text or icon.\n* `popup`: Puts the item in the options menu. Items will be rendered as text.\n* `actionBarIfRoom`: Puts the item in the ActionBar if there is room for it. Otherwise, puts it in the options menu.\n\niOS (set with `ios.position`):\n\n* `left`\\[default\\]: Puts the item on the left side of the ActionBar.\n* `right`: Puts the item on the right side of the ActionBar.\n\n## Setting Icons\n\nYou can use the `icon` property to set an image instead of text for the action item. You can use local image (e.g., `~/images/add.png`) or resource (e.g., `res://ic_add`). Because there is no way to explicitly set `width` and `height` for icons, the recommended approach is using resources.\n\nYou can use the `android.systemIcon` and `ios.systemIcon` properties to show system icons. If you define a system icon, it will be used instead of `icon` and `text` properties.\n\nValues for `android.systemIcon` correspond to the resources names of the built-in Android system icons. For a full list of Android drawable names, see [http://androiddrawables.com](http://androiddrawables.com).\n\nValues for `ios.systemIcon` are numbers from the [`UIBarButtonSystemItem`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBarButtonItem_Class/index.html#//apple_ref/doc/uid/TP40007519-CH3-SW2) enumeration:\n\n| Value | Icon           |     | Value | Icon          |\n| ----- | -------------- | --- | ----- | ------------- |\n|0      | Done           |     |12     | Search |\n|1      | Cancel         |     |13     | Refresh |\n|2      | Edit           |     |14     | Stop |\n|3      | Save           |     |15     | Camera |\n|4      | Add            |     |16     | Trash |\n|5      | FlexibleSpace  |     |17     | Play |\n|6      | FixedSpace     |     |18     | Pause |\n|7      | Compose        |     |19     | Rewind |\n|8      | Reply          |     |20     | FastForward |\n|9      | Action         |     |21     | Undo |\n|10     | Organize       |     |22     | Redo |\n|11     | Bookmarks      |     |23     | PageCurl |\n\n# How To\n\n## Showing/Hiding the ActionBar\n\nYou can explicitly control the visibility of the `ActionBar` by setting the `actionBarHidden` property of the `Page`.\n{% angular %}\nYou can inject a reference to the current `Page` in the constructor of your component using the Angular DI.\n{% endangular %}\n\nIn **Android**, the application bar is visible by default and shows the name of the application as title. The navigation button is visible only when it is explicitly defined in the application.\n\nIn **iOS**, if the application bar is empty (e.g., no title or action items are defined), it is hidden on the first page and automatically shown after navigation to host the navigation button. If the ActionBar is not empty (e.g., there is a title or action items defined) it will be shown on first page, too.\n\n## Hiding Action Items\n{% nativescript %}\nYou can use the `visibility` property of the `ActionItem` to dynamically hide and show items. You can also use binding for the visibility.\n\nHere is an example of showing different action items when the app is in \"editing\" mode:\n\n```XML\n<ActionBar title=\"Action Items Visibility\">\n  <ActionItem tap=\"onEdit\" ios.systemIcon=\"2\" android.systemIcon=\"ic_menu_edit\" ios.position=\"right\"\n      {%raw%}visibility=\"{{ isEditing ? 'collapse' : 'visible' }}\"/>{%endraw%}\n  <ActionItem tap=\"onSave\" ios.systemIcon=\"3\" android.systemIcon=\"ic_menu_save\" ios.position=\"right\"\n      {%raw%}visibility=\"{{ isEditing ? 'visible' : 'collapse' }}\"/>{%endraw%}\n  <ActionItem tap=\"onCancel\"  ios.systemIcon=\"1\" android.systemIcon=\"ic_menu_close_clear_cancel\"\n      {%raw%}visibility=\"{{ isEditing ? 'visible' : 'collapse' }}\"/>{%endraw%}\n</ActionBar>\n```\n```JavaScript\nvar observable = require(\"data/observable\");\nfunction onLoaded(args) {\n    var page = args.object;\n    page.bindingContext = new observable.Observable();\n    page.bindingContext.set(\"isEditing\", false);\n}\nexports.onLoaded = onLoaded;\nfunction onEdit(args) {\n    console.log(\"Edit item tapped.\");\n    var btn = args.object;\n    btn.bindingContext.set(\"isEditing\", true);\n}\nexports.onEdit = onEdit;\nfunction onSave(args) {\n    console.log(\"Save item tapped.\");\n    var btn = args.object;\n    btn.bindingContext.set(\"isEditing\", false);\n}\nexports.onSave = onSave;\nfunction onCancel(args) {\n    console.log(\"Cancel item tapped.\");\n    var btn = args.object;\n    btn.bindingContext.set(\"isEditing\", false);\n}\nexports.onCancel = onCancel;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport view = require(\"ui/core/view\");\n\nexport function onLoaded(args: observable.EventData) {\n    var page = <view.View>args.object;\n    page.bindingContext = new observable.Observable();\n    page.bindingContext.set(\"isEditing\", false);\n}\n\nexport function onEdit(args: observable.EventData) {\n    console.log(\"Edit item tapped.\");\n    var btn = <view.View>args.object;\n    btn.bindingContext.set(\"isEditing\", true);\n}\n\nexport function onSave(args: observable.EventData) {\n    console.log(\"Save item tapped.\");\n    var btn = <view.View>args.object;\n    btn.bindingContext.set(\"isEditing\", false);\n}\n\nexport function onCancel(args: observable.EventData) {\n    console.log(\"Cancel item tapped.\");\n    var btn = <view.View>args.object;\n    btn.bindingContext.set(\"isEditing\", false);\n}\n```\n{% endnativescript %}\n{% angular %}\nYou can use the `*ngIf` directive to dynamically hide and show action items.\n\nHere is an example of showing different action items when the app is in \"editing\" mode:\n\n```XML\n<ActionBar title=\"Action Items Visibility\">\n  <ActionItem *ngIf=\"!isEditing\" (tap)=\"onEdit()\"\n    ios.systemIcon=\"2\" android.systemIcon=\"ic_menu_edit\"\n    ios.position=\"right\"></ActionItem>\n      \n  <ActionItem *ngIf=\"isEditing\" (tap)=\"onSave()\" \n    ios.systemIcon=\"3\" android.systemIcon=\"ic_menu_save\"\n    ios.position=\"right\"></ActionItem>\n    \n  <ActionItem *ngIf=\"isEditing\" (tap)=\"onCancel()\"\n    ios.systemIcon=\"1\" android.systemIcon=\"ic_menu_close_clear_cancel\"></ActionItem>\n</ActionBar>\n```\n```TypeScript\n\n@Component({ ... })\nclass MyComponent {\n    isEditing:boolean = false;\n    \n    onEdit() {\n        console.log(\"Edit item tapped.\");\n        this.isEditing = true;\n    }\n\n    onSave() {\n        console.log(\"Save item tapped.\");\n        this.isEditing = false;\n    }\n\n    onCancel() {\n        console.log(\"Cancel item tapped.\");\n        this.isEditing = false;\n    }\n}\n```\n{% endangular %}\n\nThe result is:\n\n![action-items-visibility-ios](../docs/img/modules/action-bar/action-items-visibility-ios.png \"action-items-visibility-ios\")\n![action-items-visibility-android](../docs/img/modules/action-bar/action-items-visibility-android.png \"action-items-visibility-android\")\n\n## Styling\n\nThe ActionBar has some CSS styling limitations. You can use only `background-color` and `color` properties. Here is an example:\n\n```XML\n<ActionBar title=\"ActionBar Style\">\n  <NavigationButton text=\"Go Back\" android.systemIcon=\"ic_menu_back\"></NavigationButton>\n  <ActionItem ios.systemIcon=\"2\" android.systemIcon=\"ic_menu_edit\" ios.position=\"right\"></ActionItem>\n</ActionBar>\n```\n```CSS\nActionBar {\n    background-color:  #3C5AFD;\n    color: white;\n}\n```\n\nThe result is:\n\n![style-ios](../docs/img/modules/action-bar/style-ios.png \"style-ios\")\n![style-android](../docs/img/modules/action-bar/style-android.png \"style-android\")\n\nIn iOS, the `color` property affects the color of the title and the action items.\nIn Android, the `color` property affects only the title text. However, you can set the default color of the text in the action items by adding an `actionMenuTextColor` item in the Android theme (inside `App_Resources\\Android\\values\\styles.xml`).\n\n>Note: Setting other CSS properties (e.g., `font-family`) will only affect the views defined inside `titleView`.\n\n## Creating SlideDrawer Button\n\nThis example shows how to implement a \"show side-drawer button\" functionality.\n\nFor Android, this example uses the `NavigationButton` because `ActionItems` are shown on the right side of the `ActionBar`.\n\nFor iOS, this code adds a regular `ActionItem` with `position` set to `left`. Using the `NavigationButton` as a side-drawer button in iOS is not possible, because its function is to always navigate back in the application.\n\n{% nativescript %}\n>Note: The `<android>` and `<ios>` tags are used inside the XML to define platform-specific elements.\n{% endnativescript %}\n\n{% nativescript %}\n```XML\n<ActionBar title=\"SideDrawer Button\">\n  <android>\n    <NavigationButton icon=\"res://ic_menu\" tap=\"showSlideout\" />\n  </android>\n  <ios>\n    <ActionItem icon=\"res://ic_menu\" ios.position=\"left\" tap=\"showSideDrawer\" />\n  </ios>\n</ActionBar>\n```\n```JavaScript\nfunction showSideDrawer(args) {\n    console.log(\"Show SideDrawer tapped.\");\n    // Show sidedrawer ...\n}\nexports.showSideDrawer = showSideDrawer;\n```\n```TypeScript\nexport function showSideDrawer(args: observable.EventData) {\n    console.log(\"Show SideDrawer tapped.\");\n    // Show sidedrawer ...\n}\n```\n```CSS\nActionBar {\n    background-color:  #3C5AFD;\n    color: white;\n}\n```\n{% endnativescript %}\n\nThe result is:\n\n![side-drawer-ios](../docs/img/modules/action-bar/side-drawer-ios.png \"side-drawer-ios\")\n![side-drawer-android](../docs/img/modules/action-bar/side-drawer-android.png \"side-drawer-android\")\n\n{% angular %}\n## Adding Actions To Existing ActionBar\nUsing the `ActionBarExtension` component you can add additional action items to the current `ActionBar`. This is useful if you are writing a reusable component that exposes an action (ex. \"save\"), but you don't want to override the whole `ActionBar`.\n\nHere is how to define a contextual `copy` action:\n\n```XML\n<ActionBarExtension>\n    <ActionItem *ngIf=\"hasSelection\" (tap)=\"copy()\" text=\"Copy\"></ActionItem>\n</ActionBarExtension>\n```\n```TypeScript\n@Component({ ... })\nclass MyTextEditorComponent {\n    public hasSelection: boolean;\n    // ...\n    copy() {\n        console.log(\"Copying...\");\n        // ...\n    }\n    // ...\n}\n```\n{% endangular %}\n","source":"ui/action-bar.md","raw":"---\ntitle: ActionBar\ndescription: Learn how to use and customize the ActionBar.\nposition: 11\nslug: action-bar\n---\n\n# Overview\n\nThe `ActionBar` is the NativeScript common abstraction over the Android ActionBar and iOS NavigationBar.\n\n* [Defining The ActionBar](#defining-the-action-bar)\n* [Title](#title)\n  * [Setting the Title Text](#setting-the-title-text)\n  * [Using a Custom Title View](#using-custom-title-view)\n  * [Setting the App Icon](#setting-app-icon)\n* [Navigation Button](#navigation-button)\n  * [iOS Specifics](#ios-specifics)\n  * [Android Specifics](#android-specifics)\n* [Action Items](#action-items)\n  * [Positioning](#positioning)\n  * [Setting Icons](#setting-icons)\n* [How To](#how-to)\n  * [Showing/Hiding the ActionBar](#showing-hiding-the-action-bar)\n  * [Hiding Action Items](#hiding-action-items)\n  * [Styling](#styling)\n  * [Creating SlideDrawer Button](#creating-slidedrawer-button)\n{% angular %}  * [Adding Actions To Existing ActionBar](#adding-actions-to-existing-action-bar){% endangular %}\n\n\n\n## Setting the Title Text\n\n{% nativescript %}\nHere is how to define the ActionBar inside your page:\n```XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\">\n  <Page.actionBar>\n      <ActionBar title=\"My ActionBar\"/>\n  </Page.actionBar>\n\n  <!-- page content ... -->\n</Page>\n```\nWe will include only the `ActionBar` tag in the rest of the code-snippets in this article. \n{% endnativescript %}\n{% angular %}\nTo define the ActionBar include the `ActionBar` tag inside a component template:\n```XML\n<ActionBar title=\"Custom Title\"></ActionBar>\n```\nIf more than one component defines an `ActionBar` - the last definition will be respected. You can also [add items to the current ActionBar](#adding-actions-to-existing-action-bar).\n\n>Note: To show the ActionBar on the initial page of your application use the `startPageActionBarHidden: false` app option when bootstrapping the application.\n\n```TypeScript\nnativeScriptBootstrap(AppComponent, [CUSTOM_PROVIDERS], { startPageActionBarHidden: false });\n```\n\n{% endangular %}\n\n# Title\n\n## Setting The Title Text\nUse the `title` property of the `ActionBar` to set the title:\n\n```XML\n<ActionBar title=\"Application Title\"></ActionBar>\n```\n\nThe result is:\n\n![title-ios](../docs/img/modules/action-bar/title-ios.png \"title-ios\")\n![title-android](../docs/img/modules/action-bar/title-android.png \"title-android\")\n\n## Using a Custom Title View\n\nYou can set a custom title view, which will render instead of the title.\nThe example below shows how to combine an image and label for a `titleView` (the example contains only the `ActionBar` definition):\n\n### How to create custom title view instead of the ActionBar title.\n\n```XML\n<ActionBar title=\"test\">\n  <StackLayout orientation=\"horizontal\"\n    ios:horizontalAlignment=\"center\"\n    android:horizontalAlignment=\"left\">\n    <Image src=\"res://nativescript_logo\" class=\"action-image\"></Image>\n    <Label text=\"ativeScript\"  class=\"action-label\"></Label>\n  </StackLayout>\n</ActionBar>\n```\n```CSS\n.action-image {\n    width: 40;\n    height: 40;\n    vertical-align: center;\n}\n\n.action-label {\n    color: #3C5AFD;\n    font-size: 24;\n    font-weight: bold;\n    vertical-align: center;\n}\n```\n\nThe result is:\n\n![title-view-ios](../docs/img/modules/action-bar/title-view-ios.png \"title-view-ios\")\n![title-view-android](../docs/img/modules/action-bar/title-view-android.png \"title-view-android\")\n\nNote that you can use CSS to style the elements inside the `titleView`.\n\n## Setting the App Icon for Android\nYou can set the application icon only for Android. By default, the application icon is hidden. You can show it by setting the `android.iconVisibility` property to `always`.\n\n```XML\n<ActionBar title=\"App Icon Demo\" android.icon=\"res://icon\" android.iconVisibility=\"always\"></ActionBar>\n```\n\nThe result is:\n\n![home-icon-android](../docs/img/modules/action-bar/home-icon-android.png \"home-icon-android\")\n\n# Navigation Button\n\nThe `NavigationButton` component is a common abstraction over the iOS back button and the Android navigation button.\n\n{% nativescript %}\n```XML\n<ActionBar title=\"App Icon Demo\">\n  <NavigationButton text=\"Go Back\" android.systemIcon=\"ic_menu_back\" tap=\"onNavBtnTap\"/>\n</ActionBar>\n```\n```JavaScript\nfunction onNavBtnTap() {\n    // This code will be called only in Android.\n    console.log(\"Navigation button tapped!\");\n}\nexports.onNavBtnTap = onNavBtnTap;\n```\n```TypeScript\nexport function onNavBtnTap(){\n    // This code will be called only in Android.\n    console.log(\"Navigation button tapped!\");\n}\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<ActionBar title=\"App Icon Demo\">\n  <NavigationButton text=\"Go Back\" android.systemIcon=\"ic_menu_back\" \n    (tap)=\"onNavBtnTap()\"></NavigationButton>\n</ActionBar>\n```\n```TypeScript\n@Component({ ... })\nclass MyComponent {\n    public onNavBtnTap(){\n        // This code will be called only in Android.\n        console.log(\"Navigation button tapped!\");\n    }\n}\n```\n{% endangular %}\n\nThe result is:\n\n![nav-btn-ios](../docs/img/modules/action-bar/nav-btn-ios.png \"nav-btn-ios\")\n![nav-btn-android](../docs/img/modules/action-bar/nav-btn-android.png \"nav-btn-android\")\n\n## iOS Specifics\n\nThe default text of the button is the title of the previous page; you can change it by setting the `text` property as shown in the example `Setting the Text Title`.\nIn iOS, the back button is used explicitly for navigation. It navigates to the previous page and you cannot handle the `tap` event to override this behavior.\n\nIf you want to place a button on the left side of the `ActionBar` and handle the tap event (e.g., show slide-out), you can use `ActionItem` with `ios.position=\"left\"`.\n\n## Android Specifics\n\nIn Android, you cannot set text inside the navigation button. You can use the `icon` property to set an image (e.g., `~\\images\\nav-image.png` or `res:\\\\ic_nav`). You can use `android.systemIcon` to set one of the system icons available in Android.\n\n# Action Items\n\nYou can define additional action buttons using the `actionItems` collection:\n\n{% nativescript %}\n```XML\n<ActionBar title=\"Action Items\">\n  <ActionItem tap=\"onShare\"\n      ios.systemIcon=\"9\" ios.position=\"left\"\n      android.systemIcon=\"ic_menu_share\" android.position=\"actionBar\"/>\n  <ActionItem tap=\"onDelete\"\n      ios.systemIcon=\"16\" ios.position=\"right\"\n      text=\"delete\" android.position=\"popup\"/>\n</ActionBar>\n```\n```JavaScript\nfunction onShare(args) {\n    console.log(\"Share action item tapped.\");\n}\nexports.onShare = onShare;\nfunction onDelete(args) {\n    console.log(\"Delete action item tapped.\");\n}\nexports.onDelete = onDelete;\n```\n```TypeScript\nexport function onShare(args: observable.EventData) {\n    console.log(\"Share action item tapped.\");\n}\n\nexport function onDelete(args: observable.EventData) {\n    console.log(\"Delete action item tapped.\");\n}\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<ActionBar title=\"Action Items\">\n  <ActionItem (tap)=\"onShare()\"\n      ios.systemIcon=\"9\" ios.position=\"left\"\n      android.systemIcon=\"ic_menu_share\" \n      android.position=\"actionBar\"></ActionItem>\n  <ActionItem (tap)=\"onDelete()\"\n      ios.systemIcon=\"16\" ios.position=\"right\"\n      text=\"delete\" android.position=\"popup\"></ActionItem>\n</ActionBar>\n```\n```TypeScript\n@Component({ ... })\nclass MyComponent {\n    onShare(args: observable.EventData) {\n        console.log(\"Share action item tapped.\");\n    }\n    \n    onDelete(args: observable.EventData) {\n        console.log(\"Delete action item tapped.\");\n    }\n}\n```\n{% endangular %}\nThe result is:\n\n![action-items-ios](../docs/img/modules/action-bar/action-items-ios.png \"action-items-ios\")\n![action-items-android](../docs/img/modules/action-bar/action-items-android.png \"action-items-android\")\n\n## Positioning\n\nThe following positioning options are available for iOS and Android.\n\nAndroid (set with `android.position`):\n\n* `actionBar`\\[default\\]: Puts the item in the ActionBar. Action item can be rendered both as text or icon.\n* `popup`: Puts the item in the options menu. Items will be rendered as text.\n* `actionBarIfRoom`: Puts the item in the ActionBar if there is room for it. Otherwise, puts it in the options menu.\n\niOS (set with `ios.position`):\n\n* `left`\\[default\\]: Puts the item on the left side of the ActionBar.\n* `right`: Puts the item on the right side of the ActionBar.\n\n## Setting Icons\n\nYou can use the `icon` property to set an image instead of text for the action item. You can use local image (e.g., `~/images/add.png`) or resource (e.g., `res://ic_add`). Because there is no way to explicitly set `width` and `height` for icons, the recommended approach is using resources.\n\nYou can use the `android.systemIcon` and `ios.systemIcon` properties to show system icons. If you define a system icon, it will be used instead of `icon` and `text` properties.\n\nValues for `android.systemIcon` correspond to the resources names of the built-in Android system icons. For a full list of Android drawable names, see [http://androiddrawables.com](http://androiddrawables.com).\n\nValues for `ios.systemIcon` are numbers from the [`UIBarButtonSystemItem`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBarButtonItem_Class/index.html#//apple_ref/doc/uid/TP40007519-CH3-SW2) enumeration:\n\n| Value | Icon           |     | Value | Icon          |\n| ----- | -------------- | --- | ----- | ------------- |\n|0      | Done           |     |12     | Search |\n|1      | Cancel         |     |13     | Refresh |\n|2      | Edit           |     |14     | Stop |\n|3      | Save           |     |15     | Camera |\n|4      | Add            |     |16     | Trash |\n|5      | FlexibleSpace  |     |17     | Play |\n|6      | FixedSpace     |     |18     | Pause |\n|7      | Compose        |     |19     | Rewind |\n|8      | Reply          |     |20     | FastForward |\n|9      | Action         |     |21     | Undo |\n|10     | Organize       |     |22     | Redo |\n|11     | Bookmarks      |     |23     | PageCurl |\n\n# How To\n\n## Showing/Hiding the ActionBar\n\nYou can explicitly control the visibility of the `ActionBar` by setting the `actionBarHidden` property of the `Page`.\n{% angular %}\nYou can inject a reference to the current `Page` in the constructor of your component using the Angular DI.\n{% endangular %}\n\nIn **Android**, the application bar is visible by default and shows the name of the application as title. The navigation button is visible only when it is explicitly defined in the application.\n\nIn **iOS**, if the application bar is empty (e.g., no title or action items are defined), it is hidden on the first page and automatically shown after navigation to host the navigation button. If the ActionBar is not empty (e.g., there is a title or action items defined) it will be shown on first page, too.\n\n## Hiding Action Items\n{% nativescript %}\nYou can use the `visibility` property of the `ActionItem` to dynamically hide and show items. You can also use binding for the visibility.\n\nHere is an example of showing different action items when the app is in \"editing\" mode:\n\n```XML\n<ActionBar title=\"Action Items Visibility\">\n  <ActionItem tap=\"onEdit\" ios.systemIcon=\"2\" android.systemIcon=\"ic_menu_edit\" ios.position=\"right\"\n      {%raw%}visibility=\"{{ isEditing ? 'collapse' : 'visible' }}\"/>{%endraw%}\n  <ActionItem tap=\"onSave\" ios.systemIcon=\"3\" android.systemIcon=\"ic_menu_save\" ios.position=\"right\"\n      {%raw%}visibility=\"{{ isEditing ? 'visible' : 'collapse' }}\"/>{%endraw%}\n  <ActionItem tap=\"onCancel\"  ios.systemIcon=\"1\" android.systemIcon=\"ic_menu_close_clear_cancel\"\n      {%raw%}visibility=\"{{ isEditing ? 'visible' : 'collapse' }}\"/>{%endraw%}\n</ActionBar>\n```\n```JavaScript\nvar observable = require(\"data/observable\");\nfunction onLoaded(args) {\n    var page = args.object;\n    page.bindingContext = new observable.Observable();\n    page.bindingContext.set(\"isEditing\", false);\n}\nexports.onLoaded = onLoaded;\nfunction onEdit(args) {\n    console.log(\"Edit item tapped.\");\n    var btn = args.object;\n    btn.bindingContext.set(\"isEditing\", true);\n}\nexports.onEdit = onEdit;\nfunction onSave(args) {\n    console.log(\"Save item tapped.\");\n    var btn = args.object;\n    btn.bindingContext.set(\"isEditing\", false);\n}\nexports.onSave = onSave;\nfunction onCancel(args) {\n    console.log(\"Cancel item tapped.\");\n    var btn = args.object;\n    btn.bindingContext.set(\"isEditing\", false);\n}\nexports.onCancel = onCancel;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport view = require(\"ui/core/view\");\n\nexport function onLoaded(args: observable.EventData) {\n    var page = <view.View>args.object;\n    page.bindingContext = new observable.Observable();\n    page.bindingContext.set(\"isEditing\", false);\n}\n\nexport function onEdit(args: observable.EventData) {\n    console.log(\"Edit item tapped.\");\n    var btn = <view.View>args.object;\n    btn.bindingContext.set(\"isEditing\", true);\n}\n\nexport function onSave(args: observable.EventData) {\n    console.log(\"Save item tapped.\");\n    var btn = <view.View>args.object;\n    btn.bindingContext.set(\"isEditing\", false);\n}\n\nexport function onCancel(args: observable.EventData) {\n    console.log(\"Cancel item tapped.\");\n    var btn = <view.View>args.object;\n    btn.bindingContext.set(\"isEditing\", false);\n}\n```\n{% endnativescript %}\n{% angular %}\nYou can use the `*ngIf` directive to dynamically hide and show action items.\n\nHere is an example of showing different action items when the app is in \"editing\" mode:\n\n```XML\n<ActionBar title=\"Action Items Visibility\">\n  <ActionItem *ngIf=\"!isEditing\" (tap)=\"onEdit()\"\n    ios.systemIcon=\"2\" android.systemIcon=\"ic_menu_edit\"\n    ios.position=\"right\"></ActionItem>\n      \n  <ActionItem *ngIf=\"isEditing\" (tap)=\"onSave()\" \n    ios.systemIcon=\"3\" android.systemIcon=\"ic_menu_save\"\n    ios.position=\"right\"></ActionItem>\n    \n  <ActionItem *ngIf=\"isEditing\" (tap)=\"onCancel()\"\n    ios.systemIcon=\"1\" android.systemIcon=\"ic_menu_close_clear_cancel\"></ActionItem>\n</ActionBar>\n```\n```TypeScript\n\n@Component({ ... })\nclass MyComponent {\n    isEditing:boolean = false;\n    \n    onEdit() {\n        console.log(\"Edit item tapped.\");\n        this.isEditing = true;\n    }\n\n    onSave() {\n        console.log(\"Save item tapped.\");\n        this.isEditing = false;\n    }\n\n    onCancel() {\n        console.log(\"Cancel item tapped.\");\n        this.isEditing = false;\n    }\n}\n```\n{% endangular %}\n\nThe result is:\n\n![action-items-visibility-ios](../docs/img/modules/action-bar/action-items-visibility-ios.png \"action-items-visibility-ios\")\n![action-items-visibility-android](../docs/img/modules/action-bar/action-items-visibility-android.png \"action-items-visibility-android\")\n\n## Styling\n\nThe ActionBar has some CSS styling limitations. You can use only `background-color` and `color` properties. Here is an example:\n\n```XML\n<ActionBar title=\"ActionBar Style\">\n  <NavigationButton text=\"Go Back\" android.systemIcon=\"ic_menu_back\"></NavigationButton>\n  <ActionItem ios.systemIcon=\"2\" android.systemIcon=\"ic_menu_edit\" ios.position=\"right\"></ActionItem>\n</ActionBar>\n```\n```CSS\nActionBar {\n    background-color:  #3C5AFD;\n    color: white;\n}\n```\n\nThe result is:\n\n![style-ios](../docs/img/modules/action-bar/style-ios.png \"style-ios\")\n![style-android](../docs/img/modules/action-bar/style-android.png \"style-android\")\n\nIn iOS, the `color` property affects the color of the title and the action items.\nIn Android, the `color` property affects only the title text. However, you can set the default color of the text in the action items by adding an `actionMenuTextColor` item in the Android theme (inside `App_Resources\\Android\\values\\styles.xml`).\n\n>Note: Setting other CSS properties (e.g., `font-family`) will only affect the views defined inside `titleView`.\n\n## Creating SlideDrawer Button\n\nThis example shows how to implement a \"show side-drawer button\" functionality.\n\nFor Android, this example uses the `NavigationButton` because `ActionItems` are shown on the right side of the `ActionBar`.\n\nFor iOS, this code adds a regular `ActionItem` with `position` set to `left`. Using the `NavigationButton` as a side-drawer button in iOS is not possible, because its function is to always navigate back in the application.\n\n{% nativescript %}\n>Note: The `<android>` and `<ios>` tags are used inside the XML to define platform-specific elements.\n{% endnativescript %}\n\n{% nativescript %}\n```XML\n<ActionBar title=\"SideDrawer Button\">\n  <android>\n    <NavigationButton icon=\"res://ic_menu\" tap=\"showSlideout\" />\n  </android>\n  <ios>\n    <ActionItem icon=\"res://ic_menu\" ios.position=\"left\" tap=\"showSideDrawer\" />\n  </ios>\n</ActionBar>\n```\n```JavaScript\nfunction showSideDrawer(args) {\n    console.log(\"Show SideDrawer tapped.\");\n    // Show sidedrawer ...\n}\nexports.showSideDrawer = showSideDrawer;\n```\n```TypeScript\nexport function showSideDrawer(args: observable.EventData) {\n    console.log(\"Show SideDrawer tapped.\");\n    // Show sidedrawer ...\n}\n```\n```CSS\nActionBar {\n    background-color:  #3C5AFD;\n    color: white;\n}\n```\n{% endnativescript %}\n\nThe result is:\n\n![side-drawer-ios](../docs/img/modules/action-bar/side-drawer-ios.png \"side-drawer-ios\")\n![side-drawer-android](../docs/img/modules/action-bar/side-drawer-android.png \"side-drawer-android\")\n\n{% angular %}\n## Adding Actions To Existing ActionBar\nUsing the `ActionBarExtension` component you can add additional action items to the current `ActionBar`. This is useful if you are writing a reusable component that exposes an action (ex. \"save\"), but you don't want to override the whole `ActionBar`.\n\nHere is how to define a contextual `copy` action:\n\n```XML\n<ActionBarExtension>\n    <ActionItem *ngIf=\"hasSelection\" (tap)=\"copy()\" text=\"Copy\"></ActionItem>\n</ActionBarExtension>\n```\n```TypeScript\n@Component({ ... })\nclass MyTextEditorComponent {\n    public hasSelection: boolean;\n    // ...\n    copy() {\n        console.log(\"Copying...\");\n        // ...\n    }\n    // ...\n}\n```\n{% endangular %}\n","date":"2016-08-26T21:05:54.568Z","updated":"2016-08-26T21:05:54.568Z","path":"ui/action-bar.html","comments":1,"layout":"page","_id":"cisn95caa000twsl0364y0a60","content":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>The <code>ActionBar</code> is the NativeScript common abstraction over the Android ActionBar and iOS NavigationBar.</p>\n<ul>\n<li><a href=\"#defining-the-action-bar\">Defining The ActionBar</a></li>\n<li><a href=\"#title\">Title</a><ul>\n<li><a href=\"#setting-the-title-text\">Setting the Title Text</a></li>\n<li><a href=\"#using-custom-title-view\">Using a Custom Title View</a></li>\n<li><a href=\"#setting-app-icon\">Setting the App Icon</a></li>\n</ul>\n</li>\n<li><a href=\"#navigation-button\">Navigation Button</a><ul>\n<li><a href=\"#ios-specifics\">iOS Specifics</a></li>\n<li><a href=\"#android-specifics\">Android Specifics</a></li>\n</ul>\n</li>\n<li><a href=\"#action-items\">Action Items</a><ul>\n<li><a href=\"#positioning\">Positioning</a></li>\n<li><a href=\"#setting-icons\">Setting Icons</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to\">How To</a><ul>\n<li><a href=\"#showing-hiding-the-action-bar\">Showing/Hiding the ActionBar</a></li>\n<li><a href=\"#hiding-action-items\">Hiding Action Items</a></li>\n<li><a href=\"#styling\">Styling</a></li>\n<li><a href=\"#creating-slidedrawer-button\">Creating SlideDrawer Button</a><div class=\"codeblock ng\"><ul>\n<li><a href=\"#adding-actions-to-existing-action-bar\">Adding Actions To Existing ActionBar</a></li>\n</ul>\n</div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Setting-the-Title-Text\"><a href=\"#Setting-the-Title-Text\" class=\"headerlink\" title=\"Setting the Title Text\"></a>Setting the Title Text</h2><div class=\"codeblock n\"><p>Here is how to define the ActionBar inside your page:\nundefined</p>\n<p>We will include only the <code>ActionBar</code> tag in the rest of the code-snippets in this article. </p>\n</div>\n<div class=\"codeblock ng\"><p>To define the ActionBar include the <code>ActionBar</code> tag inside a component template:\nundefined</p>\n<p>If more than one component defines an <code>ActionBar</code> - the last definition will be respected. You can also <a href=\"#adding-actions-to-existing-action-bar\">add items to the current ActionBar</a>.</p>\n<blockquote>\n<p>Note: To show the ActionBar on the initial page of your application use the <code>startPageActionBarHidden: false</code> app option when bootstrapping the application.</p>\n</blockquote>\nundefined\n</div>\n<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><h2 id=\"Setting-The-Title-Text\"><a href=\"#Setting-The-Title-Text\" class=\"headerlink\" title=\"Setting The Title Text\"></a>Setting The Title Text</h2><p>Use the <code>title</code> property of the <code>ActionBar</code> to set the title:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Application Title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/title-ios.png\" alt=\"title-ios\" title=\"title-ios\">\n<img src=\"../docs/img/modules/action-bar/title-android.png\" alt=\"title-android\" title=\"title-android\"></p>\n<h2 id=\"Using-a-Custom-Title-View\"><a href=\"#Using-a-Custom-Title-View\" class=\"headerlink\" title=\"Using a Custom Title View\"></a>Using a Custom Title View</h2><p>You can set a custom title view, which will render instead of the title.\nThe example below shows how to combine an image and label for a <code>titleView</code> (the example contains only the <code>ActionBar</code> definition):</p>\n<h3 id=\"How-to-create-custom-title-view-instead-of-the-ActionBar-title\"><a href=\"#How-to-create-custom-title-view-instead-of-the-ActionBar-title\" class=\"headerlink\" title=\"How to create custom title view instead of the ActionBar title.\"></a>How to create custom title view instead of the ActionBar title.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"test\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"horizontal\"</span></span></div><div class=\"line\">    <span class=\"attr\">ios:horizontalAlignment</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">    <span class=\"attr\">android:horizontalAlignment</span>=<span class=\"string\">\"left\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res://nativescript_logo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"action-image\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Image</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"ativeScript\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"action-label\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.action-image</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40</span>;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.action-label</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#3C5AFD</span>;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">24</span>;</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/title-view-ios.png\" alt=\"title-view-ios\" title=\"title-view-ios\">\n<img src=\"../docs/img/modules/action-bar/title-view-android.png\" alt=\"title-view-android\" title=\"title-view-android\"></p>\n<p>Note that you can use CSS to style the elements inside the <code>titleView</code>.</p>\n<h2 id=\"Setting-the-App-Icon-for-Android\"><a href=\"#Setting-the-App-Icon-for-Android\" class=\"headerlink\" title=\"Setting the App Icon for Android\"></a>Setting the App Icon for Android</h2><p>You can set the application icon only for Android. By default, the application icon is hidden. You can show it by setting the <code>android.iconVisibility</code> property to <code>always</code>.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"App Icon Demo\"</span> <span class=\"attr\">android.icon</span>=<span class=\"string\">\"res://icon\"</span> <span class=\"attr\">android.iconVisibility</span>=<span class=\"string\">\"always\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/home-icon-android.png\" alt=\"home-icon-android\" title=\"home-icon-android\"></p>\n<h1 id=\"Navigation-Button\"><a href=\"#Navigation-Button\" class=\"headerlink\" title=\"Navigation Button\"></a>Navigation Button</h1><p>The <code>NavigationButton</code> component is a common abstraction over the iOS back button and the Android navigation button.</p>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/nav-btn-ios.png\" alt=\"nav-btn-ios\" title=\"nav-btn-ios\">\n<img src=\"../docs/img/modules/action-bar/nav-btn-android.png\" alt=\"nav-btn-android\" title=\"nav-btn-android\"></p>\n<h2 id=\"iOS-Specifics\"><a href=\"#iOS-Specifics\" class=\"headerlink\" title=\"iOS Specifics\"></a>iOS Specifics</h2><p>The default text of the button is the title of the previous page; you can change it by setting the <code>text</code> property as shown in the example <code>Setting the Text Title</code>.\nIn iOS, the back button is used explicitly for navigation. It navigates to the previous page and you cannot handle the <code>tap</code> event to override this behavior.</p>\n<p>If you want to place a button on the left side of the <code>ActionBar</code> and handle the tap event (e.g., show slide-out), you can use <code>ActionItem</code> with <code>ios.position=&quot;left&quot;</code>.</p>\n<h2 id=\"Android-Specifics\"><a href=\"#Android-Specifics\" class=\"headerlink\" title=\"Android Specifics\"></a>Android Specifics</h2><p>In Android, you cannot set text inside the navigation button. You can use the <code>icon</code> property to set an image (e.g., <code>~\\images\\nav-image.png</code> or <code>res:\\\\ic_nav</code>). You can use <code>android.systemIcon</code> to set one of the system icons available in Android.</p>\n<h1 id=\"Action-Items\"><a href=\"#Action-Items\" class=\"headerlink\" title=\"Action Items\"></a>Action Items</h1><p>You can define additional action buttons using the <code>actionItems</code> collection:</p>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/action-items-ios.png\" alt=\"action-items-ios\" title=\"action-items-ios\">\n<img src=\"../docs/img/modules/action-bar/action-items-android.png\" alt=\"action-items-android\" title=\"action-items-android\"></p>\n<h2 id=\"Positioning\"><a href=\"#Positioning\" class=\"headerlink\" title=\"Positioning\"></a>Positioning</h2><p>The following positioning options are available for iOS and Android.</p>\n<p>Android (set with <code>android.position</code>):</p>\n<ul>\n<li><code>actionBar</code>[default]: Puts the item in the ActionBar. Action item can be rendered both as text or icon.</li>\n<li><code>popup</code>: Puts the item in the options menu. Items will be rendered as text.</li>\n<li><code>actionBarIfRoom</code>: Puts the item in the ActionBar if there is room for it. Otherwise, puts it in the options menu.</li>\n</ul>\n<p>iOS (set with <code>ios.position</code>):</p>\n<ul>\n<li><code>left</code>[default]: Puts the item on the left side of the ActionBar.</li>\n<li><code>right</code>: Puts the item on the right side of the ActionBar.</li>\n</ul>\n<h2 id=\"Setting-Icons\"><a href=\"#Setting-Icons\" class=\"headerlink\" title=\"Setting Icons\"></a>Setting Icons</h2><p>You can use the <code>icon</code> property to set an image instead of text for the action item. You can use local image (e.g., <code>~/images/add.png</code>) or resource (e.g., <code>res://ic_add</code>). Because there is no way to explicitly set <code>width</code> and <code>height</code> for icons, the recommended approach is using resources.</p>\n<p>You can use the <code>android.systemIcon</code> and <code>ios.systemIcon</code> properties to show system icons. If you define a system icon, it will be used instead of <code>icon</code> and <code>text</code> properties.</p>\n<p>Values for <code>android.systemIcon</code> correspond to the resources names of the built-in Android system icons. For a full list of Android drawable names, see <a href=\"http://androiddrawables.com\" target=\"_blank\" rel=\"external\">http://androiddrawables.com</a>.</p>\n<p>Values for <code>ios.systemIcon</code> are numbers from the <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBarButtonItem_Class/index.html#//apple_ref/doc/uid/TP40007519-CH3-SW2\" target=\"_blank\" rel=\"external\"><code>UIBarButtonSystemItem</code></a> enumeration:</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Icon</th>\n<th></th>\n<th>Value</th>\n<th>Icon</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>Done</td>\n<td></td>\n<td>12</td>\n<td>Search</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Cancel</td>\n<td></td>\n<td>13</td>\n<td>Refresh</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Edit</td>\n<td></td>\n<td>14</td>\n<td>Stop</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Save</td>\n<td></td>\n<td>15</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Add</td>\n<td></td>\n<td>16</td>\n<td>Trash</td>\n</tr>\n<tr>\n<td>5</td>\n<td>FlexibleSpace</td>\n<td></td>\n<td>17</td>\n<td>Play</td>\n</tr>\n<tr>\n<td>6</td>\n<td>FixedSpace</td>\n<td></td>\n<td>18</td>\n<td>Pause</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Compose</td>\n<td></td>\n<td>19</td>\n<td>Rewind</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Reply</td>\n<td></td>\n<td>20</td>\n<td>FastForward</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Action</td>\n<td></td>\n<td>21</td>\n<td>Undo</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Organize</td>\n<td></td>\n<td>22</td>\n<td>Redo</td>\n</tr>\n<tr>\n<td>11</td>\n<td>Bookmarks</td>\n<td></td>\n<td>23</td>\n<td>PageCurl</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"How-To\"><a href=\"#How-To\" class=\"headerlink\" title=\"How To\"></a>How To</h1><h2 id=\"Showing-Hiding-the-ActionBar\"><a href=\"#Showing-Hiding-the-ActionBar\" class=\"headerlink\" title=\"Showing/Hiding the ActionBar\"></a>Showing/Hiding the ActionBar</h2><p>You can explicitly control the visibility of the <code>ActionBar</code> by setting the <code>actionBarHidden</code> property of the <code>Page</code>.\n<div class=\"codeblock ng\"><p>You can inject a reference to the current <code>Page</code> in the constructor of your component using the Angular DI.</p>\n</div></p>\n<p>In <strong>Android</strong>, the application bar is visible by default and shows the name of the application as title. The navigation button is visible only when it is explicitly defined in the application.</p>\n<p>In <strong>iOS</strong>, if the application bar is empty (e.g., no title or action items are defined), it is hidden on the first page and automatically shown after navigation to host the navigation button. If the ActionBar is not empty (e.g., there is a title or action items defined) it will be shown on first page, too.</p>\n<h2 id=\"Hiding-Action-Items\"><a href=\"#Hiding-Action-Items\" class=\"headerlink\" title=\"Hiding Action Items\"></a>Hiding Action Items</h2><div class=\"codeblock n\"><p>You can use the <code>visibility</code> property of the <code>ActionItem</code> to dynamically hide and show items. You can also use binding for the visibility.</p>\n<p>Here is an example of showing different action items when the app is in &quot;editing&quot; mode:</p>\nundefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>You can use the <code>*ngIf</code> directive to dynamically hide and show action items.</p>\n<p>Here is an example of showing different action items when the app is in &quot;editing&quot; mode:</p>\nundefined\nundefined\n</div>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/action-items-visibility-ios.png\" alt=\"action-items-visibility-ios\" title=\"action-items-visibility-ios\">\n<img src=\"../docs/img/modules/action-bar/action-items-visibility-android.png\" alt=\"action-items-visibility-android\" title=\"action-items-visibility-android\"></p>\n<h2 id=\"Styling\"><a href=\"#Styling\" class=\"headerlink\" title=\"Styling\"></a>Styling</h2><p>The ActionBar has some CSS styling limitations. You can use only <code>background-color</code> and <code>color</code> properties. Here is an example:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"ActionBar Style\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">NavigationButton</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Go Back\"</span> <span class=\"attr\">android.systemIcon</span>=<span class=\"string\">\"ic_menu_back\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">NavigationButton</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ActionItem</span> <span class=\"attr\">ios.systemIcon</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">android.systemIcon</span>=<span class=\"string\">\"ic_menu_edit\"</span> <span class=\"attr\">ios.position</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionItem</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ActionBar</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>:  <span class=\"number\">#3C5AFD</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/style-ios.png\" alt=\"style-ios\" title=\"style-ios\">\n<img src=\"../docs/img/modules/action-bar/style-android.png\" alt=\"style-android\" title=\"style-android\"></p>\n<p>In iOS, the <code>color</code> property affects the color of the title and the action items.\nIn Android, the <code>color</code> property affects only the title text. However, you can set the default color of the text in the action items by adding an <code>actionMenuTextColor</code> item in the Android theme (inside <code>App_Resources\\Android\\values\\styles.xml</code>).</p>\n<blockquote>\n<p>Note: Setting other CSS properties (e.g., <code>font-family</code>) will only affect the views defined inside <code>titleView</code>.</p>\n</blockquote>\n<h2 id=\"Creating-SlideDrawer-Button\"><a href=\"#Creating-SlideDrawer-Button\" class=\"headerlink\" title=\"Creating SlideDrawer Button\"></a>Creating SlideDrawer Button</h2><p>This example shows how to implement a “show side-drawer button” functionality.</p>\n<p>For Android, this example uses the <code>NavigationButton</code> because <code>ActionItems</code> are shown on the right side of the <code>ActionBar</code>.</p>\n<p>For iOS, this code adds a regular <code>ActionItem</code> with <code>position</code> set to <code>left</code>. Using the <code>NavigationButton</code> as a side-drawer button in iOS is not possible, because its function is to always navigate back in the application.</p>\n<div class=\"codeblock n\"><blockquote>\n<p>Note: The <code>&lt;android&gt;</code> and <code>&lt;ios&gt;</code> tags are used inside the XML to define platform-specific elements.</p>\n</blockquote>\n</div>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\nundefined\n</div>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/side-drawer-ios.png\" alt=\"side-drawer-ios\" title=\"side-drawer-ios\">\n<img src=\"../docs/img/modules/action-bar/side-drawer-android.png\" alt=\"side-drawer-android\" title=\"side-drawer-android\"></p>\n<div class=\"codeblock ng\"><h2 id=\"adding-actions-to-existing-actionbar\">Adding Actions To Existing ActionBar</h2>\n<p>Using the <code>ActionBarExtension</code> component you can add additional action items to the current <code>ActionBar</code>. This is useful if you are writing a reusable component that exposes an action (ex. &quot;save&quot;), but you don&#39;t want to override the whole <code>ActionBar</code>.</p>\n<p>Here is how to define a contextual <code>copy</code> action:</p>\nundefined\nundefined\n</div>\n","excerpt":"","more":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>The <code>ActionBar</code> is the NativeScript common abstraction over the Android ActionBar and iOS NavigationBar.</p>\n<ul>\n<li><a href=\"#defining-the-action-bar\">Defining The ActionBar</a></li>\n<li><a href=\"#title\">Title</a><ul>\n<li><a href=\"#setting-the-title-text\">Setting the Title Text</a></li>\n<li><a href=\"#using-custom-title-view\">Using a Custom Title View</a></li>\n<li><a href=\"#setting-app-icon\">Setting the App Icon</a></li>\n</ul>\n</li>\n<li><a href=\"#navigation-button\">Navigation Button</a><ul>\n<li><a href=\"#ios-specifics\">iOS Specifics</a></li>\n<li><a href=\"#android-specifics\">Android Specifics</a></li>\n</ul>\n</li>\n<li><a href=\"#action-items\">Action Items</a><ul>\n<li><a href=\"#positioning\">Positioning</a></li>\n<li><a href=\"#setting-icons\">Setting Icons</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to\">How To</a><ul>\n<li><a href=\"#showing-hiding-the-action-bar\">Showing/Hiding the ActionBar</a></li>\n<li><a href=\"#hiding-action-items\">Hiding Action Items</a></li>\n<li><a href=\"#styling\">Styling</a></li>\n<li><a href=\"#creating-slidedrawer-button\">Creating SlideDrawer Button</a><div class=\"codeblock ng\"><ul>\n<li><a href=\"#adding-actions-to-existing-action-bar\">Adding Actions To Existing ActionBar</a></li>\n</ul>\n</div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Setting-the-Title-Text\"><a href=\"#Setting-the-Title-Text\" class=\"headerlink\" title=\"Setting the Title Text\"></a>Setting the Title Text</h2><div class=\"codeblock n\"><p>Here is how to define the ActionBar inside your page:\nundefined</p>\n<p>We will include only the <code>ActionBar</code> tag in the rest of the code-snippets in this article. </p>\n</div>\n<div class=\"codeblock ng\"><p>To define the ActionBar include the <code>ActionBar</code> tag inside a component template:\nundefined</p>\n<p>If more than one component defines an <code>ActionBar</code> - the last definition will be respected. You can also <a href=\"#adding-actions-to-existing-action-bar\">add items to the current ActionBar</a>.</p>\n<blockquote>\n<p>Note: To show the ActionBar on the initial page of your application use the <code>startPageActionBarHidden: false</code> app option when bootstrapping the application.</p>\n</blockquote>\nundefined\n</div>\n<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><h2 id=\"Setting-The-Title-Text\"><a href=\"#Setting-The-Title-Text\" class=\"headerlink\" title=\"Setting The Title Text\"></a>Setting The Title Text</h2><p>Use the <code>title</code> property of the <code>ActionBar</code> to set the title:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Application Title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/title-ios.png\" alt=\"title-ios\" title=\"title-ios\">\n<img src=\"../docs/img/modules/action-bar/title-android.png\" alt=\"title-android\" title=\"title-android\"></p>\n<h2 id=\"Using-a-Custom-Title-View\"><a href=\"#Using-a-Custom-Title-View\" class=\"headerlink\" title=\"Using a Custom Title View\"></a>Using a Custom Title View</h2><p>You can set a custom title view, which will render instead of the title.\nThe example below shows how to combine an image and label for a <code>titleView</code> (the example contains only the <code>ActionBar</code> definition):</p>\n<h3 id=\"How-to-create-custom-title-view-instead-of-the-ActionBar-title\"><a href=\"#How-to-create-custom-title-view-instead-of-the-ActionBar-title\" class=\"headerlink\" title=\"How to create custom title view instead of the ActionBar title.\"></a>How to create custom title view instead of the ActionBar title.</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"test\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"horizontal\"</span></div><div class=\"line\">    <span class=\"attr\">ios:horizontalAlignment</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">    <span class=\"attr\">android:horizontalAlignment</span>=<span class=\"string\">\"left\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"res://nativescript_logo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"action-image\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Image</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"ativeScript\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"action-label\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.action-image</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40</span>;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.action-label</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#3C5AFD</span>;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">24</span>;</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/title-view-ios.png\" alt=\"title-view-ios\" title=\"title-view-ios\">\n<img src=\"../docs/img/modules/action-bar/title-view-android.png\" alt=\"title-view-android\" title=\"title-view-android\"></p>\n<p>Note that you can use CSS to style the elements inside the <code>titleView</code>.</p>\n<h2 id=\"Setting-the-App-Icon-for-Android\"><a href=\"#Setting-the-App-Icon-for-Android\" class=\"headerlink\" title=\"Setting the App Icon for Android\"></a>Setting the App Icon for Android</h2><p>You can set the application icon only for Android. By default, the application icon is hidden. You can show it by setting the <code>android.iconVisibility</code> property to <code>always</code>.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"App Icon Demo\"</span> <span class=\"attr\">android.icon</span>=<span class=\"string\">\"res://icon\"</span> <span class=\"attr\">android.iconVisibility</span>=<span class=\"string\">\"always\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/home-icon-android.png\" alt=\"home-icon-android\" title=\"home-icon-android\"></p>\n<h1 id=\"Navigation-Button\"><a href=\"#Navigation-Button\" class=\"headerlink\" title=\"Navigation Button\"></a>Navigation Button</h1><p>The <code>NavigationButton</code> component is a common abstraction over the iOS back button and the Android navigation button.</p>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/nav-btn-ios.png\" alt=\"nav-btn-ios\" title=\"nav-btn-ios\">\n<img src=\"../docs/img/modules/action-bar/nav-btn-android.png\" alt=\"nav-btn-android\" title=\"nav-btn-android\"></p>\n<h2 id=\"iOS-Specifics\"><a href=\"#iOS-Specifics\" class=\"headerlink\" title=\"iOS Specifics\"></a>iOS Specifics</h2><p>The default text of the button is the title of the previous page; you can change it by setting the <code>text</code> property as shown in the example <code>Setting the Text Title</code>.\nIn iOS, the back button is used explicitly for navigation. It navigates to the previous page and you cannot handle the <code>tap</code> event to override this behavior.</p>\n<p>If you want to place a button on the left side of the <code>ActionBar</code> and handle the tap event (e.g., show slide-out), you can use <code>ActionItem</code> with <code>ios.position=&quot;left&quot;</code>.</p>\n<h2 id=\"Android-Specifics\"><a href=\"#Android-Specifics\" class=\"headerlink\" title=\"Android Specifics\"></a>Android Specifics</h2><p>In Android, you cannot set text inside the navigation button. You can use the <code>icon</code> property to set an image (e.g., <code>~\\images\\nav-image.png</code> or <code>res:\\\\ic_nav</code>). You can use <code>android.systemIcon</code> to set one of the system icons available in Android.</p>\n<h1 id=\"Action-Items\"><a href=\"#Action-Items\" class=\"headerlink\" title=\"Action Items\"></a>Action Items</h1><p>You can define additional action buttons using the <code>actionItems</code> collection:</p>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/action-items-ios.png\" alt=\"action-items-ios\" title=\"action-items-ios\">\n<img src=\"../docs/img/modules/action-bar/action-items-android.png\" alt=\"action-items-android\" title=\"action-items-android\"></p>\n<h2 id=\"Positioning\"><a href=\"#Positioning\" class=\"headerlink\" title=\"Positioning\"></a>Positioning</h2><p>The following positioning options are available for iOS and Android.</p>\n<p>Android (set with <code>android.position</code>):</p>\n<ul>\n<li><code>actionBar</code>[default]: Puts the item in the ActionBar. Action item can be rendered both as text or icon.</li>\n<li><code>popup</code>: Puts the item in the options menu. Items will be rendered as text.</li>\n<li><code>actionBarIfRoom</code>: Puts the item in the ActionBar if there is room for it. Otherwise, puts it in the options menu.</li>\n</ul>\n<p>iOS (set with <code>ios.position</code>):</p>\n<ul>\n<li><code>left</code>[default]: Puts the item on the left side of the ActionBar.</li>\n<li><code>right</code>: Puts the item on the right side of the ActionBar.</li>\n</ul>\n<h2 id=\"Setting-Icons\"><a href=\"#Setting-Icons\" class=\"headerlink\" title=\"Setting Icons\"></a>Setting Icons</h2><p>You can use the <code>icon</code> property to set an image instead of text for the action item. You can use local image (e.g., <code>~/images/add.png</code>) or resource (e.g., <code>res://ic_add</code>). Because there is no way to explicitly set <code>width</code> and <code>height</code> for icons, the recommended approach is using resources.</p>\n<p>You can use the <code>android.systemIcon</code> and <code>ios.systemIcon</code> properties to show system icons. If you define a system icon, it will be used instead of <code>icon</code> and <code>text</code> properties.</p>\n<p>Values for <code>android.systemIcon</code> correspond to the resources names of the built-in Android system icons. For a full list of Android drawable names, see <a href=\"http://androiddrawables.com\">http://androiddrawables.com</a>.</p>\n<p>Values for <code>ios.systemIcon</code> are numbers from the <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBarButtonItem_Class/index.html#//apple_ref/doc/uid/TP40007519-CH3-SW2\"><code>UIBarButtonSystemItem</code></a> enumeration:</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Icon</th>\n<th></th>\n<th>Value</th>\n<th>Icon</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>Done</td>\n<td></td>\n<td>12</td>\n<td>Search</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Cancel</td>\n<td></td>\n<td>13</td>\n<td>Refresh</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Edit</td>\n<td></td>\n<td>14</td>\n<td>Stop</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Save</td>\n<td></td>\n<td>15</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Add</td>\n<td></td>\n<td>16</td>\n<td>Trash</td>\n</tr>\n<tr>\n<td>5</td>\n<td>FlexibleSpace</td>\n<td></td>\n<td>17</td>\n<td>Play</td>\n</tr>\n<tr>\n<td>6</td>\n<td>FixedSpace</td>\n<td></td>\n<td>18</td>\n<td>Pause</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Compose</td>\n<td></td>\n<td>19</td>\n<td>Rewind</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Reply</td>\n<td></td>\n<td>20</td>\n<td>FastForward</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Action</td>\n<td></td>\n<td>21</td>\n<td>Undo</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Organize</td>\n<td></td>\n<td>22</td>\n<td>Redo</td>\n</tr>\n<tr>\n<td>11</td>\n<td>Bookmarks</td>\n<td></td>\n<td>23</td>\n<td>PageCurl</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"How-To\"><a href=\"#How-To\" class=\"headerlink\" title=\"How To\"></a>How To</h1><h2 id=\"Showing-Hiding-the-ActionBar\"><a href=\"#Showing-Hiding-the-ActionBar\" class=\"headerlink\" title=\"Showing/Hiding the ActionBar\"></a>Showing/Hiding the ActionBar</h2><p>You can explicitly control the visibility of the <code>ActionBar</code> by setting the <code>actionBarHidden</code> property of the <code>Page</code>.\n<div class=\"codeblock ng\"><p>You can inject a reference to the current <code>Page</code> in the constructor of your component using the Angular DI.</p>\n</div></p>\n<p>In <strong>Android</strong>, the application bar is visible by default and shows the name of the application as title. The navigation button is visible only when it is explicitly defined in the application.</p>\n<p>In <strong>iOS</strong>, if the application bar is empty (e.g., no title or action items are defined), it is hidden on the first page and automatically shown after navigation to host the navigation button. If the ActionBar is not empty (e.g., there is a title or action items defined) it will be shown on first page, too.</p>\n<h2 id=\"Hiding-Action-Items\"><a href=\"#Hiding-Action-Items\" class=\"headerlink\" title=\"Hiding Action Items\"></a>Hiding Action Items</h2><div class=\"codeblock n\"><p>You can use the <code>visibility</code> property of the <code>ActionItem</code> to dynamically hide and show items. You can also use binding for the visibility.</p>\n<p>Here is an example of showing different action items when the app is in &quot;editing&quot; mode:</p>\nundefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>You can use the <code>*ngIf</code> directive to dynamically hide and show action items.</p>\n<p>Here is an example of showing different action items when the app is in &quot;editing&quot; mode:</p>\nundefined\nundefined\n</div>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/action-items-visibility-ios.png\" alt=\"action-items-visibility-ios\" title=\"action-items-visibility-ios\">\n<img src=\"../docs/img/modules/action-bar/action-items-visibility-android.png\" alt=\"action-items-visibility-android\" title=\"action-items-visibility-android\"></p>\n<h2 id=\"Styling\"><a href=\"#Styling\" class=\"headerlink\" title=\"Styling\"></a>Styling</h2><p>The ActionBar has some CSS styling limitations. You can use only <code>background-color</code> and <code>color</code> properties. Here is an example:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"ActionBar Style\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">NavigationButton</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Go Back\"</span> <span class=\"attr\">android.systemIcon</span>=<span class=\"string\">\"ic_menu_back\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">NavigationButton</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ActionItem</span> <span class=\"attr\">ios.systemIcon</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">android.systemIcon</span>=<span class=\"string\">\"ic_menu_edit\"</span> <span class=\"attr\">ios.position</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionItem</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ActionBar</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>:  <span class=\"number\">#3C5AFD</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/style-ios.png\" alt=\"style-ios\" title=\"style-ios\">\n<img src=\"../docs/img/modules/action-bar/style-android.png\" alt=\"style-android\" title=\"style-android\"></p>\n<p>In iOS, the <code>color</code> property affects the color of the title and the action items.\nIn Android, the <code>color</code> property affects only the title text. However, you can set the default color of the text in the action items by adding an <code>actionMenuTextColor</code> item in the Android theme (inside <code>App_Resources\\Android\\values\\styles.xml</code>).</p>\n<blockquote>\n<p>Note: Setting other CSS properties (e.g., <code>font-family</code>) will only affect the views defined inside <code>titleView</code>.</p>\n</blockquote>\n<h2 id=\"Creating-SlideDrawer-Button\"><a href=\"#Creating-SlideDrawer-Button\" class=\"headerlink\" title=\"Creating SlideDrawer Button\"></a>Creating SlideDrawer Button</h2><p>This example shows how to implement a “show side-drawer button” functionality.</p>\n<p>For Android, this example uses the <code>NavigationButton</code> because <code>ActionItems</code> are shown on the right side of the <code>ActionBar</code>.</p>\n<p>For iOS, this code adds a regular <code>ActionItem</code> with <code>position</code> set to <code>left</code>. Using the <code>NavigationButton</code> as a side-drawer button in iOS is not possible, because its function is to always navigate back in the application.</p>\n<div class=\"codeblock n\"><blockquote>\n<p>Note: The <code>&lt;android&gt;</code> and <code>&lt;ios&gt;</code> tags are used inside the XML to define platform-specific elements.</p>\n</blockquote>\n</div>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\nundefined\n</div>\n<p>The result is:</p>\n<p><img src=\"../docs/img/modules/action-bar/side-drawer-ios.png\" alt=\"side-drawer-ios\" title=\"side-drawer-ios\">\n<img src=\"../docs/img/modules/action-bar/side-drawer-android.png\" alt=\"side-drawer-android\" title=\"side-drawer-android\"></p>\n<div class=\"codeblock ng\"><h2 id=\"adding-actions-to-existing-actionbar\">Adding Actions To Existing ActionBar</h2>\n<p>Using the <code>ActionBarExtension</code> component you can add additional action items to the current <code>ActionBar</code>. This is useful if you are writing a reusable component that exposes an action (ex. &quot;save&quot;), but you don&#39;t want to override the whole <code>ActionBar</code>.</p>\n<p>Here is how to define a contextual <code>copy</code> action:</p>\nundefined\nundefined\n</div>\n"},{"title":"Animations with CSS","description":"Animate view properties by using CSS stylesheets.","slug":"animation-css","position":10,"publish":false,"_content":"\n# CSS Animations\n\nCSS animations are based on the simple and easy to use standard [CSS3 animations API](http://www.w3schools.com/css/css3_animations.asp). You can use them to animate almost every native view without even having to know JavaScript. You have the potential to alter the appearance and behavior of an element whenever a state change occurs, such as when it is touched or activated. You can use multiple frames and change the animation direction. Finally, with CSS animations, you can separate the animation code from your application logic.\n\nCSS animations consist of two components: a style describing the CSS animation and a set of keyframes that indicate the start and end states of the animation's style, as well as possible intermediate waypoints. You can change as many animatable CSS properties you want, as many times you want.\n\n__Example 1__ binds the \"example\" animation to the button element. The animation lasts 4 seconds. It will gradually change the background-color of the button element from \"red\" to \"green\".\n\n__Example 1: How to cerate simple animation using CSS.__\n\n``` CSS\n@keyframes example {\n    from { background-color: red; }\n    to { background-color: green; }\n}\n\n.view {\n    animation-name: example;\n    animation-duration: 4s;\n\tanimation-fill-mode: forwards;\n}\n```\n\nTo get an animation to work, you must bind the animation to an element:\n\n``` JavaScript\nview1.className = \"example\";\n```\n``` TypeScript\nview1.className = \"example\";\n```\n``` XML\n<Button id=\"myButton\" text=\"n\" class=\"example\"/>\n```\n\n> If the **animation-duration** property is not specified, the animation will use a default value - 0.3 seconds.\n\n## Animatable properties\n\nCSS animations support the same animatable properties used in code-based animations: \n\n- **opacity**\n- **background-color**: Corresponds with the backgroundColor.\n- **transform: translate**: Corresponds with translateX and translateY properties. \n- **transform: scale**: Corresponds with scaleX and scaleY properties.\n- **transform: rotate**: Corresponds with the rotate property.\n\n> You cannot set a single x or y field in scale and translate. If you set only x in translate, y will be assumed 0; If you set only y in scale, x will be assumed 1.\n\n## Animation properties\n\nA CSS animation is defined by using the animation property and its sub-properties. Those include timing, duration, delay and other animation properties. The actual animation appearance is defined with the @keyframes rule.\n\nThe following list presents all animation properties:\n\n- **animation-name**: Specifies the name of the @keyframes rule that should be used.\n- **animation-delay**: Specifies the time between the style is applied and the beginning of the animation.\n- **animation-duration**: The length of the animation in seconds.\n- **animation-iteration-count**: Specifies how many times the animation should be played. Default is 1. To repeat an animation forever, use infinite.\n- **animation-timing-function**: Defines how the animation transitions through keyframes by establishing acceleration curves.\n- **animation-fill-mode**: Configures what values are applied by the animation after it is executing.\n- **animation-direction**: Configures whether or not the animation should alternate direction on each run through the sequence or reset to the start point and repeat itself.\n- **animation**: The shorthand property allows setting all animation properties in a single line.\n\n## Animation keyframes\n\nTo set multiple points at which an element should undergo a transition, use the **@keyframes** rule, shown in __Example 2__. It includes the animation name, any animation breakpoints, and the properties intended to be animated. \n\n__Example 2: How to use **@keyframes** rule.__\n\n``` CSS\n@keyframes example {\n    from { background-color: red; }\n    to { background-color: green; }\n}\n```\n\n__Example 2__ defines an animation with two keyframes. The \"from\" represents 0% (the start of the animation) and \"to\" represents 100% (the final value). You can add more keyframes by using percent.\n\n__Example 3__ shows how to change the background color when the animation is 25% complete, 50% complete, and again when the animation is 100% complete.\n\n__Example 3: Changing background color in different animation stages.__\n\n``` CSS\n@keyframes example {\n    0%   { background-color: red; }\n    25%  { background-color: yellow; }\n    50%  { background-color: blue; }\n    100% { background-color: green; }\n}\n```\n\nYou can set multiple properties in a keyframe, as shown in __Example 4__.\n\n__Example 4: Changing multiple properties in different animation stages.__\n\n``` CSS\n@keyframes example {\n    0%   { background-color: red; transform: translate(0, 0); }\n    25%  { background-color: yellow; transform: translate(200, 0); }\n    50%  { background-color: blue; transform: translate(200, 200);  }\n    75%  { background-color: green; transform: translate(0, 200); }\n    100% { background-color: red; transform: translate(0, 0); }\n}\n```\n\nYou can combine keyframes, as shown in __Example 5__.\n\n__Example 5: Set up properties for several keyframes__\n\n``` CSS\n@keyframes example {\n    0%, 50% { background-color: red; transform: translate(0, 0); }\n    25%, 75% { background-color: yellow; transform: translate(200, 0); }\n    100% { background-color: red; transform: translate(0, 0); }\n}\n```\n\n## Delay an animation\n\nThe **animation-delay** property specifies a delay (in seconds) before the animation starts:\n\n__Example 6: Set up a delay before the animation starts__\n\n``` CSS\n.view {\n\tbackground-color: red;\n    animation-name: example;\n    animation-duration: 4s;\n    animation-delay: 2s;\n}\n```\n\n## Set how many times an animation should run\n\nThe **animation-iteration-count** property defines the number of times an animation should run. The animation in __Example 7__ will play two times before it stops.\n\n__Example 7: How to use `animation-iteration-count` property__\n\n``` CSS\n.view {\n\tbackground-color: red;\n   animation-name: example;\n   animation-duration: 4s;\n   animation-iteration-count: 2;\n}\n```\n\nIf you want to play an animation forever, set this property to \"infinite\".\n\n``` CSS\nanimation-iteration-count: infinite;\n```\n\n## Specify the speed curve of the animation\n\nThe **animation-timing-function** property specifies the speed curve of the animation. It can have one of the following values:\n\n- **ease**: Specifies an animation with a slow start, then fast, then end slowly (this is the default).\n- **linear**: Specifies an animation with the same speed from start to end.\n- **ease-in**: Specifies an animation with a slow start.\n- **ease-out**: Specifies an animation with a slow end.\n- **ease-in-out**: Specifies an animation with a slow start and slow end.\n- **spring**: Specifies a spring animation.\n- **cubic-bezier(n,n,n,n)**: Lets you define your own values in a cubic-bezier function, as shown in __Example 8__.\n\n__Example 8: How to specify the speed curve using cubic-bezier function.__\n\n``` CSS\n.view {\n\tanimation-name: example;\n   animation-timing-function: cubic-bezier(0.1, 0.1, 1.0, 1.0);\n}\n```\n\n## Determine the result when the animation ends\n\nThe **animation-fill-mode** property determines the element style when the animation finishes. Its default value is \"none\". In this case, all animated values will be reset to the state before the animation started. You should choose \"forwards\" in order to preserve the property values set during the animation.\n\n__Example 9: How to use **animation-fill-mode** property__\n\n``` CSS\n.view {\n\tbackground-color: red;\n    animation-name: example;\n    animation-duration: 2s;\n    animation-fill-mode: forwards;\n}\n```\n\n## Animation direction\n\nYou can use the **animation-direction** property to play a CSS animation in reverse direction, as shown in __Example 10__.\n\n__Example 10: How to reverse animation direction.__\n\n``` CSS\n.view {\n\tbackground-color: red;\n    animation-name: example;\n    animation-duration: 4s;\n    animation-direction: reverse;\n}\n```\n\n## Animation shorthand\n\nThe **animation** property allows setting all seven animation properties with a single line:\n\n__Example 11: How to use animation shorthand property__\n\n``` CSS\n.view {\n    animation: example 4s ease-in-out 2s infinite reverse forwards;\n}\n```\n\nThe supported syntax is:\n\nanimation: name duration timing-function delay iteration-count direction fill-mode;\n\nYou can combine two animations in the **animation** property by using commas:\n\n__Example 12: How to combine several animations in the **animation** property__\n\n``` CSS\n.view {\n    animation: example 4s ease-in-out 2s infinite reverse, second-animation-example 5s ease-out;\n}\n```\n\n## Pseudo selectors\n\nA pseudo selector is used to define a special state of an element. For example, when a button is touched by the user. You can use pseudo selectors to trigger animations:\n\n__Example 13: How to trigger animation on element special state__\n\n``` CSS\n.button {\n    background-color: green;\n}\n\n.button:highlighted {\n    animation-name: highlight;\n    animation-duration: 2s;\n    animation-fill-mode: forwards;\n}\n\n@keyframes highlight {\n    from { background-color: yellow; }\n    to { background-color: red; }\n}\n```\n\n> As of version 2.0, only the **Button** component has a built-in special state \"highlighted\" to indicate that it is touched by the user.\n\n## Access CSS animations from code\n\nThe simplest way to trigger a CSS animation is by changing the element **className** property:\n\n__Example 14: How to trigger CSS animation__\n\n```JavaScript\nvar view = page.getViewById(\"view\");\nview.className = \"transparent\";\n```\n```TypeScript\nlet view = page.getViewById<viewModule.View>(\"view\");\nview.className = \"transparent\";\n```\n\nAll keyframes defined in CSS can be accessed with code by using the **getKeyframeAnimationWithName** method. This allows further customization of animation properties:\n\n__Example 15: Accessing CSS defined keyframe in the code via **getKeyframeAnimationWithName** method__\n\n``` JavaScript\nvar keyframeAnimation = require(\"ui/animation/keyframe-animation\");\n\nvar view = page.getViewById(\"view\");\nvar animationInfo = page.getKeyframeAnimationWithName(\"bounce\");\nanimationInfo.duration = 2000;\nvar animation = keyframeAnimation.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);\nanimation.play(view).then(() => {\n    console.log(\"Played with code!\");\n});\n```\n``` TypeScript\nimport {KeyframeAnimation} from \"ui/animation/keyframe-animation\";\n\nlet view = page.getViewById<viewModule.View>(\"view\");\nlet animationInfo = page.getKeyframeAnimationWithName(\"bounce\");\nanimationInfo.duration = 2000;\nlet animation = KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);\nanimation.play(view).then(() => {\n    console.log(\"Played with code!\");\n});\n```\n","source":"ui/animation-css.md","raw":"---\ntitle: Animations with CSS\ndescription: Animate view properties by using CSS stylesheets.\nslug: animation-css\nposition: 10\npublish: false\n---\n\n# CSS Animations\n\nCSS animations are based on the simple and easy to use standard [CSS3 animations API](http://www.w3schools.com/css/css3_animations.asp). You can use them to animate almost every native view without even having to know JavaScript. You have the potential to alter the appearance and behavior of an element whenever a state change occurs, such as when it is touched or activated. You can use multiple frames and change the animation direction. Finally, with CSS animations, you can separate the animation code from your application logic.\n\nCSS animations consist of two components: a style describing the CSS animation and a set of keyframes that indicate the start and end states of the animation's style, as well as possible intermediate waypoints. You can change as many animatable CSS properties you want, as many times you want.\n\n__Example 1__ binds the \"example\" animation to the button element. The animation lasts 4 seconds. It will gradually change the background-color of the button element from \"red\" to \"green\".\n\n__Example 1: How to cerate simple animation using CSS.__\n\n``` CSS\n@keyframes example {\n    from { background-color: red; }\n    to { background-color: green; }\n}\n\n.view {\n    animation-name: example;\n    animation-duration: 4s;\n\tanimation-fill-mode: forwards;\n}\n```\n\nTo get an animation to work, you must bind the animation to an element:\n\n``` JavaScript\nview1.className = \"example\";\n```\n``` TypeScript\nview1.className = \"example\";\n```\n``` XML\n<Button id=\"myButton\" text=\"n\" class=\"example\"/>\n```\n\n> If the **animation-duration** property is not specified, the animation will use a default value - 0.3 seconds.\n\n## Animatable properties\n\nCSS animations support the same animatable properties used in code-based animations: \n\n- **opacity**\n- **background-color**: Corresponds with the backgroundColor.\n- **transform: translate**: Corresponds with translateX and translateY properties. \n- **transform: scale**: Corresponds with scaleX and scaleY properties.\n- **transform: rotate**: Corresponds with the rotate property.\n\n> You cannot set a single x or y field in scale and translate. If you set only x in translate, y will be assumed 0; If you set only y in scale, x will be assumed 1.\n\n## Animation properties\n\nA CSS animation is defined by using the animation property and its sub-properties. Those include timing, duration, delay and other animation properties. The actual animation appearance is defined with the @keyframes rule.\n\nThe following list presents all animation properties:\n\n- **animation-name**: Specifies the name of the @keyframes rule that should be used.\n- **animation-delay**: Specifies the time between the style is applied and the beginning of the animation.\n- **animation-duration**: The length of the animation in seconds.\n- **animation-iteration-count**: Specifies how many times the animation should be played. Default is 1. To repeat an animation forever, use infinite.\n- **animation-timing-function**: Defines how the animation transitions through keyframes by establishing acceleration curves.\n- **animation-fill-mode**: Configures what values are applied by the animation after it is executing.\n- **animation-direction**: Configures whether or not the animation should alternate direction on each run through the sequence or reset to the start point and repeat itself.\n- **animation**: The shorthand property allows setting all animation properties in a single line.\n\n## Animation keyframes\n\nTo set multiple points at which an element should undergo a transition, use the **@keyframes** rule, shown in __Example 2__. It includes the animation name, any animation breakpoints, and the properties intended to be animated. \n\n__Example 2: How to use **@keyframes** rule.__\n\n``` CSS\n@keyframes example {\n    from { background-color: red; }\n    to { background-color: green; }\n}\n```\n\n__Example 2__ defines an animation with two keyframes. The \"from\" represents 0% (the start of the animation) and \"to\" represents 100% (the final value). You can add more keyframes by using percent.\n\n__Example 3__ shows how to change the background color when the animation is 25% complete, 50% complete, and again when the animation is 100% complete.\n\n__Example 3: Changing background color in different animation stages.__\n\n``` CSS\n@keyframes example {\n    0%   { background-color: red; }\n    25%  { background-color: yellow; }\n    50%  { background-color: blue; }\n    100% { background-color: green; }\n}\n```\n\nYou can set multiple properties in a keyframe, as shown in __Example 4__.\n\n__Example 4: Changing multiple properties in different animation stages.__\n\n``` CSS\n@keyframes example {\n    0%   { background-color: red; transform: translate(0, 0); }\n    25%  { background-color: yellow; transform: translate(200, 0); }\n    50%  { background-color: blue; transform: translate(200, 200);  }\n    75%  { background-color: green; transform: translate(0, 200); }\n    100% { background-color: red; transform: translate(0, 0); }\n}\n```\n\nYou can combine keyframes, as shown in __Example 5__.\n\n__Example 5: Set up properties for several keyframes__\n\n``` CSS\n@keyframes example {\n    0%, 50% { background-color: red; transform: translate(0, 0); }\n    25%, 75% { background-color: yellow; transform: translate(200, 0); }\n    100% { background-color: red; transform: translate(0, 0); }\n}\n```\n\n## Delay an animation\n\nThe **animation-delay** property specifies a delay (in seconds) before the animation starts:\n\n__Example 6: Set up a delay before the animation starts__\n\n``` CSS\n.view {\n\tbackground-color: red;\n    animation-name: example;\n    animation-duration: 4s;\n    animation-delay: 2s;\n}\n```\n\n## Set how many times an animation should run\n\nThe **animation-iteration-count** property defines the number of times an animation should run. The animation in __Example 7__ will play two times before it stops.\n\n__Example 7: How to use `animation-iteration-count` property__\n\n``` CSS\n.view {\n\tbackground-color: red;\n   animation-name: example;\n   animation-duration: 4s;\n   animation-iteration-count: 2;\n}\n```\n\nIf you want to play an animation forever, set this property to \"infinite\".\n\n``` CSS\nanimation-iteration-count: infinite;\n```\n\n## Specify the speed curve of the animation\n\nThe **animation-timing-function** property specifies the speed curve of the animation. It can have one of the following values:\n\n- **ease**: Specifies an animation with a slow start, then fast, then end slowly (this is the default).\n- **linear**: Specifies an animation with the same speed from start to end.\n- **ease-in**: Specifies an animation with a slow start.\n- **ease-out**: Specifies an animation with a slow end.\n- **ease-in-out**: Specifies an animation with a slow start and slow end.\n- **spring**: Specifies a spring animation.\n- **cubic-bezier(n,n,n,n)**: Lets you define your own values in a cubic-bezier function, as shown in __Example 8__.\n\n__Example 8: How to specify the speed curve using cubic-bezier function.__\n\n``` CSS\n.view {\n\tanimation-name: example;\n   animation-timing-function: cubic-bezier(0.1, 0.1, 1.0, 1.0);\n}\n```\n\n## Determine the result when the animation ends\n\nThe **animation-fill-mode** property determines the element style when the animation finishes. Its default value is \"none\". In this case, all animated values will be reset to the state before the animation started. You should choose \"forwards\" in order to preserve the property values set during the animation.\n\n__Example 9: How to use **animation-fill-mode** property__\n\n``` CSS\n.view {\n\tbackground-color: red;\n    animation-name: example;\n    animation-duration: 2s;\n    animation-fill-mode: forwards;\n}\n```\n\n## Animation direction\n\nYou can use the **animation-direction** property to play a CSS animation in reverse direction, as shown in __Example 10__.\n\n__Example 10: How to reverse animation direction.__\n\n``` CSS\n.view {\n\tbackground-color: red;\n    animation-name: example;\n    animation-duration: 4s;\n    animation-direction: reverse;\n}\n```\n\n## Animation shorthand\n\nThe **animation** property allows setting all seven animation properties with a single line:\n\n__Example 11: How to use animation shorthand property__\n\n``` CSS\n.view {\n    animation: example 4s ease-in-out 2s infinite reverse forwards;\n}\n```\n\nThe supported syntax is:\n\nanimation: name duration timing-function delay iteration-count direction fill-mode;\n\nYou can combine two animations in the **animation** property by using commas:\n\n__Example 12: How to combine several animations in the **animation** property__\n\n``` CSS\n.view {\n    animation: example 4s ease-in-out 2s infinite reverse, second-animation-example 5s ease-out;\n}\n```\n\n## Pseudo selectors\n\nA pseudo selector is used to define a special state of an element. For example, when a button is touched by the user. You can use pseudo selectors to trigger animations:\n\n__Example 13: How to trigger animation on element special state__\n\n``` CSS\n.button {\n    background-color: green;\n}\n\n.button:highlighted {\n    animation-name: highlight;\n    animation-duration: 2s;\n    animation-fill-mode: forwards;\n}\n\n@keyframes highlight {\n    from { background-color: yellow; }\n    to { background-color: red; }\n}\n```\n\n> As of version 2.0, only the **Button** component has a built-in special state \"highlighted\" to indicate that it is touched by the user.\n\n## Access CSS animations from code\n\nThe simplest way to trigger a CSS animation is by changing the element **className** property:\n\n__Example 14: How to trigger CSS animation__\n\n```JavaScript\nvar view = page.getViewById(\"view\");\nview.className = \"transparent\";\n```\n```TypeScript\nlet view = page.getViewById<viewModule.View>(\"view\");\nview.className = \"transparent\";\n```\n\nAll keyframes defined in CSS can be accessed with code by using the **getKeyframeAnimationWithName** method. This allows further customization of animation properties:\n\n__Example 15: Accessing CSS defined keyframe in the code via **getKeyframeAnimationWithName** method__\n\n``` JavaScript\nvar keyframeAnimation = require(\"ui/animation/keyframe-animation\");\n\nvar view = page.getViewById(\"view\");\nvar animationInfo = page.getKeyframeAnimationWithName(\"bounce\");\nanimationInfo.duration = 2000;\nvar animation = keyframeAnimation.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);\nanimation.play(view).then(() => {\n    console.log(\"Played with code!\");\n});\n```\n``` TypeScript\nimport {KeyframeAnimation} from \"ui/animation/keyframe-animation\";\n\nlet view = page.getViewById<viewModule.View>(\"view\");\nlet animationInfo = page.getKeyframeAnimationWithName(\"bounce\");\nanimationInfo.duration = 2000;\nlet animation = KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);\nanimation.play(view).then(() => {\n    console.log(\"Played with code!\");\n});\n```\n","date":"2016-08-26T21:05:54.576Z","updated":"2016-08-26T21:05:54.576Z","path":"ui/animation-css.html","comments":1,"layout":"page","_id":"cisn95cad000uwsl07b5rxq9r","content":"<h1 id=\"CSS-Animations\"><a href=\"#CSS-Animations\" class=\"headerlink\" title=\"CSS Animations\"></a>CSS Animations</h1><p>CSS animations are based on the simple and easy to use standard <a href=\"http://www.w3schools.com/css/css3_animations.asp\" target=\"_blank\" rel=\"external\">CSS3 animations API</a>. You can use them to animate almost every native view without even having to know JavaScript. You have the potential to alter the appearance and behavior of an element whenever a state change occurs, such as when it is touched or activated. You can use multiple frames and change the animation direction. Finally, with CSS animations, you can separate the animation code from your application logic.</p>\n<p>CSS animations consist of two components: a style describing the CSS animation and a set of keyframes that indicate the start and end states of the animation’s style, as well as possible intermediate waypoints. You can change as many animatable CSS properties you want, as many times you want.</p>\n<p><strong>Example 1</strong> binds the “example” animation to the button element. The animation lasts 4 seconds. It will gradually change the background-color of the button element from “red” to “green”.</p>\n<p><strong>Example 1: How to cerate simple animation using CSS.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: green; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">4s</span>;</div><div class=\"line\">\t<span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To get an animation to work, you must bind the animation to an element:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view1.className = <span class=\"string\">\"example\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view1.className = <span class=\"string\">\"example\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myButton\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"n\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>If the <strong>animation-duration</strong> property is not specified, the animation will use a default value - 0.3 seconds.</p>\n</blockquote>\n<h2 id=\"Animatable-properties\"><a href=\"#Animatable-properties\" class=\"headerlink\" title=\"Animatable properties\"></a>Animatable properties</h2><p>CSS animations support the same animatable properties used in code-based animations: </p>\n<ul>\n<li><strong>opacity</strong></li>\n<li><strong>background-color</strong>: Corresponds with the backgroundColor.</li>\n<li><strong>transform: translate</strong>: Corresponds with translateX and translateY properties. </li>\n<li><strong>transform: scale</strong>: Corresponds with scaleX and scaleY properties.</li>\n<li><strong>transform: rotate</strong>: Corresponds with the rotate property.</li>\n</ul>\n<blockquote>\n<p>You cannot set a single x or y field in scale and translate. If you set only x in translate, y will be assumed 0; If you set only y in scale, x will be assumed 1.</p>\n</blockquote>\n<h2 id=\"Animation-properties\"><a href=\"#Animation-properties\" class=\"headerlink\" title=\"Animation properties\"></a>Animation properties</h2><p>A CSS animation is defined by using the animation property and its sub-properties. Those include timing, duration, delay and other animation properties. The actual animation appearance is defined with the @keyframes rule.</p>\n<p>The following list presents all animation properties:</p>\n<ul>\n<li><strong>animation-name</strong>: Specifies the name of the @keyframes rule that should be used.</li>\n<li><strong>animation-delay</strong>: Specifies the time between the style is applied and the beginning of the animation.</li>\n<li><strong>animation-duration</strong>: The length of the animation in seconds.</li>\n<li><strong>animation-iteration-count</strong>: Specifies how many times the animation should be played. Default is 1. To repeat an animation forever, use infinite.</li>\n<li><strong>animation-timing-function</strong>: Defines how the animation transitions through keyframes by establishing acceleration curves.</li>\n<li><strong>animation-fill-mode</strong>: Configures what values are applied by the animation after it is executing.</li>\n<li><strong>animation-direction</strong>: Configures whether or not the animation should alternate direction on each run through the sequence or reset to the start point and repeat itself.</li>\n<li><strong>animation</strong>: The shorthand property allows setting all animation properties in a single line.</li>\n</ul>\n<h2 id=\"Animation-keyframes\"><a href=\"#Animation-keyframes\" class=\"headerlink\" title=\"Animation keyframes\"></a>Animation keyframes</h2><p>To set multiple points at which an element should undergo a transition, use the <strong>@keyframes</strong> rule, shown in <strong>Example 2</strong>. It includes the animation name, any animation breakpoints, and the properties intended to be animated. </p>\n<p><strong>Example 2: How to use <strong>@keyframes</strong> rule.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: green; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Example 2</strong> defines an animation with two keyframes. The “from” represents 0% (the start of the animation) and “to” represents 100% (the final value). You can add more keyframes by using percent.</p>\n<p><strong>Example 3</strong> shows how to change the background color when the animation is 25% complete, 50% complete, and again when the animation is 100% complete.</p>\n<p><strong>Example 3: Changing background color in different animation stages.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    0%   &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">    25%  &#123; <span class=\"attribute\">background-color</span>: yellow; &#125;</div><div class=\"line\">    50%  &#123; <span class=\"attribute\">background-color</span>: blue; &#125;</div><div class=\"line\">    100% &#123; <span class=\"attribute\">background-color</span>: green; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can set multiple properties in a keyframe, as shown in <strong>Example 4</strong>.</p>\n<p><strong>Example 4: Changing multiple properties in different animation stages.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    0%   &#123; <span class=\"attribute\">background-color</span>: red; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">    25%  &#123; <span class=\"attribute\">background-color</span>: yellow; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(200, 0); &#125;</div><div class=\"line\">    50%  &#123; <span class=\"attribute\">background-color</span>: blue; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(200, 200);  &#125;</div><div class=\"line\">    75%  &#123; <span class=\"attribute\">background-color</span>: green; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 200); &#125;</div><div class=\"line\">    100% &#123; <span class=\"attribute\">background-color</span>: red; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can combine keyframes, as shown in <strong>Example 5</strong>.</p>\n<p><strong>Example 5: Set up properties for several keyframes</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    0%, 50% &#123; <span class=\"attribute\">background-color</span>: red; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">    25%, 75% &#123; <span class=\"attribute\">background-color</span>: yellow; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(200, 0); &#125;</div><div class=\"line\">    100% &#123; <span class=\"attribute\">background-color</span>: red; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Delay-an-animation\"><a href=\"#Delay-an-animation\" class=\"headerlink\" title=\"Delay an animation\"></a>Delay an animation</h2><p>The <strong>animation-delay</strong> property specifies a delay (in seconds) before the animation starts:</p>\n<p><strong>Example 6: Set up a delay before the animation starts</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">4s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-delay</span>: <span class=\"number\">2s</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Set-how-many-times-an-animation-should-run\"><a href=\"#Set-how-many-times-an-animation-should-run\" class=\"headerlink\" title=\"Set how many times an animation should run\"></a>Set how many times an animation should run</h2><p>The <strong>animation-iteration-count</strong> property defines the number of times an animation should run. The animation in <strong>Example 7</strong> will play two times before it stops.</p>\n<p><strong>Example 7: How to use <code>animation-iteration-count</code> property</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">   <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">   <span class=\"attribute\">animation-duration</span>: <span class=\"number\">4s</span>;</div><div class=\"line\">   <span class=\"attribute\">animation-iteration-count</span>: <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you want to play an animation forever, set this property to “infinite”.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">animation-iteration-count</span>: <span class=\"selector-tag\">infinite</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"Specify-the-speed-curve-of-the-animation\"><a href=\"#Specify-the-speed-curve-of-the-animation\" class=\"headerlink\" title=\"Specify the speed curve of the animation\"></a>Specify the speed curve of the animation</h2><p>The <strong>animation-timing-function</strong> property specifies the speed curve of the animation. It can have one of the following values:</p>\n<ul>\n<li><strong>ease</strong>: Specifies an animation with a slow start, then fast, then end slowly (this is the default).</li>\n<li><strong>linear</strong>: Specifies an animation with the same speed from start to end.</li>\n<li><strong>ease-in</strong>: Specifies an animation with a slow start.</li>\n<li><strong>ease-out</strong>: Specifies an animation with a slow end.</li>\n<li><strong>ease-in-out</strong>: Specifies an animation with a slow start and slow end.</li>\n<li><strong>spring</strong>: Specifies a spring animation.</li>\n<li><strong>cubic-bezier(n,n,n,n)</strong>: Lets you define your own values in a cubic-bezier function, as shown in <strong>Example 8</strong>.</li>\n</ul>\n<p><strong>Example 8: How to specify the speed curve using cubic-bezier function.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">   <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(0.1, 0.1, 1.0, 1.0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Determine-the-result-when-the-animation-ends\"><a href=\"#Determine-the-result-when-the-animation-ends\" class=\"headerlink\" title=\"Determine the result when the animation ends\"></a>Determine the result when the animation ends</h2><p>The <strong>animation-fill-mode</strong> property determines the element style when the animation finishes. Its default value is “none”. In this case, all animated values will be reset to the state before the animation started. You should choose “forwards” in order to preserve the property values set during the animation.</p>\n<p><strong>Example 9: How to use <strong>animation-fill-mode</strong> property</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">2s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animation-direction\"><a href=\"#Animation-direction\" class=\"headerlink\" title=\"Animation direction\"></a>Animation direction</h2><p>You can use the <strong>animation-direction</strong> property to play a CSS animation in reverse direction, as shown in <strong>Example 10</strong>.</p>\n<p><strong>Example 10: How to reverse animation direction.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">4s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-direction</span>: reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animation-shorthand\"><a href=\"#Animation-shorthand\" class=\"headerlink\" title=\"Animation shorthand\"></a>Animation shorthand</h2><p>The <strong>animation</strong> property allows setting all seven animation properties with a single line:</p>\n<p><strong>Example 11: How to use animation shorthand property</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation</span>: example <span class=\"number\">4s</span> ease-in-out <span class=\"number\">2s</span> infinite reverse forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The supported syntax is:</p>\n<p>animation: name duration timing-function delay iteration-count direction fill-mode;</p>\n<p>You can combine two animations in the <strong>animation</strong> property by using commas:</p>\n<p><strong>Example 12: How to combine several animations in the <strong>animation</strong> property</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation</span>: example <span class=\"number\">4s</span> ease-in-out <span class=\"number\">2s</span> infinite reverse, second-animation-example <span class=\"number\">5s</span> ease-out;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Pseudo-selectors\"><a href=\"#Pseudo-selectors\" class=\"headerlink\" title=\"Pseudo selectors\"></a>Pseudo selectors</h2><p>A pseudo selector is used to define a special state of an element. For example, when a button is touched by the user. You can use pseudo selectors to trigger animations:</p>\n<p><strong>Example 13: How to trigger animation on element special state</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.button</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:highlighted</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: highlight;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">2s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">keyframes</span> highlight &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: yellow; &#125;</div><div class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>As of version 2.0, only the <strong>Button</strong> component has a built-in special state “highlighted” to indicate that it is touched by the user.</p>\n</blockquote>\n<h2 id=\"Access-CSS-animations-from-code\"><a href=\"#Access-CSS-animations-from-code\" class=\"headerlink\" title=\"Access CSS animations from code\"></a>Access CSS animations from code</h2><p>The simplest way to trigger a CSS animation is by changing the element <strong>className</strong> property:</p>\n<p><strong>Example 14: How to trigger CSS animation</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = page.getViewById(<span class=\"string\">\"view\"</span>);</div><div class=\"line\">view.className = <span class=\"string\">\"transparent\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> view = page.getViewById&lt;viewModule.View&gt;(<span class=\"string\">\"view\"</span>);</div><div class=\"line\">view.className = <span class=\"string\">\"transparent\"</span>;</div></pre></td></tr></table></figure>\n<p>All keyframes defined in CSS can be accessed with code by using the <strong>getKeyframeAnimationWithName</strong> method. This allows further customization of animation properties:</p>\n<p><strong>Example 15: Accessing CSS defined keyframe in the code via <strong>getKeyframeAnimationWithName</strong> method</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> keyframeAnimation = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/animation/keyframe-animation\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> view = page.getViewById(<span class=\"string\">\"view\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> animationInfo = page.getKeyframeAnimationWithName(<span class=\"string\">\"bounce\"</span>);</div><div class=\"line\">animationInfo.duration = <span class=\"number\">2000</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> animation = keyframeAnimation.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);</div><div class=\"line\">animation.play(view).then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Played with code!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;KeyframeAnimation&#125; from <span class=\"string\">\"ui/animation/keyframe-animation\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> view = page.getViewById&lt;viewModule.View&gt;(<span class=\"string\">\"view\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> animationInfo = page.getKeyframeAnimationWithName(<span class=\"string\">\"bounce\"</span>);</div><div class=\"line\">animationInfo.duration = <span class=\"number\">2000</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> animation = KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);</div><div class=\"line\">animation.play(view).then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Played with code!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"CSS-Animations\"><a href=\"#CSS-Animations\" class=\"headerlink\" title=\"CSS Animations\"></a>CSS Animations</h1><p>CSS animations are based on the simple and easy to use standard <a href=\"http://www.w3schools.com/css/css3_animations.asp\">CSS3 animations API</a>. You can use them to animate almost every native view without even having to know JavaScript. You have the potential to alter the appearance and behavior of an element whenever a state change occurs, such as when it is touched or activated. You can use multiple frames and change the animation direction. Finally, with CSS animations, you can separate the animation code from your application logic.</p>\n<p>CSS animations consist of two components: a style describing the CSS animation and a set of keyframes that indicate the start and end states of the animation’s style, as well as possible intermediate waypoints. You can change as many animatable CSS properties you want, as many times you want.</p>\n<p><strong>Example 1</strong> binds the “example” animation to the button element. The animation lasts 4 seconds. It will gradually change the background-color of the button element from “red” to “green”.</p>\n<p><strong>Example 1: How to cerate simple animation using CSS.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: green; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">4s</span>;</div><div class=\"line\">\t<span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To get an animation to work, you must bind the animation to an element:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view1.className = <span class=\"string\">\"example\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view1.className = <span class=\"string\">\"example\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myButton\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"n\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>If the <strong>animation-duration</strong> property is not specified, the animation will use a default value - 0.3 seconds.</p>\n</blockquote>\n<h2 id=\"Animatable-properties\"><a href=\"#Animatable-properties\" class=\"headerlink\" title=\"Animatable properties\"></a>Animatable properties</h2><p>CSS animations support the same animatable properties used in code-based animations: </p>\n<ul>\n<li><strong>opacity</strong></li>\n<li><strong>background-color</strong>: Corresponds with the backgroundColor.</li>\n<li><strong>transform: translate</strong>: Corresponds with translateX and translateY properties. </li>\n<li><strong>transform: scale</strong>: Corresponds with scaleX and scaleY properties.</li>\n<li><strong>transform: rotate</strong>: Corresponds with the rotate property.</li>\n</ul>\n<blockquote>\n<p>You cannot set a single x or y field in scale and translate. If you set only x in translate, y will be assumed 0; If you set only y in scale, x will be assumed 1.</p>\n</blockquote>\n<h2 id=\"Animation-properties\"><a href=\"#Animation-properties\" class=\"headerlink\" title=\"Animation properties\"></a>Animation properties</h2><p>A CSS animation is defined by using the animation property and its sub-properties. Those include timing, duration, delay and other animation properties. The actual animation appearance is defined with the @keyframes rule.</p>\n<p>The following list presents all animation properties:</p>\n<ul>\n<li><strong>animation-name</strong>: Specifies the name of the @keyframes rule that should be used.</li>\n<li><strong>animation-delay</strong>: Specifies the time between the style is applied and the beginning of the animation.</li>\n<li><strong>animation-duration</strong>: The length of the animation in seconds.</li>\n<li><strong>animation-iteration-count</strong>: Specifies how many times the animation should be played. Default is 1. To repeat an animation forever, use infinite.</li>\n<li><strong>animation-timing-function</strong>: Defines how the animation transitions through keyframes by establishing acceleration curves.</li>\n<li><strong>animation-fill-mode</strong>: Configures what values are applied by the animation after it is executing.</li>\n<li><strong>animation-direction</strong>: Configures whether or not the animation should alternate direction on each run through the sequence or reset to the start point and repeat itself.</li>\n<li><strong>animation</strong>: The shorthand property allows setting all animation properties in a single line.</li>\n</ul>\n<h2 id=\"Animation-keyframes\"><a href=\"#Animation-keyframes\" class=\"headerlink\" title=\"Animation keyframes\"></a>Animation keyframes</h2><p>To set multiple points at which an element should undergo a transition, use the <strong>@keyframes</strong> rule, shown in <strong>Example 2</strong>. It includes the animation name, any animation breakpoints, and the properties intended to be animated. </p>\n<p><strong>Example 2: How to use <strong>@keyframes</strong> rule.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: green; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Example 2</strong> defines an animation with two keyframes. The “from” represents 0% (the start of the animation) and “to” represents 100% (the final value). You can add more keyframes by using percent.</p>\n<p><strong>Example 3</strong> shows how to change the background color when the animation is 25% complete, 50% complete, and again when the animation is 100% complete.</p>\n<p><strong>Example 3: Changing background color in different animation stages.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    0%   &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">    25%  &#123; <span class=\"attribute\">background-color</span>: yellow; &#125;</div><div class=\"line\">    50%  &#123; <span class=\"attribute\">background-color</span>: blue; &#125;</div><div class=\"line\">    100% &#123; <span class=\"attribute\">background-color</span>: green; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can set multiple properties in a keyframe, as shown in <strong>Example 4</strong>.</p>\n<p><strong>Example 4: Changing multiple properties in different animation stages.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    0%   &#123; <span class=\"attribute\">background-color</span>: red; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">    25%  &#123; <span class=\"attribute\">background-color</span>: yellow; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(200, 0); &#125;</div><div class=\"line\">    50%  &#123; <span class=\"attribute\">background-color</span>: blue; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(200, 200);  &#125;</div><div class=\"line\">    75%  &#123; <span class=\"attribute\">background-color</span>: green; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 200); &#125;</div><div class=\"line\">    100% &#123; <span class=\"attribute\">background-color</span>: red; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can combine keyframes, as shown in <strong>Example 5</strong>.</p>\n<p><strong>Example 5: Set up properties for several keyframes</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    0%, 50% &#123; <span class=\"attribute\">background-color</span>: red; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">    25%, 75% &#123; <span class=\"attribute\">background-color</span>: yellow; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(200, 0); &#125;</div><div class=\"line\">    100% &#123; <span class=\"attribute\">background-color</span>: red; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Delay-an-animation\"><a href=\"#Delay-an-animation\" class=\"headerlink\" title=\"Delay an animation\"></a>Delay an animation</h2><p>The <strong>animation-delay</strong> property specifies a delay (in seconds) before the animation starts:</p>\n<p><strong>Example 6: Set up a delay before the animation starts</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">4s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-delay</span>: <span class=\"number\">2s</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Set-how-many-times-an-animation-should-run\"><a href=\"#Set-how-many-times-an-animation-should-run\" class=\"headerlink\" title=\"Set how many times an animation should run\"></a>Set how many times an animation should run</h2><p>The <strong>animation-iteration-count</strong> property defines the number of times an animation should run. The animation in <strong>Example 7</strong> will play two times before it stops.</p>\n<p><strong>Example 7: How to use <code>animation-iteration-count</code> property</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">   <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">   <span class=\"attribute\">animation-duration</span>: <span class=\"number\">4s</span>;</div><div class=\"line\">   <span class=\"attribute\">animation-iteration-count</span>: <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you want to play an animation forever, set this property to “infinite”.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">animation-iteration-count</span>: <span class=\"selector-tag\">infinite</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"Specify-the-speed-curve-of-the-animation\"><a href=\"#Specify-the-speed-curve-of-the-animation\" class=\"headerlink\" title=\"Specify the speed curve of the animation\"></a>Specify the speed curve of the animation</h2><p>The <strong>animation-timing-function</strong> property specifies the speed curve of the animation. It can have one of the following values:</p>\n<ul>\n<li><strong>ease</strong>: Specifies an animation with a slow start, then fast, then end slowly (this is the default).</li>\n<li><strong>linear</strong>: Specifies an animation with the same speed from start to end.</li>\n<li><strong>ease-in</strong>: Specifies an animation with a slow start.</li>\n<li><strong>ease-out</strong>: Specifies an animation with a slow end.</li>\n<li><strong>ease-in-out</strong>: Specifies an animation with a slow start and slow end.</li>\n<li><strong>spring</strong>: Specifies a spring animation.</li>\n<li><strong>cubic-bezier(n,n,n,n)</strong>: Lets you define your own values in a cubic-bezier function, as shown in <strong>Example 8</strong>.</li>\n</ul>\n<p><strong>Example 8: How to specify the speed curve using cubic-bezier function.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">   <span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubic-bezier</span>(0.1, 0.1, 1.0, 1.0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Determine-the-result-when-the-animation-ends\"><a href=\"#Determine-the-result-when-the-animation-ends\" class=\"headerlink\" title=\"Determine the result when the animation ends\"></a>Determine the result when the animation ends</h2><p>The <strong>animation-fill-mode</strong> property determines the element style when the animation finishes. Its default value is “none”. In this case, all animated values will be reset to the state before the animation started. You should choose “forwards” in order to preserve the property values set during the animation.</p>\n<p><strong>Example 9: How to use <strong>animation-fill-mode</strong> property</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">2s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animation-direction\"><a href=\"#Animation-direction\" class=\"headerlink\" title=\"Animation direction\"></a>Animation direction</h2><p>You can use the <strong>animation-direction</strong> property to play a CSS animation in reverse direction, as shown in <strong>Example 10</strong>.</p>\n<p><strong>Example 10: How to reverse animation direction.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">4s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-direction</span>: reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animation-shorthand\"><a href=\"#Animation-shorthand\" class=\"headerlink\" title=\"Animation shorthand\"></a>Animation shorthand</h2><p>The <strong>animation</strong> property allows setting all seven animation properties with a single line:</p>\n<p><strong>Example 11: How to use animation shorthand property</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation</span>: example <span class=\"number\">4s</span> ease-in-out <span class=\"number\">2s</span> infinite reverse forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The supported syntax is:</p>\n<p>animation: name duration timing-function delay iteration-count direction fill-mode;</p>\n<p>You can combine two animations in the <strong>animation</strong> property by using commas:</p>\n<p><strong>Example 12: How to combine several animations in the <strong>animation</strong> property</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation</span>: example <span class=\"number\">4s</span> ease-in-out <span class=\"number\">2s</span> infinite reverse, second-animation-example <span class=\"number\">5s</span> ease-out;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Pseudo-selectors\"><a href=\"#Pseudo-selectors\" class=\"headerlink\" title=\"Pseudo selectors\"></a>Pseudo selectors</h2><p>A pseudo selector is used to define a special state of an element. For example, when a button is touched by the user. You can use pseudo selectors to trigger animations:</p>\n<p><strong>Example 13: How to trigger animation on element special state</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.button</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:highlighted</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: highlight;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">2s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">keyframes</span> highlight &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: yellow; &#125;</div><div class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>As of version 2.0, only the <strong>Button</strong> component has a built-in special state “highlighted” to indicate that it is touched by the user.</p>\n</blockquote>\n<h2 id=\"Access-CSS-animations-from-code\"><a href=\"#Access-CSS-animations-from-code\" class=\"headerlink\" title=\"Access CSS animations from code\"></a>Access CSS animations from code</h2><p>The simplest way to trigger a CSS animation is by changing the element <strong>className</strong> property:</p>\n<p><strong>Example 14: How to trigger CSS animation</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = page.getViewById(<span class=\"string\">\"view\"</span>);</div><div class=\"line\">view.className = <span class=\"string\">\"transparent\"</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> view = page.getViewById&lt;viewModule.View&gt;(<span class=\"string\">\"view\"</span>);</div><div class=\"line\">view.className = <span class=\"string\">\"transparent\"</span>;</div></pre></td></tr></table></figure>\n<p>All keyframes defined in CSS can be accessed with code by using the <strong>getKeyframeAnimationWithName</strong> method. This allows further customization of animation properties:</p>\n<p><strong>Example 15: Accessing CSS defined keyframe in the code via <strong>getKeyframeAnimationWithName</strong> method</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> keyframeAnimation = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/animation/keyframe-animation\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> view = page.getViewById(<span class=\"string\">\"view\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> animationInfo = page.getKeyframeAnimationWithName(<span class=\"string\">\"bounce\"</span>);</div><div class=\"line\">animationInfo.duration = <span class=\"number\">2000</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> animation = keyframeAnimation.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);</div><div class=\"line\">animation.play(view).then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Played with code!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;KeyframeAnimation&#125; from <span class=\"string\">\"ui/animation/keyframe-animation\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> view = page.getViewById&lt;viewModule.View&gt;(<span class=\"string\">\"view\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> animationInfo = page.getKeyframeAnimationWithName(<span class=\"string\">\"bounce\"</span>);</div><div class=\"line\">animationInfo.duration = <span class=\"number\">2000</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> animation = KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);</div><div class=\"line\">animation.play(view).then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Played with code!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"Animations with Code","description":"Animated view properties by using code.","slug":"animations-code","position":11,"publish":false,"_content":"\n# Animations with code\n\nThe easiest way to animate a **single** [`View`](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html) is by using the `View.animate` method which accepts an [`AnimationDefinition`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html), immediately starts the animation and then returns its finished promise.\n\n__Example 20: How to execute animation on single view.__\n\n``` JavaScript\nview.animate({\n    translate: { x: 0, y: 100},    \n    duration: 1000,\n    curve: enums.AnimationCurve.easeIn\n});\n```\n``` TypeScript\nview.animate({\n    translate: { x: 0, y: 100},    \n    duration: 1000,\n    curve: enums.AnimationCurve.easeIn\n});\n```\n\n> You should create an [`Animation`](http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html) class in order to be able to **cancel** the animation. This is demonstrated below.\n\n## The AnimationDefinition interface\n\nThe [`AnimationDefinition`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html) interface is central for defining an animation for **one or more properties** of a **single** [`View`](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html). The animatable properties are:\n\n - **opacity**\n - **backgroundColor**\n - **translateX** and **translateY**\n - **scaleX** and **scaleY**\n - **rotate**\n\nThe [`AnimationDefinition`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html) interface has the following members:\n\n - **target**: The view whose property is to be animated.\n - **opacity**: Animates the opacity of the view. Value should be a number between 0.0 and 1.0.\n - **backgroundColor**: Animates the backgroundColor of the view.\n - **translate**: Animates the translate affine transform of the view. Value should be a [`Pair`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.pair.html).\n - **scale**: Animates the scale affine transform of the view. Value should be a [`Pair`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.pair.html).\n - **rotate**: Animates the rotate affine transform of the view. Value should be a number specifying the rotation amount in degrees.\n - **duration**: The length of the animation in milliseconds. The default duration is 300 milliseconds.\n - **delay**: The amount of time, in milliseconds, to delay starting the animation.\n - **iterations**: Specifies how many times the animation should be played. Default is 1. iOS animations support fractional iterations, i.e., 1.5. To repeat an animation infinitely, use `Number.POSITIVE_INFINITY`.\n - **curve**: An optional animation curve. Possible values are contained in the [AnimationCurve enumeration](http://docs.nativescript.org/api-reference/modules/_ui_enums_.animationcurve.html). Alternatively, you can pass an instance of type [`UIViewAnimationCurve`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/c/tdef/UIViewAnimationCurve) for iOS or [`android.animation.TimeInterpolator`](http://developer.android.com/reference/android/animation/TimeInterpolator.html) for Android.\n\n All members of the interface are **optional** and have default values with the following exceptions:\n \n - target is only optional when calling the `animate` method of a [`View`](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html) instance since it is set automatically for you.\n - You must specify at least one property from this list: opacity, backgroundColor, scale, rotate or translate.\n\n## The Animation class\n\nThe [`Animation`](http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html) class represents a **set** of one or more [`AnimationDefinitions`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html) that can be played either **simultaneously or sequentially**. **This class is typically used when you need to animate several views together**. The constructor of the  [`Animation`](http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html) class accepts an array of [`AnimationDefinitions`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html) and a boolean parameter indicating whether to play the animations sequentially. Creating an instance of the [`Animation`](http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html) class does not start the animation playback. The class has four members:\n\n - **play**: A method that starts the animation and returns the instance it was called on for fluent animation chaining.\n - **cancel**: A void method that stops the animation.\n - **finished**: A promise that will be resolved when the animation finishes or rejected when the animation is cancelled or stops for another reason.\n - **isPlaying**: A boolean property returning __True__ if the animation is currently playing.\n\n## Animating multiple properties\n\nIt is easy to animate multiple properties at once; just pass the desired animatable properties and the corresponding values when calling the animate function.\n\n__Example 21: How to animate multiple properties.__\n\n``` JavaScript\nview.animate({\n    backgroundColor: new color.Color(\"#3D5AFE\"),\n    opacity: 0.5,\n    translate: { x: 100, y: 100 },\n    rotate: 180,\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    backgroundColor: new color.Color(\"#3D5AFE\"),\n    opacity: 0.5,\n    translate: {x: 100, y: 100},\n    rotate: 180,\n    duration: 3000\n});\n```\n\n![multiple-properties](../docs/img/modules/animation/multiple-properties.gif \"Multiple Properties\")\n\n## Chaining animations with promises\n\nThe animate method returns a promise that you can use to chain animations, as shown in __Example 21__. \n\n__Example 22: How to create chain animations.__\n\n``` JavaScript\nview.animate({ opacity: 0 })\n    .then(function () { return view.animate({ opacity: 1 }); })\n    .then(function () { return view.animate({ translate: { x: 100, y: 100 } }); })\n    .then(function () { return view.animate({ translate: { x: 0, y: 0 } }); })\n    .then(function () { return view.animate({ scale: { x: 3, y: 3 } }); })\n    .then(function () { return view.animate({ scale: { x: 1, y: 1 } }); })\n    .then(function () { return view.animate({ rotate: 180 }); })\n    .then(function () { return view.animate({ rotate: 0 }); })\n    .then(function () {\n    console.log(\"Animation finished\");\n})\n    .catch(function (e) {\n    console.log(e.message);\n});\n```\n``` TypeScript\nview.animate({ opacity: 0 })\n    .then(() => view.animate({ opacity: 1 }))\n    .then(() => view.animate({ translate: { x: 100, y: 100 } }))\n    .then(() => view.animate({ translate: { x: 0, y: 0 } }))\n    .then(() => view.animate({ scale: { x: 3, y: 3 } }))\n    .then(() => view.animate({ scale: { x: 1, y: 1 } }))\n    .then(() => view.animate({ rotate: 180 }))\n    .then(() => view.animate({ rotate: 0 }))\n    .then(() => {\n    console.log(\"Animation finished\");\n  })\n    .catch((e) => {\n    console.log(e.message);\n  });\n```\n\n![chaining-with-promises](../docs/img/modules/animation/chaining-with-promises.gif \"Chaining with Promises\")\n","source":"ui/animation-code.md","raw":"---\ntitle: Animations with Code\ndescription: Animated view properties by using code.\nslug: animations-code\nposition: 11\npublish: false\n---\n\n# Animations with code\n\nThe easiest way to animate a **single** [`View`](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html) is by using the `View.animate` method which accepts an [`AnimationDefinition`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html), immediately starts the animation and then returns its finished promise.\n\n__Example 20: How to execute animation on single view.__\n\n``` JavaScript\nview.animate({\n    translate: { x: 0, y: 100},    \n    duration: 1000,\n    curve: enums.AnimationCurve.easeIn\n});\n```\n``` TypeScript\nview.animate({\n    translate: { x: 0, y: 100},    \n    duration: 1000,\n    curve: enums.AnimationCurve.easeIn\n});\n```\n\n> You should create an [`Animation`](http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html) class in order to be able to **cancel** the animation. This is demonstrated below.\n\n## The AnimationDefinition interface\n\nThe [`AnimationDefinition`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html) interface is central for defining an animation for **one or more properties** of a **single** [`View`](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html). The animatable properties are:\n\n - **opacity**\n - **backgroundColor**\n - **translateX** and **translateY**\n - **scaleX** and **scaleY**\n - **rotate**\n\nThe [`AnimationDefinition`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html) interface has the following members:\n\n - **target**: The view whose property is to be animated.\n - **opacity**: Animates the opacity of the view. Value should be a number between 0.0 and 1.0.\n - **backgroundColor**: Animates the backgroundColor of the view.\n - **translate**: Animates the translate affine transform of the view. Value should be a [`Pair`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.pair.html).\n - **scale**: Animates the scale affine transform of the view. Value should be a [`Pair`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.pair.html).\n - **rotate**: Animates the rotate affine transform of the view. Value should be a number specifying the rotation amount in degrees.\n - **duration**: The length of the animation in milliseconds. The default duration is 300 milliseconds.\n - **delay**: The amount of time, in milliseconds, to delay starting the animation.\n - **iterations**: Specifies how many times the animation should be played. Default is 1. iOS animations support fractional iterations, i.e., 1.5. To repeat an animation infinitely, use `Number.POSITIVE_INFINITY`.\n - **curve**: An optional animation curve. Possible values are contained in the [AnimationCurve enumeration](http://docs.nativescript.org/api-reference/modules/_ui_enums_.animationcurve.html). Alternatively, you can pass an instance of type [`UIViewAnimationCurve`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/c/tdef/UIViewAnimationCurve) for iOS or [`android.animation.TimeInterpolator`](http://developer.android.com/reference/android/animation/TimeInterpolator.html) for Android.\n\n All members of the interface are **optional** and have default values with the following exceptions:\n \n - target is only optional when calling the `animate` method of a [`View`](http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html) instance since it is set automatically for you.\n - You must specify at least one property from this list: opacity, backgroundColor, scale, rotate or translate.\n\n## The Animation class\n\nThe [`Animation`](http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html) class represents a **set** of one or more [`AnimationDefinitions`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html) that can be played either **simultaneously or sequentially**. **This class is typically used when you need to animate several views together**. The constructor of the  [`Animation`](http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html) class accepts an array of [`AnimationDefinitions`](http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html) and a boolean parameter indicating whether to play the animations sequentially. Creating an instance of the [`Animation`](http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html) class does not start the animation playback. The class has four members:\n\n - **play**: A method that starts the animation and returns the instance it was called on for fluent animation chaining.\n - **cancel**: A void method that stops the animation.\n - **finished**: A promise that will be resolved when the animation finishes or rejected when the animation is cancelled or stops for another reason.\n - **isPlaying**: A boolean property returning __True__ if the animation is currently playing.\n\n## Animating multiple properties\n\nIt is easy to animate multiple properties at once; just pass the desired animatable properties and the corresponding values when calling the animate function.\n\n__Example 21: How to animate multiple properties.__\n\n``` JavaScript\nview.animate({\n    backgroundColor: new color.Color(\"#3D5AFE\"),\n    opacity: 0.5,\n    translate: { x: 100, y: 100 },\n    rotate: 180,\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    backgroundColor: new color.Color(\"#3D5AFE\"),\n    opacity: 0.5,\n    translate: {x: 100, y: 100},\n    rotate: 180,\n    duration: 3000\n});\n```\n\n![multiple-properties](../docs/img/modules/animation/multiple-properties.gif \"Multiple Properties\")\n\n## Chaining animations with promises\n\nThe animate method returns a promise that you can use to chain animations, as shown in __Example 21__. \n\n__Example 22: How to create chain animations.__\n\n``` JavaScript\nview.animate({ opacity: 0 })\n    .then(function () { return view.animate({ opacity: 1 }); })\n    .then(function () { return view.animate({ translate: { x: 100, y: 100 } }); })\n    .then(function () { return view.animate({ translate: { x: 0, y: 0 } }); })\n    .then(function () { return view.animate({ scale: { x: 3, y: 3 } }); })\n    .then(function () { return view.animate({ scale: { x: 1, y: 1 } }); })\n    .then(function () { return view.animate({ rotate: 180 }); })\n    .then(function () { return view.animate({ rotate: 0 }); })\n    .then(function () {\n    console.log(\"Animation finished\");\n})\n    .catch(function (e) {\n    console.log(e.message);\n});\n```\n``` TypeScript\nview.animate({ opacity: 0 })\n    .then(() => view.animate({ opacity: 1 }))\n    .then(() => view.animate({ translate: { x: 100, y: 100 } }))\n    .then(() => view.animate({ translate: { x: 0, y: 0 } }))\n    .then(() => view.animate({ scale: { x: 3, y: 3 } }))\n    .then(() => view.animate({ scale: { x: 1, y: 1 } }))\n    .then(() => view.animate({ rotate: 180 }))\n    .then(() => view.animate({ rotate: 0 }))\n    .then(() => {\n    console.log(\"Animation finished\");\n  })\n    .catch((e) => {\n    console.log(e.message);\n  });\n```\n\n![chaining-with-promises](../docs/img/modules/animation/chaining-with-promises.gif \"Chaining with Promises\")\n","date":"2016-08-26T21:05:54.569Z","updated":"2016-08-26T21:05:54.569Z","path":"ui/animation-code.html","comments":1,"layout":"page","_id":"cisn95caf000vwsl0vbpjbdsf","content":"<h1 id=\"Animations-with-code\"><a href=\"#Animations-with-code\" class=\"headerlink\" title=\"Animations with code\"></a>Animations with code</h1><p>The easiest way to animate a <strong>single</strong> <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\"><code>View</code></a> is by using the <code>View.animate</code> method which accepts an <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinition</code></a>, immediately starts the animation and then returns its finished promise.</p>\n<p><strong>Example 20: How to execute animation on single view.</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span>&#125;,    </div><div class=\"line\">    duration: <span class=\"number\">1000</span>,</div><div class=\"line\">    curve: enums.AnimationCurve.easeIn</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span>&#125;,    </div><div class=\"line\">    duration: <span class=\"number\">1000</span>,</div><div class=\"line\">    curve: enums.AnimationCurve.easeIn</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>You should create an <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html\"><code>Animation</code></a> class in order to be able to <strong>cancel</strong> the animation. This is demonstrated below.</p>\n</blockquote>\n<h2 id=\"The-AnimationDefinition-interface\"><a href=\"#The-AnimationDefinition-interface\" class=\"headerlink\" title=\"The AnimationDefinition interface\"></a>The AnimationDefinition interface</h2><p>The <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinition</code></a> interface is central for defining an animation for <strong>one or more properties</strong> of a <strong>single</strong> <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\"><code>View</code></a>. The animatable properties are:</p>\n<ul>\n<li><strong>opacity</strong></li>\n<li><strong>backgroundColor</strong></li>\n<li><strong>translateX</strong> and <strong>translateY</strong></li>\n<li><strong>scaleX</strong> and <strong>scaleY</strong></li>\n<li><strong>rotate</strong></li>\n</ul>\n<p>The <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinition</code></a> interface has the following members:</p>\n<ul>\n<li><strong>target</strong>: The view whose property is to be animated.</li>\n<li><strong>opacity</strong>: Animates the opacity of the view. Value should be a number between 0.0 and 1.0.</li>\n<li><strong>backgroundColor</strong>: Animates the backgroundColor of the view.</li>\n<li><strong>translate</strong>: Animates the translate affine transform of the view. Value should be a <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.pair.html\"><code>Pair</code></a>.</li>\n<li><strong>scale</strong>: Animates the scale affine transform of the view. Value should be a <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.pair.html\"><code>Pair</code></a>.</li>\n<li><strong>rotate</strong>: Animates the rotate affine transform of the view. Value should be a number specifying the rotation amount in degrees.</li>\n<li><strong>duration</strong>: The length of the animation in milliseconds. The default duration is 300 milliseconds.</li>\n<li><strong>delay</strong>: The amount of time, in milliseconds, to delay starting the animation.</li>\n<li><strong>iterations</strong>: Specifies how many times the animation should be played. Default is 1. iOS animations support fractional iterations, i.e., 1.5. To repeat an animation infinitely, use <code>Number.POSITIVE_INFINITY</code>.</li>\n<li><p><strong>curve</strong>: An optional animation curve. Possible values are contained in the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.animationcurve.html\">AnimationCurve enumeration</a>. Alternatively, you can pass an instance of type <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/c/tdef/UIViewAnimationCurve\" target=\"_blank\" rel=\"external\"><code>UIViewAnimationCurve</code></a> for iOS or <a href=\"http://developer.android.com/reference/android/animation/TimeInterpolator.html\" target=\"_blank\" rel=\"external\"><code>android.animation.TimeInterpolator</code></a> for Android.</p>\n<p>All members of the interface are <strong>optional</strong> and have default values with the following exceptions:</p>\n</li>\n<li><p>target is only optional when calling the <code>animate</code> method of a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\"><code>View</code></a> instance since it is set automatically for you.</p>\n</li>\n<li>You must specify at least one property from this list: opacity, backgroundColor, scale, rotate or translate.</li>\n</ul>\n<h2 id=\"The-Animation-class\"><a href=\"#The-Animation-class\" class=\"headerlink\" title=\"The Animation class\"></a>The Animation class</h2><p>The <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html\"><code>Animation</code></a> class represents a <strong>set</strong> of one or more <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinitions</code></a> that can be played either <strong>simultaneously or sequentially</strong>. <strong>This class is typically used when you need to animate several views together</strong>. The constructor of the  <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html\"><code>Animation</code></a> class accepts an array of <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinitions</code></a> and a boolean parameter indicating whether to play the animations sequentially. Creating an instance of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html\"><code>Animation</code></a> class does not start the animation playback. The class has four members:</p>\n<ul>\n<li><strong>play</strong>: A method that starts the animation and returns the instance it was called on for fluent animation chaining.</li>\n<li><strong>cancel</strong>: A void method that stops the animation.</li>\n<li><strong>finished</strong>: A promise that will be resolved when the animation finishes or rejected when the animation is cancelled or stops for another reason.</li>\n<li><strong>isPlaying</strong>: A boolean property returning <strong>True</strong> if the animation is currently playing.</li>\n</ul>\n<h2 id=\"Animating-multiple-properties\"><a href=\"#Animating-multiple-properties\" class=\"headerlink\" title=\"Animating multiple properties\"></a>Animating multiple properties</h2><p>It is easy to animate multiple properties at once; just pass the desired animatable properties and the corresponding values when calling the animate function.</p>\n<p><strong>Example 21: How to animate multiple properties.</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    backgroundColor: <span class=\"keyword\">new</span> color.Color(<span class=\"string\">\"#3D5AFE\"</span>),</div><div class=\"line\">    opacity: <span class=\"number\">0.5</span>,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span> &#125;,</div><div class=\"line\">    rotate: <span class=\"number\">180</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    backgroundColor: <span class=\"keyword\">new</span> color.Color(<span class=\"string\">\"#3D5AFE\"</span>),</div><div class=\"line\">    opacity: <span class=\"number\">0.5</span>,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>&#125;,</div><div class=\"line\">    rotate: <span class=\"number\">180</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"../docs/img/modules/animation/multiple-properties.gif\" alt=\"multiple-properties\" title=\"Multiple Properties\"></p>\n<h2 id=\"Chaining-animations-with-promises\"><a href=\"#Chaining-animations-with-promises\" class=\"headerlink\" title=\"Chaining animations with promises\"></a>Chaining animations with promises</h2><p>The animate method returns a promise that you can use to chain animations, as shown in <strong>Example 21</strong>. </p>\n<p><strong>Example 22: How to create chain animations.</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123; opacity: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; opacity: <span class=\"number\">1</span> &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span> &#125; &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125; &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; scale: &#123; x: <span class=\"number\">3</span>, y: <span class=\"number\">3</span> &#125; &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; scale: &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">1</span> &#125; &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; rotate: <span class=\"number\">180</span> &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; rotate: <span class=\"number\">0</span> &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123; opacity: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; opacity: <span class=\"number\">1</span> &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span> &#125; &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125; &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; scale: &#123; x: <span class=\"number\">3</span>, y: <span class=\"number\">3</span> &#125; &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; scale: &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">1</span> &#125; &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; rotate: <span class=\"number\">180</span> &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; rotate: <span class=\"number\">0</span> &#125;))</div><div class=\"line\">    .then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">    .catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"../docs/img/modules/animation/chaining-with-promises.gif\" alt=\"chaining-with-promises\" title=\"Chaining with Promises\"></p>\n","excerpt":"","more":"<h1 id=\"Animations-with-code\"><a href=\"#Animations-with-code\" class=\"headerlink\" title=\"Animations with code\"></a>Animations with code</h1><p>The easiest way to animate a <strong>single</strong> <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\"><code>View</code></a> is by using the <code>View.animate</code> method which accepts an <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinition</code></a>, immediately starts the animation and then returns its finished promise.</p>\n<p><strong>Example 20: How to execute animation on single view.</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span>&#125;,    </div><div class=\"line\">    duration: <span class=\"number\">1000</span>,</div><div class=\"line\">    curve: enums.AnimationCurve.easeIn</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span>&#125;,    </div><div class=\"line\">    duration: <span class=\"number\">1000</span>,</div><div class=\"line\">    curve: enums.AnimationCurve.easeIn</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>You should create an <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html\"><code>Animation</code></a> class in order to be able to <strong>cancel</strong> the animation. This is demonstrated below.</p>\n</blockquote>\n<h2 id=\"The-AnimationDefinition-interface\"><a href=\"#The-AnimationDefinition-interface\" class=\"headerlink\" title=\"The AnimationDefinition interface\"></a>The AnimationDefinition interface</h2><p>The <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinition</code></a> interface is central for defining an animation for <strong>one or more properties</strong> of a <strong>single</strong> <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\"><code>View</code></a>. The animatable properties are:</p>\n<ul>\n<li><strong>opacity</strong></li>\n<li><strong>backgroundColor</strong></li>\n<li><strong>translateX</strong> and <strong>translateY</strong></li>\n<li><strong>scaleX</strong> and <strong>scaleY</strong></li>\n<li><strong>rotate</strong></li>\n</ul>\n<p>The <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinition</code></a> interface has the following members:</p>\n<ul>\n<li><strong>target</strong>: The view whose property is to be animated.</li>\n<li><strong>opacity</strong>: Animates the opacity of the view. Value should be a number between 0.0 and 1.0.</li>\n<li><strong>backgroundColor</strong>: Animates the backgroundColor of the view.</li>\n<li><strong>translate</strong>: Animates the translate affine transform of the view. Value should be a <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.pair.html\"><code>Pair</code></a>.</li>\n<li><strong>scale</strong>: Animates the scale affine transform of the view. Value should be a <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.pair.html\"><code>Pair</code></a>.</li>\n<li><strong>rotate</strong>: Animates the rotate affine transform of the view. Value should be a number specifying the rotation amount in degrees.</li>\n<li><strong>duration</strong>: The length of the animation in milliseconds. The default duration is 300 milliseconds.</li>\n<li><strong>delay</strong>: The amount of time, in milliseconds, to delay starting the animation.</li>\n<li><strong>iterations</strong>: Specifies how many times the animation should be played. Default is 1. iOS animations support fractional iterations, i.e., 1.5. To repeat an animation infinitely, use <code>Number.POSITIVE_INFINITY</code>.</li>\n<li><p><strong>curve</strong>: An optional animation curve. Possible values are contained in the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.animationcurve.html\">AnimationCurve enumeration</a>. Alternatively, you can pass an instance of type <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/c/tdef/UIViewAnimationCurve\"><code>UIViewAnimationCurve</code></a> for iOS or <a href=\"http://developer.android.com/reference/android/animation/TimeInterpolator.html\"><code>android.animation.TimeInterpolator</code></a> for Android.</p>\n<p>All members of the interface are <strong>optional</strong> and have default values with the following exceptions:</p>\n</li>\n<li><p>target is only optional when calling the <code>animate</code> method of a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_core_view_.view.html\"><code>View</code></a> instance since it is set automatically for you.</p>\n</li>\n<li>You must specify at least one property from this list: opacity, backgroundColor, scale, rotate or translate.</li>\n</ul>\n<h2 id=\"The-Animation-class\"><a href=\"#The-Animation-class\" class=\"headerlink\" title=\"The Animation class\"></a>The Animation class</h2><p>The <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html\"><code>Animation</code></a> class represents a <strong>set</strong> of one or more <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinitions</code></a> that can be played either <strong>simultaneously or sequentially</strong>. <strong>This class is typically used when you need to animate several views together</strong>. The constructor of the  <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html\"><code>Animation</code></a> class accepts an array of <a href=\"http://docs.nativescript.org/api-reference/interfaces/_ui_animation_.animationdefinition.html\"><code>AnimationDefinitions</code></a> and a boolean parameter indicating whether to play the animations sequentially. Creating an instance of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_animation_.animation.html\"><code>Animation</code></a> class does not start the animation playback. The class has four members:</p>\n<ul>\n<li><strong>play</strong>: A method that starts the animation and returns the instance it was called on for fluent animation chaining.</li>\n<li><strong>cancel</strong>: A void method that stops the animation.</li>\n<li><strong>finished</strong>: A promise that will be resolved when the animation finishes or rejected when the animation is cancelled or stops for another reason.</li>\n<li><strong>isPlaying</strong>: A boolean property returning <strong>True</strong> if the animation is currently playing.</li>\n</ul>\n<h2 id=\"Animating-multiple-properties\"><a href=\"#Animating-multiple-properties\" class=\"headerlink\" title=\"Animating multiple properties\"></a>Animating multiple properties</h2><p>It is easy to animate multiple properties at once; just pass the desired animatable properties and the corresponding values when calling the animate function.</p>\n<p><strong>Example 21: How to animate multiple properties.</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    backgroundColor: <span class=\"keyword\">new</span> color.Color(<span class=\"string\">\"#3D5AFE\"</span>),</div><div class=\"line\">    opacity: <span class=\"number\">0.5</span>,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span> &#125;,</div><div class=\"line\">    rotate: <span class=\"number\">180</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    backgroundColor: <span class=\"keyword\">new</span> color.Color(<span class=\"string\">\"#3D5AFE\"</span>),</div><div class=\"line\">    opacity: <span class=\"number\">0.5</span>,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>&#125;,</div><div class=\"line\">    rotate: <span class=\"number\">180</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"../docs/img/modules/animation/multiple-properties.gif\" alt=\"multiple-properties\" title=\"Multiple Properties\"></p>\n<h2 id=\"Chaining-animations-with-promises\"><a href=\"#Chaining-animations-with-promises\" class=\"headerlink\" title=\"Chaining animations with promises\"></a>Chaining animations with promises</h2><p>The animate method returns a promise that you can use to chain animations, as shown in <strong>Example 21</strong>. </p>\n<p><strong>Example 22: How to create chain animations.</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123; opacity: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; opacity: <span class=\"number\">1</span> &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span> &#125; &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125; &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; scale: &#123; x: <span class=\"number\">3</span>, y: <span class=\"number\">3</span> &#125; &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; scale: &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">1</span> &#125; &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; rotate: <span class=\"number\">180</span> &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> view.animate(&#123; rotate: <span class=\"number\">0</span> &#125;); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123; opacity: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; opacity: <span class=\"number\">1</span> &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span> &#125; &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125; &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; scale: &#123; x: <span class=\"number\">3</span>, y: <span class=\"number\">3</span> &#125; &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; scale: &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">1</span> &#125; &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; rotate: <span class=\"number\">180</span> &#125;))</div><div class=\"line\">    .then(() =&gt; view.animate(&#123; rotate: <span class=\"number\">0</span> &#125;))</div><div class=\"line\">    .then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">    .catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"../docs/img/modules/animation/chaining-with-promises.gif\" alt=\"chaining-with-promises\" title=\"Chaining with Promises\"></p>\n"},{"title":"Animation Examples","description":"Examples demonstrating how to animate view properties.","position":12,"slug":"animation-examples","publish":false,"_content":"\n# Animation examples\n\nThis article contains examples demonstrating how to animate the animatable view properties. A full list of all animatable properties and a detailed explanation of the animations API is presented [here](./animation.md).\n\nThe full source code for all samples is located [here](https://github.com/NativeScript/animation-demo).\n\n## Animated opacity\n\n![opacity](../docs/img/modules/animation/opacity.gif \"Opacity\")\n\n``` JavaScript\nview.animate({\n    opacity: 0,\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    opacity: 0,\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: opacity;\n\tanimation-duration: 3;\n}\n@keyframes opacity {\n\tfrom { opacity: 1; }\n\tto { opacity: 0; }\n}\n```\n\n## Animate background color\n\n![background-color](../docs/img/modules/animation/background-color.gif \"Background Color\")\n\n``` JavaScript\nview.animate({\n    backgroundColor: new colorModule.Color(\"#3D5AFE\"),\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    backgroundColor: new colorModule.Color(\"#3D5AFE\"),\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: backgroundColor;\n\tanimation-duration: 3;\n}\n@keyframes backgroundColor {\n\tfrom { background-color: white; }\n\tto { background-color: #3D5AFE; }\n}\n```\n\n## Animate position\n\n![translate](../docs/img/modules/animation/translate.gif \"Translate\")\n\n``` JavaScript\nview.animate({\n    translate: { x: 100, y: 100},\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    translate: { x: 100, y: 100},\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: translate;\n\tanimation-duration: 3;\n}\n@keyframes translate {\n\tfrom { transform: translate(0, 0); }\n\tto { transform: translate(100, 100); }\n}\n```\n\n## Animate scale\n\n![scale](../docs/img/modules/animation/scale.gif \"Scale\")\n\n``` JavaScript\nview.animate({\n    scale: { x: 2, y: 2},\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    scale: { x: 2, y: 2},\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: scale;\n\tanimation-duration: 3;\n}\n@keyframes scale {\n\tfrom { transform: scale(1, 1); }\n\tto { transform: scale(2, 2); }\n}\n```\n\n## Animate rotate\n\n![rotate](../docs/img/modules/animation/rotate.gif \"Rotate\")\n\n``` JavaScript\nview.animate({\n    rotate: 360,\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    rotate: 360,\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: rotate;\n\tanimation-duration: 3;\n}\n@keyframes rotate {\n\tfrom { transform: rotate(0deg); }\n\tto { transform: rotate(360deg); }\n}\n```\n\n## Chaining animations with AnimationSet\n\n![chaining-with-animation-set](../docs/img/modules/animation/chaining-with-animation-set.gif \"Chaining with Animation Set\")\n\n``` JavaScript\nvar definitions = new Array();\ndefinitions.push({ target: view1, translate: { x: 200, y: 0 }, duration: 3000 });\ndefinitions.push({ target: view2, translate: { x: 0, y: 200 }, duration: 3000 });\ndefinitions.push({ target: view3, translate: { x: -200, y: 0 }, duration: 3000 });\ndefinitions.push({ target: view4, translate: { x: 0, y: -200 }, duration: 3000 });\nvar playSequentially = true;\nvar animationSet = new animationModule.Animation(definitions, playSequentially);\nanimationSet.play().then(function () {\n    console.log(\"Animation finished\");\n})\n    .catch(function (e) {\n    console.log(e.message);\n});\n```\n``` TypeScript\nvar definitions = new Array<animationModule.AnimationDefinition>();\ndefinitions.push({target: view1, translate: {x: 200, y: 0}, duration: 3000 });\ndefinitions.push({target: view2, translate: {x: 0, y: 200}, duration: 3000 });\ndefinitions.push({target: view3, translate: {x: -200, y: 0}, duration: 3000 });\ndefinitions.push({target: view4, translate: {x: 0, y: -200}, duration: 3000 });\nvar playSequentially = true;\nvar animationSet = new animationModule.Animation(definitions, playSequentially);\nanimationSet.play().then(() => {\n    console.log(\"Animation finished\");\n})\n.catch((e) => {\n    console.log(e.message);\n});\n```\n\n## Animating multiple views\n\n![multiple-views](../docs/img/modules/animation/multiple-views.gif \"Multiple Views\")\n\n``` JavaScript\nvar definitions = new Array();\nvar a1 = {\n    target: view1,\n    translate: { x: 200, y: 0 },\n    duration: 3000\n};\ndefinitions.push(a1);\nvar a2 = {\n    target: view2,\n    translate: { x: 0, y: 200 },\n    duration: 3000\n};\ndefinitions.push(a2);\nvar a3 = {\n    target: view3,\n    translate: { x: -200, y: 0 },\n    duration: 3000\n};\ndefinitions.push(a3);\nvar a4 = {\n    target: view4,\n    translate: { x: 0, y: -200 },\n    duration: 3000\n};\ndefinitions.push(a4);\nvar animationSet = new animationModule.Animation(definitions);\nanimationSet.play().then(function () {\n    console.log(\"Animation finished\");\n})\n    .catch(function (e) {\n    console.log(e.message);\n});\n```\n``` TypeScript\nvar definitions = new Array<animationModule.AnimationDefinition>();\nvar a1: animationModule.AnimationDefinition = {\n    target: view1,\n    translate: {x: 200, y: 0},\n    duration: 3000\n};\ndefinitions.push(a1);\n\nvar a2: animationModule.AnimationDefinition = {\n    target: view2,\n    translate: {x: 0, y: 200},\n    duration: 3000\n};\ndefinitions.push(a2);\n\nvar a3: animationModule.AnimationDefinition = {\n    target: view3,\n    translate: {x: -200, y: 0},\n    duration: 3000\n};\ndefinitions.push(a3);\n\nvar a4: animationModule.AnimationDefinition = {\n    target: view4,\n    translate: {x: 0, y: -200},\n    duration: 3000\n};\ndefinitions.push(a4);\n\nvar animationSet = new animationModule.Animation(definitions);\n\nanimationSet.play().then(() => {\n    console.log(\"Animation finished\");\n})\n.catch((e) => {\n    console.log(e.message);\n});\n```\n\n## Reusing animations\n\n![reusing](../docs/img/modules/animation/reusing.gif \"Reusing Animations\")\n\n``` JavaScript\nvar animation1 = view.createAnimation({ opacity: 0 });\nvar animation2 = view.createAnimation({ opacity: 1 });\nanimation1.play()\n    .then(function () { return animation2.play(); })\n    .then(function () { return animation1.play(); })\n    .then(function () { return animation2.play(); })\n    .then(function () { return animation1.play(); })\n    .then(function () { return animation2.play(); })\n    .then(function () {\n    console.log(\"Animation finished\");\n})\n    .catch(function (e) {\n    console.log(e.message);\n});\n```\n``` TypeScript\nvar animation1 = view.createAnimation({opacity: 0});\nvar animation2 = view.createAnimation({opacity: 1});\n\nanimation1.play()\n.then(()=>animation2.play())\n.then(()=>animation1.play())\n.then(()=>animation2.play())\n.then(()=>animation1.play())\n.then(()=>animation2.play())\n.then(() => {\n    console.log(\"Animation finished\");\n})\n.catch((e) => {\n    console.log(e.message);\n});\n```\n\n## Slide-in effect\n\n![slide-in-effect](../docs/img/modules/animation/slide-in-effect.gif \"Slide-in Effect\")\n\n``` JavaScript\nvar item = new imageModule.Image();\nitem.src = \"~/res/icon_100x100.png\";\nitem.width = 90;\nitem.height = 90;\nitem.style.margin = \"5,5,5,5\";\nitem.translateX = -300;\nitem.opacity = 0;\nitem.on(\"loaded\", function (args) {\n    args.object.animate({ translate: { x: 0, y: 0 }, opacity: 1 });\n});\nwrapLayout.addChild(item);\n```\n``` TypeScript\nvar item = new imageModule.Image();\nitem.src = \"~/res/icon_100x100.png\";\nitem.width = 90;\nitem.height = 90;\nitem.style.margin = \"5,5,5,5\";\nitem.translateX = -300;\nitem.opacity = 0;\nitem.on(\"loaded\", (args: observable.EventData) => {\n    (<viewModule.View>args.object).animate({translate: { x: 0, y: 0 }, opacity: 1});\n});\nwrapLayout.addChild(item);\n```\n\n## Infinite animations\n\n![infinite](../docs/img/modules/animation/infinite.gif \"Infinite\")\n\n``` JavaScript\nanimationSet = new animationModule.Animation([{\n        target: view,\n        rotate: 360,\n        duration: 3000,\n        iterations: Number.POSITIVE_INFINITY,\n        curve: view.ios ? UIViewAnimationCurve.UIViewAnimationCurveLinear : new android.view.animation.LinearInterpolator\n    }]);\nanimationSet.play().catch(function (e) {\n    console.log(\"Animation stopped!\");\n});\n// Call animationSet.cancel() to stop it;\n```\n``` TypeScript\nanimationSet = new animationModule.Animation([{\n    target: view,\n    rotate: 360,\n    duration: 3000,\n    iterations: Number.POSITIVE_INFINITY,\n    curve: view.ios ? UIViewAnimationCurve.UIViewAnimationCurveLinear : new android.view.animation.LinearInterpolator\n}]);\nanimationSet.play().catch((e) => {\n    console.log(\"Animation stopped!\");\n});\n// Call animationSet.cancel() to stop it;\n```\n\n\n","source":"ui/animation-examples.md","raw":"---\ntitle: Animation Examples\ndescription: Examples demonstrating how to animate view properties.\nposition: 12\nslug: animation-examples\npublish: false\n---\n\n# Animation examples\n\nThis article contains examples demonstrating how to animate the animatable view properties. A full list of all animatable properties and a detailed explanation of the animations API is presented [here](./animation.md).\n\nThe full source code for all samples is located [here](https://github.com/NativeScript/animation-demo).\n\n## Animated opacity\n\n![opacity](../docs/img/modules/animation/opacity.gif \"Opacity\")\n\n``` JavaScript\nview.animate({\n    opacity: 0,\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    opacity: 0,\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: opacity;\n\tanimation-duration: 3;\n}\n@keyframes opacity {\n\tfrom { opacity: 1; }\n\tto { opacity: 0; }\n}\n```\n\n## Animate background color\n\n![background-color](../docs/img/modules/animation/background-color.gif \"Background Color\")\n\n``` JavaScript\nview.animate({\n    backgroundColor: new colorModule.Color(\"#3D5AFE\"),\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    backgroundColor: new colorModule.Color(\"#3D5AFE\"),\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: backgroundColor;\n\tanimation-duration: 3;\n}\n@keyframes backgroundColor {\n\tfrom { background-color: white; }\n\tto { background-color: #3D5AFE; }\n}\n```\n\n## Animate position\n\n![translate](../docs/img/modules/animation/translate.gif \"Translate\")\n\n``` JavaScript\nview.animate({\n    translate: { x: 100, y: 100},\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    translate: { x: 100, y: 100},\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: translate;\n\tanimation-duration: 3;\n}\n@keyframes translate {\n\tfrom { transform: translate(0, 0); }\n\tto { transform: translate(100, 100); }\n}\n```\n\n## Animate scale\n\n![scale](../docs/img/modules/animation/scale.gif \"Scale\")\n\n``` JavaScript\nview.animate({\n    scale: { x: 2, y: 2},\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    scale: { x: 2, y: 2},\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: scale;\n\tanimation-duration: 3;\n}\n@keyframes scale {\n\tfrom { transform: scale(1, 1); }\n\tto { transform: scale(2, 2); }\n}\n```\n\n## Animate rotate\n\n![rotate](../docs/img/modules/animation/rotate.gif \"Rotate\")\n\n``` JavaScript\nview.animate({\n    rotate: 360,\n    duration: 3000\n});\n```\n``` TypeScript\nview.animate({\n    rotate: 360,\n    duration: 3000\n});\n```\n``` CSS\n.view {\n\tanimation-name: rotate;\n\tanimation-duration: 3;\n}\n@keyframes rotate {\n\tfrom { transform: rotate(0deg); }\n\tto { transform: rotate(360deg); }\n}\n```\n\n## Chaining animations with AnimationSet\n\n![chaining-with-animation-set](../docs/img/modules/animation/chaining-with-animation-set.gif \"Chaining with Animation Set\")\n\n``` JavaScript\nvar definitions = new Array();\ndefinitions.push({ target: view1, translate: { x: 200, y: 0 }, duration: 3000 });\ndefinitions.push({ target: view2, translate: { x: 0, y: 200 }, duration: 3000 });\ndefinitions.push({ target: view3, translate: { x: -200, y: 0 }, duration: 3000 });\ndefinitions.push({ target: view4, translate: { x: 0, y: -200 }, duration: 3000 });\nvar playSequentially = true;\nvar animationSet = new animationModule.Animation(definitions, playSequentially);\nanimationSet.play().then(function () {\n    console.log(\"Animation finished\");\n})\n    .catch(function (e) {\n    console.log(e.message);\n});\n```\n``` TypeScript\nvar definitions = new Array<animationModule.AnimationDefinition>();\ndefinitions.push({target: view1, translate: {x: 200, y: 0}, duration: 3000 });\ndefinitions.push({target: view2, translate: {x: 0, y: 200}, duration: 3000 });\ndefinitions.push({target: view3, translate: {x: -200, y: 0}, duration: 3000 });\ndefinitions.push({target: view4, translate: {x: 0, y: -200}, duration: 3000 });\nvar playSequentially = true;\nvar animationSet = new animationModule.Animation(definitions, playSequentially);\nanimationSet.play().then(() => {\n    console.log(\"Animation finished\");\n})\n.catch((e) => {\n    console.log(e.message);\n});\n```\n\n## Animating multiple views\n\n![multiple-views](../docs/img/modules/animation/multiple-views.gif \"Multiple Views\")\n\n``` JavaScript\nvar definitions = new Array();\nvar a1 = {\n    target: view1,\n    translate: { x: 200, y: 0 },\n    duration: 3000\n};\ndefinitions.push(a1);\nvar a2 = {\n    target: view2,\n    translate: { x: 0, y: 200 },\n    duration: 3000\n};\ndefinitions.push(a2);\nvar a3 = {\n    target: view3,\n    translate: { x: -200, y: 0 },\n    duration: 3000\n};\ndefinitions.push(a3);\nvar a4 = {\n    target: view4,\n    translate: { x: 0, y: -200 },\n    duration: 3000\n};\ndefinitions.push(a4);\nvar animationSet = new animationModule.Animation(definitions);\nanimationSet.play().then(function () {\n    console.log(\"Animation finished\");\n})\n    .catch(function (e) {\n    console.log(e.message);\n});\n```\n``` TypeScript\nvar definitions = new Array<animationModule.AnimationDefinition>();\nvar a1: animationModule.AnimationDefinition = {\n    target: view1,\n    translate: {x: 200, y: 0},\n    duration: 3000\n};\ndefinitions.push(a1);\n\nvar a2: animationModule.AnimationDefinition = {\n    target: view2,\n    translate: {x: 0, y: 200},\n    duration: 3000\n};\ndefinitions.push(a2);\n\nvar a3: animationModule.AnimationDefinition = {\n    target: view3,\n    translate: {x: -200, y: 0},\n    duration: 3000\n};\ndefinitions.push(a3);\n\nvar a4: animationModule.AnimationDefinition = {\n    target: view4,\n    translate: {x: 0, y: -200},\n    duration: 3000\n};\ndefinitions.push(a4);\n\nvar animationSet = new animationModule.Animation(definitions);\n\nanimationSet.play().then(() => {\n    console.log(\"Animation finished\");\n})\n.catch((e) => {\n    console.log(e.message);\n});\n```\n\n## Reusing animations\n\n![reusing](../docs/img/modules/animation/reusing.gif \"Reusing Animations\")\n\n``` JavaScript\nvar animation1 = view.createAnimation({ opacity: 0 });\nvar animation2 = view.createAnimation({ opacity: 1 });\nanimation1.play()\n    .then(function () { return animation2.play(); })\n    .then(function () { return animation1.play(); })\n    .then(function () { return animation2.play(); })\n    .then(function () { return animation1.play(); })\n    .then(function () { return animation2.play(); })\n    .then(function () {\n    console.log(\"Animation finished\");\n})\n    .catch(function (e) {\n    console.log(e.message);\n});\n```\n``` TypeScript\nvar animation1 = view.createAnimation({opacity: 0});\nvar animation2 = view.createAnimation({opacity: 1});\n\nanimation1.play()\n.then(()=>animation2.play())\n.then(()=>animation1.play())\n.then(()=>animation2.play())\n.then(()=>animation1.play())\n.then(()=>animation2.play())\n.then(() => {\n    console.log(\"Animation finished\");\n})\n.catch((e) => {\n    console.log(e.message);\n});\n```\n\n## Slide-in effect\n\n![slide-in-effect](../docs/img/modules/animation/slide-in-effect.gif \"Slide-in Effect\")\n\n``` JavaScript\nvar item = new imageModule.Image();\nitem.src = \"~/res/icon_100x100.png\";\nitem.width = 90;\nitem.height = 90;\nitem.style.margin = \"5,5,5,5\";\nitem.translateX = -300;\nitem.opacity = 0;\nitem.on(\"loaded\", function (args) {\n    args.object.animate({ translate: { x: 0, y: 0 }, opacity: 1 });\n});\nwrapLayout.addChild(item);\n```\n``` TypeScript\nvar item = new imageModule.Image();\nitem.src = \"~/res/icon_100x100.png\";\nitem.width = 90;\nitem.height = 90;\nitem.style.margin = \"5,5,5,5\";\nitem.translateX = -300;\nitem.opacity = 0;\nitem.on(\"loaded\", (args: observable.EventData) => {\n    (<viewModule.View>args.object).animate({translate: { x: 0, y: 0 }, opacity: 1});\n});\nwrapLayout.addChild(item);\n```\n\n## Infinite animations\n\n![infinite](../docs/img/modules/animation/infinite.gif \"Infinite\")\n\n``` JavaScript\nanimationSet = new animationModule.Animation([{\n        target: view,\n        rotate: 360,\n        duration: 3000,\n        iterations: Number.POSITIVE_INFINITY,\n        curve: view.ios ? UIViewAnimationCurve.UIViewAnimationCurveLinear : new android.view.animation.LinearInterpolator\n    }]);\nanimationSet.play().catch(function (e) {\n    console.log(\"Animation stopped!\");\n});\n// Call animationSet.cancel() to stop it;\n```\n``` TypeScript\nanimationSet = new animationModule.Animation([{\n    target: view,\n    rotate: 360,\n    duration: 3000,\n    iterations: Number.POSITIVE_INFINITY,\n    curve: view.ios ? UIViewAnimationCurve.UIViewAnimationCurveLinear : new android.view.animation.LinearInterpolator\n}]);\nanimationSet.play().catch((e) => {\n    console.log(\"Animation stopped!\");\n});\n// Call animationSet.cancel() to stop it;\n```\n\n\n","date":"2016-08-26T21:05:54.586Z","updated":"2016-08-26T21:05:54.586Z","path":"ui/animation-examples.html","comments":1,"layout":"page","_id":"cisn95cah000wwsl064qcvz9s","content":"<h1 id=\"Animation-examples\"><a href=\"#Animation-examples\" class=\"headerlink\" title=\"Animation examples\"></a>Animation examples</h1><p>This article contains examples demonstrating how to animate the animatable view properties. A full list of all animatable properties and a detailed explanation of the animations API is presented <a href=\"./animation.md\">here</a>.</p>\n<p>The full source code for all samples is located <a href=\"https://github.com/NativeScript/animation-demo\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h2 id=\"Animated-opacity\"><a href=\"#Animated-opacity\" class=\"headerlink\" title=\"Animated opacity\"></a>Animated opacity</h2><p><img src=\"../docs/img/modules/animation/opacity.gif\" alt=\"opacity\" title=\"Opacity\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    opacity: <span class=\"number\">0</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    opacity: <span class=\"number\">0</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: opacity;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> opacity &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>; &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animate-background-color\"><a href=\"#Animate-background-color\" class=\"headerlink\" title=\"Animate background color\"></a>Animate background color</h2><p><img src=\"../docs/img/modules/animation/background-color.gif\" alt=\"background-color\" title=\"Background Color\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    backgroundColor: <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"#3D5AFE\"</span>),</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    backgroundColor: <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"#3D5AFE\"</span>),</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: backgroundColor;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> backgroundColor &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: white; &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#3D5AFE</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animate-position\"><a href=\"#Animate-position\" class=\"headerlink\" title=\"Animate position\"></a>Animate position</h2><p><img src=\"../docs/img/modules/animation/translate.gif\" alt=\"translate\" title=\"Translate\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: translate;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> translate &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(100, 100); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animate-scale\"><a href=\"#Animate-scale\" class=\"headerlink\" title=\"Animate scale\"></a>Animate scale</h2><p><img src=\"../docs/img/modules/animation/scale.gif\" alt=\"scale\" title=\"Scale\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    scale: &#123; x: <span class=\"number\">2</span>, y: <span class=\"number\">2</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    scale: &#123; x: <span class=\"number\">2</span>, y: <span class=\"number\">2</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: scale;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> scale &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1, 1); &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(2, 2); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animate-rotate\"><a href=\"#Animate-rotate\" class=\"headerlink\" title=\"Animate rotate\"></a>Animate rotate</h2><p><img src=\"../docs/img/modules/animation/rotate.gif\" alt=\"rotate\" title=\"Rotate\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    rotate: <span class=\"number\">360</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    rotate: <span class=\"number\">360</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: rotate;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> rotate &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(0deg); &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(360deg); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Chaining-animations-with-AnimationSet\"><a href=\"#Chaining-animations-with-AnimationSet\" class=\"headerlink\" title=\"Chaining animations with AnimationSet\"></a>Chaining animations with AnimationSet</h2><p><img src=\"../docs/img/modules/animation/chaining-with-animation-set.gif\" alt=\"chaining-with-animation-set\" title=\"Chaining with Animation Set\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> definitions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">definitions.push(&#123; target: view1, translate: &#123; x: <span class=\"number\">200</span>, y: <span class=\"number\">0</span> &#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123; target: view2, translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">200</span> &#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123; target: view3, translate: &#123; x: <span class=\"number\">-200</span>, y: <span class=\"number\">0</span> &#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123; target: view4, translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">-200</span> &#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> playSequentially = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> animationSet = <span class=\"keyword\">new</span> animationModule.Animation(definitions, playSequentially);</div><div class=\"line\">animationSet.play().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> definitions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;animationModule.AnimationDefinition&gt;();</div><div class=\"line\">definitions.push(&#123;target: view1, translate: &#123;x: <span class=\"number\">200</span>, y: <span class=\"number\">0</span>&#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123;target: view2, translate: &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">200</span>&#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123;target: view3, translate: &#123;x: <span class=\"number\">-200</span>, y: <span class=\"number\">0</span>&#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123;target: view4, translate: &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">-200</span>&#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> playSequentially = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> animationSet = <span class=\"keyword\">new</span> animationModule.Animation(definitions, playSequentially);</div><div class=\"line\">animationSet.play().then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">.catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Animating-multiple-views\"><a href=\"#Animating-multiple-views\" class=\"headerlink\" title=\"Animating multiple views\"></a>Animating multiple views</h2><p><img src=\"../docs/img/modules/animation/multiple-views.gif\" alt=\"multiple-views\" title=\"Multiple Views\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> definitions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> a1 = &#123;</div><div class=\"line\">    target: view1,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">200</span>, y: <span class=\"number\">0</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a1);</div><div class=\"line\"><span class=\"keyword\">var</span> a2 = &#123;</div><div class=\"line\">    target: view2,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">200</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a2);</div><div class=\"line\"><span class=\"keyword\">var</span> a3 = &#123;</div><div class=\"line\">    target: view3,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">-200</span>, y: <span class=\"number\">0</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a3);</div><div class=\"line\"><span class=\"keyword\">var</span> a4 = &#123;</div><div class=\"line\">    target: view4,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">-200</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a4);</div><div class=\"line\"><span class=\"keyword\">var</span> animationSet = <span class=\"keyword\">new</span> animationModule.Animation(definitions);</div><div class=\"line\">animationSet.play().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> definitions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;animationModule.AnimationDefinition&gt;();</div><div class=\"line\"><span class=\"keyword\">var</span> a1: animationModule.AnimationDefinition = &#123;</div><div class=\"line\">    target: view1,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">200</span>, y: <span class=\"number\">0</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a2: animationModule.AnimationDefinition = &#123;</div><div class=\"line\">    target: view2,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">200</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a3: animationModule.AnimationDefinition = &#123;</div><div class=\"line\">    target: view3,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">-200</span>, y: <span class=\"number\">0</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a3);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a4: animationModule.AnimationDefinition = &#123;</div><div class=\"line\">    target: view4,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">-200</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a4);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> animationSet = <span class=\"keyword\">new</span> animationModule.Animation(definitions);</div><div class=\"line\"></div><div class=\"line\">animationSet.play().then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">.catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Reusing-animations\"><a href=\"#Reusing-animations\" class=\"headerlink\" title=\"Reusing animations\"></a>Reusing animations</h2><p><img src=\"../docs/img/modules/animation/reusing.gif\" alt=\"reusing\" title=\"Reusing Animations\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animation1 = view.createAnimation(&#123; opacity: <span class=\"number\">0</span> &#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> animation2 = view.createAnimation(&#123; opacity: <span class=\"number\">1</span> &#125;);</div><div class=\"line\">animation1.play()</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation2.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation1.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation2.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation1.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation2.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animation1 = view.createAnimation(&#123;opacity: <span class=\"number\">0</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> animation2 = view.createAnimation(&#123;opacity: <span class=\"number\">1</span>&#125;);</div><div class=\"line\"></div><div class=\"line\">animation1.play()</div><div class=\"line\">.then(()=&gt;animation2.play())</div><div class=\"line\">.then(()=&gt;animation1.play())</div><div class=\"line\">.then(()=&gt;animation2.play())</div><div class=\"line\">.then(()=&gt;animation1.play())</div><div class=\"line\">.then(()=&gt;animation2.play())</div><div class=\"line\">.then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">.catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Slide-in-effect\"><a href=\"#Slide-in-effect\" class=\"headerlink\" title=\"Slide-in effect\"></a>Slide-in effect</h2><p><img src=\"../docs/img/modules/animation/slide-in-effect.gif\" alt=\"slide-in-effect\" title=\"Slide-in Effect\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">item.src = <span class=\"string\">\"~/res/icon_100x100.png\"</span>;</div><div class=\"line\">item.width = <span class=\"number\">90</span>;</div><div class=\"line\">item.height = <span class=\"number\">90</span>;</div><div class=\"line\">item.style.margin = <span class=\"string\">\"5,5,5,5\"</span>;</div><div class=\"line\">item.translateX = <span class=\"number\">-300</span>;</div><div class=\"line\">item.opacity = <span class=\"number\">0</span>;</div><div class=\"line\">item.on(<span class=\"string\">\"loaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    args.object.animate(&#123; translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;, opacity: <span class=\"number\">1</span> &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">wrapLayout.addChild(item);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">item.src = <span class=\"string\">\"~/res/icon_100x100.png\"</span>;</div><div class=\"line\">item.width = <span class=\"number\">90</span>;</div><div class=\"line\">item.height = <span class=\"number\">90</span>;</div><div class=\"line\">item.style.margin = <span class=\"string\">\"5,5,5,5\"</span>;</div><div class=\"line\">item.translateX = <span class=\"number\">-300</span>;</div><div class=\"line\">item.opacity = <span class=\"number\">0</span>;</div><div class=\"line\">item.on(<span class=\"string\">\"loaded\"</span>, (args: observable.EventData) =&gt; &#123;</div><div class=\"line\">    (&lt;viewModule.View&gt;args.object).animate(&#123;translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;, opacity: <span class=\"number\">1</span>&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">wrapLayout.addChild(item);</div></pre></td></tr></table></figure>\n<h2 id=\"Infinite-animations\"><a href=\"#Infinite-animations\" class=\"headerlink\" title=\"Infinite animations\"></a>Infinite animations</h2><p><img src=\"../docs/img/modules/animation/infinite.gif\" alt=\"infinite\" title=\"Infinite\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">animationSet = <span class=\"keyword\">new</span> animationModule.Animation([&#123;</div><div class=\"line\">        target: view,</div><div class=\"line\">        rotate: <span class=\"number\">360</span>,</div><div class=\"line\">        duration: <span class=\"number\">3000</span>,</div><div class=\"line\">        iterations: <span class=\"built_in\">Number</span>.POSITIVE_INFINITY,</div><div class=\"line\">        curve: view.ios ? UIViewAnimationCurve.UIViewAnimationCurveLinear : <span class=\"keyword\">new</span> android.view.animation.LinearInterpolator</div><div class=\"line\">    &#125;]);</div><div class=\"line\">animationSet.play().catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation stopped!\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Call animationSet.cancel() to stop it;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">animationSet = <span class=\"keyword\">new</span> animationModule.Animation([&#123;</div><div class=\"line\">    target: view,</div><div class=\"line\">    rotate: <span class=\"number\">360</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span>,</div><div class=\"line\">    iterations: <span class=\"built_in\">Number</span>.POSITIVE_INFINITY,</div><div class=\"line\">    curve: view.ios ? UIViewAnimationCurve.UIViewAnimationCurveLinear : <span class=\"keyword\">new</span> android.view.animation.LinearInterpolator</div><div class=\"line\">&#125;]);</div><div class=\"line\">animationSet.play().catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation stopped!\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Call animationSet.cancel() to stop it;</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Animation-examples\"><a href=\"#Animation-examples\" class=\"headerlink\" title=\"Animation examples\"></a>Animation examples</h1><p>This article contains examples demonstrating how to animate the animatable view properties. A full list of all animatable properties and a detailed explanation of the animations API is presented <a href=\"./animation.md\">here</a>.</p>\n<p>The full source code for all samples is located <a href=\"https://github.com/NativeScript/animation-demo\">here</a>.</p>\n<h2 id=\"Animated-opacity\"><a href=\"#Animated-opacity\" class=\"headerlink\" title=\"Animated opacity\"></a>Animated opacity</h2><p><img src=\"../docs/img/modules/animation/opacity.gif\" alt=\"opacity\" title=\"Opacity\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    opacity: <span class=\"number\">0</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    opacity: <span class=\"number\">0</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: opacity;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> opacity &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>; &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animate-background-color\"><a href=\"#Animate-background-color\" class=\"headerlink\" title=\"Animate background color\"></a>Animate background color</h2><p><img src=\"../docs/img/modules/animation/background-color.gif\" alt=\"background-color\" title=\"Background Color\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    backgroundColor: <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"#3D5AFE\"</span>),</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    backgroundColor: <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"#3D5AFE\"</span>),</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: backgroundColor;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> backgroundColor &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: white; &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: <span class=\"number\">#3D5AFE</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animate-position\"><a href=\"#Animate-position\" class=\"headerlink\" title=\"Animate position\"></a>Animate position</h2><p><img src=\"../docs/img/modules/animation/translate.gif\" alt=\"translate\" title=\"Translate\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: translate;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> translate &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(100, 100); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animate-scale\"><a href=\"#Animate-scale\" class=\"headerlink\" title=\"Animate scale\"></a>Animate scale</h2><p><img src=\"../docs/img/modules/animation/scale.gif\" alt=\"scale\" title=\"Scale\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    scale: &#123; x: <span class=\"number\">2</span>, y: <span class=\"number\">2</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    scale: &#123; x: <span class=\"number\">2</span>, y: <span class=\"number\">2</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: scale;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> scale &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1, 1); &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(2, 2); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Animate-rotate\"><a href=\"#Animate-rotate\" class=\"headerlink\" title=\"Animate rotate\"></a>Animate rotate</h2><p><img src=\"../docs/img/modules/animation/rotate.gif\" alt=\"rotate\" title=\"Rotate\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    rotate: <span class=\"number\">360</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    rotate: <span class=\"number\">360</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: rotate;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> rotate &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(0deg); &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(360deg); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Chaining-animations-with-AnimationSet\"><a href=\"#Chaining-animations-with-AnimationSet\" class=\"headerlink\" title=\"Chaining animations with AnimationSet\"></a>Chaining animations with AnimationSet</h2><p><img src=\"../docs/img/modules/animation/chaining-with-animation-set.gif\" alt=\"chaining-with-animation-set\" title=\"Chaining with Animation Set\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> definitions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">definitions.push(&#123; target: view1, translate: &#123; x: <span class=\"number\">200</span>, y: <span class=\"number\">0</span> &#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123; target: view2, translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">200</span> &#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123; target: view3, translate: &#123; x: <span class=\"number\">-200</span>, y: <span class=\"number\">0</span> &#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123; target: view4, translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">-200</span> &#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> playSequentially = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> animationSet = <span class=\"keyword\">new</span> animationModule.Animation(definitions, playSequentially);</div><div class=\"line\">animationSet.play().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> definitions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;animationModule.AnimationDefinition&gt;();</div><div class=\"line\">definitions.push(&#123;target: view1, translate: &#123;x: <span class=\"number\">200</span>, y: <span class=\"number\">0</span>&#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123;target: view2, translate: &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">200</span>&#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123;target: view3, translate: &#123;x: <span class=\"number\">-200</span>, y: <span class=\"number\">0</span>&#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\">definitions.push(&#123;target: view4, translate: &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">-200</span>&#125;, duration: <span class=\"number\">3000</span> &#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> playSequentially = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> animationSet = <span class=\"keyword\">new</span> animationModule.Animation(definitions, playSequentially);</div><div class=\"line\">animationSet.play().then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">.catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Animating-multiple-views\"><a href=\"#Animating-multiple-views\" class=\"headerlink\" title=\"Animating multiple views\"></a>Animating multiple views</h2><p><img src=\"../docs/img/modules/animation/multiple-views.gif\" alt=\"multiple-views\" title=\"Multiple Views\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> definitions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> a1 = &#123;</div><div class=\"line\">    target: view1,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">200</span>, y: <span class=\"number\">0</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a1);</div><div class=\"line\"><span class=\"keyword\">var</span> a2 = &#123;</div><div class=\"line\">    target: view2,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">200</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a2);</div><div class=\"line\"><span class=\"keyword\">var</span> a3 = &#123;</div><div class=\"line\">    target: view3,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">-200</span>, y: <span class=\"number\">0</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a3);</div><div class=\"line\"><span class=\"keyword\">var</span> a4 = &#123;</div><div class=\"line\">    target: view4,</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">-200</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a4);</div><div class=\"line\"><span class=\"keyword\">var</span> animationSet = <span class=\"keyword\">new</span> animationModule.Animation(definitions);</div><div class=\"line\">animationSet.play().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> definitions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;animationModule.AnimationDefinition&gt;();</div><div class=\"line\"><span class=\"keyword\">var</span> a1: animationModule.AnimationDefinition = &#123;</div><div class=\"line\">    target: view1,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">200</span>, y: <span class=\"number\">0</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a2: animationModule.AnimationDefinition = &#123;</div><div class=\"line\">    target: view2,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">200</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a3: animationModule.AnimationDefinition = &#123;</div><div class=\"line\">    target: view3,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">-200</span>, y: <span class=\"number\">0</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a3);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a4: animationModule.AnimationDefinition = &#123;</div><div class=\"line\">    target: view4,</div><div class=\"line\">    translate: &#123;x: <span class=\"number\">0</span>, y: <span class=\"number\">-200</span>&#125;,</div><div class=\"line\">    duration: <span class=\"number\">3000</span></div><div class=\"line\">&#125;;</div><div class=\"line\">definitions.push(a4);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> animationSet = <span class=\"keyword\">new</span> animationModule.Animation(definitions);</div><div class=\"line\"></div><div class=\"line\">animationSet.play().then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">.catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Reusing-animations\"><a href=\"#Reusing-animations\" class=\"headerlink\" title=\"Reusing animations\"></a>Reusing animations</h2><p><img src=\"../docs/img/modules/animation/reusing.gif\" alt=\"reusing\" title=\"Reusing Animations\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animation1 = view.createAnimation(&#123; opacity: <span class=\"number\">0</span> &#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> animation2 = view.createAnimation(&#123; opacity: <span class=\"number\">1</span> &#125;);</div><div class=\"line\">animation1.play()</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation2.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation1.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation2.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation1.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> animation2.play(); &#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animation1 = view.createAnimation(&#123;opacity: <span class=\"number\">0</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> animation2 = view.createAnimation(&#123;opacity: <span class=\"number\">1</span>&#125;);</div><div class=\"line\"></div><div class=\"line\">animation1.play()</div><div class=\"line\">.then(()=&gt;animation2.play())</div><div class=\"line\">.then(()=&gt;animation1.play())</div><div class=\"line\">.then(()=&gt;animation2.play())</div><div class=\"line\">.then(()=&gt;animation1.play())</div><div class=\"line\">.then(()=&gt;animation2.play())</div><div class=\"line\">.then(() =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation finished\"</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">.catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Slide-in-effect\"><a href=\"#Slide-in-effect\" class=\"headerlink\" title=\"Slide-in effect\"></a>Slide-in effect</h2><p><img src=\"../docs/img/modules/animation/slide-in-effect.gif\" alt=\"slide-in-effect\" title=\"Slide-in Effect\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">item.src = <span class=\"string\">\"~/res/icon_100x100.png\"</span>;</div><div class=\"line\">item.width = <span class=\"number\">90</span>;</div><div class=\"line\">item.height = <span class=\"number\">90</span>;</div><div class=\"line\">item.style.margin = <span class=\"string\">\"5,5,5,5\"</span>;</div><div class=\"line\">item.translateX = <span class=\"number\">-300</span>;</div><div class=\"line\">item.opacity = <span class=\"number\">0</span>;</div><div class=\"line\">item.on(<span class=\"string\">\"loaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    args.object.animate(&#123; translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;, opacity: <span class=\"number\">1</span> &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">wrapLayout.addChild(item);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> item = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\">item.src = <span class=\"string\">\"~/res/icon_100x100.png\"</span>;</div><div class=\"line\">item.width = <span class=\"number\">90</span>;</div><div class=\"line\">item.height = <span class=\"number\">90</span>;</div><div class=\"line\">item.style.margin = <span class=\"string\">\"5,5,5,5\"</span>;</div><div class=\"line\">item.translateX = <span class=\"number\">-300</span>;</div><div class=\"line\">item.opacity = <span class=\"number\">0</span>;</div><div class=\"line\">item.on(<span class=\"string\">\"loaded\"</span>, (args: observable.EventData) =&gt; &#123;</div><div class=\"line\">    (&lt;viewModule.View&gt;args.object).animate(&#123;translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;, opacity: <span class=\"number\">1</span>&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">wrapLayout.addChild(item);</div></pre></td></tr></table></figure>\n<h2 id=\"Infinite-animations\"><a href=\"#Infinite-animations\" class=\"headerlink\" title=\"Infinite animations\"></a>Infinite animations</h2><p><img src=\"../docs/img/modules/animation/infinite.gif\" alt=\"infinite\" title=\"Infinite\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">animationSet = <span class=\"keyword\">new</span> animationModule.Animation([&#123;</div><div class=\"line\">        target: view,</div><div class=\"line\">        rotate: <span class=\"number\">360</span>,</div><div class=\"line\">        duration: <span class=\"number\">3000</span>,</div><div class=\"line\">        iterations: <span class=\"built_in\">Number</span>.POSITIVE_INFINITY,</div><div class=\"line\">        curve: view.ios ? UIViewAnimationCurve.UIViewAnimationCurveLinear : <span class=\"keyword\">new</span> android.view.animation.LinearInterpolator</div><div class=\"line\">    &#125;]);</div><div class=\"line\">animationSet.play().catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation stopped!\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Call animationSet.cancel() to stop it;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">animationSet = <span class=\"keyword\">new</span> animationModule.Animation([&#123;</div><div class=\"line\">    target: view,</div><div class=\"line\">    rotate: <span class=\"number\">360</span>,</div><div class=\"line\">    duration: <span class=\"number\">3000</span>,</div><div class=\"line\">    iterations: <span class=\"built_in\">Number</span>.POSITIVE_INFINITY,</div><div class=\"line\">    curve: view.ios ? UIViewAnimationCurve.UIViewAnimationCurveLinear : <span class=\"keyword\">new</span> android.view.animation.LinearInterpolator</div><div class=\"line\">&#125;]);</div><div class=\"line\">animationSet.play().catch((e) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Animation stopped!\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Call animationSet.cancel() to stop it;</span></div></pre></td></tr></table></figure>\n"},{"title":"Animations","description":"Learn how to animate view properties.","position":9,"slug":"animations","previous_url":"/animation","_content":"\n# Animations\n\nOne of the ways to improve the attractiveness of your application is by adding animations. NativeScript exposes a simple and easy, but powerful enough API to allow animating almost every native element in your application.\n\nFor your convenience, we expose two ways of creating animations:\n\n- [Declarative](./animation-css.md) - you will use the easy and familiar CSS3 animations API\n- [Imperative](./animation-code.md) - take full control of any animation by calling animation methods directly with code\n\n[Here](./animation-examples.md) you will find a detailed set of examples demonstrating the different animations that can be achieved with NativeScript.\n\n##Hello world example\n\nIn __Example 1__ we will change the background color of a button from \"red\" to \"green\". You can use JavaScript or TypeScript code to do the following:\n\n__Example 1: Changing background color animation with code.__\n\n![hello-world](../docs/img/modules/animation/hello-world.gif \"Hello world\")\n\n``` JavaScript\nview.backgroundColor = new colorModule.Color(\"red\");\nview.animate({ backgroundColor: new colorModule.Color(\"green\"), duration: 2000 });\n```\n``` TypeScript\nview.backgroundColor = new colorModule.Color(\"red\");\nview.animate({ backgroundColor: new colorModule.Color(\"green\"), duration: 2000 });\n```\n\nAs _Example 2_ shows, you can express the same animation in CSS with the following definition:\n\n__Example 2: Changing background color animation with CSS.__\n\n``` CSS\n@keyframes example {\n    from { background-color: red; }\n    to { background-color: green; }\n}\n.view {\n    animation-name: example;\n    animation-duration: 2s;\n    animation-fill-mode: forwards;\n}\n```\n\n> CSS animations apply with lower precedence, like any other CSS settings, so any local values set in your element will cancel the animation.\n\nNativeScript lets you animate the following properties:\n\n- **opacity**\n- **backgroundColor**\n- **translateX** and **translateY**\n- **scaleX** and **scaleY**\n- **rotate**\n\nIn every animation, you can control the following properties:\n\n- **duration**: The length of the animation.\n- **delay**: The amount of time to delay starting the animation.\n- **iterations**: Specifies how many times the animation should be played. \n- **timing function**: The speed curve of the animation. Available options are defined below.\n\n##Animation curves\n\nBy default, an animation moves with a linear speed without acceleration or deceleration. This might look unnatural and different from the real world where objects need time to reach their top speed and can't stop immediately. The animation curve (sometimes called an easing function) is used to give animations an illusion of inertia. It controls the animation speed by modifying the fraction of the duration. NativeScript comes with a number of predefined animation curves.\n\n- **linear**: The simplest animation curve is linear. It maintains a constant speed while the animation is running:\n![linear](../docs/img/modules/animation/linear.gif \"Linear\")\n\n- **Ease-in**: The ease-in curve causes the animation to begin slowly, and then speed up as it progresses.\n![easein](../docs/img/modules/animation/easein.gif \"EaseIn\")\n\n- **Ease-out**: An ease-out curve causes the animation to begin quickly, and then slow down as it completes.\n![easeout](../docs/img/modules/animation/easeout.gif \"EaseOut\")\n\n- **Ease-in-out**: An ease-in ease-out curve causes the animation to begin slowly, accelerate through the middle of its duration, and then slow again before completing.\n![easeinout](../docs/img/modules/animation/easeinout.gif \"EaseInOut\")\n\n- **Spring**: A spring animation curve causes an animation to produce a spring (bounce) effect.\n![spring](../docs/img/modules/animation/spring.gif \"Spring\")\n\nIn NativeScript, the animation curve is represented by the AnimationCurve enumeration and can be specified with the curve property of the animation. In CSS, the animation curve is defined by using the animation-timing-function property (see __Example 3__):\n\n__Example 3: How to customize the animation timing function__\n\n``` JavaScript\nvar enums = require(\"ui/enums\");\nview.animate({\n\ttranslate: { x: 0, y: 100},    \n\tduration: 1000,\n\tcurve: enums.AnimationCurve.easeIn\n});\n```\n``` TypeScript\nimport {AnimationCurve} from \"ui/enums\";\nview.animate({\n\ttranslate: { x: 0, y: 100},    \n\tduration: 1000,\n\tcurve: AnimationCurve.easeIn\n});\n```\n``` CSS\n.view {\n\tanimation-name: example;\n\tanimation-duration: 1;\n\tanimation-timing-function: ease-in;\n   animation-fill-mode: forwards;\n}\n@keyframes example {\n\tfrom { transform: translate(0, 0); }\n\tto { transform: translate(0, 100); }\n}\n```\n\nIt is easy to create your own animation curve by passing in the x and y components of two control points of a cubic Bezier curve (as shown in __Example 4__). Using Bezier curves is a common technique to create smooth curves in computer graphics and they are widely used in vector-based drawing tools. The values passed to the cubicBezier method control the curve shape. The animation speed will be adjusted based on the resulting path.\n\n__Example 4: How to create own animation curve via cubic Bezier__\n\n![beziergraph](../docs/img/modules/animation/bezier-graph.png \"BezierGraph\")\n\n``` JavaScript\nvar enums = require(\"ui/enums\");\nview.animate({\n    translate: { x: 0, y: 100 },\n    duration: 1000,\n    curve: enums.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)\n});\n```\n``` TypeScript\nimport {AnimationCurve} from \"ui/enums\";\nview.animate({\n    translate: { x: 0, y: 100 },\n    duration: 1000,\n    curve: AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)\n});\n```\n``` CSS\n.view {\n\tanimation-name: example;\n\tanimation-duration: 1;\n\tanimation-timing-function: cubicBezier(0.1, 0.1, 0.1, 1);\n\tanimation-fill-mode: forwards;\n}\n```\n\n![bezier](../docs/img/modules/animation/bezier.gif \"Bezier\")\n\n \nMore detailed examples are available on the [Animation Examples](./animation-examples.md) page.\n\n","source":"ui/animation.md","raw":"---\ntitle: Animations\ndescription: Learn how to animate view properties.\nposition: 9\nslug: animations\nprevious_url: /animation\n---\n\n# Animations\n\nOne of the ways to improve the attractiveness of your application is by adding animations. NativeScript exposes a simple and easy, but powerful enough API to allow animating almost every native element in your application.\n\nFor your convenience, we expose two ways of creating animations:\n\n- [Declarative](./animation-css.md) - you will use the easy and familiar CSS3 animations API\n- [Imperative](./animation-code.md) - take full control of any animation by calling animation methods directly with code\n\n[Here](./animation-examples.md) you will find a detailed set of examples demonstrating the different animations that can be achieved with NativeScript.\n\n##Hello world example\n\nIn __Example 1__ we will change the background color of a button from \"red\" to \"green\". You can use JavaScript or TypeScript code to do the following:\n\n__Example 1: Changing background color animation with code.__\n\n![hello-world](../docs/img/modules/animation/hello-world.gif \"Hello world\")\n\n``` JavaScript\nview.backgroundColor = new colorModule.Color(\"red\");\nview.animate({ backgroundColor: new colorModule.Color(\"green\"), duration: 2000 });\n```\n``` TypeScript\nview.backgroundColor = new colorModule.Color(\"red\");\nview.animate({ backgroundColor: new colorModule.Color(\"green\"), duration: 2000 });\n```\n\nAs _Example 2_ shows, you can express the same animation in CSS with the following definition:\n\n__Example 2: Changing background color animation with CSS.__\n\n``` CSS\n@keyframes example {\n    from { background-color: red; }\n    to { background-color: green; }\n}\n.view {\n    animation-name: example;\n    animation-duration: 2s;\n    animation-fill-mode: forwards;\n}\n```\n\n> CSS animations apply with lower precedence, like any other CSS settings, so any local values set in your element will cancel the animation.\n\nNativeScript lets you animate the following properties:\n\n- **opacity**\n- **backgroundColor**\n- **translateX** and **translateY**\n- **scaleX** and **scaleY**\n- **rotate**\n\nIn every animation, you can control the following properties:\n\n- **duration**: The length of the animation.\n- **delay**: The amount of time to delay starting the animation.\n- **iterations**: Specifies how many times the animation should be played. \n- **timing function**: The speed curve of the animation. Available options are defined below.\n\n##Animation curves\n\nBy default, an animation moves with a linear speed without acceleration or deceleration. This might look unnatural and different from the real world where objects need time to reach their top speed and can't stop immediately. The animation curve (sometimes called an easing function) is used to give animations an illusion of inertia. It controls the animation speed by modifying the fraction of the duration. NativeScript comes with a number of predefined animation curves.\n\n- **linear**: The simplest animation curve is linear. It maintains a constant speed while the animation is running:\n![linear](../docs/img/modules/animation/linear.gif \"Linear\")\n\n- **Ease-in**: The ease-in curve causes the animation to begin slowly, and then speed up as it progresses.\n![easein](../docs/img/modules/animation/easein.gif \"EaseIn\")\n\n- **Ease-out**: An ease-out curve causes the animation to begin quickly, and then slow down as it completes.\n![easeout](../docs/img/modules/animation/easeout.gif \"EaseOut\")\n\n- **Ease-in-out**: An ease-in ease-out curve causes the animation to begin slowly, accelerate through the middle of its duration, and then slow again before completing.\n![easeinout](../docs/img/modules/animation/easeinout.gif \"EaseInOut\")\n\n- **Spring**: A spring animation curve causes an animation to produce a spring (bounce) effect.\n![spring](../docs/img/modules/animation/spring.gif \"Spring\")\n\nIn NativeScript, the animation curve is represented by the AnimationCurve enumeration and can be specified with the curve property of the animation. In CSS, the animation curve is defined by using the animation-timing-function property (see __Example 3__):\n\n__Example 3: How to customize the animation timing function__\n\n``` JavaScript\nvar enums = require(\"ui/enums\");\nview.animate({\n\ttranslate: { x: 0, y: 100},    \n\tduration: 1000,\n\tcurve: enums.AnimationCurve.easeIn\n});\n```\n``` TypeScript\nimport {AnimationCurve} from \"ui/enums\";\nview.animate({\n\ttranslate: { x: 0, y: 100},    \n\tduration: 1000,\n\tcurve: AnimationCurve.easeIn\n});\n```\n``` CSS\n.view {\n\tanimation-name: example;\n\tanimation-duration: 1;\n\tanimation-timing-function: ease-in;\n   animation-fill-mode: forwards;\n}\n@keyframes example {\n\tfrom { transform: translate(0, 0); }\n\tto { transform: translate(0, 100); }\n}\n```\n\nIt is easy to create your own animation curve by passing in the x and y components of two control points of a cubic Bezier curve (as shown in __Example 4__). Using Bezier curves is a common technique to create smooth curves in computer graphics and they are widely used in vector-based drawing tools. The values passed to the cubicBezier method control the curve shape. The animation speed will be adjusted based on the resulting path.\n\n__Example 4: How to create own animation curve via cubic Bezier__\n\n![beziergraph](../docs/img/modules/animation/bezier-graph.png \"BezierGraph\")\n\n``` JavaScript\nvar enums = require(\"ui/enums\");\nview.animate({\n    translate: { x: 0, y: 100 },\n    duration: 1000,\n    curve: enums.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)\n});\n```\n``` TypeScript\nimport {AnimationCurve} from \"ui/enums\";\nview.animate({\n    translate: { x: 0, y: 100 },\n    duration: 1000,\n    curve: AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)\n});\n```\n``` CSS\n.view {\n\tanimation-name: example;\n\tanimation-duration: 1;\n\tanimation-timing-function: cubicBezier(0.1, 0.1, 0.1, 1);\n\tanimation-fill-mode: forwards;\n}\n```\n\n![bezier](../docs/img/modules/animation/bezier.gif \"Bezier\")\n\n \nMore detailed examples are available on the [Animation Examples](./animation-examples.md) page.\n\n","date":"2016-08-26T21:05:54.587Z","updated":"2016-08-26T21:05:54.587Z","path":"ui/animation.html","comments":1,"layout":"page","_id":"cisn95cam000xwsl0khoy8xej","content":"<h1 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h1><p>One of the ways to improve the attractiveness of your application is by adding animations. NativeScript exposes a simple and easy, but powerful enough API to allow animating almost every native element in your application.</p>\n<p>For your convenience, we expose two ways of creating animations:</p>\n<ul>\n<li><a href=\"./animation-css.md\">Declarative</a> - you will use the easy and familiar CSS3 animations API</li>\n<li><a href=\"./animation-code.md\">Imperative</a> - take full control of any animation by calling animation methods directly with code</li>\n</ul>\n<p><a href=\"./animation-examples.md\">Here</a> you will find a detailed set of examples demonstrating the different animations that can be achieved with NativeScript.</p>\n<p>##Hello world example</p>\n<p>In <strong>Example 1</strong> we will change the background color of a button from “red” to “green”. You can use JavaScript or TypeScript code to do the following:</p>\n<p><strong>Example 1: Changing background color animation with code.</strong></p>\n<p><img src=\"../docs/img/modules/animation/hello-world.gif\" alt=\"hello-world\" title=\"Hello world\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.backgroundColor = <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"red\"</span>);</div><div class=\"line\">view.animate(&#123; backgroundColor: <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"green\"</span>), duration: <span class=\"number\">2000</span> &#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.backgroundColor = <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"red\"</span>);</div><div class=\"line\">view.animate(&#123; backgroundColor: <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"green\"</span>), duration: <span class=\"number\">2000</span> &#125;);</div></pre></td></tr></table></figure>\n<p>As <em>Example 2</em> shows, you can express the same animation in CSS with the following definition:</p>\n<p><strong>Example 2: Changing background color animation with CSS.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: green; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">2s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>CSS animations apply with lower precedence, like any other CSS settings, so any local values set in your element will cancel the animation.</p>\n</blockquote>\n<p>NativeScript lets you animate the following properties:</p>\n<ul>\n<li><strong>opacity</strong></li>\n<li><strong>backgroundColor</strong></li>\n<li><strong>translateX</strong> and <strong>translateY</strong></li>\n<li><strong>scaleX</strong> and <strong>scaleY</strong></li>\n<li><strong>rotate</strong></li>\n</ul>\n<p>In every animation, you can control the following properties:</p>\n<ul>\n<li><strong>duration</strong>: The length of the animation.</li>\n<li><strong>delay</strong>: The amount of time to delay starting the animation.</li>\n<li><strong>iterations</strong>: Specifies how many times the animation should be played. </li>\n<li><strong>timing function</strong>: The speed curve of the animation. Available options are defined below.</li>\n</ul>\n<p>##Animation curves</p>\n<p>By default, an animation moves with a linear speed without acceleration or deceleration. This might look unnatural and different from the real world where objects need time to reach their top speed and can’t stop immediately. The animation curve (sometimes called an easing function) is used to give animations an illusion of inertia. It controls the animation speed by modifying the fraction of the duration. NativeScript comes with a number of predefined animation curves.</p>\n<ul>\n<li><p><strong>linear</strong>: The simplest animation curve is linear. It maintains a constant speed while the animation is running:\n<img src=\"../docs/img/modules/animation/linear.gif\" alt=\"linear\" title=\"Linear\"></p>\n</li>\n<li><p><strong>Ease-in</strong>: The ease-in curve causes the animation to begin slowly, and then speed up as it progresses.\n<img src=\"../docs/img/modules/animation/easein.gif\" alt=\"easein\" title=\"EaseIn\"></p>\n</li>\n<li><p><strong>Ease-out</strong>: An ease-out curve causes the animation to begin quickly, and then slow down as it completes.\n<img src=\"../docs/img/modules/animation/easeout.gif\" alt=\"easeout\" title=\"EaseOut\"></p>\n</li>\n<li><p><strong>Ease-in-out</strong>: An ease-in ease-out curve causes the animation to begin slowly, accelerate through the middle of its duration, and then slow again before completing.\n<img src=\"../docs/img/modules/animation/easeinout.gif\" alt=\"easeinout\" title=\"EaseInOut\"></p>\n</li>\n<li><p><strong>Spring</strong>: A spring animation curve causes an animation to produce a spring (bounce) effect.\n<img src=\"../docs/img/modules/animation/spring.gif\" alt=\"spring\" title=\"Spring\"></p>\n</li>\n</ul>\n<p>In NativeScript, the animation curve is represented by the AnimationCurve enumeration and can be specified with the curve property of the animation. In CSS, the animation curve is defined by using the animation-timing-function property (see <strong>Example 3</strong>):</p>\n<p><strong>Example 3: How to customize the animation timing function</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> enums = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/enums\"</span>);</div><div class=\"line\">view.animate(&#123;</div><div class=\"line\">\ttranslate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span>&#125;,    </div><div class=\"line\">\tduration: <span class=\"number\">1000</span>,</div><div class=\"line\">\tcurve: enums.AnimationCurve.easeIn</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;AnimationCurve&#125; from <span class=\"string\">\"ui/enums\"</span>;</div><div class=\"line\">view.animate(&#123;</div><div class=\"line\">\ttranslate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span>&#125;,    </div><div class=\"line\">\tduration: <span class=\"number\">1000</span>,</div><div class=\"line\">\tcurve: AnimationCurve.easeIn</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"attribute\">animation-timing-function</span>: ease-in;</div><div class=\"line\">   <span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 100); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It is easy to create your own animation curve by passing in the x and y components of two control points of a cubic Bezier curve (as shown in <strong>Example 4</strong>). Using Bezier curves is a common technique to create smooth curves in computer graphics and they are widely used in vector-based drawing tools. The values passed to the cubicBezier method control the curve shape. The animation speed will be adjusted based on the resulting path.</p>\n<p><strong>Example 4: How to create own animation curve via cubic Bezier</strong></p>\n<p><img src=\"../docs/img/modules/animation/bezier-graph.png\" alt=\"beziergraph\" title=\"BezierGraph\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> enums = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/enums\"</span>);</div><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">1000</span>,</div><div class=\"line\">    curve: enums.AnimationCurve.cubicBezier(<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;AnimationCurve&#125; from <span class=\"string\">\"ui/enums\"</span>;</div><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">1000</span>,</div><div class=\"line\">    curve: AnimationCurve.cubicBezier(<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubicBezier</span>(0.1, 0.1, 0.1, 1);</div><div class=\"line\">\t<span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"../docs/img/modules/animation/bezier.gif\" alt=\"bezier\" title=\"Bezier\"></p>\n<p>More detailed examples are available on the <a href=\"./animation-examples.md\">Animation Examples</a> page.</p>\n","excerpt":"","more":"<h1 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h1><p>One of the ways to improve the attractiveness of your application is by adding animations. NativeScript exposes a simple and easy, but powerful enough API to allow animating almost every native element in your application.</p>\n<p>For your convenience, we expose two ways of creating animations:</p>\n<ul>\n<li><a href=\"./animation-css.md\">Declarative</a> - you will use the easy and familiar CSS3 animations API</li>\n<li><a href=\"./animation-code.md\">Imperative</a> - take full control of any animation by calling animation methods directly with code</li>\n</ul>\n<p><a href=\"./animation-examples.md\">Here</a> you will find a detailed set of examples demonstrating the different animations that can be achieved with NativeScript.</p>\n<p>##Hello world example</p>\n<p>In <strong>Example 1</strong> we will change the background color of a button from “red” to “green”. You can use JavaScript or TypeScript code to do the following:</p>\n<p><strong>Example 1: Changing background color animation with code.</strong></p>\n<p><img src=\"../docs/img/modules/animation/hello-world.gif\" alt=\"hello-world\" title=\"Hello world\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.backgroundColor = <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"red\"</span>);</div><div class=\"line\">view.animate(&#123; backgroundColor: <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"green\"</span>), duration: <span class=\"number\">2000</span> &#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.backgroundColor = <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"red\"</span>);</div><div class=\"line\">view.animate(&#123; backgroundColor: <span class=\"keyword\">new</span> colorModule.Color(<span class=\"string\">\"green\"</span>), duration: <span class=\"number\">2000</span> &#125;);</div></pre></td></tr></table></figure>\n<p>As <em>Example 2</em> shows, you can express the same animation in CSS with the following definition:</p>\n<p><strong>Example 2: Changing background color animation with CSS.</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</div><div class=\"line\">    <span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">background-color</span>: green; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">2s</span>;</div><div class=\"line\">    <span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>CSS animations apply with lower precedence, like any other CSS settings, so any local values set in your element will cancel the animation.</p>\n</blockquote>\n<p>NativeScript lets you animate the following properties:</p>\n<ul>\n<li><strong>opacity</strong></li>\n<li><strong>backgroundColor</strong></li>\n<li><strong>translateX</strong> and <strong>translateY</strong></li>\n<li><strong>scaleX</strong> and <strong>scaleY</strong></li>\n<li><strong>rotate</strong></li>\n</ul>\n<p>In every animation, you can control the following properties:</p>\n<ul>\n<li><strong>duration</strong>: The length of the animation.</li>\n<li><strong>delay</strong>: The amount of time to delay starting the animation.</li>\n<li><strong>iterations</strong>: Specifies how many times the animation should be played. </li>\n<li><strong>timing function</strong>: The speed curve of the animation. Available options are defined below.</li>\n</ul>\n<p>##Animation curves</p>\n<p>By default, an animation moves with a linear speed without acceleration or deceleration. This might look unnatural and different from the real world where objects need time to reach their top speed and can’t stop immediately. The animation curve (sometimes called an easing function) is used to give animations an illusion of inertia. It controls the animation speed by modifying the fraction of the duration. NativeScript comes with a number of predefined animation curves.</p>\n<ul>\n<li><p><strong>linear</strong>: The simplest animation curve is linear. It maintains a constant speed while the animation is running:\n<img src=\"../docs/img/modules/animation/linear.gif\" alt=\"linear\" title=\"Linear\"></p>\n</li>\n<li><p><strong>Ease-in</strong>: The ease-in curve causes the animation to begin slowly, and then speed up as it progresses.\n<img src=\"../docs/img/modules/animation/easein.gif\" alt=\"easein\" title=\"EaseIn\"></p>\n</li>\n<li><p><strong>Ease-out</strong>: An ease-out curve causes the animation to begin quickly, and then slow down as it completes.\n<img src=\"../docs/img/modules/animation/easeout.gif\" alt=\"easeout\" title=\"EaseOut\"></p>\n</li>\n<li><p><strong>Ease-in-out</strong>: An ease-in ease-out curve causes the animation to begin slowly, accelerate through the middle of its duration, and then slow again before completing.\n<img src=\"../docs/img/modules/animation/easeinout.gif\" alt=\"easeinout\" title=\"EaseInOut\"></p>\n</li>\n<li><p><strong>Spring</strong>: A spring animation curve causes an animation to produce a spring (bounce) effect.\n<img src=\"../docs/img/modules/animation/spring.gif\" alt=\"spring\" title=\"Spring\"></p>\n</li>\n</ul>\n<p>In NativeScript, the animation curve is represented by the AnimationCurve enumeration and can be specified with the curve property of the animation. In CSS, the animation curve is defined by using the animation-timing-function property (see <strong>Example 3</strong>):</p>\n<p><strong>Example 3: How to customize the animation timing function</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> enums = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/enums\"</span>);</div><div class=\"line\">view.animate(&#123;</div><div class=\"line\">\ttranslate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span>&#125;,    </div><div class=\"line\">\tduration: <span class=\"number\">1000</span>,</div><div class=\"line\">\tcurve: enums.AnimationCurve.easeIn</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;AnimationCurve&#125; from <span class=\"string\">\"ui/enums\"</span>;</div><div class=\"line\">view.animate(&#123;</div><div class=\"line\">\ttranslate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span>&#125;,    </div><div class=\"line\">\tduration: <span class=\"number\">1000</span>,</div><div class=\"line\">\tcurve: AnimationCurve.easeIn</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"attribute\">animation-timing-function</span>: ease-in;</div><div class=\"line\">   <span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> example &#123;</div><div class=\"line\">\t<span class=\"selector-tag\">from</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 0); &#125;</div><div class=\"line\">\t<span class=\"selector-tag\">to</span> &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0, 100); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It is easy to create your own animation curve by passing in the x and y components of two control points of a cubic Bezier curve (as shown in <strong>Example 4</strong>). Using Bezier curves is a common technique to create smooth curves in computer graphics and they are widely used in vector-based drawing tools. The values passed to the cubicBezier method control the curve shape. The animation speed will be adjusted based on the resulting path.</p>\n<p><strong>Example 4: How to create own animation curve via cubic Bezier</strong></p>\n<p><img src=\"../docs/img/modules/animation/bezier-graph.png\" alt=\"beziergraph\" title=\"BezierGraph\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> enums = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/enums\"</span>);</div><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">1000</span>,</div><div class=\"line\">    curve: enums.AnimationCurve.cubicBezier(<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;AnimationCurve&#125; from <span class=\"string\">\"ui/enums\"</span>;</div><div class=\"line\">view.animate(&#123;</div><div class=\"line\">    translate: &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">100</span> &#125;,</div><div class=\"line\">    duration: <span class=\"number\">1000</span>,</div><div class=\"line\">    curve: AnimationCurve.cubicBezier(<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.view</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">animation-name</span>: example;</div><div class=\"line\">\t<span class=\"attribute\">animation-duration</span>: <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"attribute\">animation-timing-function</span>: <span class=\"built_in\">cubicBezier</span>(0.1, 0.1, 0.1, 1);</div><div class=\"line\">\t<span class=\"attribute\">animation-fill-mode</span>: forwards;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"../docs/img/modules/animation/bezier.gif\" alt=\"bezier\" title=\"Bezier\"></p>\n<p>More detailed examples are available on the <a href=\"./animation-examples.md\">Animation Examples</a> page.</p>\n"},{"title":"Gestures","description":"Learn what touch gestures NativeScript supports and how to use them.","position":8,"slug":"gestures","previous_url":"/gestures","_content":"\n# Overview\n\nGestures, such as tap, slide and pinch, allow users to interact with your app by manipulating UI elements on the screen.\n\nIn NativeScript, `View`&mdash;the base class for all NativeScript UI elements&mdash;has `on` and `off` methods that let you subscribe or unsubscribe to all events and gestures recognized by the UI element.\n\nAs the first parameter, you pass an `on` or `off` method and the type of gesture you want to track. The second  parameter is a function that is called each time the specified gesture is recognized. The function arguments contain additional information about the gesture, if applicable.\n\n- **on(** type _Number_ | name _String_ | names Comma separated _String_, callback _Function_... **)\n   - **type** - _Number_ | **name** - _String_ | **names** - Comma separated _String_\n   - **callback** - _Function_(args _GestureEventData_)\n\n- **off(** type _Number_ | name _String_ | names Comma separated _String_, callback _Function_... **)\n   - **type** - _Number_ | **name** - _String_ | **names** - Comma separated _String_\n   - **callback** - _Function_(args _GestureEventData_)\n\nThe next sections introduce you to all the gestures recognized by NativeScript:\n\n* [Tap](#tap)\n* [Double Tap](#double-tap)\n* [Long Press](#long-press)\n* [Swipe](#swipe)\n* [Pan](#pan)\n* [Pinch](#pinch)\n* [Rotation](#rotation)\n* [Touch](#touch)\n{% nativescript %}* [Subscribing to Multiple Gestures and Events](#subscribing-to-multiple-gestures-and-events)\n{% endnativescript %}\n## Tap\n\n**Action: Briefly touch the screen.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.tap, function (args) {\n    console.log(\"Tap\");\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.tap, function (args: gestures.GestureEventData) {\n    console.log(\"Tap\");\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-tap-gesture%}{% endraw %}\n{% endangular %}\n\n## Double Tap\n\n**Action: Two taps in a quick succession.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.doubleTap, function (args) {\n    console.log(\"Double Tap\");\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.doubleTap, function (args: gestures.GestureEventData) {\n    console.log(\"Double Tap\");\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-double-tap-gesture%}{% endraw %}\n{% endangular %}\nPossible implementation:\n* Scale up the object with a predefined percentage, centered around the double-tapped region. If a user keeps repeating the double tap gesture, continue to scale up until the maximum scale is reached.\n* Scale up the smallest targetable view or returns it to its original scale in nested views.\n* Select text.\n\n## Long Press\n\n**Action: Press your finger against the screen for a few moments.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.longPress, function (args) {\n    console.log(\"Long Press\");\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.longPress, function (args: gestures.GestureEventData) {\n    console.log(\"Long Press\");\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-long-press-gesture%} {% endraw %}\n{% endangular %}\nPossible implementation: Select one or more items in a view and act upon the data using a contextual action bar. Enter data selection mode. Avoid using long press for displaying contextual menus.\n\n## Swipe\n\n**Action: Swiftly slide your finger across the screen. Swipes are quick and affect the screen even after the finger is lifted off the screen.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.swipe, function (args) {\n    console.log(\"Swipe Direction: \" + args.direction);\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.swipe, function (args: gestures.SwipeGestureEventData) {\n    console.log(\"Swipe Direction: \" + args.direction);\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-swipe-gesture%}{% endraw %}\n{% endangular %}\nPossible implementation: Navigate between views in the same hierarchy.\n\n## Pan\n\n**Action: Press your finger down and immediately start moving it around. Pans are executed more slowly and allow for more precision and the screen stops responding as soon as the finger is lifted off it.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.pan, function (args) {\n    console.log(\"Pan deltaX:\" + args.deltaX + \"; deltaY:\" + args.deltaY + \";\");\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nlabel.on(gestures.GestureTypes.pan, function (args: gestures.PanGestureEventData) {\n    console.log(\"Pan deltaX:\" + args.deltaX + \"; deltaY:\" + args.deltaY + \";\");\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-pan-gesture%}{% endraw %}\n{% endangular %}\n\n## Pinch\n\n**Action: Touch the screen using two of your fingers, then move them towards each other or away from each other.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.pinch, function (args) {\n    console.log(\"Pinch Scale: \" + args.scale);\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.pinch, function (args: gestures.PinchGestureEventData) {\n    console.log(\"Pinch Scale: \" + args.scale);\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-pinch-gesture%}{% endraw %}\n{% endangular %}\nPossible implementation: Zoom into content or out of content.\n\n## Rotation\n\n**Action: Touch the screen using two of your fingers, then rotate them simultaneously left or right.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.rotation, function (args) {\n    console.log(\"Rotation: \" + args.rotation);\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.rotation, function (args: gestures.RotationGestureEventData) {\n    console.log(\"Rotation: \" + args.rotation);\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-rotate-gesture%}{% endraw %}\n{% endangular %}\n\n## Touch\n\n**Action: A finger action was performed.**\n\nThis is a general purpose gesture that is triggered whenever a pointer (usually a finger) has performed a touch action (up, down, move or cancel). `TouchGestureEventData` provides information about all the pointers currently on the screen and their position inside the view that triggered the event.\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.touch, function (args) {\n    console.log(\"Touch: x: \" + args.getX() + \" y: \" + args.getY());\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.touch, function (args: gestures.TouchGestureEventData) {\n    console.log(\"Touch: x: \" + args.getX() + \" y: \" + args.getY());\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{% snippet ng-touch-gesture %}{% endraw %}\n{% endangular %}\n\n{% nativescript %}\n# Subscribing to Multiple Gestures and Events\n\nSince the release of NativeScript 1.3, when subscribing you can use gestures names, comma separated gestures names and/or even mix with events.\n\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(\"loaded, tap, doubleTap, longPress\", function (args) {\n    console.log(\"Event: \" + args.eventName + \", sender: \" + args.object);\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(\"loaded, tap, doubleTap, longPress\", function (args: gestures.GestureEventData) {\n    console.log(\"Event: \" + args.eventName + \", sender: \" + args.object);\n});\n```\n{% endnativescript %}\n","source":"ui/gestures.md","raw":"---\ntitle: Gestures\ndescription: Learn what touch gestures NativeScript supports and how to use them.\nposition: 8\nslug: gestures\nprevious_url: /gestures\n\n---\n\n# Overview\n\nGestures, such as tap, slide and pinch, allow users to interact with your app by manipulating UI elements on the screen.\n\nIn NativeScript, `View`&mdash;the base class for all NativeScript UI elements&mdash;has `on` and `off` methods that let you subscribe or unsubscribe to all events and gestures recognized by the UI element.\n\nAs the first parameter, you pass an `on` or `off` method and the type of gesture you want to track. The second  parameter is a function that is called each time the specified gesture is recognized. The function arguments contain additional information about the gesture, if applicable.\n\n- **on(** type _Number_ | name _String_ | names Comma separated _String_, callback _Function_... **)\n   - **type** - _Number_ | **name** - _String_ | **names** - Comma separated _String_\n   - **callback** - _Function_(args _GestureEventData_)\n\n- **off(** type _Number_ | name _String_ | names Comma separated _String_, callback _Function_... **)\n   - **type** - _Number_ | **name** - _String_ | **names** - Comma separated _String_\n   - **callback** - _Function_(args _GestureEventData_)\n\nThe next sections introduce you to all the gestures recognized by NativeScript:\n\n* [Tap](#tap)\n* [Double Tap](#double-tap)\n* [Long Press](#long-press)\n* [Swipe](#swipe)\n* [Pan](#pan)\n* [Pinch](#pinch)\n* [Rotation](#rotation)\n* [Touch](#touch)\n{% nativescript %}* [Subscribing to Multiple Gestures and Events](#subscribing-to-multiple-gestures-and-events)\n{% endnativescript %}\n## Tap\n\n**Action: Briefly touch the screen.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.tap, function (args) {\n    console.log(\"Tap\");\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.tap, function (args: gestures.GestureEventData) {\n    console.log(\"Tap\");\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-tap-gesture%}{% endraw %}\n{% endangular %}\n\n## Double Tap\n\n**Action: Two taps in a quick succession.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.doubleTap, function (args) {\n    console.log(\"Double Tap\");\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.doubleTap, function (args: gestures.GestureEventData) {\n    console.log(\"Double Tap\");\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-double-tap-gesture%}{% endraw %}\n{% endangular %}\nPossible implementation:\n* Scale up the object with a predefined percentage, centered around the double-tapped region. If a user keeps repeating the double tap gesture, continue to scale up until the maximum scale is reached.\n* Scale up the smallest targetable view or returns it to its original scale in nested views.\n* Select text.\n\n## Long Press\n\n**Action: Press your finger against the screen for a few moments.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.longPress, function (args) {\n    console.log(\"Long Press\");\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.longPress, function (args: gestures.GestureEventData) {\n    console.log(\"Long Press\");\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-long-press-gesture%} {% endraw %}\n{% endangular %}\nPossible implementation: Select one or more items in a view and act upon the data using a contextual action bar. Enter data selection mode. Avoid using long press for displaying contextual menus.\n\n## Swipe\n\n**Action: Swiftly slide your finger across the screen. Swipes are quick and affect the screen even after the finger is lifted off the screen.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.swipe, function (args) {\n    console.log(\"Swipe Direction: \" + args.direction);\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.swipe, function (args: gestures.SwipeGestureEventData) {\n    console.log(\"Swipe Direction: \" + args.direction);\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-swipe-gesture%}{% endraw %}\n{% endangular %}\nPossible implementation: Navigate between views in the same hierarchy.\n\n## Pan\n\n**Action: Press your finger down and immediately start moving it around. Pans are executed more slowly and allow for more precision and the screen stops responding as soon as the finger is lifted off it.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.pan, function (args) {\n    console.log(\"Pan deltaX:\" + args.deltaX + \"; deltaY:\" + args.deltaY + \";\");\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nlabel.on(gestures.GestureTypes.pan, function (args: gestures.PanGestureEventData) {\n    console.log(\"Pan deltaX:\" + args.deltaX + \"; deltaY:\" + args.deltaY + \";\");\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-pan-gesture%}{% endraw %}\n{% endangular %}\n\n## Pinch\n\n**Action: Touch the screen using two of your fingers, then move them towards each other or away from each other.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.pinch, function (args) {\n    console.log(\"Pinch Scale: \" + args.scale);\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.pinch, function (args: gestures.PinchGestureEventData) {\n    console.log(\"Pinch Scale: \" + args.scale);\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-pinch-gesture%}{% endraw %}\n{% endangular %}\nPossible implementation: Zoom into content or out of content.\n\n## Rotation\n\n**Action: Touch the screen using two of your fingers, then rotate them simultaneously left or right.**\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.rotation, function (args) {\n    console.log(\"Rotation: \" + args.rotation);\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.rotation, function (args: gestures.RotationGestureEventData) {\n    console.log(\"Rotation: \" + args.rotation);\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet ng-rotate-gesture%}{% endraw %}\n{% endangular %}\n\n## Touch\n\n**Action: A finger action was performed.**\n\nThis is a general purpose gesture that is triggered whenever a pointer (usually a finger) has performed a touch action (up, down, move or cancel). `TouchGestureEventData` provides information about all the pointers currently on the screen and their position inside the view that triggered the event.\n\n{% nativescript %}\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.touch, function (args) {\n    console.log(\"Touch: x: \" + args.getX() + \" y: \" + args.getY());\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(gestures.GestureTypes.touch, function (args: gestures.TouchGestureEventData) {\n    console.log(\"Touch: x: \" + args.getX() + \" y: \" + args.getY());\n});\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{% snippet ng-touch-gesture %}{% endraw %}\n{% endangular %}\n\n{% nativescript %}\n# Subscribing to Multiple Gestures and Events\n\nSince the release of NativeScript 1.3, when subscribing you can use gestures names, comma separated gestures names and/or even mix with events.\n\n``` JavaScript\nvar labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(\"loaded, tap, doubleTap, longPress\", function (args) {\n    console.log(\"Event: \" + args.eventName + \", sender: \" + args.object);\n});\n```\n``` TypeScript\nimport labelModule = require(\"ui/label\");\nvar label = new labelModule.Label();\nlabel.on(\"loaded, tap, doubleTap, longPress\", function (args: gestures.GestureEventData) {\n    console.log(\"Event: \" + args.eventName + \", sender: \" + args.object);\n});\n```\n{% endnativescript %}\n","date":"2016-08-26T21:05:54.594Z","updated":"2016-08-26T21:05:54.594Z","path":"ui/gestures.html","comments":1,"layout":"page","_id":"cisn95cao000ywsl070q9zye6","content":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>Gestures, such as tap, slide and pinch, allow users to interact with your app by manipulating UI elements on the screen.</p>\n<p>In NativeScript, <code>View</code>&mdash;the base class for all NativeScript UI elements&mdash;has <code>on</code> and <code>off</code> methods that let you subscribe or unsubscribe to all events and gestures recognized by the UI element.</p>\n<p>As the first parameter, you pass an <code>on</code> or <code>off</code> method and the type of gesture you want to track. The second  parameter is a function that is called each time the specified gesture is recognized. The function arguments contain additional information about the gesture, if applicable.</p>\n<ul>\n<li><p><strong>on(</strong> type <em>Number</em> | name <em>String</em> | names Comma separated <em>String</em>, callback <em>Function</em>… **)</p>\n<ul>\n<li><strong>type</strong> - <em>Number</em> | <strong>name</strong> - <em>String</em> | <strong>names</strong> - Comma separated <em>String</em></li>\n<li><strong>callback</strong> - <em>Function</em>(args <em>GestureEventData</em>)</li>\n</ul>\n</li>\n<li><p><strong>off(</strong> type <em>Number</em> | name <em>String</em> | names Comma separated <em>String</em>, callback <em>Function</em>… **)</p>\n<ul>\n<li><strong>type</strong> - <em>Number</em> | <strong>name</strong> - <em>String</em> | <strong>names</strong> - Comma separated <em>String</em></li>\n<li><strong>callback</strong> - <em>Function</em>(args <em>GestureEventData</em>)</li>\n</ul>\n</li>\n</ul>\n<p>The next sections introduce you to all the gestures recognized by NativeScript:</p>\n<ul>\n<li><a href=\"#tap\">Tap</a></li>\n<li><a href=\"#double-tap\">Double Tap</a></li>\n<li><a href=\"#long-press\">Long Press</a></li>\n<li><a href=\"#swipe\">Swipe</a></li>\n<li><a href=\"#pan\">Pan</a></li>\n<li><a href=\"#pinch\">Pinch</a></li>\n<li><a href=\"#rotation\">Rotation</a></li>\n<li><a href=\"#touch\">Touch</a><div class=\"codeblock n\"><ul>\n<li><a href=\"#subscribing-to-multiple-gestures-and-events\">Subscribing to Multiple Gestures and Events</a></li>\n</ul>\n</div>\n<h2 id=\"Tap\"><a href=\"#Tap\" class=\"headerlink\" title=\"Tap\"></a>Tap</h2></li>\n</ul>\n<p><strong>Action: Briefly touch the screen.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-tap-gesture%}</p>\n</div>\n<h2 id=\"Double-Tap\"><a href=\"#Double-Tap\" class=\"headerlink\" title=\"Double Tap\"></a>Double Tap</h2><p><strong>Action: Two taps in a quick succession.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-double-tap-gesture%}</p>\n</div>\n<p>Possible implementation:</p>\n<ul>\n<li>Scale up the object with a predefined percentage, centered around the double-tapped region. If a user keeps repeating the double tap gesture, continue to scale up until the maximum scale is reached.</li>\n<li>Scale up the smallest targetable view or returns it to its original scale in nested views.</li>\n<li>Select text.</li>\n</ul>\n<h2 id=\"Long-Press\"><a href=\"#Long-Press\" class=\"headerlink\" title=\"Long Press\"></a>Long Press</h2><p><strong>Action: Press your finger against the screen for a few moments.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-long-press-gesture%} </p>\n</div>\n<p>Possible implementation: Select one or more items in a view and act upon the data using a contextual action bar. Enter data selection mode. Avoid using long press for displaying contextual menus.</p>\n<h2 id=\"Swipe\"><a href=\"#Swipe\" class=\"headerlink\" title=\"Swipe\"></a>Swipe</h2><p><strong>Action: Swiftly slide your finger across the screen. Swipes are quick and affect the screen even after the finger is lifted off the screen.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-swipe-gesture%}</p>\n</div>\n<p>Possible implementation: Navigate between views in the same hierarchy.</p>\n<h2 id=\"Pan\"><a href=\"#Pan\" class=\"headerlink\" title=\"Pan\"></a>Pan</h2><p><strong>Action: Press your finger down and immediately start moving it around. Pans are executed more slowly and allow for more precision and the screen stops responding as soon as the finger is lifted off it.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-pan-gesture%}</p>\n</div>\n<h2 id=\"Pinch\"><a href=\"#Pinch\" class=\"headerlink\" title=\"Pinch\"></a>Pinch</h2><p><strong>Action: Touch the screen using two of your fingers, then move them towards each other or away from each other.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-pinch-gesture%}</p>\n</div>\n<p>Possible implementation: Zoom into content or out of content.</p>\n<h2 id=\"Rotation\"><a href=\"#Rotation\" class=\"headerlink\" title=\"Rotation\"></a>Rotation</h2><p><strong>Action: Touch the screen using two of your fingers, then rotate them simultaneously left or right.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-rotate-gesture%}</p>\n</div>\n<h2 id=\"Touch\"><a href=\"#Touch\" class=\"headerlink\" title=\"Touch\"></a>Touch</h2><p><strong>Action: A finger action was performed.</strong></p>\n<p>This is a general purpose gesture that is triggered whenever a pointer (usually a finger) has performed a touch action (up, down, move or cancel). <code>TouchGestureEventData</code> provides information about all the pointers currently on the screen and their position inside the view that triggered the event.</p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{% snippet ng-touch-gesture %}</p>\n</div>\n<div class=\"codeblock n\"><h1 id=\"subscribing-to-multiple-gestures-and-events\">Subscribing to Multiple Gestures and Events</h1>\n<p>Since the release of NativeScript 1.3, when subscribing you can use gestures names, comma separated gestures names and/or even mix with events.</p>\nundefined\nundefined\n</div>\n","excerpt":"","more":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>Gestures, such as tap, slide and pinch, allow users to interact with your app by manipulating UI elements on the screen.</p>\n<p>In NativeScript, <code>View</code>&mdash;the base class for all NativeScript UI elements&mdash;has <code>on</code> and <code>off</code> methods that let you subscribe or unsubscribe to all events and gestures recognized by the UI element.</p>\n<p>As the first parameter, you pass an <code>on</code> or <code>off</code> method and the type of gesture you want to track. The second  parameter is a function that is called each time the specified gesture is recognized. The function arguments contain additional information about the gesture, if applicable.</p>\n<ul>\n<li><p><strong>on(</strong> type <em>Number</em> | name <em>String</em> | names Comma separated <em>String</em>, callback <em>Function</em>… **)</p>\n<ul>\n<li><strong>type</strong> - <em>Number</em> | <strong>name</strong> - <em>String</em> | <strong>names</strong> - Comma separated <em>String</em></li>\n<li><strong>callback</strong> - <em>Function</em>(args <em>GestureEventData</em>)</li>\n</ul>\n</li>\n<li><p><strong>off(</strong> type <em>Number</em> | name <em>String</em> | names Comma separated <em>String</em>, callback <em>Function</em>… **)</p>\n<ul>\n<li><strong>type</strong> - <em>Number</em> | <strong>name</strong> - <em>String</em> | <strong>names</strong> - Comma separated <em>String</em></li>\n<li><strong>callback</strong> - <em>Function</em>(args <em>GestureEventData</em>)</li>\n</ul>\n</li>\n</ul>\n<p>The next sections introduce you to all the gestures recognized by NativeScript:</p>\n<ul>\n<li><a href=\"#tap\">Tap</a></li>\n<li><a href=\"#double-tap\">Double Tap</a></li>\n<li><a href=\"#long-press\">Long Press</a></li>\n<li><a href=\"#swipe\">Swipe</a></li>\n<li><a href=\"#pan\">Pan</a></li>\n<li><a href=\"#pinch\">Pinch</a></li>\n<li><a href=\"#rotation\">Rotation</a></li>\n<li><a href=\"#touch\">Touch</a><div class=\"codeblock n\"><ul>\n<li><a href=\"#subscribing-to-multiple-gestures-and-events\">Subscribing to Multiple Gestures and Events</a></li>\n</ul>\n</div>\n<h2 id=\"Tap\"><a href=\"#Tap\" class=\"headerlink\" title=\"Tap\"></a>Tap</h2></li>\n</ul>\n<p><strong>Action: Briefly touch the screen.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-tap-gesture%}</p>\n</div>\n<h2 id=\"Double-Tap\"><a href=\"#Double-Tap\" class=\"headerlink\" title=\"Double Tap\"></a>Double Tap</h2><p><strong>Action: Two taps in a quick succession.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-double-tap-gesture%}</p>\n</div>\n<p>Possible implementation:</p>\n<ul>\n<li>Scale up the object with a predefined percentage, centered around the double-tapped region. If a user keeps repeating the double tap gesture, continue to scale up until the maximum scale is reached.</li>\n<li>Scale up the smallest targetable view or returns it to its original scale in nested views.</li>\n<li>Select text.</li>\n</ul>\n<h2 id=\"Long-Press\"><a href=\"#Long-Press\" class=\"headerlink\" title=\"Long Press\"></a>Long Press</h2><p><strong>Action: Press your finger against the screen for a few moments.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-long-press-gesture%} </p>\n</div>\n<p>Possible implementation: Select one or more items in a view and act upon the data using a contextual action bar. Enter data selection mode. Avoid using long press for displaying contextual menus.</p>\n<h2 id=\"Swipe\"><a href=\"#Swipe\" class=\"headerlink\" title=\"Swipe\"></a>Swipe</h2><p><strong>Action: Swiftly slide your finger across the screen. Swipes are quick and affect the screen even after the finger is lifted off the screen.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-swipe-gesture%}</p>\n</div>\n<p>Possible implementation: Navigate between views in the same hierarchy.</p>\n<h2 id=\"Pan\"><a href=\"#Pan\" class=\"headerlink\" title=\"Pan\"></a>Pan</h2><p><strong>Action: Press your finger down and immediately start moving it around. Pans are executed more slowly and allow for more precision and the screen stops responding as soon as the finger is lifted off it.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-pan-gesture%}</p>\n</div>\n<h2 id=\"Pinch\"><a href=\"#Pinch\" class=\"headerlink\" title=\"Pinch\"></a>Pinch</h2><p><strong>Action: Touch the screen using two of your fingers, then move them towards each other or away from each other.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-pinch-gesture%}</p>\n</div>\n<p>Possible implementation: Zoom into content or out of content.</p>\n<h2 id=\"Rotation\"><a href=\"#Rotation\" class=\"headerlink\" title=\"Rotation\"></a>Rotation</h2><p><strong>Action: Touch the screen using two of your fingers, then rotate them simultaneously left or right.</strong></p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet ng-rotate-gesture%}</p>\n</div>\n<h2 id=\"Touch\"><a href=\"#Touch\" class=\"headerlink\" title=\"Touch\"></a>Touch</h2><p><strong>Action: A finger action was performed.</strong></p>\n<p>This is a general purpose gesture that is triggered whenever a pointer (usually a finger) has performed a touch action (up, down, move or cancel). <code>TouchGestureEventData</code> provides information about all the pointers currently on the screen and their position inside the view that triggered the event.</p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{% snippet ng-touch-gesture %}</p>\n</div>\n<div class=\"codeblock n\"><h1 id=\"subscribing-to-multiple-gestures-and-events\">Subscribing to Multiple Gestures and Events</h1>\n<p>Since the release of NativeScript 1.3, when subscribing you can use gestures names, comma separated gestures names and/or even mix with events.</p>\nundefined\nundefined\n</div>\n"},{"title":"Keyboard","description":"Learn how to configure the soft keyboard when entering text in a TextField or TextView.","position":12,"slug":"keyboard","previous_url":"/keyboard","_content":"\n# Keyboard Type\nAll widgets that inherit from [`EditableTextBase`](http://docs.nativescript.org/api-reference/classes/_ui_editable_text_base_.editabletextbase.html), i.e., [`TextField`](http://docs.nativescript.org/api-reference/classes/_ui_text_field_.textfield.html) and [`TextView`](http://docs.nativescript.org/api-reference/classes/_ui_text_view_.textview.html), have a **keyboardType** property that gets or sets the soft keyboard type that will be shown while in edit mode. Possible values are contained in the [`KeyboardType`](http://docs.nativescript.org/api-reference/modules/_ui_enums_.keyboardtype.html) enumeration.\n\n- datetime\n - Android: [TYPE_CLASS_DATETIME](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_DATETIME) | [TYPE_DATETIME_VARIATION_NORMAL](http://developer.android.com/reference/android/text/InputType.html#TYPE_DATETIME_VARIATION_NORMAL)\n - iOS:  [UIKeyboardTypeNumbersAndPunctuation](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![datetime](../docs/img/modules/keyboard/datetime.png \"datetime\")\n- phone\n - Android: [TYPE_CLASS_PHONE](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_PHONE)\n - iOS:  [UIKeyboardTypePhonePad](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![phone](../docs/img/modules/keyboard/phone.png \"phone\")\n- number\n - Android: [TYPE_CLASS_NUMBER](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_NUMBER) | [TYPE_NUMBER_VARIATION_NORMAL](http://developer.android.com/intl/es/reference/android/text/InputType.html#TYPE_NUMBER_VARIATION_NORMAL) | [TYPE_NUMBER_FLAG_SIGNED](http://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_SIGNED) | [TYPE_NUMBER_FLAG_DECIMAL](http://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_DECIMAL)\n - iOS:  [UIKeyboardTypeNumbersAndPunctuation](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![number](../docs/img/modules/keyboard/number.png \"number\")\n- url\n - Android: [TYPE_CLASS_TEXT](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_TEXT) | [TYPE_TEXT_VARIATION_URI](http://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_URI)\n - iOS:  [UIKeyboardTypeURL](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![url](../docs/img/modules/keyboard/url.png \"url\")\n- email\n - Android: [TYPE_CLASS_TEXT](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_TEXT) | [TYPE_TEXT_VARIATION_EMAIL_ADDRESS](http://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_EMAIL_ADDRESS)\n - iOS:  [UIKeyboardTypeEmailAddress](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![email](/docs/img/modules/keyboard/email.png \"email\")\n\n# Return Key Type\nAll widgets that inherit from [`EditableTextBase`](http://docs.nativescript.org/api-reference/classes/_ui_editable_text_base_.editabletextbase.html), i.e., [`TextField`](http://docs.nativescript.org/api-reference/classes/_ui_text_field_.textfield.html) and [`TextView`](http://docs.nativescript.org/api-reference/classes/_ui_text_view_.textview.html), have a **returnKeyType** property that gets or sets the soft keyboard return key type. Possible values are contained in the [`ReturnKeyType`](http://docs.nativescript.org/api-reference/modules/_ui_enums_.returnkeytype.html) enumeration.\n\n- done\n - Android: [IME_ACTION_DONE](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_DONE)\n - iOS: [UIReturnKeyDone](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![done](../docs/img/modules/keyboard/done.png \"done\")\n- next\n - Android: [IME_ACTION_NEXT](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_NEXT)\n - iOS: [UIReturnKeyNext](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![next](../docs/img/modules/keyboard/next.png \"next\")\n- go\n - Android: [IME_ACTION_GO](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_GO)\n - iOS: [UIReturnKeyGo](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![go](../docs/img/modules/keyboard/go.png \"go\")\n- search\n - Android: [IME_ACTION_SEARCH](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_SEARCH)\n - iOS: [UIReturnKeySearch](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![search](../docs/img/modules/keyboard/search.png \"search\")\n- send\n - Android: [IME_ACTION_SEND](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_SEND)\n - iOS: [UIReturnKeySend](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![send](../docs/img/modules/keyboard/send.png \"send\")\n","source":"ui/keyboard.md","raw":"---\ntitle: Keyboard\ndescription: Learn how to configure the soft keyboard when entering text in a TextField or TextView.\nposition: 12\nslug: keyboard\nprevious_url: /keyboard\n---\n\n# Keyboard Type\nAll widgets that inherit from [`EditableTextBase`](http://docs.nativescript.org/api-reference/classes/_ui_editable_text_base_.editabletextbase.html), i.e., [`TextField`](http://docs.nativescript.org/api-reference/classes/_ui_text_field_.textfield.html) and [`TextView`](http://docs.nativescript.org/api-reference/classes/_ui_text_view_.textview.html), have a **keyboardType** property that gets or sets the soft keyboard type that will be shown while in edit mode. Possible values are contained in the [`KeyboardType`](http://docs.nativescript.org/api-reference/modules/_ui_enums_.keyboardtype.html) enumeration.\n\n- datetime\n - Android: [TYPE_CLASS_DATETIME](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_DATETIME) | [TYPE_DATETIME_VARIATION_NORMAL](http://developer.android.com/reference/android/text/InputType.html#TYPE_DATETIME_VARIATION_NORMAL)\n - iOS:  [UIKeyboardTypeNumbersAndPunctuation](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![datetime](../docs/img/modules/keyboard/datetime.png \"datetime\")\n- phone\n - Android: [TYPE_CLASS_PHONE](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_PHONE)\n - iOS:  [UIKeyboardTypePhonePad](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![phone](../docs/img/modules/keyboard/phone.png \"phone\")\n- number\n - Android: [TYPE_CLASS_NUMBER](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_NUMBER) | [TYPE_NUMBER_VARIATION_NORMAL](http://developer.android.com/intl/es/reference/android/text/InputType.html#TYPE_NUMBER_VARIATION_NORMAL) | [TYPE_NUMBER_FLAG_SIGNED](http://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_SIGNED) | [TYPE_NUMBER_FLAG_DECIMAL](http://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_DECIMAL)\n - iOS:  [UIKeyboardTypeNumbersAndPunctuation](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![number](../docs/img/modules/keyboard/number.png \"number\")\n- url\n - Android: [TYPE_CLASS_TEXT](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_TEXT) | [TYPE_TEXT_VARIATION_URI](http://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_URI)\n - iOS:  [UIKeyboardTypeURL](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![url](../docs/img/modules/keyboard/url.png \"url\")\n- email\n - Android: [TYPE_CLASS_TEXT](http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_TEXT) | [TYPE_TEXT_VARIATION_EMAIL_ADDRESS](http://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_EMAIL_ADDRESS)\n - iOS:  [UIKeyboardTypeEmailAddress](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType)\n - ![email](/docs/img/modules/keyboard/email.png \"email\")\n\n# Return Key Type\nAll widgets that inherit from [`EditableTextBase`](http://docs.nativescript.org/api-reference/classes/_ui_editable_text_base_.editabletextbase.html), i.e., [`TextField`](http://docs.nativescript.org/api-reference/classes/_ui_text_field_.textfield.html) and [`TextView`](http://docs.nativescript.org/api-reference/classes/_ui_text_view_.textview.html), have a **returnKeyType** property that gets or sets the soft keyboard return key type. Possible values are contained in the [`ReturnKeyType`](http://docs.nativescript.org/api-reference/modules/_ui_enums_.returnkeytype.html) enumeration.\n\n- done\n - Android: [IME_ACTION_DONE](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_DONE)\n - iOS: [UIReturnKeyDone](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![done](../docs/img/modules/keyboard/done.png \"done\")\n- next\n - Android: [IME_ACTION_NEXT](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_NEXT)\n - iOS: [UIReturnKeyNext](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![next](../docs/img/modules/keyboard/next.png \"next\")\n- go\n - Android: [IME_ACTION_GO](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_GO)\n - iOS: [UIReturnKeyGo](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![go](../docs/img/modules/keyboard/go.png \"go\")\n- search\n - Android: [IME_ACTION_SEARCH](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_SEARCH)\n - iOS: [UIReturnKeySearch](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![search](../docs/img/modules/keyboard/search.png \"search\")\n- send\n - Android: [IME_ACTION_SEND](http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_SEND)\n - iOS: [UIReturnKeySend](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType)\n - ![send](../docs/img/modules/keyboard/send.png \"send\")\n","date":"2016-08-26T21:05:54.602Z","updated":"2016-08-26T21:05:54.602Z","path":"ui/keyboard.html","comments":1,"layout":"page","_id":"cisn95cap000zwsl03iz6pue2","content":"<h1 id=\"Keyboard-Type\"><a href=\"#Keyboard-Type\" class=\"headerlink\" title=\"Keyboard Type\"></a>Keyboard Type</h1><p>All widgets that inherit from <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_editable_text_base_.editabletextbase.html\"><code>EditableTextBase</code></a>, i.e., <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_text_field_.textfield.html\"><code>TextField</code></a> and <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_text_view_.textview.html\"><code>TextView</code></a>, have a <strong>keyboardType</strong> property that gets or sets the soft keyboard type that will be shown while in edit mode. Possible values are contained in the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.keyboardtype.html\"><code>KeyboardType</code></a> enumeration.</p>\n<ul>\n<li>datetime<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_DATETIME\" target=\"_blank\" rel=\"external\">TYPE_CLASS_DATETIME</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_DATETIME_VARIATION_NORMAL\" target=\"_blank\" rel=\"external\">TYPE_DATETIME_VARIATION_NORMAL</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\" target=\"_blank\" rel=\"external\">UIKeyboardTypeNumbersAndPunctuation</a></li>\n<li><img src=\"../docs/img/modules/keyboard/datetime.png\" alt=\"datetime\" title=\"datetime\"></li>\n</ul>\n</li>\n<li>phone<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_PHONE\" target=\"_blank\" rel=\"external\">TYPE_CLASS_PHONE</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\" target=\"_blank\" rel=\"external\">UIKeyboardTypePhonePad</a></li>\n<li><img src=\"../docs/img/modules/keyboard/phone.png\" alt=\"phone\" title=\"phone\"></li>\n</ul>\n</li>\n<li>number<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_NUMBER\" target=\"_blank\" rel=\"external\">TYPE_CLASS_NUMBER</a> | <a href=\"http://developer.android.com/intl/es/reference/android/text/InputType.html#TYPE_NUMBER_VARIATION_NORMAL\" target=\"_blank\" rel=\"external\">TYPE_NUMBER_VARIATION_NORMAL</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_SIGNED\" target=\"_blank\" rel=\"external\">TYPE_NUMBER_FLAG_SIGNED</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_DECIMAL\" target=\"_blank\" rel=\"external\">TYPE_NUMBER_FLAG_DECIMAL</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\" target=\"_blank\" rel=\"external\">UIKeyboardTypeNumbersAndPunctuation</a></li>\n<li><img src=\"../docs/img/modules/keyboard/number.png\" alt=\"number\" title=\"number\"></li>\n</ul>\n</li>\n<li>url<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_TEXT\" target=\"_blank\" rel=\"external\">TYPE_CLASS_TEXT</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_URI\" target=\"_blank\" rel=\"external\">TYPE_TEXT_VARIATION_URI</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\" target=\"_blank\" rel=\"external\">UIKeyboardTypeURL</a></li>\n<li><img src=\"../docs/img/modules/keyboard/url.png\" alt=\"url\" title=\"url\"></li>\n</ul>\n</li>\n<li>email<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_TEXT\" target=\"_blank\" rel=\"external\">TYPE_CLASS_TEXT</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_EMAIL_ADDRESS\" target=\"_blank\" rel=\"external\">TYPE_TEXT_VARIATION_EMAIL_ADDRESS</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\" target=\"_blank\" rel=\"external\">UIKeyboardTypeEmailAddress</a></li>\n<li><img src=\"/docs/img/modules/keyboard/email.png\" alt=\"email\" title=\"email\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Return-Key-Type\"><a href=\"#Return-Key-Type\" class=\"headerlink\" title=\"Return Key Type\"></a>Return Key Type</h1><p>All widgets that inherit from <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_editable_text_base_.editabletextbase.html\"><code>EditableTextBase</code></a>, i.e., <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_text_field_.textfield.html\"><code>TextField</code></a> and <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_text_view_.textview.html\"><code>TextView</code></a>, have a <strong>returnKeyType</strong> property that gets or sets the soft keyboard return key type. Possible values are contained in the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.returnkeytype.html\"><code>ReturnKeyType</code></a> enumeration.</p>\n<ul>\n<li>done<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_DONE\" target=\"_blank\" rel=\"external\">IME_ACTION_DONE</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\" target=\"_blank\" rel=\"external\">UIReturnKeyDone</a></li>\n<li><img src=\"../docs/img/modules/keyboard/done.png\" alt=\"done\" title=\"done\"></li>\n</ul>\n</li>\n<li>next<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_NEXT\" target=\"_blank\" rel=\"external\">IME_ACTION_NEXT</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\" target=\"_blank\" rel=\"external\">UIReturnKeyNext</a></li>\n<li><img src=\"../docs/img/modules/keyboard/next.png\" alt=\"next\" title=\"next\"></li>\n</ul>\n</li>\n<li>go<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_GO\" target=\"_blank\" rel=\"external\">IME_ACTION_GO</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\" target=\"_blank\" rel=\"external\">UIReturnKeyGo</a></li>\n<li><img src=\"../docs/img/modules/keyboard/go.png\" alt=\"go\" title=\"go\"></li>\n</ul>\n</li>\n<li>search<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_SEARCH\" target=\"_blank\" rel=\"external\">IME_ACTION_SEARCH</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\" target=\"_blank\" rel=\"external\">UIReturnKeySearch</a></li>\n<li><img src=\"../docs/img/modules/keyboard/search.png\" alt=\"search\" title=\"search\"></li>\n</ul>\n</li>\n<li>send<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_SEND\" target=\"_blank\" rel=\"external\">IME_ACTION_SEND</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\" target=\"_blank\" rel=\"external\">UIReturnKeySend</a></li>\n<li><img src=\"../docs/img/modules/keyboard/send.png\" alt=\"send\" title=\"send\"></li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Keyboard-Type\"><a href=\"#Keyboard-Type\" class=\"headerlink\" title=\"Keyboard Type\"></a>Keyboard Type</h1><p>All widgets that inherit from <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_editable_text_base_.editabletextbase.html\"><code>EditableTextBase</code></a>, i.e., <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_text_field_.textfield.html\"><code>TextField</code></a> and <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_text_view_.textview.html\"><code>TextView</code></a>, have a <strong>keyboardType</strong> property that gets or sets the soft keyboard type that will be shown while in edit mode. Possible values are contained in the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.keyboardtype.html\"><code>KeyboardType</code></a> enumeration.</p>\n<ul>\n<li>datetime<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_DATETIME\">TYPE_CLASS_DATETIME</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_DATETIME_VARIATION_NORMAL\">TYPE_DATETIME_VARIATION_NORMAL</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\">UIKeyboardTypeNumbersAndPunctuation</a></li>\n<li><img src=\"../docs/img/modules/keyboard/datetime.png\" alt=\"datetime\" title=\"datetime\"></li>\n</ul>\n</li>\n<li>phone<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_PHONE\">TYPE_CLASS_PHONE</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\">UIKeyboardTypePhonePad</a></li>\n<li><img src=\"../docs/img/modules/keyboard/phone.png\" alt=\"phone\" title=\"phone\"></li>\n</ul>\n</li>\n<li>number<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_NUMBER\">TYPE_CLASS_NUMBER</a> | <a href=\"http://developer.android.com/intl/es/reference/android/text/InputType.html#TYPE_NUMBER_VARIATION_NORMAL\">TYPE_NUMBER_VARIATION_NORMAL</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_SIGNED\">TYPE_NUMBER_FLAG_SIGNED</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_NUMBER_FLAG_DECIMAL\">TYPE_NUMBER_FLAG_DECIMAL</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\">UIKeyboardTypeNumbersAndPunctuation</a></li>\n<li><img src=\"../docs/img/modules/keyboard/number.png\" alt=\"number\" title=\"number\"></li>\n</ul>\n</li>\n<li>url<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_TEXT\">TYPE_CLASS_TEXT</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_URI\">TYPE_TEXT_VARIATION_URI</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\">UIKeyboardTypeURL</a></li>\n<li><img src=\"../docs/img/modules/keyboard/url.png\" alt=\"url\" title=\"url\"></li>\n</ul>\n</li>\n<li>email<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_CLASS_TEXT\">TYPE_CLASS_TEXT</a> | <a href=\"http://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_VARIATION_EMAIL_ADDRESS\">TYPE_TEXT_VARIATION_EMAIL_ADDRESS</a></li>\n<li>iOS:  <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIKeyboardType\">UIKeyboardTypeEmailAddress</a></li>\n<li><img src=\"/docs/img/modules/keyboard/email.png\" alt=\"email\" title=\"email\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Return-Key-Type\"><a href=\"#Return-Key-Type\" class=\"headerlink\" title=\"Return Key Type\"></a>Return Key Type</h1><p>All widgets that inherit from <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_editable_text_base_.editabletextbase.html\"><code>EditableTextBase</code></a>, i.e., <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_text_field_.textfield.html\"><code>TextField</code></a> and <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_text_view_.textview.html\"><code>TextView</code></a>, have a <strong>returnKeyType</strong> property that gets or sets the soft keyboard return key type. Possible values are contained in the <a href=\"http://docs.nativescript.org/api-reference/modules/_ui_enums_.returnkeytype.html\"><code>ReturnKeyType</code></a> enumeration.</p>\n<ul>\n<li>done<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_DONE\">IME_ACTION_DONE</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\">UIReturnKeyDone</a></li>\n<li><img src=\"../docs/img/modules/keyboard/done.png\" alt=\"done\" title=\"done\"></li>\n</ul>\n</li>\n<li>next<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_NEXT\">IME_ACTION_NEXT</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\">UIReturnKeyNext</a></li>\n<li><img src=\"../docs/img/modules/keyboard/next.png\" alt=\"next\" title=\"next\"></li>\n</ul>\n</li>\n<li>go<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_GO\">IME_ACTION_GO</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\">UIReturnKeyGo</a></li>\n<li><img src=\"../docs/img/modules/keyboard/go.png\" alt=\"go\" title=\"go\"></li>\n</ul>\n</li>\n<li>search<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_SEARCH\">IME_ACTION_SEARCH</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\">UIReturnKeySearch</a></li>\n<li><img src=\"../docs/img/modules/keyboard/search.png\" alt=\"search\" title=\"search\"></li>\n</ul>\n</li>\n<li>send<ul>\n<li>Android: <a href=\"http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html#IME_ACTION_SEND\">IME_ACTION_SEND</a></li>\n<li>iOS: <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputTraits_Protocol/index.html#//apple_ref/c/tdef/UIReturnKeyType\">UIReturnKeySend</a></li>\n<li><img src=\"../docs/img/modules/keyboard/send.png\" alt=\"send\" title=\"send\"></li>\n</ul>\n</li>\n</ul>\n"},{"title":"Changing Status Bar Style in iOS","description":"How to change Status Bar style in iOS","position":14,"slug":"status-bar-style-ios","_content":"\n# Changing Status Bar Style in iOS\n \nNativeScript allows you to build multiplatform applications by exposing a rich common API. You don't need to know specifics of the different platforms. However, every platform has its own features. In those cases when you need to fine tune your application and make it look more native, NativeScrpt gives you full control and access to the native API and platform specific functionality. One such scenario is when changing the status bar style in iOS. \n\nThere are two options to change the status bar style for iOS applications in NativeScript.\n\n- By changing the `NavigationBar` style. \n- By using the `Info.plist` file.\n \n## Changing Status Bar Style With Help Of NavigationBar barStyle Property\n \nThis method is easier, but it implies using an `ActionBar`. NativeScript `ActionBar` is common abstraction over iOS `UINavigationBar` and Android's `ActionBar`. It is a bar typically located at the top of the screen and provides title and navigation control in your application.\n\n- Use page's XML file to declare `ActionBar` in your application:\n\n``` XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\" loaded=\"loaded\">\n  <Page.actionBar>\n     <ActionBar title=\"Sample title\"></ActionBar>\n  </Page.actionBar>\n</Page>\n```\n\nThe result of adding this sample code should be this:\n\n![adding-action-bar](../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar.png \"adding-action-bar\")\n\nIt is easy to change the background color of `UINavigationBar` and the status bar respectively. To do this you should set `backgroundColor` property of the `ActionBar`. This can be done in XML or with CSS.\n\n \n``` XML\n<Page.actionBar>\n     <ActionBar title=\"Sample title\" backgroundColor=\"green\"></ActionBar>\n</Page.actionBar>\n``` \n``` CSS\nActionBar \n{\n    background-color: green;\n}\n```\n \nThe result is:\n \n![adding-action-bar-set-backgroundcolor](../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-set-backgroundcolor.png \"adding-action-bar-set-backgroundcolor\")\n\nIn iOS there are two possible styles, which you could set to the `UINavigationBar`: `UIBarStyleDefault` and `UIBarStyleBlack`. Changing `UINavigationBar` style will change the style of the status bar automatically. By default `UINavigationBar` style in iOS is `UIBarStyleDefault`, which means that the letters will be in black and background color - white. \n\n- Changing The Style Of UINavigationBar \n\nYou should use the `frame` module to access the native instance of `UINavigationBar`. Then you can use its `barStyle` property to change its style to `UIBarStyleBlack`.\n\n``` JavaScript\nvar frame = require(\"ui/frame\");\nvar platform = require(\"platform\")\nfunction loaded(args) {\n    if (platform.isIOS) {\n        var navigationBar = frame.topmost().ios.controller.navigationBar;\n        navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;\n    }\n}\nexports.loaded = loaded;\n```\n``` TypeScript\nimport { EventData } from \"data/observable\";\nimport { topmost } from \"ui/frame\";\nimport { isIOS } from \"platform\"\n\nexport function loaded(args: EventData){\n     if (isIOS) {\n        let navigationBar = topmost().ios.controller.navigationBar;\n        navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;\n    }\n}\n```\n\nThe result:\n\n![adding-action-bar-black-style](../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-black-style.png \"adding-action-bar-black-style\")\n\nAs you can see the style of `UINavigationBar` and status bar have been changed with gray background color and white text and icons.\n \n## Changing Status Bar Style Only\n \nYou should use this option in scenarios when you don't want to use `ActionBar`. In iOS the status bar has two style types: the default one - `UIStatusBarStyleDefault` and `UIStatusBarStyleLightContent`. The default style looks like this: icons with black color and white background color.\n\n![clean-nativescript-project](../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup.png \"clean-nativescript-project\")\n\nUse application's Info.plist file to change status bar style:\n  \n* go to `app/App_Resources/iOS` folder\n \n* open `Info.plist` file \n \n* add below shown lines in your `Info.plist` before closing `</dict>` tag\n\n``` XML\n<key>UIStatusBarStyle</key>\n<string>UIStatusBarStyleLightContent</string>\n<key>UIViewControllerBasedStatusBarAppearance</key>\n<false/>\n```\n\nIn a result your `Info.plist` should look like that:\n\n``` XML\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n    <plist version=\"1.0\">\n    <dict>\n        <key>CFBundleDevelopmentRegion</key>\n        <string>en</string>\n        <key>CFBundleDisplayName</key>\n        <string>${PRODUCT_NAME}</string>\n        <key>CFBundleExecutable</key>\n        <string>${EXECUTABLE_NAME}</string>\n        <key>CFBundleIconFile</key>\n        <string>icon.png</string>\n        <key>CFBundleIcons</key>\n        <dict>\n            <key>CFBundlePrimaryIcon</key>\n            <dict>\n                <key>CFBundleIconFiles</key>\n                <array>\n                    <string>icon-40</string>\n                    <string>icon-60</string>\n                    <string>icon-72</string>\n                    <string>icon-76</string>\n                    <string>Icon-Small</string>\n                    <string>Icon-Small-50</string>\n                </array>\n                <key>UIPrerenderedIcon</key>\n                <false/>\n            </dict>\n        </dict>\n        <key>CFBundleInfoDictionaryVersion</key>\n        <string>6.0</string>\n        <key>CFBundleName</key>\n        <string>${PRODUCT_NAME}</string>\n        <key>CFBundlePackageType</key>\n        <string>APPL</string>\n        <key>CFBundleShortVersionString</key>\n        <string>1.0</string>\n        <key>CFBundleSignature</key>\n        <string>????</string>\n        <key>CFBundleVersion</key>\n        <string>1.0</string>\n        <key>LSRequiresIPhoneOS</key>\n        <true/>\n        <key>UILaunchStoryboardName</key>\n        <string>LaunchScreen</string>\n        <key>UIRequiresFullScreen</key>\n        <true/>\n        <key>UIRequiredDeviceCapabilities</key>\n        <array>\n            <string>armv7</string>\n        </array>\n        <key>UISupportedInterfaceOrientations</key>\n        <array>\n            <string>UIInterfaceOrientationPortrait</string>\n            <string>UIInterfaceOrientationLandscapeLeft</string>\n            <string>UIInterfaceOrientationLandscapeRight</string>\n        </array>\n        <key>UISupportedInterfaceOrientations~ipad</key>\n        <array>\n            <string>UIInterfaceOrientationPortrait</string>\n            <string>UIInterfaceOrientationPortraitUpsideDown</string>\n            <string>UIInterfaceOrientationLandscapeLeft</string>\n            <string>UIInterfaceOrientationLandscapeRight</string>\n        </array>\n        <key>UIStatusBarStyle</key>\n        <string>UIStatusBarStyleLightContent</string>\n        <key>UIViewControllerBasedStatusBarAppearance</key>\n        <false/>\n    </dict>\n    </plist>\n```\n\n![changing-status-bar-style](../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-style-change.png \"changing-status-bar-style\")\n\nNow on the place of the status bar we can see one white line. That's happened, because we changed the color of the icon to white, however the background color is the same as those of the icon. To fix this we should set page `backgroundColor` property. You should set also the `backgroundSpanUnderStatusBar` property to `true`. This will span the background color under the status bar:\n  \n``` XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\" backgroundSpanUnderStatusBar=\"true\" backgroundColor=\"red\">\n  <StackLayout>\n    <Label text=\"Tap the button\" class=\"title\"/>\n    <Button text=\"TAP\" tap=\"{{ onTap }}\" />\n    <Label text=\"{{ message }}\" class=\"message\" textWrap=\"true\"/>\n  </StackLayout>\n</Page>\n```\n \nThe result is:\n  \n![changing-background-span-under-statusBar-to-true](../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-backgroundSpan.png \"changing-background-span-under-statusBar-to-true\")\n \nThe sample projects for both cases are available in those GitHub repositories: [StyleStatusBariOSviaActionBar](https://github.com/tsonevn/StyleStatusBariOSviaActionBar.git) and [StyleStatusBariOSviaInfo.plist](https://github.com/tsonevn/StyleStatusBariOSviaInfo.plist.git)\n","source":"ui/change-status-bar-style-ios.md","raw":"---\ntitle: Changing Status Bar Style in iOS\ndescription: How to change Status Bar style in iOS\nposition: 14\nslug: status-bar-style-ios\n---\n\n# Changing Status Bar Style in iOS\n \nNativeScript allows you to build multiplatform applications by exposing a rich common API. You don't need to know specifics of the different platforms. However, every platform has its own features. In those cases when you need to fine tune your application and make it look more native, NativeScrpt gives you full control and access to the native API and platform specific functionality. One such scenario is when changing the status bar style in iOS. \n\nThere are two options to change the status bar style for iOS applications in NativeScript.\n\n- By changing the `NavigationBar` style. \n- By using the `Info.plist` file.\n \n## Changing Status Bar Style With Help Of NavigationBar barStyle Property\n \nThis method is easier, but it implies using an `ActionBar`. NativeScript `ActionBar` is common abstraction over iOS `UINavigationBar` and Android's `ActionBar`. It is a bar typically located at the top of the screen and provides title and navigation control in your application.\n\n- Use page's XML file to declare `ActionBar` in your application:\n\n``` XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\" loaded=\"loaded\">\n  <Page.actionBar>\n     <ActionBar title=\"Sample title\"></ActionBar>\n  </Page.actionBar>\n</Page>\n```\n\nThe result of adding this sample code should be this:\n\n![adding-action-bar](../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar.png \"adding-action-bar\")\n\nIt is easy to change the background color of `UINavigationBar` and the status bar respectively. To do this you should set `backgroundColor` property of the `ActionBar`. This can be done in XML or with CSS.\n\n \n``` XML\n<Page.actionBar>\n     <ActionBar title=\"Sample title\" backgroundColor=\"green\"></ActionBar>\n</Page.actionBar>\n``` \n``` CSS\nActionBar \n{\n    background-color: green;\n}\n```\n \nThe result is:\n \n![adding-action-bar-set-backgroundcolor](../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-set-backgroundcolor.png \"adding-action-bar-set-backgroundcolor\")\n\nIn iOS there are two possible styles, which you could set to the `UINavigationBar`: `UIBarStyleDefault` and `UIBarStyleBlack`. Changing `UINavigationBar` style will change the style of the status bar automatically. By default `UINavigationBar` style in iOS is `UIBarStyleDefault`, which means that the letters will be in black and background color - white. \n\n- Changing The Style Of UINavigationBar \n\nYou should use the `frame` module to access the native instance of `UINavigationBar`. Then you can use its `barStyle` property to change its style to `UIBarStyleBlack`.\n\n``` JavaScript\nvar frame = require(\"ui/frame\");\nvar platform = require(\"platform\")\nfunction loaded(args) {\n    if (platform.isIOS) {\n        var navigationBar = frame.topmost().ios.controller.navigationBar;\n        navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;\n    }\n}\nexports.loaded = loaded;\n```\n``` TypeScript\nimport { EventData } from \"data/observable\";\nimport { topmost } from \"ui/frame\";\nimport { isIOS } from \"platform\"\n\nexport function loaded(args: EventData){\n     if (isIOS) {\n        let navigationBar = topmost().ios.controller.navigationBar;\n        navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;\n    }\n}\n```\n\nThe result:\n\n![adding-action-bar-black-style](../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-black-style.png \"adding-action-bar-black-style\")\n\nAs you can see the style of `UINavigationBar` and status bar have been changed with gray background color and white text and icons.\n \n## Changing Status Bar Style Only\n \nYou should use this option in scenarios when you don't want to use `ActionBar`. In iOS the status bar has two style types: the default one - `UIStatusBarStyleDefault` and `UIStatusBarStyleLightContent`. The default style looks like this: icons with black color and white background color.\n\n![clean-nativescript-project](../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup.png \"clean-nativescript-project\")\n\nUse application's Info.plist file to change status bar style:\n  \n* go to `app/App_Resources/iOS` folder\n \n* open `Info.plist` file \n \n* add below shown lines in your `Info.plist` before closing `</dict>` tag\n\n``` XML\n<key>UIStatusBarStyle</key>\n<string>UIStatusBarStyleLightContent</string>\n<key>UIViewControllerBasedStatusBarAppearance</key>\n<false/>\n```\n\nIn a result your `Info.plist` should look like that:\n\n``` XML\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n    <plist version=\"1.0\">\n    <dict>\n        <key>CFBundleDevelopmentRegion</key>\n        <string>en</string>\n        <key>CFBundleDisplayName</key>\n        <string>${PRODUCT_NAME}</string>\n        <key>CFBundleExecutable</key>\n        <string>${EXECUTABLE_NAME}</string>\n        <key>CFBundleIconFile</key>\n        <string>icon.png</string>\n        <key>CFBundleIcons</key>\n        <dict>\n            <key>CFBundlePrimaryIcon</key>\n            <dict>\n                <key>CFBundleIconFiles</key>\n                <array>\n                    <string>icon-40</string>\n                    <string>icon-60</string>\n                    <string>icon-72</string>\n                    <string>icon-76</string>\n                    <string>Icon-Small</string>\n                    <string>Icon-Small-50</string>\n                </array>\n                <key>UIPrerenderedIcon</key>\n                <false/>\n            </dict>\n        </dict>\n        <key>CFBundleInfoDictionaryVersion</key>\n        <string>6.0</string>\n        <key>CFBundleName</key>\n        <string>${PRODUCT_NAME}</string>\n        <key>CFBundlePackageType</key>\n        <string>APPL</string>\n        <key>CFBundleShortVersionString</key>\n        <string>1.0</string>\n        <key>CFBundleSignature</key>\n        <string>????</string>\n        <key>CFBundleVersion</key>\n        <string>1.0</string>\n        <key>LSRequiresIPhoneOS</key>\n        <true/>\n        <key>UILaunchStoryboardName</key>\n        <string>LaunchScreen</string>\n        <key>UIRequiresFullScreen</key>\n        <true/>\n        <key>UIRequiredDeviceCapabilities</key>\n        <array>\n            <string>armv7</string>\n        </array>\n        <key>UISupportedInterfaceOrientations</key>\n        <array>\n            <string>UIInterfaceOrientationPortrait</string>\n            <string>UIInterfaceOrientationLandscapeLeft</string>\n            <string>UIInterfaceOrientationLandscapeRight</string>\n        </array>\n        <key>UISupportedInterfaceOrientations~ipad</key>\n        <array>\n            <string>UIInterfaceOrientationPortrait</string>\n            <string>UIInterfaceOrientationPortraitUpsideDown</string>\n            <string>UIInterfaceOrientationLandscapeLeft</string>\n            <string>UIInterfaceOrientationLandscapeRight</string>\n        </array>\n        <key>UIStatusBarStyle</key>\n        <string>UIStatusBarStyleLightContent</string>\n        <key>UIViewControllerBasedStatusBarAppearance</key>\n        <false/>\n    </dict>\n    </plist>\n```\n\n![changing-status-bar-style](../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-style-change.png \"changing-status-bar-style\")\n\nNow on the place of the status bar we can see one white line. That's happened, because we changed the color of the icon to white, however the background color is the same as those of the icon. To fix this we should set page `backgroundColor` property. You should set also the `backgroundSpanUnderStatusBar` property to `true`. This will span the background color under the status bar:\n  \n``` XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\" backgroundSpanUnderStatusBar=\"true\" backgroundColor=\"red\">\n  <StackLayout>\n    <Label text=\"Tap the button\" class=\"title\"/>\n    <Button text=\"TAP\" tap=\"{{ onTap }}\" />\n    <Label text=\"{{ message }}\" class=\"message\" textWrap=\"true\"/>\n  </StackLayout>\n</Page>\n```\n \nThe result is:\n  \n![changing-background-span-under-statusBar-to-true](../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-backgroundSpan.png \"changing-background-span-under-statusBar-to-true\")\n \nThe sample projects for both cases are available in those GitHub repositories: [StyleStatusBariOSviaActionBar](https://github.com/tsonevn/StyleStatusBariOSviaActionBar.git) and [StyleStatusBariOSviaInfo.plist](https://github.com/tsonevn/StyleStatusBariOSviaInfo.plist.git)\n","date":"2016-08-26T21:05:54.588Z","updated":"2016-08-26T21:05:54.588Z","path":"ui/change-status-bar-style-ios.html","comments":1,"layout":"page","_id":"cisn95car0010wsl0jr1a37nt","content":"<h1 id=\"Changing-Status-Bar-Style-in-iOS\"><a href=\"#Changing-Status-Bar-Style-in-iOS\" class=\"headerlink\" title=\"Changing Status Bar Style in iOS\"></a>Changing Status Bar Style in iOS</h1><p>NativeScript allows you to build multiplatform applications by exposing a rich common API. You don’t need to know specifics of the different platforms. However, every platform has its own features. In those cases when you need to fine tune your application and make it look more native, NativeScrpt gives you full control and access to the native API and platform specific functionality. One such scenario is when changing the status bar style in iOS. </p>\n<p>There are two options to change the status bar style for iOS applications in NativeScript.</p>\n<ul>\n<li>By changing the <code>NavigationBar</code> style. </li>\n<li>By using the <code>Info.plist</code> file.</li>\n</ul>\n<h2 id=\"Changing-Status-Bar-Style-With-Help-Of-NavigationBar-barStyle-Property\"><a href=\"#Changing-Status-Bar-Style-With-Help-Of-NavigationBar-barStyle-Property\" class=\"headerlink\" title=\"Changing Status Bar Style With Help Of NavigationBar barStyle Property\"></a>Changing Status Bar Style With Help Of NavigationBar barStyle Property</h2><p>This method is easier, but it implies using an <code>ActionBar</code>. NativeScript <code>ActionBar</code> is common abstraction over iOS <code>UINavigationBar</code> and Android’s <code>ActionBar</code>. It is a bar typically located at the top of the screen and provides title and navigation control in your application.</p>\n<ul>\n<li>Use page’s XML file to declare <code>ActionBar</code> in your application:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.nativescript.org/tns.xsd\"</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"loaded\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Sample title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The result of adding this sample code should be this:</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar.png\" alt=\"adding-action-bar\" title=\"adding-action-bar\"></p>\n<p>It is easy to change the background color of <code>UINavigationBar</code> and the status bar respectively. To do this you should set <code>backgroundColor</code> property of the <code>ActionBar</code>. This can be done in XML or with CSS.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Sample title\"</span> <span class=\"attr\">backgroundColor</span>=<span class=\"string\">\"green\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">``` </div><div class=\"line\">``` CSS</div><div class=\"line\">ActionBar </div><div class=\"line\">&#123;</div><div class=\"line\">    background-color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-set-backgroundcolor.png\" alt=\"adding-action-bar-set-backgroundcolor\" title=\"adding-action-bar-set-backgroundcolor\"></p>\n<p>In iOS there are two possible styles, which you could set to the <code>UINavigationBar</code>: <code>UIBarStyleDefault</code> and <code>UIBarStyleBlack</code>. Changing <code>UINavigationBar</code> style will change the style of the status bar automatically. By default <code>UINavigationBar</code> style in iOS is <code>UIBarStyleDefault</code>, which means that the letters will be in black and background color - white. </p>\n<ul>\n<li>Changing The Style Of UINavigationBar </li>\n</ul>\n<p>You should use the <code>frame</code> module to access the native instance of <code>UINavigationBar</code>. Then you can use its <code>barStyle</code> property to change its style to <code>UIBarStyleBlack</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> frame = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> platform = <span class=\"built_in\">require</span>(<span class=\"string\">\"platform\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (platform.isIOS) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> navigationBar = frame.topmost().ios.controller.navigationBar;</div><div class=\"line\">        navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.loaded = loaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; EventData &#125; from <span class=\"string\">\"data/observable\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; topmost &#125; from <span class=\"string\">\"ui/frame\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; isIOS &#125; from <span class=\"string\">\"platform\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loaded</span>(<span class=\"params\">args: EventData</span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (isIOS) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> navigationBar = topmost().ios.controller.navigationBar;</div><div class=\"line\">        navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The result:</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-black-style.png\" alt=\"adding-action-bar-black-style\" title=\"adding-action-bar-black-style\"></p>\n<p>As you can see the style of <code>UINavigationBar</code> and status bar have been changed with gray background color and white text and icons.</p>\n<h2 id=\"Changing-Status-Bar-Style-Only\"><a href=\"#Changing-Status-Bar-Style-Only\" class=\"headerlink\" title=\"Changing Status Bar Style Only\"></a>Changing Status Bar Style Only</h2><p>You should use this option in scenarios when you don’t want to use <code>ActionBar</code>. In iOS the status bar has two style types: the default one - <code>UIStatusBarStyleDefault</code> and <code>UIStatusBarStyleLightContent</code>. The default style looks like this: icons with black color and white background color.</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup.png\" alt=\"clean-nativescript-project\" title=\"clean-nativescript-project\"></p>\n<p>Use application’s Info.plist file to change status bar style:</p>\n<ul>\n<li><p>go to <code>app/App_Resources/iOS</code> folder</p>\n</li>\n<li><p>open <code>Info.plist</code> file </p>\n</li>\n<li><p>add below shown lines in your <code>Info.plist</code> before closing <code>&lt;/dict&gt;</code> tag</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIStatusBarStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIStatusBarStyleLightContent<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIViewControllerBasedStatusBarAppearance<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">false</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>In a result your <code>Info.plist</code> should look like that:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleDevelopmentRegion<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>en<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleDisplayName<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>$&#123;PRODUCT_NAME&#125;<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleExecutable<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>$&#123;EXECUTABLE_NAME&#125;<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleIconFile<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon.png<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleIcons<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundlePrimaryIcon<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleIconFiles<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon-40<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon-60<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon-72<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon-76<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Icon-Small<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Icon-Small-50<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIPrerenderedIcon<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">false</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleInfoDictionaryVersion<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>6.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleName<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>$&#123;PRODUCT_NAME&#125;<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundlePackageType<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>APPL<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleShortVersionString<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleSignature<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>????<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleVersion<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>LSRequiresIPhoneOS<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UILaunchStoryboardName<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>LaunchScreen<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIRequiresFullScreen<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIRequiredDeviceCapabilities<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>armv7<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UISupportedInterfaceOrientations<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationPortrait<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationLandscapeLeft<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationLandscapeRight<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UISupportedInterfaceOrientations~ipad<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationPortrait<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationPortraitUpsideDown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationLandscapeLeft<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationLandscapeRight<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIStatusBarStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIStatusBarStyleLightContent<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIViewControllerBasedStatusBarAppearance<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">false</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-style-change.png\" alt=\"changing-status-bar-style\" title=\"changing-status-bar-style\"></p>\n<p>Now on the place of the status bar we can see one white line. That’s happened, because we changed the color of the icon to white, however the background color is the same as those of the icon. To fix this we should set page <code>backgroundColor</code> property. You should set also the <code>backgroundSpanUnderStatusBar</code> property to <code>true</code>. This will span the background color under the status bar:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.nativescript.org/tns.xsd\"</span> <span class=\"attr\">backgroundSpanUnderStatusBar</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">backgroundColor</span>=<span class=\"string\">\"red\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Tap the button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"TAP\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"&#123;&#123; onTap &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; message &#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">textWrap</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-backgroundSpan.png\" alt=\"changing-background-span-under-statusBar-to-true\" title=\"changing-background-span-under-statusBar-to-true\"></p>\n<p>The sample projects for both cases are available in those GitHub repositories: <a href=\"https://github.com/tsonevn/StyleStatusBariOSviaActionBar.git\" target=\"_blank\" rel=\"external\">StyleStatusBariOSviaActionBar</a> and <a href=\"https://github.com/tsonevn/StyleStatusBariOSviaInfo.plist.git\" target=\"_blank\" rel=\"external\">StyleStatusBariOSviaInfo.plist</a></p>\n","excerpt":"","more":"<h1 id=\"Changing-Status-Bar-Style-in-iOS\"><a href=\"#Changing-Status-Bar-Style-in-iOS\" class=\"headerlink\" title=\"Changing Status Bar Style in iOS\"></a>Changing Status Bar Style in iOS</h1><p>NativeScript allows you to build multiplatform applications by exposing a rich common API. You don’t need to know specifics of the different platforms. However, every platform has its own features. In those cases when you need to fine tune your application and make it look more native, NativeScrpt gives you full control and access to the native API and platform specific functionality. One such scenario is when changing the status bar style in iOS. </p>\n<p>There are two options to change the status bar style for iOS applications in NativeScript.</p>\n<ul>\n<li>By changing the <code>NavigationBar</code> style. </li>\n<li>By using the <code>Info.plist</code> file.</li>\n</ul>\n<h2 id=\"Changing-Status-Bar-Style-With-Help-Of-NavigationBar-barStyle-Property\"><a href=\"#Changing-Status-Bar-Style-With-Help-Of-NavigationBar-barStyle-Property\" class=\"headerlink\" title=\"Changing Status Bar Style With Help Of NavigationBar barStyle Property\"></a>Changing Status Bar Style With Help Of NavigationBar barStyle Property</h2><p>This method is easier, but it implies using an <code>ActionBar</code>. NativeScript <code>ActionBar</code> is common abstraction over iOS <code>UINavigationBar</code> and Android’s <code>ActionBar</code>. It is a bar typically located at the top of the screen and provides title and navigation control in your application.</p>\n<ul>\n<li>Use page’s XML file to declare <code>ActionBar</code> in your application:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.nativescript.org/tns.xsd\"</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"loaded\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Sample title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The result of adding this sample code should be this:</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar.png\" alt=\"adding-action-bar\" title=\"adding-action-bar\"></p>\n<p>It is easy to change the background color of <code>UINavigationBar</code> and the status bar respectively. To do this you should set <code>backgroundColor</code> property of the <code>ActionBar</code>. This can be done in XML or with CSS.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">ActionBar</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Sample title\"</span> <span class=\"attr\">backgroundColor</span>=<span class=\"string\">\"green\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ActionBar</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page.actionBar</span>&gt;</span></div><div class=\"line\">``` </div><div class=\"line\">``` CSS</div><div class=\"line\">ActionBar </div><div class=\"line\">&#123;</div><div class=\"line\">    background-color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-set-backgroundcolor.png\" alt=\"adding-action-bar-set-backgroundcolor\" title=\"adding-action-bar-set-backgroundcolor\"></p>\n<p>In iOS there are two possible styles, which you could set to the <code>UINavigationBar</code>: <code>UIBarStyleDefault</code> and <code>UIBarStyleBlack</code>. Changing <code>UINavigationBar</code> style will change the style of the status bar automatically. By default <code>UINavigationBar</code> style in iOS is <code>UIBarStyleDefault</code>, which means that the letters will be in black and background color - white. </p>\n<ul>\n<li>Changing The Style Of UINavigationBar </li>\n</ul>\n<p>You should use the <code>frame</code> module to access the native instance of <code>UINavigationBar</code>. Then you can use its <code>barStyle</code> property to change its style to <code>UIBarStyleBlack</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> frame = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> platform = <span class=\"built_in\">require</span>(<span class=\"string\">\"platform\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (platform.isIOS) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> navigationBar = frame.topmost().ios.controller.navigationBar;</div><div class=\"line\">        navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.loaded = loaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; EventData &#125; from <span class=\"string\">\"data/observable\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; topmost &#125; from <span class=\"string\">\"ui/frame\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; isIOS &#125; from <span class=\"string\">\"platform\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loaded</span>(<span class=\"params\">args: EventData</span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (isIOS) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> navigationBar = topmost().ios.controller.navigationBar;</div><div class=\"line\">        navigationBar.barStyle = UIBarStyle.UIBarStyleBlack;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The result:</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-via-actionbar-black-style.png\" alt=\"adding-action-bar-black-style\" title=\"adding-action-bar-black-style\"></p>\n<p>As you can see the style of <code>UINavigationBar</code> and status bar have been changed with gray background color and white text and icons.</p>\n<h2 id=\"Changing-Status-Bar-Style-Only\"><a href=\"#Changing-Status-Bar-Style-Only\" class=\"headerlink\" title=\"Changing Status Bar Style Only\"></a>Changing Status Bar Style Only</h2><p>You should use this option in scenarios when you don’t want to use <code>ActionBar</code>. In iOS the status bar has two style types: the default one - <code>UIStatusBarStyleDefault</code> and <code>UIStatusBarStyleLightContent</code>. The default style looks like this: icons with black color and white background color.</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup.png\" alt=\"clean-nativescript-project\" title=\"clean-nativescript-project\"></p>\n<p>Use application’s Info.plist file to change status bar style:</p>\n<ul>\n<li><p>go to <code>app/App_Resources/iOS</code> folder</p>\n</li>\n<li><p>open <code>Info.plist</code> file </p>\n</li>\n<li><p>add below shown lines in your <code>Info.plist</code> before closing <code>&lt;/dict&gt;</code> tag</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIStatusBarStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIStatusBarStyleLightContent<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIViewControllerBasedStatusBarAppearance<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">false</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>In a result your <code>Info.plist</code> should look like that:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleDevelopmentRegion<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>en<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleDisplayName<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>$&#123;PRODUCT_NAME&#125;<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleExecutable<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>$&#123;EXECUTABLE_NAME&#125;<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleIconFile<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon.png<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleIcons<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundlePrimaryIcon<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleIconFiles<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon-40<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon-60<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon-72<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>icon-76<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Icon-Small<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Icon-Small-50<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIPrerenderedIcon<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">false</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleInfoDictionaryVersion<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>6.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleName<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>$&#123;PRODUCT_NAME&#125;<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundlePackageType<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>APPL<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleShortVersionString<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleSignature<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>????<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleVersion<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>LSRequiresIPhoneOS<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UILaunchStoryboardName<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>LaunchScreen<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIRequiresFullScreen<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIRequiredDeviceCapabilities<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>armv7<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UISupportedInterfaceOrientations<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationPortrait<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationLandscapeLeft<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationLandscapeRight<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UISupportedInterfaceOrientations~ipad<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationPortrait<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationPortraitUpsideDown<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationLandscapeLeft<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIInterfaceOrientationLandscapeRight<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIStatusBarStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>UIStatusBarStyleLightContent<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>UIViewControllerBasedStatusBarAppearance<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">false</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-style-change.png\" alt=\"changing-status-bar-style\" title=\"changing-status-bar-style\"></p>\n<p>Now on the place of the status bar we can see one white line. That’s happened, because we changed the color of the icon to white, however the background color is the same as those of the icon. To fix this we should set page <code>backgroundColor</code> property. You should set also the <code>backgroundSpanUnderStatusBar</code> property to <code>true</code>. This will span the background color under the status bar:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.nativescript.org/tns.xsd\"</span> <span class=\"attr\">backgroundSpanUnderStatusBar</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">backgroundColor</span>=<span class=\"string\">\"red\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Tap the button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"TAP\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"&#123;&#123; onTap &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; message &#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">textWrap</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The result is:</p>\n<p><img src=\"../docs/img/change-status-bar-style-ios/status-bar-style-info.plist-startup-backgroundSpan.png\" alt=\"changing-background-span-under-statusBar-to-true\" title=\"changing-background-span-under-statusBar-to-true\"></p>\n<p>The sample projects for both cases are available in those GitHub repositories: <a href=\"https://github.com/tsonevn/StyleStatusBariOSviaActionBar.git\">StyleStatusBariOSviaActionBar</a> and <a href=\"https://github.com/tsonevn/StyleStatusBariOSviaInfo.plist.git\">StyleStatusBariOSviaInfo.plist</a></p>\n"},{"title":"Layouts","description":"Learn the basic principles of designing and positioning the UI elements inside your apps.","position":3,"slug":"layouts","previous_url":"/layouts","_content":"\n# User Interface Layouts\n\nNativeScript provides a recursive layout system that sizes and positions [views][views] on the screen.\n\n* [Layout Process](#layout-process)\n\t* [Measure Pass](#measure-pass)\n\t* [Layout Pass](#layout-pass)\n\t* [Alignment](#alignment)\n\t* [Margins](#margins)\n* [Layouts](#layouts)\n\t* [Layout Paddings](#layout-paddings)\n\t* [Predefined Layouts](#predefined-layouts)\n* [Percent Support](#percentage-support)\n\n## Layout Process\n\nLayout is the process of measuring and positioning the child views of a [Layout][Layout] container. Layout is an intensive process whose speed and performance depend on the count of the children and the complexity of the layout container. For example, a simple layout container such as [AbsoluteLayout][AbsoluteLayout] might perform better than a more complex layout container, such as [GridLayout][GridLayout].\n\nLayout completes in two passes&mdash;a measure pass and a layout pass. Every layout container provides its own `onMeasure()` and `onLayout()` methods to achieve its own specific layout.\n\n### Measure Pass\n\nDuring the measure pass, each [view][view] is measured to retrieve its desired size. The measure pass evaluates the following properties:\n\n* width\n* height\n* minWidth\n* minHeight\n* visibility\n* marginTop\n* marginRight\n* marginBotton\n* marginLeft\n\n### Layout Pass\n\nDuring the layout pass, each [view][view] is placed in a specific layout slot. This slot is determined by the desired size of the view (retrieved from the measure pass) and the following properties:\n\n- marginTop\n- marginRight\n- marginBottom\n- marginLeft\n- horizontalAlignment\n- verticalAlignment\n\n### Alignment\n\nLayout applies horizontal and vertical alignment only when an element is allocated more size than it needs.\n\nThe following table shows the valid values of `horizontalAlignment`.\n\n| Member  | Description   |\n| ------- | ------------- |\n| left    | The view is aligned to the left of the layout slot of the parent element. |\n| center  | The view is aligned to the center of the layout slot of the parent element. |\n| right   | The view is aligned to the right of the layout slot of the parent element. |\n| stretch | The view is stretched to fill the layout slot of the parent element; `width` takes precedence, if set. |\n\nThe following table shows the valid values of `verticalAlignment`.\n\n| Member  | Description |\n| ------- | ----------- |\n| top     | The view is aligned to the top of the layout slot of the parent element. |\n| center  | The view is aligned to the center of the layout slot of the parent element. |\n| bottom  | The view is aligned to the bottom of the layout slot of the parent element. |\n| stretch | The view is stretched to fill the layout slot of the parent element; `height` takes precedence, if set. |\n\n### Margins\n\nThe four margin properties (`marginTop`, `marginRight`, `marginBottom` and `marginLeft`) describe the distance between a view and its parent.\n\nWhen you set margins through XML, you can choose between the following approaches.\n\n* **Set one value**: Provide a single value that will be applied on all sides of the view.\n* **Set two values**: Provide two values. The first value is applied to the top side, the second value is applied to the right side. Next, the first value is applied to the bottom and the second value to the left side (in that order).\n* **Set four values**: Provide four values for each margin. The first value is applied to the top, the second value is applied to the right, the third value is applied to the bottom and the fourth value is applied to the left side (in that order).\n\n## Layouts\n\n`Layout` is the base class for all views that provide positioning of child elements.\n\nYou can use the various layout containers to position elements. They evaluate the base properties of [view][view] such as `width`, `height`, `minWidth` and alignments, and expose additional properties for positioning child views (such as the four paddings).\n\n### Layout Paddings\n\nThe four padding properties (`paddingTop`, `paddingRight`, `paddingBottom` and `paddingLeft`) describe the distance between the layout container and its children.\n\nWhen you set paddings through XML, you can choose between the following approaches.\n\n* **Set one value**: Provide a single value that will be applied on all sides of the view.\n* **Set two values**: Provide two values. The first value is applied to the top side, the second value is applied to the right side. Next, the first value is applied to the bottom and the second value to the left side (in that order).\n* **Set four values**: Provide four values for each padding. The first value is applied to the top, the second value is applied to the right, the third value is applied to the bottom and the fourth value is applied to the left side (in that order).\n\n### Predefined Layouts\n\nThe following table shows predefined layouts that NativeScript provides.\n\n| Layouts  | Description  | Screenshot |\n| -------- | ------------ | ---------- |\n| [AbsoluteLayout][AbsoluteLayout] | This layout lets you set exact locations (left/top coordinates) for its children. | ![AbsoluteLayout android](../docs/img/gallery/android/absoluteLayoutPage.png \"AbsoluteLayout android\")|\n| [DockLayout][DockLayout] | This layout arranges its children at its outer edges and allows its last child to take up the remaining space. | ![DockLayout android](../docs/img/gallery/android/dockLayoutPage.png \"DockLayout android\")|\n| [GridLayout][GridLayout] | This layout defines a rectangular layout area that consists of columns and rows. | ![GridLayout android](../docs/img/gallery/android/gridLayoutPage.png \"GridLayout android\")|\n| [StackLayout][StackLayout] | This layout arranges its children horizontally or vertically. The direction is set with the orientation property. | ![StackLayout android](../docs/img/gallery/android/stackLayoutPage.png \"StackLayout android\")|\n| [WrapLayout][WrapLayout] | This layout positions its children in rows or columns, based on the orientation property, until the space is filled and then wraps them on a new row or column. | ![WrapLayout android](../docs/img/gallery/android/wrapLayoutPage.png \"WrapLayout android\")|\n\n[views]: \n[View]: /api-reference/classes/_ui_core_view_.view.html\n[Layout]: /api-reference/classes/_ui_layouts_layout_.layout.html\n[AbsoluteLayout]: \n[DockLayout]: \n[GridLayout]: \n[StackLayout]: \n[WrapLayout]: \n\n### Percentage Support\n\n> **NOTE:** Experimental feature v1.6+ \n\nWith version 1.6.0, NativeScript supports percentage values for `width`, `height` and `margins`.\nWhen a layout pass begins, first the percent values are calculated based on parent available size. This means that on vertical `StackLayout` if you place two `Buttons` with `height='50%'` they will get all the available height (e.g., they will fill the `StackLayout` vertically.).\nThe same applies for margin properties. For example, if you set `marginLeft='5%'`, the element will have a margin that corresponds to 5% of the parent's available width.\n","source":"ui/layouts.md","raw":"---\ntitle: Layouts\ndescription: Learn the basic principles of designing and positioning the UI elements inside your apps.\nposition: 3\nslug: layouts\nprevious_url: /layouts\n---\n\n# User Interface Layouts\n\nNativeScript provides a recursive layout system that sizes and positions [views][views] on the screen.\n\n* [Layout Process](#layout-process)\n\t* [Measure Pass](#measure-pass)\n\t* [Layout Pass](#layout-pass)\n\t* [Alignment](#alignment)\n\t* [Margins](#margins)\n* [Layouts](#layouts)\n\t* [Layout Paddings](#layout-paddings)\n\t* [Predefined Layouts](#predefined-layouts)\n* [Percent Support](#percentage-support)\n\n## Layout Process\n\nLayout is the process of measuring and positioning the child views of a [Layout][Layout] container. Layout is an intensive process whose speed and performance depend on the count of the children and the complexity of the layout container. For example, a simple layout container such as [AbsoluteLayout][AbsoluteLayout] might perform better than a more complex layout container, such as [GridLayout][GridLayout].\n\nLayout completes in two passes&mdash;a measure pass and a layout pass. Every layout container provides its own `onMeasure()` and `onLayout()` methods to achieve its own specific layout.\n\n### Measure Pass\n\nDuring the measure pass, each [view][view] is measured to retrieve its desired size. The measure pass evaluates the following properties:\n\n* width\n* height\n* minWidth\n* minHeight\n* visibility\n* marginTop\n* marginRight\n* marginBotton\n* marginLeft\n\n### Layout Pass\n\nDuring the layout pass, each [view][view] is placed in a specific layout slot. This slot is determined by the desired size of the view (retrieved from the measure pass) and the following properties:\n\n- marginTop\n- marginRight\n- marginBottom\n- marginLeft\n- horizontalAlignment\n- verticalAlignment\n\n### Alignment\n\nLayout applies horizontal and vertical alignment only when an element is allocated more size than it needs.\n\nThe following table shows the valid values of `horizontalAlignment`.\n\n| Member  | Description   |\n| ------- | ------------- |\n| left    | The view is aligned to the left of the layout slot of the parent element. |\n| center  | The view is aligned to the center of the layout slot of the parent element. |\n| right   | The view is aligned to the right of the layout slot of the parent element. |\n| stretch | The view is stretched to fill the layout slot of the parent element; `width` takes precedence, if set. |\n\nThe following table shows the valid values of `verticalAlignment`.\n\n| Member  | Description |\n| ------- | ----------- |\n| top     | The view is aligned to the top of the layout slot of the parent element. |\n| center  | The view is aligned to the center of the layout slot of the parent element. |\n| bottom  | The view is aligned to the bottom of the layout slot of the parent element. |\n| stretch | The view is stretched to fill the layout slot of the parent element; `height` takes precedence, if set. |\n\n### Margins\n\nThe four margin properties (`marginTop`, `marginRight`, `marginBottom` and `marginLeft`) describe the distance between a view and its parent.\n\nWhen you set margins through XML, you can choose between the following approaches.\n\n* **Set one value**: Provide a single value that will be applied on all sides of the view.\n* **Set two values**: Provide two values. The first value is applied to the top side, the second value is applied to the right side. Next, the first value is applied to the bottom and the second value to the left side (in that order).\n* **Set four values**: Provide four values for each margin. The first value is applied to the top, the second value is applied to the right, the third value is applied to the bottom and the fourth value is applied to the left side (in that order).\n\n## Layouts\n\n`Layout` is the base class for all views that provide positioning of child elements.\n\nYou can use the various layout containers to position elements. They evaluate the base properties of [view][view] such as `width`, `height`, `minWidth` and alignments, and expose additional properties for positioning child views (such as the four paddings).\n\n### Layout Paddings\n\nThe four padding properties (`paddingTop`, `paddingRight`, `paddingBottom` and `paddingLeft`) describe the distance between the layout container and its children.\n\nWhen you set paddings through XML, you can choose between the following approaches.\n\n* **Set one value**: Provide a single value that will be applied on all sides of the view.\n* **Set two values**: Provide two values. The first value is applied to the top side, the second value is applied to the right side. Next, the first value is applied to the bottom and the second value to the left side (in that order).\n* **Set four values**: Provide four values for each padding. The first value is applied to the top, the second value is applied to the right, the third value is applied to the bottom and the fourth value is applied to the left side (in that order).\n\n### Predefined Layouts\n\nThe following table shows predefined layouts that NativeScript provides.\n\n| Layouts  | Description  | Screenshot |\n| -------- | ------------ | ---------- |\n| [AbsoluteLayout][AbsoluteLayout] | This layout lets you set exact locations (left/top coordinates) for its children. | ![AbsoluteLayout android](../docs/img/gallery/android/absoluteLayoutPage.png \"AbsoluteLayout android\")|\n| [DockLayout][DockLayout] | This layout arranges its children at its outer edges and allows its last child to take up the remaining space. | ![DockLayout android](../docs/img/gallery/android/dockLayoutPage.png \"DockLayout android\")|\n| [GridLayout][GridLayout] | This layout defines a rectangular layout area that consists of columns and rows. | ![GridLayout android](../docs/img/gallery/android/gridLayoutPage.png \"GridLayout android\")|\n| [StackLayout][StackLayout] | This layout arranges its children horizontally or vertically. The direction is set with the orientation property. | ![StackLayout android](../docs/img/gallery/android/stackLayoutPage.png \"StackLayout android\")|\n| [WrapLayout][WrapLayout] | This layout positions its children in rows or columns, based on the orientation property, until the space is filled and then wraps them on a new row or column. | ![WrapLayout android](../docs/img/gallery/android/wrapLayoutPage.png \"WrapLayout android\")|\n\n[views]: \n[View]: /api-reference/classes/_ui_core_view_.view.html\n[Layout]: /api-reference/classes/_ui_layouts_layout_.layout.html\n[AbsoluteLayout]: \n[DockLayout]: \n[GridLayout]: \n[StackLayout]: \n[WrapLayout]: \n\n### Percentage Support\n\n> **NOTE:** Experimental feature v1.6+ \n\nWith version 1.6.0, NativeScript supports percentage values for `width`, `height` and `margins`.\nWhen a layout pass begins, first the percent values are calculated based on parent available size. This means that on vertical `StackLayout` if you place two `Buttons` with `height='50%'` they will get all the available height (e.g., they will fill the `StackLayout` vertically.).\nThe same applies for margin properties. For example, if you set `marginLeft='5%'`, the element will have a margin that corresponds to 5% of the parent's available width.\n","date":"2016-08-26T21:05:54.613Z","updated":"2016-08-26T21:05:54.613Z","path":"ui/layouts.html","comments":1,"layout":"page","_id":"cisn95car0011wsl0vggu9gm0","content":"<h1 id=\"User-Interface-Layouts\"><a href=\"#User-Interface-Layouts\" class=\"headerlink\" title=\"User Interface Layouts\"></a>User Interface Layouts</h1><p>NativeScript provides a recursive layout system that sizes and positions [views][views] on the screen.</p>\n<ul>\n<li><a href=\"#layout-process\">Layout Process</a><ul>\n<li><a href=\"#measure-pass\">Measure Pass</a></li>\n<li><a href=\"#layout-pass\">Layout Pass</a></li>\n<li><a href=\"#alignment\">Alignment</a></li>\n<li><a href=\"#margins\">Margins</a></li>\n</ul>\n</li>\n<li><a href=\"#layouts\">Layouts</a><ul>\n<li><a href=\"#layout-paddings\">Layout Paddings</a></li>\n<li><a href=\"#predefined-layouts\">Predefined Layouts</a></li>\n</ul>\n</li>\n<li><a href=\"#percentage-support\">Percent Support</a></li>\n</ul>\n<h2 id=\"Layout-Process\"><a href=\"#Layout-Process\" class=\"headerlink\" title=\"Layout Process\"></a>Layout Process</h2><p>Layout is the process of measuring and positioning the child views of a <a href=\"/api-reference/classes/_ui_layouts_layout_.layout.html\">Layout</a> container. Layout is an intensive process whose speed and performance depend on the count of the children and the complexity of the layout container. For example, a simple layout container such as [AbsoluteLayout][AbsoluteLayout] might perform better than a more complex layout container, such as [GridLayout][GridLayout].</p>\n<p>Layout completes in two passes&mdash;a measure pass and a layout pass. Every layout container provides its own <code>onMeasure()</code> and <code>onLayout()</code> methods to achieve its own specific layout.</p>\n<h3 id=\"Measure-Pass\"><a href=\"#Measure-Pass\" class=\"headerlink\" title=\"Measure Pass\"></a>Measure Pass</h3><p>During the measure pass, each <a href=\"/api-reference/classes/_ui_core_view_.view.html\">view</a> is measured to retrieve its desired size. The measure pass evaluates the following properties:</p>\n<ul>\n<li>width</li>\n<li>height</li>\n<li>minWidth</li>\n<li>minHeight</li>\n<li>visibility</li>\n<li>marginTop</li>\n<li>marginRight</li>\n<li>marginBotton</li>\n<li>marginLeft</li>\n</ul>\n<h3 id=\"Layout-Pass\"><a href=\"#Layout-Pass\" class=\"headerlink\" title=\"Layout Pass\"></a>Layout Pass</h3><p>During the layout pass, each <a href=\"/api-reference/classes/_ui_core_view_.view.html\">view</a> is placed in a specific layout slot. This slot is determined by the desired size of the view (retrieved from the measure pass) and the following properties:</p>\n<ul>\n<li>marginTop</li>\n<li>marginRight</li>\n<li>marginBottom</li>\n<li>marginLeft</li>\n<li>horizontalAlignment</li>\n<li>verticalAlignment</li>\n</ul>\n<h3 id=\"Alignment\"><a href=\"#Alignment\" class=\"headerlink\" title=\"Alignment\"></a>Alignment</h3><p>Layout applies horizontal and vertical alignment only when an element is allocated more size than it needs.</p>\n<p>The following table shows the valid values of <code>horizontalAlignment</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>left</td>\n<td>The view is aligned to the left of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>center</td>\n<td>The view is aligned to the center of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>right</td>\n<td>The view is aligned to the right of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>The view is stretched to fill the layout slot of the parent element; <code>width</code> takes precedence, if set.</td>\n</tr>\n</tbody>\n</table>\n<p>The following table shows the valid values of <code>verticalAlignment</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>top</td>\n<td>The view is aligned to the top of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>center</td>\n<td>The view is aligned to the center of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>The view is aligned to the bottom of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>The view is stretched to fill the layout slot of the parent element; <code>height</code> takes precedence, if set.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Margins\"><a href=\"#Margins\" class=\"headerlink\" title=\"Margins\"></a>Margins</h3><p>The four margin properties (<code>marginTop</code>, <code>marginRight</code>, <code>marginBottom</code> and <code>marginLeft</code>) describe the distance between a view and its parent.</p>\n<p>When you set margins through XML, you can choose between the following approaches.</p>\n<ul>\n<li><strong>Set one value</strong>: Provide a single value that will be applied on all sides of the view.</li>\n<li><strong>Set two values</strong>: Provide two values. The first value is applied to the top side, the second value is applied to the right side. Next, the first value is applied to the bottom and the second value to the left side (in that order).</li>\n<li><strong>Set four values</strong>: Provide four values for each margin. The first value is applied to the top, the second value is applied to the right, the third value is applied to the bottom and the fourth value is applied to the left side (in that order).</li>\n</ul>\n<h2 id=\"Layouts\"><a href=\"#Layouts\" class=\"headerlink\" title=\"Layouts\"></a>Layouts</h2><p><code>Layout</code> is the base class for all views that provide positioning of child elements.</p>\n<p>You can use the various layout containers to position elements. They evaluate the base properties of <a href=\"/api-reference/classes/_ui_core_view_.view.html\">view</a> such as <code>width</code>, <code>height</code>, <code>minWidth</code> and alignments, and expose additional properties for positioning child views (such as the four paddings).</p>\n<h3 id=\"Layout-Paddings\"><a href=\"#Layout-Paddings\" class=\"headerlink\" title=\"Layout Paddings\"></a>Layout Paddings</h3><p>The four padding properties (<code>paddingTop</code>, <code>paddingRight</code>, <code>paddingBottom</code> and <code>paddingLeft</code>) describe the distance between the layout container and its children.</p>\n<p>When you set paddings through XML, you can choose between the following approaches.</p>\n<ul>\n<li><strong>Set one value</strong>: Provide a single value that will be applied on all sides of the view.</li>\n<li><strong>Set two values</strong>: Provide two values. The first value is applied to the top side, the second value is applied to the right side. Next, the first value is applied to the bottom and the second value to the left side (in that order).</li>\n<li><strong>Set four values</strong>: Provide four values for each padding. The first value is applied to the top, the second value is applied to the right, the third value is applied to the bottom and the fourth value is applied to the left side (in that order).</li>\n</ul>\n<h3 id=\"Predefined-Layouts\"><a href=\"#Predefined-Layouts\" class=\"headerlink\" title=\"Predefined Layouts\"></a>Predefined Layouts</h3><p>The following table shows predefined layouts that NativeScript provides.</p>\n<table>\n<thead>\n<tr>\n<th>Layouts</th>\n<th>Description</th>\n<th>Screenshot</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[AbsoluteLayout][AbsoluteLayout]</td>\n<td>This layout lets you set exact locations (left/top coordinates) for its children.</td>\n<td><img src=\"../docs/img/gallery/android/absoluteLayoutPage.png\" alt=\"AbsoluteLayout android\" title=\"AbsoluteLayout android\"></td>\n</tr>\n<tr>\n<td>[DockLayout][DockLayout]</td>\n<td>This layout arranges its children at its outer edges and allows its last child to take up the remaining space.</td>\n<td><img src=\"../docs/img/gallery/android/dockLayoutPage.png\" alt=\"DockLayout android\" title=\"DockLayout android\"></td>\n</tr>\n<tr>\n<td>[GridLayout][GridLayout]</td>\n<td>This layout defines a rectangular layout area that consists of columns and rows.</td>\n<td><img src=\"../docs/img/gallery/android/gridLayoutPage.png\" alt=\"GridLayout android\" title=\"GridLayout android\"></td>\n</tr>\n<tr>\n<td>[StackLayout][StackLayout]</td>\n<td>This layout arranges its children horizontally or vertically. The direction is set with the orientation property.</td>\n<td><img src=\"../docs/img/gallery/android/stackLayoutPage.png\" alt=\"StackLayout android\" title=\"StackLayout android\"></td>\n</tr>\n<tr>\n<td>[WrapLayout][WrapLayout]</td>\n<td>This layout positions its children in rows or columns, based on the orientation property, until the space is filled and then wraps them on a new row or column.</td>\n<td><img src=\"../docs/img/gallery/android/wrapLayoutPage.png\" alt=\"WrapLayout android\" title=\"WrapLayout android\"></td>\n</tr>\n</tbody>\n</table>\n<p>[views]: </p>\n<p>[AbsoluteLayout]: \n[DockLayout]: \n[GridLayout]: \n[StackLayout]: \n[WrapLayout]: </p>\n<h3 id=\"Percentage-Support\"><a href=\"#Percentage-Support\" class=\"headerlink\" title=\"Percentage Support\"></a>Percentage Support</h3><blockquote>\n<p><strong>NOTE:</strong> Experimental feature v1.6+ </p>\n</blockquote>\n<p>With version 1.6.0, NativeScript supports percentage values for <code>width</code>, <code>height</code> and <code>margins</code>.\nWhen a layout pass begins, first the percent values are calculated based on parent available size. This means that on vertical <code>StackLayout</code> if you place two <code>Buttons</code> with <code>height=&#39;50%&#39;</code> they will get all the available height (e.g., they will fill the <code>StackLayout</code> vertically.).\nThe same applies for margin properties. For example, if you set <code>marginLeft=&#39;5%&#39;</code>, the element will have a margin that corresponds to 5% of the parent’s available width.</p>\n","excerpt":"","more":"<h1 id=\"User-Interface-Layouts\"><a href=\"#User-Interface-Layouts\" class=\"headerlink\" title=\"User Interface Layouts\"></a>User Interface Layouts</h1><p>NativeScript provides a recursive layout system that sizes and positions [views][views] on the screen.</p>\n<ul>\n<li><a href=\"#layout-process\">Layout Process</a><ul>\n<li><a href=\"#measure-pass\">Measure Pass</a></li>\n<li><a href=\"#layout-pass\">Layout Pass</a></li>\n<li><a href=\"#alignment\">Alignment</a></li>\n<li><a href=\"#margins\">Margins</a></li>\n</ul>\n</li>\n<li><a href=\"#layouts\">Layouts</a><ul>\n<li><a href=\"#layout-paddings\">Layout Paddings</a></li>\n<li><a href=\"#predefined-layouts\">Predefined Layouts</a></li>\n</ul>\n</li>\n<li><a href=\"#percentage-support\">Percent Support</a></li>\n</ul>\n<h2 id=\"Layout-Process\"><a href=\"#Layout-Process\" class=\"headerlink\" title=\"Layout Process\"></a>Layout Process</h2><p>Layout is the process of measuring and positioning the child views of a <a href=\"/api-reference/classes/_ui_layouts_layout_.layout.html\">Layout</a> container. Layout is an intensive process whose speed and performance depend on the count of the children and the complexity of the layout container. For example, a simple layout container such as [AbsoluteLayout][AbsoluteLayout] might perform better than a more complex layout container, such as [GridLayout][GridLayout].</p>\n<p>Layout completes in two passes&mdash;a measure pass and a layout pass. Every layout container provides its own <code>onMeasure()</code> and <code>onLayout()</code> methods to achieve its own specific layout.</p>\n<h3 id=\"Measure-Pass\"><a href=\"#Measure-Pass\" class=\"headerlink\" title=\"Measure Pass\"></a>Measure Pass</h3><p>During the measure pass, each <a href=\"/api-reference/classes/_ui_core_view_.view.html\">view</a> is measured to retrieve its desired size. The measure pass evaluates the following properties:</p>\n<ul>\n<li>width</li>\n<li>height</li>\n<li>minWidth</li>\n<li>minHeight</li>\n<li>visibility</li>\n<li>marginTop</li>\n<li>marginRight</li>\n<li>marginBotton</li>\n<li>marginLeft</li>\n</ul>\n<h3 id=\"Layout-Pass\"><a href=\"#Layout-Pass\" class=\"headerlink\" title=\"Layout Pass\"></a>Layout Pass</h3><p>During the layout pass, each <a href=\"/api-reference/classes/_ui_core_view_.view.html\">view</a> is placed in a specific layout slot. This slot is determined by the desired size of the view (retrieved from the measure pass) and the following properties:</p>\n<ul>\n<li>marginTop</li>\n<li>marginRight</li>\n<li>marginBottom</li>\n<li>marginLeft</li>\n<li>horizontalAlignment</li>\n<li>verticalAlignment</li>\n</ul>\n<h3 id=\"Alignment\"><a href=\"#Alignment\" class=\"headerlink\" title=\"Alignment\"></a>Alignment</h3><p>Layout applies horizontal and vertical alignment only when an element is allocated more size than it needs.</p>\n<p>The following table shows the valid values of <code>horizontalAlignment</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>left</td>\n<td>The view is aligned to the left of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>center</td>\n<td>The view is aligned to the center of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>right</td>\n<td>The view is aligned to the right of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>The view is stretched to fill the layout slot of the parent element; <code>width</code> takes precedence, if set.</td>\n</tr>\n</tbody>\n</table>\n<p>The following table shows the valid values of <code>verticalAlignment</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>top</td>\n<td>The view is aligned to the top of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>center</td>\n<td>The view is aligned to the center of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>The view is aligned to the bottom of the layout slot of the parent element.</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>The view is stretched to fill the layout slot of the parent element; <code>height</code> takes precedence, if set.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Margins\"><a href=\"#Margins\" class=\"headerlink\" title=\"Margins\"></a>Margins</h3><p>The four margin properties (<code>marginTop</code>, <code>marginRight</code>, <code>marginBottom</code> and <code>marginLeft</code>) describe the distance between a view and its parent.</p>\n<p>When you set margins through XML, you can choose between the following approaches.</p>\n<ul>\n<li><strong>Set one value</strong>: Provide a single value that will be applied on all sides of the view.</li>\n<li><strong>Set two values</strong>: Provide two values. The first value is applied to the top side, the second value is applied to the right side. Next, the first value is applied to the bottom and the second value to the left side (in that order).</li>\n<li><strong>Set four values</strong>: Provide four values for each margin. The first value is applied to the top, the second value is applied to the right, the third value is applied to the bottom and the fourth value is applied to the left side (in that order).</li>\n</ul>\n<h2 id=\"Layouts\"><a href=\"#Layouts\" class=\"headerlink\" title=\"Layouts\"></a>Layouts</h2><p><code>Layout</code> is the base class for all views that provide positioning of child elements.</p>\n<p>You can use the various layout containers to position elements. They evaluate the base properties of <a href=\"/api-reference/classes/_ui_core_view_.view.html\">view</a> such as <code>width</code>, <code>height</code>, <code>minWidth</code> and alignments, and expose additional properties for positioning child views (such as the four paddings).</p>\n<h3 id=\"Layout-Paddings\"><a href=\"#Layout-Paddings\" class=\"headerlink\" title=\"Layout Paddings\"></a>Layout Paddings</h3><p>The four padding properties (<code>paddingTop</code>, <code>paddingRight</code>, <code>paddingBottom</code> and <code>paddingLeft</code>) describe the distance between the layout container and its children.</p>\n<p>When you set paddings through XML, you can choose between the following approaches.</p>\n<ul>\n<li><strong>Set one value</strong>: Provide a single value that will be applied on all sides of the view.</li>\n<li><strong>Set two values</strong>: Provide two values. The first value is applied to the top side, the second value is applied to the right side. Next, the first value is applied to the bottom and the second value to the left side (in that order).</li>\n<li><strong>Set four values</strong>: Provide four values for each padding. The first value is applied to the top, the second value is applied to the right, the third value is applied to the bottom and the fourth value is applied to the left side (in that order).</li>\n</ul>\n<h3 id=\"Predefined-Layouts\"><a href=\"#Predefined-Layouts\" class=\"headerlink\" title=\"Predefined Layouts\"></a>Predefined Layouts</h3><p>The following table shows predefined layouts that NativeScript provides.</p>\n<table>\n<thead>\n<tr>\n<th>Layouts</th>\n<th>Description</th>\n<th>Screenshot</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[AbsoluteLayout][AbsoluteLayout]</td>\n<td>This layout lets you set exact locations (left/top coordinates) for its children.</td>\n<td><img src=\"../docs/img/gallery/android/absoluteLayoutPage.png\" alt=\"AbsoluteLayout android\" title=\"AbsoluteLayout android\"></td>\n</tr>\n<tr>\n<td>[DockLayout][DockLayout]</td>\n<td>This layout arranges its children at its outer edges and allows its last child to take up the remaining space.</td>\n<td><img src=\"../docs/img/gallery/android/dockLayoutPage.png\" alt=\"DockLayout android\" title=\"DockLayout android\"></td>\n</tr>\n<tr>\n<td>[GridLayout][GridLayout]</td>\n<td>This layout defines a rectangular layout area that consists of columns and rows.</td>\n<td><img src=\"../docs/img/gallery/android/gridLayoutPage.png\" alt=\"GridLayout android\" title=\"GridLayout android\"></td>\n</tr>\n<tr>\n<td>[StackLayout][StackLayout]</td>\n<td>This layout arranges its children horizontally or vertically. The direction is set with the orientation property.</td>\n<td><img src=\"../docs/img/gallery/android/stackLayoutPage.png\" alt=\"StackLayout android\" title=\"StackLayout android\"></td>\n</tr>\n<tr>\n<td>[WrapLayout][WrapLayout]</td>\n<td>This layout positions its children in rows or columns, based on the orientation property, until the space is filled and then wraps them on a new row or column.</td>\n<td><img src=\"../docs/img/gallery/android/wrapLayoutPage.png\" alt=\"WrapLayout android\" title=\"WrapLayout android\"></td>\n</tr>\n</tbody>\n</table>\n<p>[views]: </p>\n<p>[AbsoluteLayout]: \n[DockLayout]: \n[GridLayout]: \n[StackLayout]: \n[WrapLayout]: </p>\n<h3 id=\"Percentage-Support\"><a href=\"#Percentage-Support\" class=\"headerlink\" title=\"Percentage Support\"></a>Percentage Support</h3><blockquote>\n<p><strong>NOTE:</strong> Experimental feature v1.6+ </p>\n</blockquote>\n<p>With version 1.6.0, NativeScript supports percentage values for <code>width</code>, <code>height</code> and <code>margins</code>.\nWhen a layout pass begins, first the percent values are calculated based on parent available size. This means that on vertical <code>StackLayout</code> if you place two <code>Buttons</code> with <code>height=&#39;50%&#39;</code> they will get all the available height (e.g., they will fill the <code>StackLayout</code> vertically.).\nThe same applies for margin properties. For example, if you set <code>marginLeft=&#39;5%&#39;</code>, the element will have a margin that corresponds to 5% of the parent’s available width.</p>\n"},{"title":"Placeholder","description":"Learn how to use the Placeholder to add any native widget to the visual tree.","position":10,"slug":"placeholder","previous_url":"/placeholder","environment":"nativescript","_content":"\n# Placeholder\n\nThe Placeholder allows you to add any native widget to your application. To do that, you need to put a Placeholder somewhere in the UI hierarchy and then create and configure the native widget that you want to appear there. Finally, pass your native widget to the event arguments of the **creatingView** event.\n\n## main-page.xml\n\n```XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\">\n  <StackLayout>\n    <Placeholder creatingView=\"creatingView\"/>\n  </StackLayout>\n</Page>\n```\n\n## main-page.**android**.js\\main-page.**android**.ts\n\n```JavaScript\nfunction creatingView(args) {\n    var nativeView = new android.widget.TextView(args.context);\n    nativeView.setSingleLine(true);\n    nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);\n    nativeView.setText(\"Native\");\n    args.view = nativeView;\n}\nexports.creatingView = creatingView;\n```\n```TypeScript\nimport placeholder = require(\"ui/placeholder\");\n\nexport function creatingView(args: placeholder.CreateViewEventData) {\n    var nativeView = new android.widget.TextView(args.context);\n    nativeView.setSingleLine(true);\n    nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);\n    nativeView.setText(\"Native\");\n    args.view = nativeView;\n}\n```\n\n## main-page.**ios**.js\\main-page.**ios**.ts\n\n```JavaScript\nfunction creatingView(args) {\n    var nativeView = new UILabel();\n    nativeView.text = \"Native\";\n    args.view = nativeView;\n}\nexports.creatingView = creatingView;\n```\n```TypeScript\nimport placeholder = require(\"ui/placeholder\");\n\nexport function creatingView(args: placeholder.CreateViewEventData) {\n    var nativeView = new UILabel();\n    nativeView.text = \"Native\";\n    args.view = nativeView;\n}\n```\n","source":"ui/placeholder.md","raw":"---\ntitle: Placeholder\ndescription: Learn how to use the Placeholder to add any native widget to the visual tree.\nposition: 10\nslug: placeholder\nprevious_url: /placeholder\nenvironment: nativescript\n---\n\n# Placeholder\n\nThe Placeholder allows you to add any native widget to your application. To do that, you need to put a Placeholder somewhere in the UI hierarchy and then create and configure the native widget that you want to appear there. Finally, pass your native widget to the event arguments of the **creatingView** event.\n\n## main-page.xml\n\n```XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\">\n  <StackLayout>\n    <Placeholder creatingView=\"creatingView\"/>\n  </StackLayout>\n</Page>\n```\n\n## main-page.**android**.js\\main-page.**android**.ts\n\n```JavaScript\nfunction creatingView(args) {\n    var nativeView = new android.widget.TextView(args.context);\n    nativeView.setSingleLine(true);\n    nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);\n    nativeView.setText(\"Native\");\n    args.view = nativeView;\n}\nexports.creatingView = creatingView;\n```\n```TypeScript\nimport placeholder = require(\"ui/placeholder\");\n\nexport function creatingView(args: placeholder.CreateViewEventData) {\n    var nativeView = new android.widget.TextView(args.context);\n    nativeView.setSingleLine(true);\n    nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);\n    nativeView.setText(\"Native\");\n    args.view = nativeView;\n}\n```\n\n## main-page.**ios**.js\\main-page.**ios**.ts\n\n```JavaScript\nfunction creatingView(args) {\n    var nativeView = new UILabel();\n    nativeView.text = \"Native\";\n    args.view = nativeView;\n}\nexports.creatingView = creatingView;\n```\n```TypeScript\nimport placeholder = require(\"ui/placeholder\");\n\nexport function creatingView(args: placeholder.CreateViewEventData) {\n    var nativeView = new UILabel();\n    nativeView.text = \"Native\";\n    args.view = nativeView;\n}\n```\n","date":"2016-08-26T21:05:54.618Z","updated":"2016-08-26T21:05:54.618Z","path":"ui/placeholder.html","comments":1,"layout":"page","_id":"cisn95cat0012wsl0my1b7xax","content":"<h1 id=\"Placeholder\"><a href=\"#Placeholder\" class=\"headerlink\" title=\"Placeholder\"></a>Placeholder</h1><p>The Placeholder allows you to add any native widget to your application. To do that, you need to put a Placeholder somewhere in the UI hierarchy and then create and configure the native widget that you want to appear there. Finally, pass your native widget to the event arguments of the <strong>creatingView</strong> event.</p>\n<h2 id=\"main-page-xml\"><a href=\"#main-page-xml\" class=\"headerlink\" title=\"main-page.xml\"></a>main-page.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.nativescript.org/tns.xsd\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Placeholder</span> <span class=\"attr\">creatingView</span>=<span class=\"string\">\"creatingView\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"main-page-android-js-main-page-android-ts\"><a href=\"#main-page-android-js-main-page-android-ts\" class=\"headerlink\" title=\"main-page.android.js\\main-page.android.ts\"></a>main-page.<strong>android</strong>.js\\main-page.<strong>android</strong>.ts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creatingView</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativeView = <span class=\"keyword\">new</span> android.widget.TextView(args.context);</div><div class=\"line\">    nativeView.setSingleLine(<span class=\"literal\">true</span>);</div><div class=\"line\">    nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);</div><div class=\"line\">    nativeView.setText(<span class=\"string\">\"Native\"</span>);</div><div class=\"line\">    args.view = nativeView;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.creatingView = creatingView;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> placeholder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/placeholder\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creatingView</span>(<span class=\"params\">args: placeholder.CreateViewEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativeView = <span class=\"keyword\">new</span> android.widget.TextView(args.context);</div><div class=\"line\">    nativeView.setSingleLine(<span class=\"literal\">true</span>);</div><div class=\"line\">    nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);</div><div class=\"line\">    nativeView.setText(<span class=\"string\">\"Native\"</span>);</div><div class=\"line\">    args.view = nativeView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"main-page-ios-js-main-page-ios-ts\"><a href=\"#main-page-ios-js-main-page-ios-ts\" class=\"headerlink\" title=\"main-page.ios.js\\main-page.ios.ts\"></a>main-page.<strong>ios</strong>.js\\main-page.<strong>ios</strong>.ts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creatingView</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativeView = <span class=\"keyword\">new</span> UILabel();</div><div class=\"line\">    nativeView.text = <span class=\"string\">\"Native\"</span>;</div><div class=\"line\">    args.view = nativeView;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.creatingView = creatingView;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> placeholder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/placeholder\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creatingView</span>(<span class=\"params\">args: placeholder.CreateViewEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativeView = <span class=\"keyword\">new</span> UILabel();</div><div class=\"line\">    nativeView.text = <span class=\"string\">\"Native\"</span>;</div><div class=\"line\">    args.view = nativeView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Placeholder\"><a href=\"#Placeholder\" class=\"headerlink\" title=\"Placeholder\"></a>Placeholder</h1><p>The Placeholder allows you to add any native widget to your application. To do that, you need to put a Placeholder somewhere in the UI hierarchy and then create and configure the native widget that you want to appear there. Finally, pass your native widget to the event arguments of the <strong>creatingView</strong> event.</p>\n<h2 id=\"main-page-xml\"><a href=\"#main-page-xml\" class=\"headerlink\" title=\"main-page.xml\"></a>main-page.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.nativescript.org/tns.xsd\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Placeholder</span> <span class=\"attr\">creatingView</span>=<span class=\"string\">\"creatingView\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"main-page-android-js-main-page-android-ts\"><a href=\"#main-page-android-js-main-page-android-ts\" class=\"headerlink\" title=\"main-page.android.js\\main-page.android.ts\"></a>main-page.<strong>android</strong>.js\\main-page.<strong>android</strong>.ts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creatingView</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativeView = <span class=\"keyword\">new</span> android.widget.TextView(args.context);</div><div class=\"line\">    nativeView.setSingleLine(<span class=\"literal\">true</span>);</div><div class=\"line\">    nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);</div><div class=\"line\">    nativeView.setText(<span class=\"string\">\"Native\"</span>);</div><div class=\"line\">    args.view = nativeView;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.creatingView = creatingView;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> placeholder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/placeholder\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creatingView</span>(<span class=\"params\">args: placeholder.CreateViewEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativeView = <span class=\"keyword\">new</span> android.widget.TextView(args.context);</div><div class=\"line\">    nativeView.setSingleLine(<span class=\"literal\">true</span>);</div><div class=\"line\">    nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);</div><div class=\"line\">    nativeView.setText(<span class=\"string\">\"Native\"</span>);</div><div class=\"line\">    args.view = nativeView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"main-page-ios-js-main-page-ios-ts\"><a href=\"#main-page-ios-js-main-page-ios-ts\" class=\"headerlink\" title=\"main-page.ios.js\\main-page.ios.ts\"></a>main-page.<strong>ios</strong>.js\\main-page.<strong>ios</strong>.ts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creatingView</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativeView = <span class=\"keyword\">new</span> UILabel();</div><div class=\"line\">    nativeView.text = <span class=\"string\">\"Native\"</span>;</div><div class=\"line\">    args.view = nativeView;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.creatingView = creatingView;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> placeholder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/placeholder\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creatingView</span>(<span class=\"params\">args: placeholder.CreateViewEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nativeView = <span class=\"keyword\">new</span> UILabel();</div><div class=\"line\">    nativeView.text = <span class=\"string\">\"Native\"</span>;</div><div class=\"line\">    args.view = nativeView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Dialogs","description":"Learn how to create alerts, confirmations, prompts, logins and other dialogs in your NativeScript apps.","position":7,"slug":"dialogs","previous_url":"/ui-dialogs","_content":"\n# User Interface Dialogs\n\nNativeScript lets you create dialogs in your app in a manner similar to the web browser. You can create alerts, confirmations, prompts, logins and dialogs that require action.\n\n* [Alert](#alert)\n* [Confirm](#confirm)\n* [Prompt](#prompt)\n* [Login](#login)\n* [Action](#action)\n{% angular %}* [Custom dialog](#custom-dialog)\n  * [Showing custom dialog](#showing-custom-dialog)\n  * [Passing parameters](#passing-parameters)\n  * [Returning a result](#returning-a-result)\n{% endangular %}\n\n> You can call dialog functions with parameters similar to the web browser API or the `options` object. All dialog functions return a `Promise` object. **In both iOS and Android, dialogs will not block your code execution!**\n\n## Alert\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.alert(\"Your message\").then(function() {\n  console.log(\"Dialog closed!\");\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.alert(\"Your message\").then(()=> {\n  console.log(\"Dialog closed!\");\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.alert({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\"\n}).then(function () {\n  console.log(\"Dialog closed!\");\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.alert({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\"\n}).then(()=> {\n  console.log(\"Dialog closed!\");\n});\n```\n\n## Confirm\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.confirm(\"Your message\").then(function (result) {\n  console.log(\"Dialog result: \" + result);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.confirm(\"Your message\").then(result => {\n  console.log(\"Dialog result: \" + result);\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.confirm({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel text\",\n  neutralButtonText: \"Neutral text\"\n}).then(function (result) {\n  // result argument is boolean\n  console.log(\"Dialog result: \" + result);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.confirm({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel text\",\n  neutralButtonText: \"Neutral text\"\n}).then(result => {\n  // result argument is boolean\n  console.log(\"Dialog result: \" + result);\n});\n```\n\n> The dialog result argument is boolean. The result is __true__ if the dialog is closed with the OK button. The result is __false__ if closed with the Cancel button. The result is undefined if closed with a neutral button.\n\n## Prompt\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\n// Second argument is optional.\ndialogs.prompt(\"Your message\", \"Default text\").then(function (r) {\n  console.log(\"Dialog result: \" + r.result + \", text: \" + r.text);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\n// Second argument is optional.\ndialogs.prompt(\"Your message\", \"Default text\").then(r => {\n  console.log(\"Dialog result: \" + r.result + \", text: \" + r.text);\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\n// inputType property can be dialogs.inputType.password or dialogs.inputType.text.\ndialogs.prompt({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel text\",\n  neutralButtonText: \"Neutral text\",\n  defaultText: \"Default text\",\n  inputType: dialogs.inputType.password\n}).then(function (r) {\n  console.log(\"Dialog result: \" + r.result + \", text: \" + r.text);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\n// inputType property can be dialogs.inputType.password or dialogs.inputType.text.\ndialogs.prompt({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel text\",\n  neutralButtonText: \"Neutral text\",\n  defaultText: \"Default text\",\n  inputType: dialogs.inputType.password\n}).then(r => {\n  console.log(\"Dialog result: \" + r.result + \", text: \" + r.text);\n});\n```\n> The dialog result argument is an object with two properties: result and text (entered text). The result property is __true__ if the dialog is closed with the OK button, __false__ if closed with the Cancel button or undefined if closed with a neutral button.\n\n## Login\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\n// User name and password arguments are optional.\ndialogs.login(\"Your message\", \"User name label text\", \"Password label text\").then(function (r) {\n  console.log(\"Dialog result: \" + r.result + \", user: \" + r.userName + \", pwd: \" + r.password);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\n// User name and password arguments are optional.\ndialogs.login(\"Your message\", \"User name label text\", \"Password label text\").then(r => {\n  console.log(\"Dialog result: \" + r.result + \", user: \" + r.userName + \", pwd: \" + r.password);\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.login({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel button text\",\n  neutralButtonText: \"Neutral button text\",\n  userName: \"User name label text\",\n  password: \"Password label text\"\n}).then(function (r) {\n  console.log(\"Dialog result: \" + r.result + \", user: \" + r.userName + \", pwd: \" + r.password);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.login({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel button text\",\n  neutralButtonText: \"Neutral button text\",\n  userName: \"User name label text\",\n  password: \"Password label text\"\n}).then(r => {\n  console.log(\"Dialog result: \" + r.result + \", user: \" + r.userName + \", pwd: \" + r.password);\n});\n```\n\n> The dialog result argument is an object with three properties: result, userName and password (entered user name and password). The result property is __true__ if the dialog is closed with the OK button, __false__ if closed with the Cancel button or undefined if closed with a neutral button.\n\n## Action\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.action(\"Your message\", \"Cancel button text\", [\"Option1\", \"Option2\"]).then(function (result) {\n  console.log(\"Dialog result: \" + result)\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.action(\"Your message\", \"Cancel button text\", [\"Option1\", \"Option2\"]).then(result => {\n  console.log(\"Dialog result: \" + result)\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.action({\n  message: \"Your message\",\n  cancelButtonText: \"Cancel text\",\n  actions: [\"Option1\", \"Option2\"]\n}).then(function (result) {\n  console.log(\"Dialog result: \" + result)\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.action({\n  message: \"Your message\",\n  cancelButtonText: \"Cancel text\",\n  actions: [\"Option1\", \"Option2\"]\n}).then(result => {\n  console.log(\"Dialog result: \" + result)\n});\n```\n> The dialog result argument is a string (the text of the clicked option or the text of the cancel button).\n{% angular %}\n## Custom dialog\n\nYou can also create dialogs with custom content. All the needed types live inside the `nativescript-angular/modal-dialog` module.\n\n### Showing custom dialog\n\nStart by getting a reference to `ModalDialogService` by injecting it in your component:\n\n``` TypeScript\nimport {ModalDialogService, ModalDialogOptions, ModalDialogHost} from \"nativescript-angular/modal-dialog\";\n\n@Component({\n    // ...\n    providers: [ModalDialogService],\n})\nexport class CustomDialogTest {\n    public result: string;\n    constructor(private modalService: ModalDialogService) { }\n    ...\n}\n```\nIgnore the `result` field for now&mdash;we will use it later on.\n\nMake sure you have added `modal-dialog-host` somewhere inside the your component template. If you skip it&mdash;you will get an exception when trying to show the dialog.\n\n``` TypeScript\n@Component({\n    directives: [ModalDialogHost],\n    template: `\n    <StackLayout modal-dialog-host>\n        <Button text=\"show\" (tap)=\"show()\"></Button>\n        <Label [text]=\"'RESULT: ' + result\"></Label>\n    </StackLayout>`,\n    // ...\n})\n```\n\nCall the `showModal` method of the dialog service passing the type of the component that should be loaded in the dialog:\n\n``` TypeScript\npublic show() {\n    this.modalService.showModal(DialogContent, {});\n}\n```\n\n### Passing parameters\n\nYou can pass parameters to the dialog component when calling the `showModal` method. You can also specify if the dialog should be shown full screen.\n\n``` TypeScript\nvar options: ModalDialogOptions = {\n    context: { promptMsg: \"This is the prompt message!\" },\n    fullscreen: true\n};\n\nthis.modal.showModal(DialogContent, options)\n```\n\n> **TIP:** By design on iPhone, a modal page appears only in full screen.\n\nInside the `DialogContent`, you can get the parameters by injecting a `ModalDialogParams`:\n\n``` Typescript\nimport {Component} from '@angular/core';\nimport {ModalDialogParams} from \"nativescript-angular/modal-dialog\";\n\n@Component({\n    selector: 'modal-content',\n    template: `\n    <StackLayout margin=\"24\" horizontalAlignment=\"center\" verticalAlignment=\"center\">\n        <Label [text]=\"prompt\"></Label>\n        <StackLayout orientation=\"horizontal\" marginTop=\"12\">\n            <Button text=\"ok\" (tap)=\"close('OK')\"></Button>\n            <Button text=\"cancel\" (tap)=\"close('Cancel')\"></Button>\n        </StackLayout>\n    </StackLayout>\n    `\n})\nexport class DialogContent {\n    public prompt: string;\n    constructor(private params: ModalDialogParams) {\n        this.prompt = params.context.promptMsg;\n    }\n\n    public close(res: string) {\n        // ...\n    }\n}\n```\n\nThe `params.context` is the same object as `options.context` passed to the `showModal` method.\n\n### Returning a result\n\nTo close the dialog, call the `closeCallback` function of the dialog params. \n\n```\npublic close(result: string) {\n    this.params.closeCallback(result);\n}\n```\n\nNote that the `showModal` function actually returns a promise that is resolved when the dialog closes. The value you pass to the `closeCallback` will be the value returned by the promise. \nLet's modify the `show` function in the main component so that it shows the result when the dialog closes:\n\n``` TypeScript\npublic show(fullscreen: boolean) {\n    var options: ModalDialogOptions = {\n        context: { promptMsg: \"This is the prompt message!\" },\n        fullscreen: true\n    };\n\n    this.modal.showModal(DialogContent, options)\n        .then((dialogResult: string) => { this.result = dialogResult; })\n}\n```\n{% endangular %}\n","source":"ui/ui-dialogs.md","raw":"---\ntitle: Dialogs\ndescription: Learn how to create alerts, confirmations, prompts, logins and other dialogs in your NativeScript apps.\nposition: 7\nslug: dialogs\nprevious_url: /ui-dialogs\n---\n\n# User Interface Dialogs\n\nNativeScript lets you create dialogs in your app in a manner similar to the web browser. You can create alerts, confirmations, prompts, logins and dialogs that require action.\n\n* [Alert](#alert)\n* [Confirm](#confirm)\n* [Prompt](#prompt)\n* [Login](#login)\n* [Action](#action)\n{% angular %}* [Custom dialog](#custom-dialog)\n  * [Showing custom dialog](#showing-custom-dialog)\n  * [Passing parameters](#passing-parameters)\n  * [Returning a result](#returning-a-result)\n{% endangular %}\n\n> You can call dialog functions with parameters similar to the web browser API or the `options` object. All dialog functions return a `Promise` object. **In both iOS and Android, dialogs will not block your code execution!**\n\n## Alert\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.alert(\"Your message\").then(function() {\n  console.log(\"Dialog closed!\");\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.alert(\"Your message\").then(()=> {\n  console.log(\"Dialog closed!\");\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.alert({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\"\n}).then(function () {\n  console.log(\"Dialog closed!\");\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.alert({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\"\n}).then(()=> {\n  console.log(\"Dialog closed!\");\n});\n```\n\n## Confirm\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.confirm(\"Your message\").then(function (result) {\n  console.log(\"Dialog result: \" + result);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.confirm(\"Your message\").then(result => {\n  console.log(\"Dialog result: \" + result);\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.confirm({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel text\",\n  neutralButtonText: \"Neutral text\"\n}).then(function (result) {\n  // result argument is boolean\n  console.log(\"Dialog result: \" + result);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.confirm({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel text\",\n  neutralButtonText: \"Neutral text\"\n}).then(result => {\n  // result argument is boolean\n  console.log(\"Dialog result: \" + result);\n});\n```\n\n> The dialog result argument is boolean. The result is __true__ if the dialog is closed with the OK button. The result is __false__ if closed with the Cancel button. The result is undefined if closed with a neutral button.\n\n## Prompt\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\n// Second argument is optional.\ndialogs.prompt(\"Your message\", \"Default text\").then(function (r) {\n  console.log(\"Dialog result: \" + r.result + \", text: \" + r.text);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\n// Second argument is optional.\ndialogs.prompt(\"Your message\", \"Default text\").then(r => {\n  console.log(\"Dialog result: \" + r.result + \", text: \" + r.text);\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\n// inputType property can be dialogs.inputType.password or dialogs.inputType.text.\ndialogs.prompt({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel text\",\n  neutralButtonText: \"Neutral text\",\n  defaultText: \"Default text\",\n  inputType: dialogs.inputType.password\n}).then(function (r) {\n  console.log(\"Dialog result: \" + r.result + \", text: \" + r.text);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\n// inputType property can be dialogs.inputType.password or dialogs.inputType.text.\ndialogs.prompt({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel text\",\n  neutralButtonText: \"Neutral text\",\n  defaultText: \"Default text\",\n  inputType: dialogs.inputType.password\n}).then(r => {\n  console.log(\"Dialog result: \" + r.result + \", text: \" + r.text);\n});\n```\n> The dialog result argument is an object with two properties: result and text (entered text). The result property is __true__ if the dialog is closed with the OK button, __false__ if closed with the Cancel button or undefined if closed with a neutral button.\n\n## Login\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\n// User name and password arguments are optional.\ndialogs.login(\"Your message\", \"User name label text\", \"Password label text\").then(function (r) {\n  console.log(\"Dialog result: \" + r.result + \", user: \" + r.userName + \", pwd: \" + r.password);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\n// User name and password arguments are optional.\ndialogs.login(\"Your message\", \"User name label text\", \"Password label text\").then(r => {\n  console.log(\"Dialog result: \" + r.result + \", user: \" + r.userName + \", pwd: \" + r.password);\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.login({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel button text\",\n  neutralButtonText: \"Neutral button text\",\n  userName: \"User name label text\",\n  password: \"Password label text\"\n}).then(function (r) {\n  console.log(\"Dialog result: \" + r.result + \", user: \" + r.userName + \", pwd: \" + r.password);\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.login({\n  title: \"Your title\",\n  message: \"Your message\",\n  okButtonText: \"Your button text\",\n  cancelButtonText: \"Cancel button text\",\n  neutralButtonText: \"Neutral button text\",\n  userName: \"User name label text\",\n  password: \"Password label text\"\n}).then(r => {\n  console.log(\"Dialog result: \" + r.result + \", user: \" + r.userName + \", pwd: \" + r.password);\n});\n```\n\n> The dialog result argument is an object with three properties: result, userName and password (entered user name and password). The result property is __true__ if the dialog is closed with the OK button, __false__ if closed with the Cancel button or undefined if closed with a neutral button.\n\n## Action\n\n**Web browser style**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.action(\"Your message\", \"Cancel button text\", [\"Option1\", \"Option2\"]).then(function (result) {\n  console.log(\"Dialog result: \" + result)\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.action(\"Your message\", \"Cancel button text\", [\"Option1\", \"Option2\"]).then(result => {\n  console.log(\"Dialog result: \" + result)\n});\n```\n\n**Using an options object**\n\n```JavaScript\nvar dialogs = require(\"ui/dialogs\");\ndialogs.action({\n  message: \"Your message\",\n  cancelButtonText: \"Cancel text\",\n  actions: [\"Option1\", \"Option2\"]\n}).then(function (result) {\n  console.log(\"Dialog result: \" + result)\n});\n```\n```TypeScript\nimport dialogs = require(\"ui/dialogs\");\ndialogs.action({\n  message: \"Your message\",\n  cancelButtonText: \"Cancel text\",\n  actions: [\"Option1\", \"Option2\"]\n}).then(result => {\n  console.log(\"Dialog result: \" + result)\n});\n```\n> The dialog result argument is a string (the text of the clicked option or the text of the cancel button).\n{% angular %}\n## Custom dialog\n\nYou can also create dialogs with custom content. All the needed types live inside the `nativescript-angular/modal-dialog` module.\n\n### Showing custom dialog\n\nStart by getting a reference to `ModalDialogService` by injecting it in your component:\n\n``` TypeScript\nimport {ModalDialogService, ModalDialogOptions, ModalDialogHost} from \"nativescript-angular/modal-dialog\";\n\n@Component({\n    // ...\n    providers: [ModalDialogService],\n})\nexport class CustomDialogTest {\n    public result: string;\n    constructor(private modalService: ModalDialogService) { }\n    ...\n}\n```\nIgnore the `result` field for now&mdash;we will use it later on.\n\nMake sure you have added `modal-dialog-host` somewhere inside the your component template. If you skip it&mdash;you will get an exception when trying to show the dialog.\n\n``` TypeScript\n@Component({\n    directives: [ModalDialogHost],\n    template: `\n    <StackLayout modal-dialog-host>\n        <Button text=\"show\" (tap)=\"show()\"></Button>\n        <Label [text]=\"'RESULT: ' + result\"></Label>\n    </StackLayout>`,\n    // ...\n})\n```\n\nCall the `showModal` method of the dialog service passing the type of the component that should be loaded in the dialog:\n\n``` TypeScript\npublic show() {\n    this.modalService.showModal(DialogContent, {});\n}\n```\n\n### Passing parameters\n\nYou can pass parameters to the dialog component when calling the `showModal` method. You can also specify if the dialog should be shown full screen.\n\n``` TypeScript\nvar options: ModalDialogOptions = {\n    context: { promptMsg: \"This is the prompt message!\" },\n    fullscreen: true\n};\n\nthis.modal.showModal(DialogContent, options)\n```\n\n> **TIP:** By design on iPhone, a modal page appears only in full screen.\n\nInside the `DialogContent`, you can get the parameters by injecting a `ModalDialogParams`:\n\n``` Typescript\nimport {Component} from '@angular/core';\nimport {ModalDialogParams} from \"nativescript-angular/modal-dialog\";\n\n@Component({\n    selector: 'modal-content',\n    template: `\n    <StackLayout margin=\"24\" horizontalAlignment=\"center\" verticalAlignment=\"center\">\n        <Label [text]=\"prompt\"></Label>\n        <StackLayout orientation=\"horizontal\" marginTop=\"12\">\n            <Button text=\"ok\" (tap)=\"close('OK')\"></Button>\n            <Button text=\"cancel\" (tap)=\"close('Cancel')\"></Button>\n        </StackLayout>\n    </StackLayout>\n    `\n})\nexport class DialogContent {\n    public prompt: string;\n    constructor(private params: ModalDialogParams) {\n        this.prompt = params.context.promptMsg;\n    }\n\n    public close(res: string) {\n        // ...\n    }\n}\n```\n\nThe `params.context` is the same object as `options.context` passed to the `showModal` method.\n\n### Returning a result\n\nTo close the dialog, call the `closeCallback` function of the dialog params. \n\n```\npublic close(result: string) {\n    this.params.closeCallback(result);\n}\n```\n\nNote that the `showModal` function actually returns a promise that is resolved when the dialog closes. The value you pass to the `closeCallback` will be the value returned by the promise. \nLet's modify the `show` function in the main component so that it shows the result when the dialog closes:\n\n``` TypeScript\npublic show(fullscreen: boolean) {\n    var options: ModalDialogOptions = {\n        context: { promptMsg: \"This is the prompt message!\" },\n        fullscreen: true\n    };\n\n    this.modal.showModal(DialogContent, options)\n        .then((dialogResult: string) => { this.result = dialogResult; })\n}\n```\n{% endangular %}\n","date":"2016-08-26T21:05:54.620Z","updated":"2016-08-26T21:05:54.620Z","path":"ui/ui-dialogs.html","comments":1,"layout":"page","_id":"cisn95cau0013wsl0zd5hpy8w","content":"<h1 id=\"User-Interface-Dialogs\"><a href=\"#User-Interface-Dialogs\" class=\"headerlink\" title=\"User Interface Dialogs\"></a>User Interface Dialogs</h1><p>NativeScript lets you create dialogs in your app in a manner similar to the web browser. You can create alerts, confirmations, prompts, logins and dialogs that require action.</p>\n<ul>\n<li><a href=\"#alert\">Alert</a></li>\n<li><a href=\"#confirm\">Confirm</a></li>\n<li><a href=\"#prompt\">Prompt</a></li>\n<li><a href=\"#login\">Login</a></li>\n<li><a href=\"#action\">Action</a><div class=\"codeblock ng\"><ul>\n<li><a href=\"#custom-dialog\">Custom dialog</a><ul>\n<li><a href=\"#showing-custom-dialog\">Showing custom dialog</a></li>\n<li><a href=\"#passing-parameters\">Passing parameters</a></li>\n<li><a href=\"#returning-a-result\">Returning a result</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n<blockquote>\n<p>You can call dialog functions with parameters similar to the web browser API or the <code>options</code> object. All dialog functions return a <code>Promise</code> object. <strong>In both iOS and Android, dialogs will not block your code execution!</strong></p>\n</blockquote>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.alert(<span class=\"string\">\"Your message\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog closed!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.alert(<span class=\"string\">\"Your message\"</span>).then(()=&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog closed!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.alert(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog closed!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.alert(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span></div><div class=\"line\">&#125;).then(()=&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog closed!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Confirm\"><a href=\"#Confirm\" class=\"headerlink\" title=\"Confirm\"></a>Confirm</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.confirm(<span class=\"string\">\"Your message\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.confirm(<span class=\"string\">\"Your message\"</span>).then(result =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.confirm(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral text\"</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// result argument is boolean</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.confirm(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral text\"</span></div><div class=\"line\">&#125;).then(result =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// result argument is boolean</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The dialog result argument is boolean. The result is <strong>true</strong> if the dialog is closed with the OK button. The result is <strong>false</strong> if closed with the Cancel button. The result is undefined if closed with a neutral button.</p>\n</blockquote>\n<h2 id=\"Prompt\"><a href=\"#Prompt\" class=\"headerlink\" title=\"Prompt\"></a>Prompt</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// Second argument is optional.</span></div><div class=\"line\">dialogs.prompt(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"Default text\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", text: \"</span> + r.text);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// Second argument is optional.</span></div><div class=\"line\">dialogs.prompt(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"Default text\"</span>).then(r =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", text: \"</span> + r.text);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// inputType property can be dialogs.inputType.password or dialogs.inputType.text.</span></div><div class=\"line\">dialogs.prompt(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral text\"</span>,</div><div class=\"line\">  defaultText: <span class=\"string\">\"Default text\"</span>,</div><div class=\"line\">  inputType: dialogs.inputType.password</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", text: \"</span> + r.text);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// inputType property can be dialogs.inputType.password or dialogs.inputType.text.</span></div><div class=\"line\">dialogs.prompt(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral text\"</span>,</div><div class=\"line\">  defaultText: <span class=\"string\">\"Default text\"</span>,</div><div class=\"line\">  inputType: dialogs.inputType.password</div><div class=\"line\">&#125;).then(r =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", text: \"</span> + r.text);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The dialog result argument is an object with two properties: result and text (entered text). The result property is <strong>true</strong> if the dialog is closed with the OK button, <strong>false</strong> if closed with the Cancel button or undefined if closed with a neutral button.</p>\n</blockquote>\n<h2 id=\"Login\"><a href=\"#Login\" class=\"headerlink\" title=\"Login\"></a>Login</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// User name and password arguments are optional.</span></div><div class=\"line\">dialogs.login(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"User name label text\"</span>, <span class=\"string\">\"Password label text\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", user: \"</span> + r.userName + <span class=\"string\">\", pwd: \"</span> + r.password);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// User name and password arguments are optional.</span></div><div class=\"line\">dialogs.login(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"User name label text\"</span>, <span class=\"string\">\"Password label text\"</span>).then(r =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", user: \"</span> + r.userName + <span class=\"string\">\", pwd: \"</span> + r.password);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.login(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel button text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral button text\"</span>,</div><div class=\"line\">  userName: <span class=\"string\">\"User name label text\"</span>,</div><div class=\"line\">  password: <span class=\"string\">\"Password label text\"</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", user: \"</span> + r.userName + <span class=\"string\">\", pwd: \"</span> + r.password);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.login(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel button text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral button text\"</span>,</div><div class=\"line\">  userName: <span class=\"string\">\"User name label text\"</span>,</div><div class=\"line\">  password: <span class=\"string\">\"Password label text\"</span></div><div class=\"line\">&#125;).then(r =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", user: \"</span> + r.userName + <span class=\"string\">\", pwd: \"</span> + r.password);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The dialog result argument is an object with three properties: result, userName and password (entered user name and password). The result property is <strong>true</strong> if the dialog is closed with the OK button, <strong>false</strong> if closed with the Cancel button or undefined if closed with a neutral button.</p>\n</blockquote>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.action(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"Cancel button text\"</span>, [<span class=\"string\">\"Option1\"</span>, <span class=\"string\">\"Option2\"</span>]).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.action(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"Cancel button text\"</span>, [<span class=\"string\">\"Option1\"</span>, <span class=\"string\">\"Option2\"</span>]).then(result =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.action(&#123;</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  actions: [<span class=\"string\">\"Option1\"</span>, <span class=\"string\">\"Option2\"</span>]</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.action(&#123;</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  actions: [<span class=\"string\">\"Option1\"</span>, <span class=\"string\">\"Option2\"</span>]</div><div class=\"line\">&#125;).then(result =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The dialog result argument is a string (the text of the clicked option or the text of the cancel button).\n<div class=\"codeblock ng\"><h2 id=\"custom-dialog\">Custom dialog</h2>\n<p>You can also create dialogs with custom content. All the needed types live inside the <code>nativescript-angular/modal-dialog</code> module.</p>\n<h3 id=\"showing-custom-dialog\">Showing custom dialog</h3>\n<p>Start by getting a reference to <code>ModalDialogService</code> by injecting it in your component:</p>\nundefined\n<p>Ignore the <code>result</code> field for now&mdash;we will use it later on.</p>\n<p>Make sure you have added <code>modal-dialog-host</code> somewhere inside the your component template. If you skip it&mdash;you will get an exception when trying to show the dialog.</p>\nundefined\n<p>Call the <code>showModal</code> method of the dialog service passing the type of the component that should be loaded in the dialog:</p>\nundefined\n<h3 id=\"passing-parameters\">Passing parameters</h3>\n<p>You can pass parameters to the dialog component when calling the <code>showModal</code> method. You can also specify if the dialog should be shown full screen.</p>\nundefined\n<blockquote>\n<p><strong>TIP:</strong> By design on iPhone, a modal page appears only in full screen.</p>\n</blockquote>\n<p>Inside the <code>DialogContent</code>, you can get the parameters by injecting a <code>ModalDialogParams</code>:</p>\nundefined\n<p>The <code>params.context</code> is the same object as <code>options.context</code> passed to the <code>showModal</code> method.</p>\n<h3 id=\"returning-a-result\">Returning a result</h3>\n<p>To close the dialog, call the <code>closeCallback</code> function of the dialog params. </p>\nundefined\n<p>Note that the <code>showModal</code> function actually returns a promise that is resolved when the dialog closes. The value you pass to the <code>closeCallback</code> will be the value returned by the promise. \nLet&#39;s modify the <code>show</code> function in the main component so that it shows the result when the dialog closes:</p>\nundefined\n</div></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"User-Interface-Dialogs\"><a href=\"#User-Interface-Dialogs\" class=\"headerlink\" title=\"User Interface Dialogs\"></a>User Interface Dialogs</h1><p>NativeScript lets you create dialogs in your app in a manner similar to the web browser. You can create alerts, confirmations, prompts, logins and dialogs that require action.</p>\n<ul>\n<li><a href=\"#alert\">Alert</a></li>\n<li><a href=\"#confirm\">Confirm</a></li>\n<li><a href=\"#prompt\">Prompt</a></li>\n<li><a href=\"#login\">Login</a></li>\n<li><a href=\"#action\">Action</a><div class=\"codeblock ng\"><ul>\n<li><a href=\"#custom-dialog\">Custom dialog</a><ul>\n<li><a href=\"#showing-custom-dialog\">Showing custom dialog</a></li>\n<li><a href=\"#passing-parameters\">Passing parameters</a></li>\n<li><a href=\"#returning-a-result\">Returning a result</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n<blockquote>\n<p>You can call dialog functions with parameters similar to the web browser API or the <code>options</code> object. All dialog functions return a <code>Promise</code> object. <strong>In both iOS and Android, dialogs will not block your code execution!</strong></p>\n</blockquote>\n<h2 id=\"Alert\"><a href=\"#Alert\" class=\"headerlink\" title=\"Alert\"></a>Alert</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.alert(<span class=\"string\">\"Your message\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog closed!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.alert(<span class=\"string\">\"Your message\"</span>).then(()=&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog closed!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.alert(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog closed!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.alert(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span></div><div class=\"line\">&#125;).then(()=&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog closed!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Confirm\"><a href=\"#Confirm\" class=\"headerlink\" title=\"Confirm\"></a>Confirm</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.confirm(<span class=\"string\">\"Your message\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.confirm(<span class=\"string\">\"Your message\"</span>).then(result =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.confirm(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral text\"</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// result argument is boolean</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.confirm(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral text\"</span></div><div class=\"line\">&#125;).then(result =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// result argument is boolean</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The dialog result argument is boolean. The result is <strong>true</strong> if the dialog is closed with the OK button. The result is <strong>false</strong> if closed with the Cancel button. The result is undefined if closed with a neutral button.</p>\n</blockquote>\n<h2 id=\"Prompt\"><a href=\"#Prompt\" class=\"headerlink\" title=\"Prompt\"></a>Prompt</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// Second argument is optional.</span></div><div class=\"line\">dialogs.prompt(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"Default text\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", text: \"</span> + r.text);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// Second argument is optional.</span></div><div class=\"line\">dialogs.prompt(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"Default text\"</span>).then(r =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", text: \"</span> + r.text);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// inputType property can be dialogs.inputType.password or dialogs.inputType.text.</span></div><div class=\"line\">dialogs.prompt(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral text\"</span>,</div><div class=\"line\">  defaultText: <span class=\"string\">\"Default text\"</span>,</div><div class=\"line\">  inputType: dialogs.inputType.password</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", text: \"</span> + r.text);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// inputType property can be dialogs.inputType.password or dialogs.inputType.text.</span></div><div class=\"line\">dialogs.prompt(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral text\"</span>,</div><div class=\"line\">  defaultText: <span class=\"string\">\"Default text\"</span>,</div><div class=\"line\">  inputType: dialogs.inputType.password</div><div class=\"line\">&#125;).then(r =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", text: \"</span> + r.text);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The dialog result argument is an object with two properties: result and text (entered text). The result property is <strong>true</strong> if the dialog is closed with the OK button, <strong>false</strong> if closed with the Cancel button or undefined if closed with a neutral button.</p>\n</blockquote>\n<h2 id=\"Login\"><a href=\"#Login\" class=\"headerlink\" title=\"Login\"></a>Login</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// User name and password arguments are optional.</span></div><div class=\"line\">dialogs.login(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"User name label text\"</span>, <span class=\"string\">\"Password label text\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", user: \"</span> + r.userName + <span class=\"string\">\", pwd: \"</span> + r.password);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\"><span class=\"comment\">// User name and password arguments are optional.</span></div><div class=\"line\">dialogs.login(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"User name label text\"</span>, <span class=\"string\">\"Password label text\"</span>).then(r =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", user: \"</span> + r.userName + <span class=\"string\">\", pwd: \"</span> + r.password);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.login(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel button text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral button text\"</span>,</div><div class=\"line\">  userName: <span class=\"string\">\"User name label text\"</span>,</div><div class=\"line\">  password: <span class=\"string\">\"Password label text\"</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", user: \"</span> + r.userName + <span class=\"string\">\", pwd: \"</span> + r.password);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.login(&#123;</div><div class=\"line\">  title: <span class=\"string\">\"Your title\"</span>,</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  okButtonText: <span class=\"string\">\"Your button text\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel button text\"</span>,</div><div class=\"line\">  neutralButtonText: <span class=\"string\">\"Neutral button text\"</span>,</div><div class=\"line\">  userName: <span class=\"string\">\"User name label text\"</span>,</div><div class=\"line\">  password: <span class=\"string\">\"Password label text\"</span></div><div class=\"line\">&#125;).then(r =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + r.result + <span class=\"string\">\", user: \"</span> + r.userName + <span class=\"string\">\", pwd: \"</span> + r.password);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The dialog result argument is an object with three properties: result, userName and password (entered user name and password). The result property is <strong>true</strong> if the dialog is closed with the OK button, <strong>false</strong> if closed with the Cancel button or undefined if closed with a neutral button.</p>\n</blockquote>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p><strong>Web browser style</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.action(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"Cancel button text\"</span>, [<span class=\"string\">\"Option1\"</span>, <span class=\"string\">\"Option2\"</span>]).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.action(<span class=\"string\">\"Your message\"</span>, <span class=\"string\">\"Cancel button text\"</span>, [<span class=\"string\">\"Option1\"</span>, <span class=\"string\">\"Option2\"</span>]).then(result =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Using an options object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.action(&#123;</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  actions: [<span class=\"string\">\"Option1\"</span>, <span class=\"string\">\"Option2\"</span>]</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> dialogs = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/dialogs\"</span>);</div><div class=\"line\">dialogs.action(&#123;</div><div class=\"line\">  message: <span class=\"string\">\"Your message\"</span>,</div><div class=\"line\">  cancelButtonText: <span class=\"string\">\"Cancel text\"</span>,</div><div class=\"line\">  actions: [<span class=\"string\">\"Option1\"</span>, <span class=\"string\">\"Option2\"</span>]</div><div class=\"line\">&#125;).then(result =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Dialog result: \"</span> + result)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The dialog result argument is a string (the text of the clicked option or the text of the cancel button).\n<div class=\"codeblock ng\"><h2 id=\"custom-dialog\">Custom dialog</h2>\n<p>You can also create dialogs with custom content. All the needed types live inside the <code>nativescript-angular/modal-dialog</code> module.</p>\n<h3 id=\"showing-custom-dialog\">Showing custom dialog</h3>\n<p>Start by getting a reference to <code>ModalDialogService</code> by injecting it in your component:</p>\nundefined\n<p>Ignore the <code>result</code> field for now&mdash;we will use it later on.</p>\n<p>Make sure you have added <code>modal-dialog-host</code> somewhere inside the your component template. If you skip it&mdash;you will get an exception when trying to show the dialog.</p>\nundefined\n<p>Call the <code>showModal</code> method of the dialog service passing the type of the component that should be loaded in the dialog:</p>\nundefined\n<h3 id=\"passing-parameters\">Passing parameters</h3>\n<p>You can pass parameters to the dialog component when calling the <code>showModal</code> method. You can also specify if the dialog should be shown full screen.</p>\nundefined\n<blockquote>\n<p><strong>TIP:</strong> By design on iPhone, a modal page appears only in full screen.</p>\n</blockquote>\n<p>Inside the <code>DialogContent</code>, you can get the parameters by injecting a <code>ModalDialogParams</code>:</p>\nundefined\n<p>The <code>params.context</code> is the same object as <code>options.context</code> passed to the <code>showModal</code> method.</p>\n<h3 id=\"returning-a-result\">Returning a result</h3>\n<p>To close the dialog, call the <code>closeCallback</code> function of the dialog params. </p>\nundefined\n<p>Note that the <code>showModal</code> function actually returns a promise that is resolved when the dialog closes. The value you pass to the <code>closeCallback</code> will be the value returned by the promise. \nLet&#39;s modify the <code>show</code> function in the main component so that it shows the result when the dialog closes:</p>\nundefined\n</div></p>\n</blockquote>\n"},{"title":"List View","description":"NativeScript for Angular Documentation - Using List View","position":3,"slug":"layouts","previous_url":"/layouts","_content":"\n# List View\n\nUsing a `ListView` control inside Angular 2 app requires some special attention due to the complexity of the NativeScript control like custom item template, bindings and so on. NativeScript-angular plugin provides a custom Angular 2 component which simplifies the way native ListView should be used. Following is an example of how to add ListView to your page (with some clarifications later):\n\n```XML\n// list-test.html\n<ListView [items]=\"myItems\" (itemTap)=\"onItemTap($event)\">\n    <template let-item=\"item\" let-i=\"index\" let-odd=\"odd\" let-even=\"even\">\n        <StackLayout [class.odd]=\"odd\" [class.even]=\"even\">\n            <Label [text]='\"index: \" + i'></Label>\n            <Label [text]='\"[\" + item.id +\"] \" + item.name'></Label>\n        </StackLayout>\n    </template>\n</ListView>\n```\n```TypeScript\nimport {Component, Input, ChangeDetectionStrategy} from '@angular/core';\n\nclass DataItem {\n    constructor(public id: number, public name: string) { }\n}\n\n@Component({\n    selector: 'list-test',\n    styleUrls: ['list-test.css'],\n    template: 'list-test.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListTest {\n    public myItems: Array<DataItem>;\n    private counter: number;\n\n    constructor() {\n        this.myItems = [];\n        this.counter = 0;\n        for (var i = 0; i < 50; i++) {\n            this.myItems.push(new DataItem(i, \"data item \" + i));\n            this.counter = i;\n        }\n    }\n\n    public onItemTap(args) {\n        console.log(\"------------------------ ItemTapped: \" + args.index);\n    }\n}\n```\n```CSS\n// list-test.css\n.odd {\n\tbackground-color: red;\n}\n\n.even {\n\tbackground-color: blue;\n}\n```\n\nAs shown there is nothing complex in a way ListView component is used, but some points need clarifications.\n\n* items - The `items` property is bound in a standard way to a ordinary JavaScript Array. Since the JavaScript Array object does not have observable or change notifications capabilities supporting such scenario counts on Angular 2 change detection mechanism for notification that something is changed. Be aware that the process of checking that anything is changed within an Array could take a lot of time on large arrays (including a memory issue) leading to a possible performance issue. So consider using another kind of source with large collections. A great example of such kind of data source is NativeScript ObservableArray.\n\n* template - The template tag is used to define a template which will be used for the User Interface of every ListView item. As shown there are some standard Angular 2 optional variables marked with `let-` that are preset for every data item:\n  * `let-item` - the data item itself.\n  * `let-i` - the index of the data item (inside data source)\n  * `let-odd` - represents if the index of the data item is an odd number\n  * `let-even` - represents if the index of the data item is an even number\n  * Inside the actual template it is shown how to use these variables.\n\n* itemTap event - `itemTap` event is an event that comes from NativeScript ListView (the underlying control behind NativeScript-Angular ListView component). There is nothing special just a normal one-way to source binding with a corresponding function `onItemTap` inside code-behind file.\n\nThis is a typical usage of the ListView component however if business case requires there are a few options for customizations.\n\n### Customizing List View\n\nThe most common customization of ListView control is customizing the item template. Everything inside `<template>` tag will be used as item template and will be generated for each item. Another possible customization is connected with creation of a different item. Usually with a pure NativeScript application `itemLoading` event could be used to accomplish such customization. Unfortunately this event cannot be used with NativeScript-Angular 2 app, since NativeScript-Angular plugin uses this event to create Angular 2 view which will be inserted into Angular 2 virtual dom. However NativeScript-Angular ListView component provides an option to customize the created Angular 2 view before adding it to visual tree. This option is available via `setupItemView` event. Here is a small example how to use this event:\n\n```XML\n<GridLayout rows=\"*\">\n    <ListView [items]=\"myItems\" (setupItemView)=\"onSetupItemView($event)\">\n        <template let-item=\"item\" let-i=\"index\" let-third=\"third\">\n            <StackLayout [class.third]=\"third\">\n                <Label [text]='\"index: \" + i'></Label>\n                <Label [text]='\"[\" + item.id +\"] \" + item.name'></Label>\n            </StackLayout>\n        </template>\n    </ListView>\n</GridLayout>\n```\n```TypeScript\nimport {SetupItemViewArgs} from \"nativescript-angular/directives\";\n\n...\n\nonSetupItemView(args: SetupItemViewArgs) {\n\targs.view.setLocal('third', (args.index % 3 === 0));\n}\n```\n\nIn order to see the result just add `third` css class in app.css or in styles of your custom component:\n\n```\n.third {\n\tbackground-color: lime;\n}\n```\n\nAnd result is:\n\n![list-view-customization](../docs/img/angular/list-view-setupItemView.png \"list-view-customization\")\n\n### Using an item template\n\nAnother popular scenario is using a separate control for the ListView template. Using a custom control within a ListView actually is very simple.\n\n```TypeScript\n@Component({\n    selector: 'item-component',\n    template: `\n        <StackLayout>\n            <Label *ngFor=\"#element of data.list\" [text]=\"element.text\"></Label>\n        </StackLayout>\n    `\n})\nexport class ItemComponent {\n    @Input() data: any;\n    constructor() { }\n}\n\n@Component({\n    selector: 'list-test',\n    directives: [ItemComponent],\n    template: `\n        <GridLayout rows=\"*\">\n            <ListView [items]=\"myItems\">\n                <template let-item=\"item\">\n                    <item-component [data]=\"item\"></item-component>\n                </template>\n            </ListView>\n        </GridLayout>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListTest {\n    public myItems: Array<any>;\n    private counter: number;\n\n    constructor() {\n        var list = [{\"text\": \"a\"}, {\"text\": \"b\"}];\n        var list1 = [{\"text\": \"c\"}, {\"text\": \"d\"}];\n        this.myItems = [{\"list\": list}, {\"list\": list1}];\n    }\n}\n```\n\nAs shown just creating a custom component and add it to directives of the host component. Another interesting part is how `data` is passed to the child control (via @Input decorator).\n\n### Using async pipe\n\nGenerally according to Angular documentation pipe is a simple display-value transformation that can be declared in HTML. Pipe takes an input and transforms it to a desired output. One of the built-in Angular pipes is very commonly used with ListView like controls. This is the `async` pipe. The input of this pipe is either `Promise<Array>` or `Observable<Array>` (Observable actually stands for [RxJS.Observable](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md). What this pipe do is to subscribe for the observable and return the value inside it as property value. Following is a simple example of using async pipe with NativeScript-Angular ListView.\n\n```TypeScript\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable as RxObservable } from 'rxjs/Observable';\n\nexport class DataItem {\n    constructor(public id: number, public name: string) { }\n}\n\n@Component({\n    selector: 'list-test-async',\n    template: `\n    <GridLayout>\n        <ListView [items]=\"myItems | async\">\n            <template let-item=\"item\" let-i=\"index\" let-odd=\"odd\" let-even=\"even\">\n                <StackLayout [class.odd]=\"odd\" [class.even]=\"even\">\n                    <Label [text]='\"index: \" + item.name'></Label>\n                </StackLayout>\n            </template>\n        </ListView>\n    </GridLayout>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListTestAsync {\n    public myItems: RxObservable<Array<DataItem>>;\n\n    constructor() {\n        var items = [];\n        for (var i = 0; i < 3; i++) {\n            items.push(new DataItem(i, \"data item \" + i));\n        }\n        \n        var subscr;\n        this.myItems = RxObservable.create(subscriber => {\n            subscr = subscriber;\n            subscriber.next(items);\n            return function () {\n                console.log(\"Unsubscribe called!!!\");\n            }\n        });\n\n        let counter = 2;\n        let intervalId = setInterval(() => {\n            counter++;\n            items.push(new DataItem(counter, \"data item \" + counter));\n            subscr.next(items);\n        }, 1000);\n        \n        setTimeout(() => {\n            clearInterval(intervalId);\n        }, 15000);\n    }\n}\n```","source":"ui/list-view.md","raw":"---\ntitle: List View\ndescription: NativeScript for Angular Documentation - Using List View\nposition: 3\nslug: layouts\nprevious_url: /layouts\n---\n\n# List View\n\nUsing a `ListView` control inside Angular 2 app requires some special attention due to the complexity of the NativeScript control like custom item template, bindings and so on. NativeScript-angular plugin provides a custom Angular 2 component which simplifies the way native ListView should be used. Following is an example of how to add ListView to your page (with some clarifications later):\n\n```XML\n// list-test.html\n<ListView [items]=\"myItems\" (itemTap)=\"onItemTap($event)\">\n    <template let-item=\"item\" let-i=\"index\" let-odd=\"odd\" let-even=\"even\">\n        <StackLayout [class.odd]=\"odd\" [class.even]=\"even\">\n            <Label [text]='\"index: \" + i'></Label>\n            <Label [text]='\"[\" + item.id +\"] \" + item.name'></Label>\n        </StackLayout>\n    </template>\n</ListView>\n```\n```TypeScript\nimport {Component, Input, ChangeDetectionStrategy} from '@angular/core';\n\nclass DataItem {\n    constructor(public id: number, public name: string) { }\n}\n\n@Component({\n    selector: 'list-test',\n    styleUrls: ['list-test.css'],\n    template: 'list-test.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListTest {\n    public myItems: Array<DataItem>;\n    private counter: number;\n\n    constructor() {\n        this.myItems = [];\n        this.counter = 0;\n        for (var i = 0; i < 50; i++) {\n            this.myItems.push(new DataItem(i, \"data item \" + i));\n            this.counter = i;\n        }\n    }\n\n    public onItemTap(args) {\n        console.log(\"------------------------ ItemTapped: \" + args.index);\n    }\n}\n```\n```CSS\n// list-test.css\n.odd {\n\tbackground-color: red;\n}\n\n.even {\n\tbackground-color: blue;\n}\n```\n\nAs shown there is nothing complex in a way ListView component is used, but some points need clarifications.\n\n* items - The `items` property is bound in a standard way to a ordinary JavaScript Array. Since the JavaScript Array object does not have observable or change notifications capabilities supporting such scenario counts on Angular 2 change detection mechanism for notification that something is changed. Be aware that the process of checking that anything is changed within an Array could take a lot of time on large arrays (including a memory issue) leading to a possible performance issue. So consider using another kind of source with large collections. A great example of such kind of data source is NativeScript ObservableArray.\n\n* template - The template tag is used to define a template which will be used for the User Interface of every ListView item. As shown there are some standard Angular 2 optional variables marked with `let-` that are preset for every data item:\n  * `let-item` - the data item itself.\n  * `let-i` - the index of the data item (inside data source)\n  * `let-odd` - represents if the index of the data item is an odd number\n  * `let-even` - represents if the index of the data item is an even number\n  * Inside the actual template it is shown how to use these variables.\n\n* itemTap event - `itemTap` event is an event that comes from NativeScript ListView (the underlying control behind NativeScript-Angular ListView component). There is nothing special just a normal one-way to source binding with a corresponding function `onItemTap` inside code-behind file.\n\nThis is a typical usage of the ListView component however if business case requires there are a few options for customizations.\n\n### Customizing List View\n\nThe most common customization of ListView control is customizing the item template. Everything inside `<template>` tag will be used as item template and will be generated for each item. Another possible customization is connected with creation of a different item. Usually with a pure NativeScript application `itemLoading` event could be used to accomplish such customization. Unfortunately this event cannot be used with NativeScript-Angular 2 app, since NativeScript-Angular plugin uses this event to create Angular 2 view which will be inserted into Angular 2 virtual dom. However NativeScript-Angular ListView component provides an option to customize the created Angular 2 view before adding it to visual tree. This option is available via `setupItemView` event. Here is a small example how to use this event:\n\n```XML\n<GridLayout rows=\"*\">\n    <ListView [items]=\"myItems\" (setupItemView)=\"onSetupItemView($event)\">\n        <template let-item=\"item\" let-i=\"index\" let-third=\"third\">\n            <StackLayout [class.third]=\"third\">\n                <Label [text]='\"index: \" + i'></Label>\n                <Label [text]='\"[\" + item.id +\"] \" + item.name'></Label>\n            </StackLayout>\n        </template>\n    </ListView>\n</GridLayout>\n```\n```TypeScript\nimport {SetupItemViewArgs} from \"nativescript-angular/directives\";\n\n...\n\nonSetupItemView(args: SetupItemViewArgs) {\n\targs.view.setLocal('third', (args.index % 3 === 0));\n}\n```\n\nIn order to see the result just add `third` css class in app.css or in styles of your custom component:\n\n```\n.third {\n\tbackground-color: lime;\n}\n```\n\nAnd result is:\n\n![list-view-customization](../docs/img/angular/list-view-setupItemView.png \"list-view-customization\")\n\n### Using an item template\n\nAnother popular scenario is using a separate control for the ListView template. Using a custom control within a ListView actually is very simple.\n\n```TypeScript\n@Component({\n    selector: 'item-component',\n    template: `\n        <StackLayout>\n            <Label *ngFor=\"#element of data.list\" [text]=\"element.text\"></Label>\n        </StackLayout>\n    `\n})\nexport class ItemComponent {\n    @Input() data: any;\n    constructor() { }\n}\n\n@Component({\n    selector: 'list-test',\n    directives: [ItemComponent],\n    template: `\n        <GridLayout rows=\"*\">\n            <ListView [items]=\"myItems\">\n                <template let-item=\"item\">\n                    <item-component [data]=\"item\"></item-component>\n                </template>\n            </ListView>\n        </GridLayout>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListTest {\n    public myItems: Array<any>;\n    private counter: number;\n\n    constructor() {\n        var list = [{\"text\": \"a\"}, {\"text\": \"b\"}];\n        var list1 = [{\"text\": \"c\"}, {\"text\": \"d\"}];\n        this.myItems = [{\"list\": list}, {\"list\": list1}];\n    }\n}\n```\n\nAs shown just creating a custom component and add it to directives of the host component. Another interesting part is how `data` is passed to the child control (via @Input decorator).\n\n### Using async pipe\n\nGenerally according to Angular documentation pipe is a simple display-value transformation that can be declared in HTML. Pipe takes an input and transforms it to a desired output. One of the built-in Angular pipes is very commonly used with ListView like controls. This is the `async` pipe. The input of this pipe is either `Promise<Array>` or `Observable<Array>` (Observable actually stands for [RxJS.Observable](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md). What this pipe do is to subscribe for the observable and return the value inside it as property value. Following is a simple example of using async pipe with NativeScript-Angular ListView.\n\n```TypeScript\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable as RxObservable } from 'rxjs/Observable';\n\nexport class DataItem {\n    constructor(public id: number, public name: string) { }\n}\n\n@Component({\n    selector: 'list-test-async',\n    template: `\n    <GridLayout>\n        <ListView [items]=\"myItems | async\">\n            <template let-item=\"item\" let-i=\"index\" let-odd=\"odd\" let-even=\"even\">\n                <StackLayout [class.odd]=\"odd\" [class.even]=\"even\">\n                    <Label [text]='\"index: \" + item.name'></Label>\n                </StackLayout>\n            </template>\n        </ListView>\n    </GridLayout>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListTestAsync {\n    public myItems: RxObservable<Array<DataItem>>;\n\n    constructor() {\n        var items = [];\n        for (var i = 0; i < 3; i++) {\n            items.push(new DataItem(i, \"data item \" + i));\n        }\n        \n        var subscr;\n        this.myItems = RxObservable.create(subscriber => {\n            subscr = subscriber;\n            subscriber.next(items);\n            return function () {\n                console.log(\"Unsubscribe called!!!\");\n            }\n        });\n\n        let counter = 2;\n        let intervalId = setInterval(() => {\n            counter++;\n            items.push(new DataItem(counter, \"data item \" + counter));\n            subscr.next(items);\n        }, 1000);\n        \n        setTimeout(() => {\n            clearInterval(intervalId);\n        }, 15000);\n    }\n}\n```","date":"2016-08-26T21:05:54.613Z","updated":"2016-08-26T21:05:54.613Z","path":"ui/list-view.html","comments":1,"layout":"page","_id":"cisn95cay0014wsl0ij3wgf4p","content":"<h1 id=\"List-View\"><a href=\"#List-View\" class=\"headerlink\" title=\"List View\"></a>List View</h1><p>Using a <code>ListView</code> control inside Angular 2 app requires some special attention due to the complexity of the NativeScript control like custom item template, bindings and so on. NativeScript-angular plugin provides a custom Angular 2 component which simplifies the way native ListView should be used. Following is an example of how to add ListView to your page (with some clarifications later):</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// list-test.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">\"myItems\"</span> (<span class=\"attr\">itemTap</span>)=<span class=\"string\">\"onItemTap($event)\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">let-i</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">let-odd</span>=<span class=\"string\">\"odd\"</span> <span class=\"attr\">let-even</span>=<span class=\"string\">\"even\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> [<span class=\"attr\">class.odd</span>]=<span class=\"string\">\"odd\"</span> [<span class=\"attr\">class.even</span>]=<span class=\"string\">\"even\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'\"index: \" + i'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'\"[\" + item.id +\"] \" + item.name'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Component, Input, ChangeDetectionStrategy&#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> DataItem &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public id: number, public name: string) &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">'list-test'</span>,</div><div class=\"line\">    styleUrls: [<span class=\"string\">'list-test.css'</span>],</div><div class=\"line\">    template: <span class=\"string\">'list-test.html'</span>,</div><div class=\"line\">    changeDetection: ChangeDetectionStrategy.OnPush</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> myItems: <span class=\"built_in\">Array</span>&lt;DataItem&gt;;</div><div class=\"line\">    <span class=\"keyword\">private</span> counter: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.myItems = [];</div><div class=\"line\">        <span class=\"keyword\">this</span>.counter = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.myItems.push(<span class=\"keyword\">new</span> DataItem(i, <span class=\"string\">\"data item \"</span> + i));</div><div class=\"line\">            <span class=\"keyword\">this</span>.counter = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> onItemTap(args) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"------------------------ ItemTapped: \"</span> + args.index);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// list-test.css</div><div class=\"line\">.odd &#123;</div><div class=\"line\">\tbackground-color: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.even &#123;</div><div class=\"line\">\tbackground-color: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>As shown there is nothing complex in a way ListView component is used, but some points need clarifications.</p>\n<ul>\n<li><p>items - The <code>items</code> property is bound in a standard way to a ordinary JavaScript Array. Since the JavaScript Array object does not have observable or change notifications capabilities supporting such scenario counts on Angular 2 change detection mechanism for notification that something is changed. Be aware that the process of checking that anything is changed within an Array could take a lot of time on large arrays (including a memory issue) leading to a possible performance issue. So consider using another kind of source with large collections. A great example of such kind of data source is NativeScript ObservableArray.</p>\n</li>\n<li><p>template - The template tag is used to define a template which will be used for the User Interface of every ListView item. As shown there are some standard Angular 2 optional variables marked with <code>let-</code> that are preset for every data item:</p>\n<ul>\n<li><code>let-item</code> - the data item itself.</li>\n<li><code>let-i</code> - the index of the data item (inside data source)</li>\n<li><code>let-odd</code> - represents if the index of the data item is an odd number</li>\n<li><code>let-even</code> - represents if the index of the data item is an even number</li>\n<li>Inside the actual template it is shown how to use these variables.</li>\n</ul>\n</li>\n<li><p>itemTap event - <code>itemTap</code> event is an event that comes from NativeScript ListView (the underlying control behind NativeScript-Angular ListView component). There is nothing special just a normal one-way to source binding with a corresponding function <code>onItemTap</code> inside code-behind file.</p>\n</li>\n</ul>\n<p>This is a typical usage of the ListView component however if business case requires there are a few options for customizations.</p>\n<h3 id=\"Customizing-List-View\"><a href=\"#Customizing-List-View\" class=\"headerlink\" title=\"Customizing List View\"></a>Customizing List View</h3><p>The most common customization of ListView control is customizing the item template. Everything inside <code>&lt;template&gt;</code> tag will be used as item template and will be generated for each item. Another possible customization is connected with creation of a different item. Usually with a pure NativeScript application <code>itemLoading</code> event could be used to accomplish such customization. Unfortunately this event cannot be used with NativeScript-Angular 2 app, since NativeScript-Angular plugin uses this event to create Angular 2 view which will be inserted into Angular 2 virtual dom. However NativeScript-Angular ListView component provides an option to customize the created Angular 2 view before adding it to visual tree. This option is available via <code>setupItemView</code> event. Here is a small example how to use this event:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"*\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">\"myItems\"</span> (<span class=\"attr\">setupItemView</span>)=<span class=\"string\">\"onSetupItemView($event)\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">let-i</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">let-third</span>=<span class=\"string\">\"third\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> [<span class=\"attr\">class.third</span>]=<span class=\"string\">\"third\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'\"index: \" + i'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'\"[\" + item.id +\"] \" + item.name'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">GridLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;SetupItemViewArgs&#125; from <span class=\"string\">\"nativescript-angular/directives\"</span>;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">onSetupItemView(args: SetupItemViewArgs) &#123;</div><div class=\"line\">\targs.view.setLocal(<span class=\"string\">'third'</span>, (args.index % <span class=\"number\">3</span> === <span class=\"number\">0</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>In order to see the result just add <code>third</code> css class in app.css or in styles of your custom component:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.third &#123;</div><div class=\"line\">\tbackground-color: lime;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And result is:</p>\n<p><img src=\"../docs/img/angular/list-view-setupItemView.png\" alt=\"list-view-customization\" title=\"list-view-customization\"></p>\n<h3 id=\"Using-an-item-template\"><a href=\"#Using-an-item-template\" class=\"headerlink\" title=\"Using an item template\"></a>Using an item template</h3><p>Another popular scenario is using a separate control for the ListView template. Using a custom control within a ListView actually is very simple.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">'item-component'</span>,</div><div class=\"line\">    template: <span class=\"string\">`</span></div><div class=\"line\">        &lt;StackLayout&gt;</div><div class=\"line\">            &lt;Label *ngFor=\"#element of data.list\" [text]=\"element.text\"&gt;&lt;/Label&gt;</div><div class=\"line\">        &lt;/StackLayout&gt;</div><div class=\"line\">    `</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ItemComponent &#123;</div><div class=\"line\">    @Input() data: <span class=\"built_in\">any</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">'list-test'</span>,</div><div class=\"line\">    directives: [ItemComponent],</div><div class=\"line\">    template: <span class=\"string\">`</span></div><div class=\"line\">        &lt;GridLayout rows=\"*\"&gt;</div><div class=\"line\">            &lt;ListView [items]=\"myItems\"&gt;</div><div class=\"line\">                &lt;template let-item=\"item\"&gt;</div><div class=\"line\">                    &lt;item-component [data]=\"item\"&gt;&lt;/item-component&gt;</div><div class=\"line\">                &lt;/template&gt;</div><div class=\"line\">            &lt;/ListView&gt;</div><div class=\"line\">        &lt;/GridLayout&gt;</div><div class=\"line\">    `,</div><div class=\"line\">    changeDetection: ChangeDetectionStrategy.OnPush</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> myItems: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">    <span class=\"keyword\">private</span> counter: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> list = [&#123;<span class=\"string\">\"text\"</span>: <span class=\"string\">\"a\"</span>&#125;, &#123;<span class=\"string\">\"text\"</span>: <span class=\"string\">\"b\"</span>&#125;];</div><div class=\"line\">        <span class=\"keyword\">var</span> list1 = [&#123;<span class=\"string\">\"text\"</span>: <span class=\"string\">\"c\"</span>&#125;, &#123;<span class=\"string\">\"text\"</span>: <span class=\"string\">\"d\"</span>&#125;];</div><div class=\"line\">        <span class=\"keyword\">this</span>.myItems = [&#123;<span class=\"string\">\"list\"</span>: list&#125;, &#123;<span class=\"string\">\"list\"</span>: list1&#125;];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>As shown just creating a custom component and add it to directives of the host component. Another interesting part is how <code>data</code> is passed to the child control (via @Input decorator).</p>\n<h3 id=\"Using-async-pipe\"><a href=\"#Using-async-pipe\" class=\"headerlink\" title=\"Using async pipe\"></a>Using async pipe</h3><p>Generally according to Angular documentation pipe is a simple display-value transformation that can be declared in HTML. Pipe takes an input and transforms it to a desired output. One of the built-in Angular pipes is very commonly used with ListView like controls. This is the <code>async</code> pipe. The input of this pipe is either <code>Promise&lt;Array&gt;</code> or <code>Observable&lt;Array&gt;</code> (Observable actually stands for <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md\" target=\"_blank\" rel=\"external\">RxJS.Observable</a>. What this pipe do is to subscribe for the observable and return the value inside it as property value. Following is a simple example of using async pipe with NativeScript-Angular ListView.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, Input, ChangeDetectionStrategy &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable as RxObservable &#125; from <span class=\"string\">'rxjs/Observable'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DataItem &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public id: number, public name: string) &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">'list-test-async'</span>,</div><div class=\"line\">    template: <span class=\"string\">`</span></div><div class=\"line\">    &lt;GridLayout&gt;</div><div class=\"line\">        &lt;ListView [items]=\"myItems | async\"&gt;</div><div class=\"line\">            &lt;template let-item=\"item\" let-i=\"index\" let-odd=\"odd\" let-even=\"even\"&gt;</div><div class=\"line\">                &lt;StackLayout [class.odd]=\"odd\" [class.even]=\"even\"&gt;</div><div class=\"line\">                    &lt;Label [text]='\"index: \" + item.name'&gt;&lt;/Label&gt;</div><div class=\"line\">                &lt;/StackLayout&gt;</div><div class=\"line\">            &lt;/template&gt;</div><div class=\"line\">        &lt;/ListView&gt;</div><div class=\"line\">    &lt;/GridLayout&gt;</div><div class=\"line\">    `,</div><div class=\"line\">    changeDetection: ChangeDetectionStrategy.OnPush</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListTestAsync &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> myItems: RxObservable&lt;<span class=\"built_in\">Array</span>&lt;DataItem&gt;&gt;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> items = [];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">            items.push(<span class=\"keyword\">new</span> DataItem(i, <span class=\"string\">\"data item \"</span> + i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">var</span> subscr;</div><div class=\"line\">        <span class=\"keyword\">this</span>.myItems = RxObservable.create(subscriber =&gt; &#123;</div><div class=\"line\">            subscr = subscriber;</div><div class=\"line\">            subscriber.next(items);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Unsubscribe called!!!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">let</span> counter = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">let</span> intervalId = setInterval(() =&gt; &#123;</div><div class=\"line\">            counter++;</div><div class=\"line\">            items.push(<span class=\"keyword\">new</span> DataItem(counter, <span class=\"string\">\"data item \"</span> + counter));</div><div class=\"line\">            subscr.next(items);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">        </div><div class=\"line\">        setTimeout(() =&gt; &#123;</div><div class=\"line\">            clearInterval(intervalId);</div><div class=\"line\">        &#125;, <span class=\"number\">15000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"List-View\"><a href=\"#List-View\" class=\"headerlink\" title=\"List View\"></a>List View</h1><p>Using a <code>ListView</code> control inside Angular 2 app requires some special attention due to the complexity of the NativeScript control like custom item template, bindings and so on. NativeScript-angular plugin provides a custom Angular 2 component which simplifies the way native ListView should be used. Following is an example of how to add ListView to your page (with some clarifications later):</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// list-test.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">\"myItems\"</span> (<span class=\"attr\">itemTap</span>)=<span class=\"string\">\"onItemTap($event)\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">let-i</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">let-odd</span>=<span class=\"string\">\"odd\"</span> <span class=\"attr\">let-even</span>=<span class=\"string\">\"even\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> [<span class=\"attr\">class.odd</span>]=<span class=\"string\">\"odd\"</span> [<span class=\"attr\">class.even</span>]=<span class=\"string\">\"even\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'\"index: \" + i'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'\"[\" + item.id +\"] \" + item.name'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Component, Input, ChangeDetectionStrategy&#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> DataItem &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public id: number, public name: string) &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">'list-test'</span>,</div><div class=\"line\">    styleUrls: [<span class=\"string\">'list-test.css'</span>],</div><div class=\"line\">    template: <span class=\"string\">'list-test.html'</span>,</div><div class=\"line\">    changeDetection: ChangeDetectionStrategy.OnPush</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> myItems: <span class=\"built_in\">Array</span>&lt;DataItem&gt;;</div><div class=\"line\">    <span class=\"keyword\">private</span> counter: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.myItems = [];</div><div class=\"line\">        <span class=\"keyword\">this</span>.counter = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.myItems.push(<span class=\"keyword\">new</span> DataItem(i, <span class=\"string\">\"data item \"</span> + i));</div><div class=\"line\">            <span class=\"keyword\">this</span>.counter = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> onItemTap(args) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"------------------------ ItemTapped: \"</span> + args.index);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// list-test.css</div><div class=\"line\">.odd &#123;</div><div class=\"line\">\tbackground-color: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.even &#123;</div><div class=\"line\">\tbackground-color: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>As shown there is nothing complex in a way ListView component is used, but some points need clarifications.</p>\n<ul>\n<li><p>items - The <code>items</code> property is bound in a standard way to a ordinary JavaScript Array. Since the JavaScript Array object does not have observable or change notifications capabilities supporting such scenario counts on Angular 2 change detection mechanism for notification that something is changed. Be aware that the process of checking that anything is changed within an Array could take a lot of time on large arrays (including a memory issue) leading to a possible performance issue. So consider using another kind of source with large collections. A great example of such kind of data source is NativeScript ObservableArray.</p>\n</li>\n<li><p>template - The template tag is used to define a template which will be used for the User Interface of every ListView item. As shown there are some standard Angular 2 optional variables marked with <code>let-</code> that are preset for every data item:</p>\n<ul>\n<li><code>let-item</code> - the data item itself.</li>\n<li><code>let-i</code> - the index of the data item (inside data source)</li>\n<li><code>let-odd</code> - represents if the index of the data item is an odd number</li>\n<li><code>let-even</code> - represents if the index of the data item is an even number</li>\n<li>Inside the actual template it is shown how to use these variables.</li>\n</ul>\n</li>\n<li><p>itemTap event - <code>itemTap</code> event is an event that comes from NativeScript ListView (the underlying control behind NativeScript-Angular ListView component). There is nothing special just a normal one-way to source binding with a corresponding function <code>onItemTap</code> inside code-behind file.</p>\n</li>\n</ul>\n<p>This is a typical usage of the ListView component however if business case requires there are a few options for customizations.</p>\n<h3 id=\"Customizing-List-View\"><a href=\"#Customizing-List-View\" class=\"headerlink\" title=\"Customizing List View\"></a>Customizing List View</h3><p>The most common customization of ListView control is customizing the item template. Everything inside <code>&lt;template&gt;</code> tag will be used as item template and will be generated for each item. Another possible customization is connected with creation of a different item. Usually with a pure NativeScript application <code>itemLoading</code> event could be used to accomplish such customization. Unfortunately this event cannot be used with NativeScript-Angular 2 app, since NativeScript-Angular plugin uses this event to create Angular 2 view which will be inserted into Angular 2 virtual dom. However NativeScript-Angular ListView component provides an option to customize the created Angular 2 view before adding it to visual tree. This option is available via <code>setupItemView</code> event. Here is a small example how to use this event:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"*\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListView</span> [<span class=\"attr\">items</span>]=<span class=\"string\">\"myItems\"</span> (<span class=\"attr\">setupItemView</span>)=<span class=\"string\">\"onSetupItemView($event)\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">let-item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">let-i</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">let-third</span>=<span class=\"string\">\"third\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> [<span class=\"attr\">class.third</span>]=<span class=\"string\">\"third\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'\"index: \" + i'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Label</span> [<span class=\"attr\">text</span>]=<span class=\"string\">'\"[\" + item.id +\"] \" + item.name'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">GridLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;SetupItemViewArgs&#125; from <span class=\"string\">\"nativescript-angular/directives\"</span>;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">onSetupItemView(args: SetupItemViewArgs) &#123;</div><div class=\"line\">\targs.view.setLocal(<span class=\"string\">'third'</span>, (args.index % <span class=\"number\">3</span> === <span class=\"number\">0</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>In order to see the result just add <code>third</code> css class in app.css or in styles of your custom component:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.third &#123;</div><div class=\"line\">\tbackground-color: lime;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And result is:</p>\n<p><img src=\"../docs/img/angular/list-view-setupItemView.png\" alt=\"list-view-customization\" title=\"list-view-customization\"></p>\n<h3 id=\"Using-an-item-template\"><a href=\"#Using-an-item-template\" class=\"headerlink\" title=\"Using an item template\"></a>Using an item template</h3><p>Another popular scenario is using a separate control for the ListView template. Using a custom control within a ListView actually is very simple.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">'item-component'</span>,</div><div class=\"line\">    template: <span class=\"string\">`</div><div class=\"line\">        &lt;StackLayout&gt;</div><div class=\"line\">            &lt;Label *ngFor=\"#element of data.list\" [text]=\"element.text\"&gt;&lt;/Label&gt;</div><div class=\"line\">        &lt;/StackLayout&gt;</div><div class=\"line\">    `</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ItemComponent &#123;</div><div class=\"line\">    @Input() data: <span class=\"built_in\">any</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">'list-test'</span>,</div><div class=\"line\">    directives: [ItemComponent],</div><div class=\"line\">    template: <span class=\"string\">`</div><div class=\"line\">        &lt;GridLayout rows=\"*\"&gt;</div><div class=\"line\">            &lt;ListView [items]=\"myItems\"&gt;</div><div class=\"line\">                &lt;template let-item=\"item\"&gt;</div><div class=\"line\">                    &lt;item-component [data]=\"item\"&gt;&lt;/item-component&gt;</div><div class=\"line\">                &lt;/template&gt;</div><div class=\"line\">            &lt;/ListView&gt;</div><div class=\"line\">        &lt;/GridLayout&gt;</div><div class=\"line\">    `</span>,</div><div class=\"line\">    changeDetection: ChangeDetectionStrategy.OnPush</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> myItems: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">    <span class=\"keyword\">private</span> counter: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> list = [&#123;<span class=\"string\">\"text\"</span>: <span class=\"string\">\"a\"</span>&#125;, &#123;<span class=\"string\">\"text\"</span>: <span class=\"string\">\"b\"</span>&#125;];</div><div class=\"line\">        <span class=\"keyword\">var</span> list1 = [&#123;<span class=\"string\">\"text\"</span>: <span class=\"string\">\"c\"</span>&#125;, &#123;<span class=\"string\">\"text\"</span>: <span class=\"string\">\"d\"</span>&#125;];</div><div class=\"line\">        <span class=\"keyword\">this</span>.myItems = [&#123;<span class=\"string\">\"list\"</span>: list&#125;, &#123;<span class=\"string\">\"list\"</span>: list1&#125;];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>As shown just creating a custom component and add it to directives of the host component. Another interesting part is how <code>data</code> is passed to the child control (via @Input decorator).</p>\n<h3 id=\"Using-async-pipe\"><a href=\"#Using-async-pipe\" class=\"headerlink\" title=\"Using async pipe\"></a>Using async pipe</h3><p>Generally according to Angular documentation pipe is a simple display-value transformation that can be declared in HTML. Pipe takes an input and transforms it to a desired output. One of the built-in Angular pipes is very commonly used with ListView like controls. This is the <code>async</code> pipe. The input of this pipe is either <code>Promise&lt;Array&gt;</code> or <code>Observable&lt;Array&gt;</code> (Observable actually stands for <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md\">RxJS.Observable</a>. What this pipe do is to subscribe for the observable and return the value inside it as property value. Following is a simple example of using async pipe with NativeScript-Angular ListView.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, Input, ChangeDetectionStrategy &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable as RxObservable &#125; from <span class=\"string\">'rxjs/Observable'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DataItem &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public id: number, public name: string) &#123; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">    selector: <span class=\"string\">'list-test-async'</span>,</div><div class=\"line\">    template: <span class=\"string\">`</div><div class=\"line\">    &lt;GridLayout&gt;</div><div class=\"line\">        &lt;ListView [items]=\"myItems | async\"&gt;</div><div class=\"line\">            &lt;template let-item=\"item\" let-i=\"index\" let-odd=\"odd\" let-even=\"even\"&gt;</div><div class=\"line\">                &lt;StackLayout [class.odd]=\"odd\" [class.even]=\"even\"&gt;</div><div class=\"line\">                    &lt;Label [text]='\"index: \" + item.name'&gt;&lt;/Label&gt;</div><div class=\"line\">                &lt;/StackLayout&gt;</div><div class=\"line\">            &lt;/template&gt;</div><div class=\"line\">        &lt;/ListView&gt;</div><div class=\"line\">    &lt;/GridLayout&gt;</div><div class=\"line\">    `</span>,</div><div class=\"line\">    changeDetection: ChangeDetectionStrategy.OnPush</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListTestAsync &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> myItems: RxObservable&lt;<span class=\"built_in\">Array</span>&lt;DataItem&gt;&gt;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> items = [];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">            items.push(<span class=\"keyword\">new</span> DataItem(i, <span class=\"string\">\"data item \"</span> + i));</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">var</span> subscr;</div><div class=\"line\">        <span class=\"keyword\">this</span>.myItems = RxObservable.create(subscriber =&gt; &#123;</div><div class=\"line\">            subscr = subscriber;</div><div class=\"line\">            subscriber.next(items);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Unsubscribe called!!!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">let</span> counter = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">let</span> intervalId = setInterval(() =&gt; &#123;</div><div class=\"line\">            counter++;</div><div class=\"line\">            items.push(<span class=\"keyword\">new</span> DataItem(counter, <span class=\"string\">\"data item \"</span> + counter));</div><div class=\"line\">            subscr.next(items);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">        </div><div class=\"line\">        setTimeout(() =&gt; &#123;</div><div class=\"line\">            clearInterval(intervalId);</div><div class=\"line\">        &#125;, <span class=\"number\">15000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Styling","description":"How to use Cascading Style Sheets (CSS) in NativeScript to change the appearance of GUI elements","position":5,"slug":"styling","previous_url":"/styling","_content":"\n# Styling\n\nThis article includes the following topics:\n\n* [Introduction](#introduction)\n* [Applying CSS Styles](#applying-css-styles)\n* [Supported Selectors](#supported-selectors)\n* [Supported CSS Properties](#supported-css-properties)\n* [Accessing NativeScript component properties with CSS](#accessing-nativeScript-component-properties-with-css)\n* [Using Fonts](#using-fonts)\n* [Import External CSS](#import-external-css)\n* [CSS parser playground](http://iamdustan.com/reworkcss_ast_explorer/)\n\n## Introduction\n\nYou change the looks and appearance of views (elements) in a NativeScript application similarly to how you do it in a web application&mdash;using Cascading Style Sheets (CSS) or changing the style object of the elements in JavaScript. Only a subset of the CSS language is supported.\n\nSimilarly to the [DOM Style Object](http://www.w3schools.com/jsref/dom_obj_style.asp), each View instance exposes a **style** property, which holds all the style properties for the view. When the view is displayed, all its style properties are applied to the underlying native widget.\n\n## Applying CSS styles\nThe CSS styles can be set on 3 different levels:\n\n* [Application-wide CSS](#application-wide-css): Applies to every application page\n{% nativescript %}\n* [Page-specific CSS](#page-specific-css): Applies to the page's UI views\n{% endnativescript %}\n{% angular %}\n* [Component-specific CSS](#component-specific-css): Applies for component only\n{% endangular %}\n* [Inline CSS](#inline-css): Applies directly to a UI view\n\nIf there is CSS declared on different levels&mdash;all will be applied. The inline CSS will have the highest priority and the application CSS will have the lowest priority.\n\n### Application-wide CSS\n\nWhen the  application starts, NativeScript checks if the file `app.css` exists. If it does, any CSS styles that it contains are loaded and used across all application pages. This file is a convenient place to store styles that will be used on multiple pages.\n\nYou can change the name of the file from which the application-wide CSS is loaded. You need to do the change before the application is started, usually in the app.js or app.ts file as shown below:\n\n{% nativescript %}\n``` JavaScript\nvar application = require(\"application\");\napplication.cssFile = \"style.css\";\n\napplication.start({ moduleName: \"main-page\" });\n```\n``` TypeScript\nimport application = require(\"application\");\napplication.cssFile = \"style.css\";\n\napplication.start({ moduleName: \"main-page\" });\n```\n{% endnativescript %}\n{% angular %}\n\n```TypeScript\nnativeScriptBootstrap(ListTest, null, {\"cssFile\": \"style.css\"});\n```\n\n{% endangular %}\n> The path to the CSS file is relative to the application root folder.\n\n{% nativescript %}\n### Page-specific CSS\n\nWhen the page's XML declaration file is loaded, NativeScript looks for a CSS file with the same name (if such exists), reads any CSS styles that it finds and automatically loads and applies them to the page.\n\nYou can override CSS styles specified in the file by using the page's `css` property:\n\n```JavaScript\npage.css = \"button { color: red }\";\n```\n```TypeScript\npage.css = \"button { color: red }\";\n```\n\nAfter you have set the default CSS for the page, you can add to it using two methods: adding CSS from a string and adding CSS from a file.\n{% endnativescript %}\n{% angular %}\n### Component-specific CSS\n\nIn an Angular application everything is a component, therefore, it is a very common task to add some CSS code that should only apply to one component. Adding component-specific CSS in a NativeScript-Angular app involves using a component’s `styles` or `styleUrls` property.\n\n```TypeScript\n@Component({\n    selector: 'list-test',\n    styles: ['.third { background-color: lime; }'],\n    template: ...\n```\n\n```TypeScript\n@Component({\n    selector: 'list-test',\n    styleUrls: ['style.css'],\n    template: ...\n```\n\nIn each of these examples, the CSS rules will only apply to the declared component, and not other UI elements in the application.\n\n> The `styles` and `styleUrls` will be applied even if the component is moved to another page within the application.\n\n{% endangular %}\n\n#### Adding CSS from a string\n\nThis snippet adds a new style to the current set of styles. This is quite useful when you need to add a small CSS chunk to an element (for example, for testing purposes):\n\n``` JavaScript\npage.addCss(\"button {background-color: blue}\");\n```\n``` TypeScript\npage.addCss(\"button {background-color: blue}\");\n```\n\n#### Adding CSS from a file\n\nThis snippet adds new CSS styles to the current set. However, this method reads them from a file. It is useful for organizing styles in files and reusing them across multiple pages.\n\n``` JavaScript\npage.addCssFile(cssFileName);\n```\n``` TypeScript\npage.addCssFile(cssFileName);\n```\n\n> The path to the CSS file is relative to the application root folder.\n\n### Inline CSS\n\nSimilarly to HTML, CSS can be defined inline for a UI view in the XML markup:\n\n{% nativescript %}\n```XML\n<Button text=\"inline style\" style=\"background-color: green;\" />\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Button text=\"inline style\" style=\"background-color: green;\"></Button>\n```\n{% endangular %}\n\n## Supported selectors\n\n> Currently the CSS support is limited only to the selectors and properties listed in the current article.\n\nNativeScript supports a subset of the [CSS selector syntax](http://www.w3schools.com/cssref/css_selectors.asp). Here is how to use the supported selectors:\n\n* [Type selector](#type-selector)\n* [Class selector](#class-selector)\n* [ID selector](#id-selector)\n* [Hierarchical selector](#hierachical-selector-css-combinators)\n* [Attribute selector](#attribute-selector)\n\n### Type selector\nLike [CSS element selectors](http://www.w3schools.com/cssref/sel_element.asp), type selectors in NativeScript select all views of a given type. Type selectors are case insensitive, so you can use both `button` and `Button`.\n\n```CSS\nbutton { background-color: gray }\n```\n\n### Class selector\n[Class selectors](http://www.w3schools.com/cssref/sel_class.asp) select all views with a given class.\nThe class is set using the `cssClass` property of the view.\n\n{% nativescript %}\n```CSS\n.title { font-size: 32 }\n```\n```JavaScript\nvar label = new labelModule.Label();\nlabel.cssClass = \"title\"\n```\n```TypeScript\nvar label = new labelModule.Label();\nlabel.cssClass = \"title\"\n```\n```XML\n<Label cssClass=\"title\" />\n```\n{% endnativescript %}\n{% angular %}\n```CSS\n.title { font-size: 32 }\n```\n```JavaScript\nvar label = new labelModule.Label();\nlabel.cssClass = \"title\"\n```\n```TypeScript\nvar label = new labelModule.Label();\nlabel.cssClass = \"title\"\n```\n```XML\n<Label cssClass=\"title\" ></Label>\n```\n{% endangular %}\n\n### ID selector\n[Id selectors](http://www.w3schools.com/cssref/sel_id.asp) select all views with a given id.\nThe id is set using the `id` property of the view.\n\n{% nativescript %}\n```CSS\n#login-button { background-color: blue }\n```\n```JavaScript\nvar btn = new buttonModule.Button();\nbtn.id = \"login-button\"\n```\n```TypeScript\nvar btn = new buttonModule.Button();\nbtn.id = \"login-button\"\n```\n```XML\n<Button id=\"login-button\" />\n```\n{% endnativescript %}\n{% angular %}\n```CSS\n#login-button { background-color: blue }\n```\n```JavaScript\nvar btn = new buttonModule.Button();\nbtn.id = \"login-button\"\n```\n```TypeScript\nvar btn = new buttonModule.Button();\nbtn.id = \"login-button\"\n```\n```XML\n<Button id=\"login-button\" ></Button>\n```\n{% endangular %}\n\n### Hierachical selector (CSS combinators)\n\nA CSS selector could contain more than one simple selector, and between selectors a combinator symbol could be included.\n\n* (space) - Descendant selector. For example, the following code will select all buttons inside StackLayouts (no matter) at which level.\n\n{% nativescript %}\n```CSS\nStackLayout Button { background-color: blue; }\n```\n```XML\n<StackLayout>\n    <WrapLayout>\n        <Button id=\"login-button\" testAttr='flower' />\n    </WrapLayout>\n</StackLayout>\n```\n{% endnativescript %}\n{% angular %}\n```CSS\nStackLayout Button { background-color: blue; }\n```\n```XML\n<StackLayout>\n    <WrapLayout>\n        <Button id=\"login-button\" testAttr='flower' ></Button>\n    </WrapLayout>\n</StackLayout>\n```\n{% endangular %}\n\n* (>) - A direct child selector. Using the previous example, if the CSS is changed to:\n\n```CSS\nStackLayout > Button { background-color: blue; }\n```\n\nThe `background-color` rule will not be applied. In order to apply the selector, the WrapLayout element would need to be removed so that the Button is a direct child of the StackLayout.\n\n### Attribute selector\n\n{% nativescript %}\n```CSS\nbutton[testAttr]{ background-color: blue; }\n```\n```XML\n<Button testAttr=\"flower\" />\n```\n{% endnativescript %}\n{% angular %}\n```CSS\nbutton[testAttr]{ background-color: blue; }\n```\n```XML\n<Button testAttr=\"flower\" ></Button>\n```\n{% endangular %}\n\nThis selector will select all buttons that have the attribute `testAttr` with some value.\n\nAlso, some more advanced scenarios are supported:\n\n* button[testAttr='flower'] {...} - Will apply CAA on every button that has the `testAttr` property set exactly to the value `flower`.\n* button[testAttr~='flower'] {...} - Selects all buttons with a `testAttr` property that contains a space-separated list of words, one of which is \"flower\".\n* button[testAttr|='flower'] {...} - Selects all buttons with a `testAttr` property value that begins with \"flower\". The value has to be a whole word, either alone like `btn['testAttr'] = 'flower'`, or followed by hyphen (-), like `btn['testAttr'] = 'flower-house'`.\n* button[testAttr^='flower'] {...} - Selects all buttons with a `testAttr` property value that begins with \"flower\". The value does not have to be a whole word.\n* button[testAttr$='flower'] {...} - Selects all buttons with a `testAttr` property value that ends with \"flower\". The value does not have to be a whole word.\n* button[testAttr*='flo'] {...} - Selects all buttons with a `testAttr` property value that contains \"flo\". The value does not have to be a whole word.\n\nAttribute selectors could be used alone or could be combined with all type of CSS selectors. \n\n{% nativescript %}\n```CSS\n#login-button[testAttr='flower'] { background-color: blue; }\n[testAttr] {color: white;}\n```\n```XML\n<Button id=\"login-button\" testAttr='flower' />\n<Label testAttr=\"some value\" />\n```\n{% endnativescript %}\n{% angular %}\n```CSS\n#login-button[testAttr='flower'] { background-color: blue; }\n[testAttr] {color: white;}\n```\n```XML\n<Button id=\"login-button\" testAttr='flower' ></Button>\n<Label testAttr=\"some value\" ></Label>\n```\n{% endangular %}\n\n\n## Supported CSS properties\n\nThis list of properties can be set in CSS or through the style property of each view:\n\n| CSS Property    | JavaScript Property | Description |\n|:----------------|:-------------------|:----------------|\n| color           | color              | Sets a solid-color value to the matched view’s foreground. |\n| background-color | backgroundColor   | Sets a solid-color value to the matched view’s background. |\n| background-image | backgroundImage   | Sets a image url to the matched view’s background image. |\n| background-repeat | backgroundRepeat | Sets if/how the background image should be repeated. Possible values: \"repeat\", \"repeat-x\", \"repeat-y\", \"no-repeat\" |\n| background-position | backgroundPosition | Sets the starting position of the background image. You can set the position with absolute, percent or alignment values. More info [here](http://www.w3schools.com/cssref/pr_background-position.asp). |\n| background-size | backgroundSize     | Sets the size of the background image. Possible values: \"*length length*\", \"*percent% percent%*\", \"cover\" or \"contain\". |\n| border-color    | borderColor        | Sets a border color to the matched view’s. |\n| border-width    | borderWidth        | Sets a border width to the matched view’s. |\n| border-radius   | borderRadius       | Sets a border radius to the matched view’s. |\n| font            | font               | Sets the font properties (this includes font-family, font-size, font-style and font-weight)  of the matched view. |\n| font-family     | fontFamily         | Sets the font family of the matched view. |\n| font-size       | fontSize           | Sets the font size of the matched view (only supports device-independent units). |\n| font-style      | fontStyle          | Sets the font style of the matched view. Possible values: \"italic\", \"normal\". |\n| font-weight     | fontWeight         | Sets the font weight of the matched view Possible values: \"bold\", \"normal\". |\n| text-align      | textAlignment      | Sets text alignment in the matched view. Possible values: \"left\" , \"center\", \"right\". |\n| text-decoration | textDecoration     | Sets the text formatting. Possible values: \"none\", \"line-through\", \"underline\". |\n| text-transform  | textTransform      | Sets the text transform. Possible values: \"none\", \"capitalize\", \"uppercase\", \"lowercase\". |\n| letter-spacing  | letterSpacing      | Sets the text letter spacing. (On Android API Level 21 and above.) |\n| z-index         | zIndex             | Sets the z-index. (On Android API Level 21 and above.) |\n| clip-path       | clip-path          | Sets the clip-path. Supported shapes are circle, ellipse, rect and polygon. You can define your own shape using [clippy](http://bennettfeely.com/clippy/)  |\n| vertical-align  | verticalAlignment  | Sets the vertical alignment of the current view within its parent. Possible values: \"top\", \"center\", \"bottom\", \"stretch\". |\n| horizontal-align | horizontalAlignment| Sets the horizontal alignment of the current view within its parent. Possible values: \"left\", \"center\", \"right\", \"stretch\". |\n| margin          | margin             | Sets the margin of the view within its parent. |\n| margin-top      | marginTop          | Sets the top margin of the view within its parent. |\n| margin-right    | marginRight        | Sets the right margin of the view within its parent. |\n| margin-bottom   | marginBottom       | Sets the bottom margin of the view within its parent. |\n| margin-left     | marginLeft         | Sets the left margin of the view within its parent. |\n| width           | width              | Sets the view width. |\n| height          | height             | Sets the view height. |\n| min-width       | minWidth           | Sets the minimal view width. |\n| min-height      | minHeight          | Sets the minimal view height. |\n| padding         | padding            | Sets the distance between the boundaries of the layout container and its children. |\n| padding-top     | paddingTop         | Sets the top padding of a layout container. |\n| padding-right   | paddingRight       | Sets the right padding of a layout container. |\n| padding-bottom  | paddingBottom      | Sets the bottom padding of a layout container. |\n| padding-left    | paddingLeft        | Sets the left padding of a layout container. |\n| visibility      | visibility         | Sets the view visibility. Possible values: \"visible\", \"collapse\" (or \"collapsed\"). |\n| opacity         | opacity            | Sets the view opacity. The value is in the [0, 1] range. |\n\n## Accessing NativeScript component properties with CSS\n\nYou can set NativeScript component properties value that are not part of the CSS specification. For example:\n```CSS\nStackLayout {\n   orientation: horizontal;\n}\n```\n\nThis feature is limited to properties with simple types like string, number and boolean, and will set a local property value similar to component markup declaration in XML. CSS cascading and inheritance are not supported. \n\n## Using fonts\nThe `font-family` property can hold several values. The first supported font in the list will be used. There is also support for the following generic font-families:\n* serif (ex. Times New Roman)\n* sans-serif (ex. Helvetica)\n* monospace (ex. Courier New)\n\nPlatform specifics:\n* Android: The supported fonts depend very much on the system, thus using the generic font-families or [custom-fonts](#custom-fonts) is recommended.\n* iOS: You can check the [supported fonts in iOS 7](https://support.apple.com/en-us/HT202771).\n\n### Custom fonts\nYou can use custom fonts in your app (in .TTF or .OTF format). The NativeScript runtime will look for the font files under the `app/fonts/` directory and load them automatically.\n\nNote: In iOS you should also do a one-time registration of the font to be able to use it (usually in the app.ts/app.js file):\n\n```JavaScript\nvar fontModule = require(\"ui/styling/font\");\nfontModule.ios.registerFont(\"MyFont.ttf\");\n```\n```TypeScript\nimport fontModule = require(\"ui/styling/font\");\nfontModule.ios.registerFont(\"MyFont.ttf\");\n```\n\n## Import external CSS\nThe @import CSS rule allows you to import external CSS from local file, resource or url. These rules must precede all other types of rules.\n\n```CSS\n@import { url('http://some-domain.com/your-style.css') }\n@import { url('res://your-style.css') }\n@import { url('~/your-style.css') }\n```\n","source":"ui/styling.md","raw":"---\ntitle: Styling\ndescription: How to use Cascading Style Sheets (CSS) in NativeScript to change the appearance of GUI elements\nposition: 5\nslug: styling\nprevious_url: /styling\n---\n\n# Styling\n\nThis article includes the following topics:\n\n* [Introduction](#introduction)\n* [Applying CSS Styles](#applying-css-styles)\n* [Supported Selectors](#supported-selectors)\n* [Supported CSS Properties](#supported-css-properties)\n* [Accessing NativeScript component properties with CSS](#accessing-nativeScript-component-properties-with-css)\n* [Using Fonts](#using-fonts)\n* [Import External CSS](#import-external-css)\n* [CSS parser playground](http://iamdustan.com/reworkcss_ast_explorer/)\n\n## Introduction\n\nYou change the looks and appearance of views (elements) in a NativeScript application similarly to how you do it in a web application&mdash;using Cascading Style Sheets (CSS) or changing the style object of the elements in JavaScript. Only a subset of the CSS language is supported.\n\nSimilarly to the [DOM Style Object](http://www.w3schools.com/jsref/dom_obj_style.asp), each View instance exposes a **style** property, which holds all the style properties for the view. When the view is displayed, all its style properties are applied to the underlying native widget.\n\n## Applying CSS styles\nThe CSS styles can be set on 3 different levels:\n\n* [Application-wide CSS](#application-wide-css): Applies to every application page\n{% nativescript %}\n* [Page-specific CSS](#page-specific-css): Applies to the page's UI views\n{% endnativescript %}\n{% angular %}\n* [Component-specific CSS](#component-specific-css): Applies for component only\n{% endangular %}\n* [Inline CSS](#inline-css): Applies directly to a UI view\n\nIf there is CSS declared on different levels&mdash;all will be applied. The inline CSS will have the highest priority and the application CSS will have the lowest priority.\n\n### Application-wide CSS\n\nWhen the  application starts, NativeScript checks if the file `app.css` exists. If it does, any CSS styles that it contains are loaded and used across all application pages. This file is a convenient place to store styles that will be used on multiple pages.\n\nYou can change the name of the file from which the application-wide CSS is loaded. You need to do the change before the application is started, usually in the app.js or app.ts file as shown below:\n\n{% nativescript %}\n``` JavaScript\nvar application = require(\"application\");\napplication.cssFile = \"style.css\";\n\napplication.start({ moduleName: \"main-page\" });\n```\n``` TypeScript\nimport application = require(\"application\");\napplication.cssFile = \"style.css\";\n\napplication.start({ moduleName: \"main-page\" });\n```\n{% endnativescript %}\n{% angular %}\n\n```TypeScript\nnativeScriptBootstrap(ListTest, null, {\"cssFile\": \"style.css\"});\n```\n\n{% endangular %}\n> The path to the CSS file is relative to the application root folder.\n\n{% nativescript %}\n### Page-specific CSS\n\nWhen the page's XML declaration file is loaded, NativeScript looks for a CSS file with the same name (if such exists), reads any CSS styles that it finds and automatically loads and applies them to the page.\n\nYou can override CSS styles specified in the file by using the page's `css` property:\n\n```JavaScript\npage.css = \"button { color: red }\";\n```\n```TypeScript\npage.css = \"button { color: red }\";\n```\n\nAfter you have set the default CSS for the page, you can add to it using two methods: adding CSS from a string and adding CSS from a file.\n{% endnativescript %}\n{% angular %}\n### Component-specific CSS\n\nIn an Angular application everything is a component, therefore, it is a very common task to add some CSS code that should only apply to one component. Adding component-specific CSS in a NativeScript-Angular app involves using a component’s `styles` or `styleUrls` property.\n\n```TypeScript\n@Component({\n    selector: 'list-test',\n    styles: ['.third { background-color: lime; }'],\n    template: ...\n```\n\n```TypeScript\n@Component({\n    selector: 'list-test',\n    styleUrls: ['style.css'],\n    template: ...\n```\n\nIn each of these examples, the CSS rules will only apply to the declared component, and not other UI elements in the application.\n\n> The `styles` and `styleUrls` will be applied even if the component is moved to another page within the application.\n\n{% endangular %}\n\n#### Adding CSS from a string\n\nThis snippet adds a new style to the current set of styles. This is quite useful when you need to add a small CSS chunk to an element (for example, for testing purposes):\n\n``` JavaScript\npage.addCss(\"button {background-color: blue}\");\n```\n``` TypeScript\npage.addCss(\"button {background-color: blue}\");\n```\n\n#### Adding CSS from a file\n\nThis snippet adds new CSS styles to the current set. However, this method reads them from a file. It is useful for organizing styles in files and reusing them across multiple pages.\n\n``` JavaScript\npage.addCssFile(cssFileName);\n```\n``` TypeScript\npage.addCssFile(cssFileName);\n```\n\n> The path to the CSS file is relative to the application root folder.\n\n### Inline CSS\n\nSimilarly to HTML, CSS can be defined inline for a UI view in the XML markup:\n\n{% nativescript %}\n```XML\n<Button text=\"inline style\" style=\"background-color: green;\" />\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Button text=\"inline style\" style=\"background-color: green;\"></Button>\n```\n{% endangular %}\n\n## Supported selectors\n\n> Currently the CSS support is limited only to the selectors and properties listed in the current article.\n\nNativeScript supports a subset of the [CSS selector syntax](http://www.w3schools.com/cssref/css_selectors.asp). Here is how to use the supported selectors:\n\n* [Type selector](#type-selector)\n* [Class selector](#class-selector)\n* [ID selector](#id-selector)\n* [Hierarchical selector](#hierachical-selector-css-combinators)\n* [Attribute selector](#attribute-selector)\n\n### Type selector\nLike [CSS element selectors](http://www.w3schools.com/cssref/sel_element.asp), type selectors in NativeScript select all views of a given type. Type selectors are case insensitive, so you can use both `button` and `Button`.\n\n```CSS\nbutton { background-color: gray }\n```\n\n### Class selector\n[Class selectors](http://www.w3schools.com/cssref/sel_class.asp) select all views with a given class.\nThe class is set using the `cssClass` property of the view.\n\n{% nativescript %}\n```CSS\n.title { font-size: 32 }\n```\n```JavaScript\nvar label = new labelModule.Label();\nlabel.cssClass = \"title\"\n```\n```TypeScript\nvar label = new labelModule.Label();\nlabel.cssClass = \"title\"\n```\n```XML\n<Label cssClass=\"title\" />\n```\n{% endnativescript %}\n{% angular %}\n```CSS\n.title { font-size: 32 }\n```\n```JavaScript\nvar label = new labelModule.Label();\nlabel.cssClass = \"title\"\n```\n```TypeScript\nvar label = new labelModule.Label();\nlabel.cssClass = \"title\"\n```\n```XML\n<Label cssClass=\"title\" ></Label>\n```\n{% endangular %}\n\n### ID selector\n[Id selectors](http://www.w3schools.com/cssref/sel_id.asp) select all views with a given id.\nThe id is set using the `id` property of the view.\n\n{% nativescript %}\n```CSS\n#login-button { background-color: blue }\n```\n```JavaScript\nvar btn = new buttonModule.Button();\nbtn.id = \"login-button\"\n```\n```TypeScript\nvar btn = new buttonModule.Button();\nbtn.id = \"login-button\"\n```\n```XML\n<Button id=\"login-button\" />\n```\n{% endnativescript %}\n{% angular %}\n```CSS\n#login-button { background-color: blue }\n```\n```JavaScript\nvar btn = new buttonModule.Button();\nbtn.id = \"login-button\"\n```\n```TypeScript\nvar btn = new buttonModule.Button();\nbtn.id = \"login-button\"\n```\n```XML\n<Button id=\"login-button\" ></Button>\n```\n{% endangular %}\n\n### Hierachical selector (CSS combinators)\n\nA CSS selector could contain more than one simple selector, and between selectors a combinator symbol could be included.\n\n* (space) - Descendant selector. For example, the following code will select all buttons inside StackLayouts (no matter) at which level.\n\n{% nativescript %}\n```CSS\nStackLayout Button { background-color: blue; }\n```\n```XML\n<StackLayout>\n    <WrapLayout>\n        <Button id=\"login-button\" testAttr='flower' />\n    </WrapLayout>\n</StackLayout>\n```\n{% endnativescript %}\n{% angular %}\n```CSS\nStackLayout Button { background-color: blue; }\n```\n```XML\n<StackLayout>\n    <WrapLayout>\n        <Button id=\"login-button\" testAttr='flower' ></Button>\n    </WrapLayout>\n</StackLayout>\n```\n{% endangular %}\n\n* (>) - A direct child selector. Using the previous example, if the CSS is changed to:\n\n```CSS\nStackLayout > Button { background-color: blue; }\n```\n\nThe `background-color` rule will not be applied. In order to apply the selector, the WrapLayout element would need to be removed so that the Button is a direct child of the StackLayout.\n\n### Attribute selector\n\n{% nativescript %}\n```CSS\nbutton[testAttr]{ background-color: blue; }\n```\n```XML\n<Button testAttr=\"flower\" />\n```\n{% endnativescript %}\n{% angular %}\n```CSS\nbutton[testAttr]{ background-color: blue; }\n```\n```XML\n<Button testAttr=\"flower\" ></Button>\n```\n{% endangular %}\n\nThis selector will select all buttons that have the attribute `testAttr` with some value.\n\nAlso, some more advanced scenarios are supported:\n\n* button[testAttr='flower'] {...} - Will apply CAA on every button that has the `testAttr` property set exactly to the value `flower`.\n* button[testAttr~='flower'] {...} - Selects all buttons with a `testAttr` property that contains a space-separated list of words, one of which is \"flower\".\n* button[testAttr|='flower'] {...} - Selects all buttons with a `testAttr` property value that begins with \"flower\". The value has to be a whole word, either alone like `btn['testAttr'] = 'flower'`, or followed by hyphen (-), like `btn['testAttr'] = 'flower-house'`.\n* button[testAttr^='flower'] {...} - Selects all buttons with a `testAttr` property value that begins with \"flower\". The value does not have to be a whole word.\n* button[testAttr$='flower'] {...} - Selects all buttons with a `testAttr` property value that ends with \"flower\". The value does not have to be a whole word.\n* button[testAttr*='flo'] {...} - Selects all buttons with a `testAttr` property value that contains \"flo\". The value does not have to be a whole word.\n\nAttribute selectors could be used alone or could be combined with all type of CSS selectors. \n\n{% nativescript %}\n```CSS\n#login-button[testAttr='flower'] { background-color: blue; }\n[testAttr] {color: white;}\n```\n```XML\n<Button id=\"login-button\" testAttr='flower' />\n<Label testAttr=\"some value\" />\n```\n{% endnativescript %}\n{% angular %}\n```CSS\n#login-button[testAttr='flower'] { background-color: blue; }\n[testAttr] {color: white;}\n```\n```XML\n<Button id=\"login-button\" testAttr='flower' ></Button>\n<Label testAttr=\"some value\" ></Label>\n```\n{% endangular %}\n\n\n## Supported CSS properties\n\nThis list of properties can be set in CSS or through the style property of each view:\n\n| CSS Property    | JavaScript Property | Description |\n|:----------------|:-------------------|:----------------|\n| color           | color              | Sets a solid-color value to the matched view’s foreground. |\n| background-color | backgroundColor   | Sets a solid-color value to the matched view’s background. |\n| background-image | backgroundImage   | Sets a image url to the matched view’s background image. |\n| background-repeat | backgroundRepeat | Sets if/how the background image should be repeated. Possible values: \"repeat\", \"repeat-x\", \"repeat-y\", \"no-repeat\" |\n| background-position | backgroundPosition | Sets the starting position of the background image. You can set the position with absolute, percent or alignment values. More info [here](http://www.w3schools.com/cssref/pr_background-position.asp). |\n| background-size | backgroundSize     | Sets the size of the background image. Possible values: \"*length length*\", \"*percent% percent%*\", \"cover\" or \"contain\". |\n| border-color    | borderColor        | Sets a border color to the matched view’s. |\n| border-width    | borderWidth        | Sets a border width to the matched view’s. |\n| border-radius   | borderRadius       | Sets a border radius to the matched view’s. |\n| font            | font               | Sets the font properties (this includes font-family, font-size, font-style and font-weight)  of the matched view. |\n| font-family     | fontFamily         | Sets the font family of the matched view. |\n| font-size       | fontSize           | Sets the font size of the matched view (only supports device-independent units). |\n| font-style      | fontStyle          | Sets the font style of the matched view. Possible values: \"italic\", \"normal\". |\n| font-weight     | fontWeight         | Sets the font weight of the matched view Possible values: \"bold\", \"normal\". |\n| text-align      | textAlignment      | Sets text alignment in the matched view. Possible values: \"left\" , \"center\", \"right\". |\n| text-decoration | textDecoration     | Sets the text formatting. Possible values: \"none\", \"line-through\", \"underline\". |\n| text-transform  | textTransform      | Sets the text transform. Possible values: \"none\", \"capitalize\", \"uppercase\", \"lowercase\". |\n| letter-spacing  | letterSpacing      | Sets the text letter spacing. (On Android API Level 21 and above.) |\n| z-index         | zIndex             | Sets the z-index. (On Android API Level 21 and above.) |\n| clip-path       | clip-path          | Sets the clip-path. Supported shapes are circle, ellipse, rect and polygon. You can define your own shape using [clippy](http://bennettfeely.com/clippy/)  |\n| vertical-align  | verticalAlignment  | Sets the vertical alignment of the current view within its parent. Possible values: \"top\", \"center\", \"bottom\", \"stretch\". |\n| horizontal-align | horizontalAlignment| Sets the horizontal alignment of the current view within its parent. Possible values: \"left\", \"center\", \"right\", \"stretch\". |\n| margin          | margin             | Sets the margin of the view within its parent. |\n| margin-top      | marginTop          | Sets the top margin of the view within its parent. |\n| margin-right    | marginRight        | Sets the right margin of the view within its parent. |\n| margin-bottom   | marginBottom       | Sets the bottom margin of the view within its parent. |\n| margin-left     | marginLeft         | Sets the left margin of the view within its parent. |\n| width           | width              | Sets the view width. |\n| height          | height             | Sets the view height. |\n| min-width       | minWidth           | Sets the minimal view width. |\n| min-height      | minHeight          | Sets the minimal view height. |\n| padding         | padding            | Sets the distance between the boundaries of the layout container and its children. |\n| padding-top     | paddingTop         | Sets the top padding of a layout container. |\n| padding-right   | paddingRight       | Sets the right padding of a layout container. |\n| padding-bottom  | paddingBottom      | Sets the bottom padding of a layout container. |\n| padding-left    | paddingLeft        | Sets the left padding of a layout container. |\n| visibility      | visibility         | Sets the view visibility. Possible values: \"visible\", \"collapse\" (or \"collapsed\"). |\n| opacity         | opacity            | Sets the view opacity. The value is in the [0, 1] range. |\n\n## Accessing NativeScript component properties with CSS\n\nYou can set NativeScript component properties value that are not part of the CSS specification. For example:\n```CSS\nStackLayout {\n   orientation: horizontal;\n}\n```\n\nThis feature is limited to properties with simple types like string, number and boolean, and will set a local property value similar to component markup declaration in XML. CSS cascading and inheritance are not supported. \n\n## Using fonts\nThe `font-family` property can hold several values. The first supported font in the list will be used. There is also support for the following generic font-families:\n* serif (ex. Times New Roman)\n* sans-serif (ex. Helvetica)\n* monospace (ex. Courier New)\n\nPlatform specifics:\n* Android: The supported fonts depend very much on the system, thus using the generic font-families or [custom-fonts](#custom-fonts) is recommended.\n* iOS: You can check the [supported fonts in iOS 7](https://support.apple.com/en-us/HT202771).\n\n### Custom fonts\nYou can use custom fonts in your app (in .TTF or .OTF format). The NativeScript runtime will look for the font files under the `app/fonts/` directory and load them automatically.\n\nNote: In iOS you should also do a one-time registration of the font to be able to use it (usually in the app.ts/app.js file):\n\n```JavaScript\nvar fontModule = require(\"ui/styling/font\");\nfontModule.ios.registerFont(\"MyFont.ttf\");\n```\n```TypeScript\nimport fontModule = require(\"ui/styling/font\");\nfontModule.ios.registerFont(\"MyFont.ttf\");\n```\n\n## Import external CSS\nThe @import CSS rule allows you to import external CSS from local file, resource or url. These rules must precede all other types of rules.\n\n```CSS\n@import { url('http://some-domain.com/your-style.css') }\n@import { url('res://your-style.css') }\n@import { url('~/your-style.css') }\n```\n","date":"2016-08-26T21:05:54.619Z","updated":"2016-08-26T21:05:54.619Z","path":"ui/styling.html","comments":1,"layout":"page","_id":"cisn95cay0015wsl06l7rof34","content":"<h1 id=\"Styling\"><a href=\"#Styling\" class=\"headerlink\" title=\"Styling\"></a>Styling</h1><p>This article includes the following topics:</p>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#applying-css-styles\">Applying CSS Styles</a></li>\n<li><a href=\"#supported-selectors\">Supported Selectors</a></li>\n<li><a href=\"#supported-css-properties\">Supported CSS Properties</a></li>\n<li><a href=\"#accessing-nativeScript-component-properties-with-css\">Accessing NativeScript component properties with CSS</a></li>\n<li><a href=\"#using-fonts\">Using Fonts</a></li>\n<li><a href=\"#import-external-css\">Import External CSS</a></li>\n<li><a href=\"http://iamdustan.com/reworkcss_ast_explorer/\" target=\"_blank\" rel=\"external\">CSS parser playground</a></li>\n</ul>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>You change the looks and appearance of views (elements) in a NativeScript application similarly to how you do it in a web application&mdash;using Cascading Style Sheets (CSS) or changing the style object of the elements in JavaScript. Only a subset of the CSS language is supported.</p>\n<p>Similarly to the <a href=\"http://www.w3schools.com/jsref/dom_obj_style.asp\" target=\"_blank\" rel=\"external\">DOM Style Object</a>, each View instance exposes a <strong>style</strong> property, which holds all the style properties for the view. When the view is displayed, all its style properties are applied to the underlying native widget.</p>\n<h2 id=\"Applying-CSS-styles\"><a href=\"#Applying-CSS-styles\" class=\"headerlink\" title=\"Applying CSS styles\"></a>Applying CSS styles</h2><p>The CSS styles can be set on 3 different levels:</p>\n<ul>\n<li><a href=\"#application-wide-css\">Application-wide CSS</a>: Applies to every application page<div class=\"codeblock n\"><ul>\n<li><a href=\"#page-specific-css\">Page-specific CSS</a>: Applies to the page&#39;s UI views</li>\n</ul>\n</div>\n<div class=\"codeblock ng\"><ul>\n<li><a href=\"#component-specific-css\">Component-specific CSS</a>: Applies for component only</li>\n</ul>\n</div></li>\n<li><a href=\"#inline-css\">Inline CSS</a>: Applies directly to a UI view</li>\n</ul>\n<p>If there is CSS declared on different levels&mdash;all will be applied. The inline CSS will have the highest priority and the application CSS will have the lowest priority.</p>\n<h3 id=\"Application-wide-CSS\"><a href=\"#Application-wide-CSS\" class=\"headerlink\" title=\"Application-wide CSS\"></a>Application-wide CSS</h3><p>When the  application starts, NativeScript checks if the file <code>app.css</code> exists. If it does, any CSS styles that it contains are loaded and used across all application pages. This file is a convenient place to store styles that will be used on multiple pages.</p>\n<p>You can change the name of the file from which the application-wide CSS is loaded. You need to do the change before the application is started, usually in the app.js or app.ts file as shown below:</p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<blockquote>\n<p>The path to the CSS file is relative to the application root folder.</p>\n</blockquote>\n<div class=\"codeblock n\"><h3 id=\"page-specific-css\">Page-specific CSS</h3>\n<p>When the page&#39;s XML declaration file is loaded, NativeScript looks for a CSS file with the same name (if such exists), reads any CSS styles that it finds and automatically loads and applies them to the page.</p>\n<p>You can override CSS styles specified in the file by using the page&#39;s <code>css</code> property:</p>\nundefined\nundefined\n<p>After you have set the default CSS for the page, you can add to it using two methods: adding CSS from a string and adding CSS from a file.</p>\n</div>\n<div class=\"codeblock ng\"><h3 id=\"component-specific-css\">Component-specific CSS</h3>\n<p>In an Angular application everything is a component, therefore, it is a very common task to add some CSS code that should only apply to one component. Adding component-specific CSS in a NativeScript-Angular app involves using a component’s <code>styles</code> or <code>styleUrls</code> property.</p>\nundefined\nundefined\n<p>In each of these examples, the CSS rules will only apply to the declared component, and not other UI elements in the application.</p>\n<blockquote>\n<p>The <code>styles</code> and <code>styleUrls</code> will be applied even if the component is moved to another page within the application.</p>\n</blockquote>\n</div>\n<h4 id=\"Adding-CSS-from-a-string\"><a href=\"#Adding-CSS-from-a-string\" class=\"headerlink\" title=\"Adding CSS from a string\"></a>Adding CSS from a string</h4><p>This snippet adds a new style to the current set of styles. This is quite useful when you need to add a small CSS chunk to an element (for example, for testing purposes):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.addCss(<span class=\"string\">\"button &#123;background-color: blue&#125;\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.addCss(<span class=\"string\">\"button &#123;background-color: blue&#125;\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"Adding-CSS-from-a-file\"><a href=\"#Adding-CSS-from-a-file\" class=\"headerlink\" title=\"Adding CSS from a file\"></a>Adding CSS from a file</h4><p>This snippet adds new CSS styles to the current set. However, this method reads them from a file. It is useful for organizing styles in files and reusing them across multiple pages.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.addCssFile(cssFileName);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.addCssFile(cssFileName);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The path to the CSS file is relative to the application root folder.</p>\n</blockquote>\n<h3 id=\"Inline-CSS\"><a href=\"#Inline-CSS\" class=\"headerlink\" title=\"Inline CSS\"></a>Inline CSS</h3><p>Similarly to HTML, CSS can be defined inline for a UI view in the XML markup:</p>\n<div class=\"codeblock n\">undefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<h2 id=\"Supported-selectors\"><a href=\"#Supported-selectors\" class=\"headerlink\" title=\"Supported selectors\"></a>Supported selectors</h2><blockquote>\n<p>Currently the CSS support is limited only to the selectors and properties listed in the current article.</p>\n</blockquote>\n<p>NativeScript supports a subset of the <a href=\"http://www.w3schools.com/cssref/css_selectors.asp\" target=\"_blank\" rel=\"external\">CSS selector syntax</a>. Here is how to use the supported selectors:</p>\n<ul>\n<li><a href=\"#type-selector\">Type selector</a></li>\n<li><a href=\"#class-selector\">Class selector</a></li>\n<li><a href=\"#id-selector\">ID selector</a></li>\n<li><a href=\"#hierachical-selector-css-combinators\">Hierarchical selector</a></li>\n<li><a href=\"#attribute-selector\">Attribute selector</a></li>\n</ul>\n<h3 id=\"Type-selector\"><a href=\"#Type-selector\" class=\"headerlink\" title=\"Type selector\"></a>Type selector</h3><p>Like <a href=\"http://www.w3schools.com/cssref/sel_element.asp\" target=\"_blank\" rel=\"external\">CSS element selectors</a>, type selectors in NativeScript select all views of a given type. Type selectors are case insensitive, so you can use both <code>button</code> and <code>Button</code>.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">button</span> &#123; <span class=\"attribute\">background-color</span>: gray &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Class-selector\"><a href=\"#Class-selector\" class=\"headerlink\" title=\"Class selector\"></a>Class selector</h3><p><a href=\"http://www.w3schools.com/cssref/sel_class.asp\" target=\"_blank\" rel=\"external\">Class selectors</a> select all views with a given class.\nThe class is set using the <code>cssClass</code> property of the view.</p>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\nundefined\nundefined\n</div>\n<h3 id=\"ID-selector\"><a href=\"#ID-selector\" class=\"headerlink\" title=\"ID selector\"></a>ID selector</h3><p><a href=\"http://www.w3schools.com/cssref/sel_id.asp\" target=\"_blank\" rel=\"external\">Id selectors</a> select all views with a given id.\nThe id is set using the <code>id</code> property of the view.</p>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\nundefined\nundefined\n</div>\n<h3 id=\"Hierachical-selector-CSS-combinators\"><a href=\"#Hierachical-selector-CSS-combinators\" class=\"headerlink\" title=\"Hierachical selector (CSS combinators)\"></a>Hierachical selector (CSS combinators)</h3><p>A CSS selector could contain more than one simple selector, and between selectors a combinator symbol could be included.</p>\n<ul>\n<li>(space) - Descendant selector. For example, the following code will select all buttons inside StackLayouts (no matter) at which level.</li>\n</ul>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<ul>\n<li>(&gt;) - A direct child selector. Using the previous example, if the CSS is changed to:</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">StackLayout</span> &gt; <span class=\"selector-tag\">Button</span> &#123; <span class=\"attribute\">background-color</span>: blue; &#125;</div></pre></td></tr></table></figure>\n<p>The <code>background-color</code> rule will not be applied. In order to apply the selector, the WrapLayout element would need to be removed so that the Button is a direct child of the StackLayout.</p>\n<h3 id=\"Attribute-selector\"><a href=\"#Attribute-selector\" class=\"headerlink\" title=\"Attribute selector\"></a>Attribute selector</h3><div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<p>This selector will select all buttons that have the attribute <code>testAttr</code> with some value.</p>\n<p>Also, some more advanced scenarios are supported:</p>\n<ul>\n<li>button[testAttr=’flower’] {…} - Will apply CAA on every button that has the <code>testAttr</code> property set exactly to the value <code>flower</code>.</li>\n<li>button[testAttr~=’flower’] {…} - Selects all buttons with a <code>testAttr</code> property that contains a space-separated list of words, one of which is “flower”.</li>\n<li>button[testAttr|=’flower’] {…} - Selects all buttons with a <code>testAttr</code> property value that begins with “flower”. The value has to be a whole word, either alone like <code>btn[&#39;testAttr&#39;] = &#39;flower&#39;</code>, or followed by hyphen (-), like <code>btn[&#39;testAttr&#39;] = &#39;flower-house&#39;</code>.</li>\n<li>button[testAttr^=’flower’] {…} - Selects all buttons with a <code>testAttr</code> property value that begins with “flower”. The value does not have to be a whole word.</li>\n<li>button[testAttr$=’flower’] {…} - Selects all buttons with a <code>testAttr</code> property value that ends with “flower”. The value does not have to be a whole word.</li>\n<li>button[testAttr*=’flo’] {…} - Selects all buttons with a <code>testAttr</code> property value that contains “flo”. The value does not have to be a whole word.</li>\n</ul>\n<p>Attribute selectors could be used alone or could be combined with all type of CSS selectors. </p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<h2 id=\"Supported-CSS-properties\"><a href=\"#Supported-CSS-properties\" class=\"headerlink\" title=\"Supported CSS properties\"></a>Supported CSS properties</h2><p>This list of properties can be set in CSS or through the style property of each view:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">CSS Property</th>\n<th style=\"text-align:left\">JavaScript Property</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">color</td>\n<td style=\"text-align:left\">color</td>\n<td style=\"text-align:left\">Sets a solid-color value to the matched view’s foreground.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-color</td>\n<td style=\"text-align:left\">backgroundColor</td>\n<td style=\"text-align:left\">Sets a solid-color value to the matched view’s background.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-image</td>\n<td style=\"text-align:left\">backgroundImage</td>\n<td style=\"text-align:left\">Sets a image url to the matched view’s background image.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-repeat</td>\n<td style=\"text-align:left\">backgroundRepeat</td>\n<td style=\"text-align:left\">Sets if/how the background image should be repeated. Possible values: “repeat”, “repeat-x”, “repeat-y”, “no-repeat”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-position</td>\n<td style=\"text-align:left\">backgroundPosition</td>\n<td style=\"text-align:left\">Sets the starting position of the background image. You can set the position with absolute, percent or alignment values. More info <a href=\"http://www.w3schools.com/cssref/pr_background-position.asp\" target=\"_blank\" rel=\"external\">here</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-size</td>\n<td style=\"text-align:left\">backgroundSize</td>\n<td style=\"text-align:left\">Sets the size of the background image. Possible values: “<em>length length</em>“, “<em>percent% percent%</em>“, “cover” or “contain”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">border-color</td>\n<td style=\"text-align:left\">borderColor</td>\n<td style=\"text-align:left\">Sets a border color to the matched view’s.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">border-width</td>\n<td style=\"text-align:left\">borderWidth</td>\n<td style=\"text-align:left\">Sets a border width to the matched view’s.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">border-radius</td>\n<td style=\"text-align:left\">borderRadius</td>\n<td style=\"text-align:left\">Sets a border radius to the matched view’s.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font</td>\n<td style=\"text-align:left\">font</td>\n<td style=\"text-align:left\">Sets the font properties (this includes font-family, font-size, font-style and font-weight)  of the matched view.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font-family</td>\n<td style=\"text-align:left\">fontFamily</td>\n<td style=\"text-align:left\">Sets the font family of the matched view.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font-size</td>\n<td style=\"text-align:left\">fontSize</td>\n<td style=\"text-align:left\">Sets the font size of the matched view (only supports device-independent units).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font-style</td>\n<td style=\"text-align:left\">fontStyle</td>\n<td style=\"text-align:left\">Sets the font style of the matched view. Possible values: “italic”, “normal”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font-weight</td>\n<td style=\"text-align:left\">fontWeight</td>\n<td style=\"text-align:left\">Sets the font weight of the matched view Possible values: “bold”, “normal”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text-align</td>\n<td style=\"text-align:left\">textAlignment</td>\n<td style=\"text-align:left\">Sets text alignment in the matched view. Possible values: “left” , “center”, “right”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text-decoration</td>\n<td style=\"text-align:left\">textDecoration</td>\n<td style=\"text-align:left\">Sets the text formatting. Possible values: “none”, “line-through”, “underline”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text-transform</td>\n<td style=\"text-align:left\">textTransform</td>\n<td style=\"text-align:left\">Sets the text transform. Possible values: “none”, “capitalize”, “uppercase”, “lowercase”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">letter-spacing</td>\n<td style=\"text-align:left\">letterSpacing</td>\n<td style=\"text-align:left\">Sets the text letter spacing. (On Android API Level 21 and above.)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">z-index</td>\n<td style=\"text-align:left\">zIndex</td>\n<td style=\"text-align:left\">Sets the z-index. (On Android API Level 21 and above.)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clip-path</td>\n<td style=\"text-align:left\">clip-path</td>\n<td style=\"text-align:left\">Sets the clip-path. Supported shapes are circle, ellipse, rect and polygon. You can define your own shape using <a href=\"http://bennettfeely.com/clippy/\" target=\"_blank\" rel=\"external\">clippy</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vertical-align</td>\n<td style=\"text-align:left\">verticalAlignment</td>\n<td style=\"text-align:left\">Sets the vertical alignment of the current view within its parent. Possible values: “top”, “center”, “bottom”, “stretch”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">horizontal-align</td>\n<td style=\"text-align:left\">horizontalAlignment</td>\n<td style=\"text-align:left\">Sets the horizontal alignment of the current view within its parent. Possible values: “left”, “center”, “right”, “stretch”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin</td>\n<td style=\"text-align:left\">margin</td>\n<td style=\"text-align:left\">Sets the margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin-top</td>\n<td style=\"text-align:left\">marginTop</td>\n<td style=\"text-align:left\">Sets the top margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin-right</td>\n<td style=\"text-align:left\">marginRight</td>\n<td style=\"text-align:left\">Sets the right margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin-bottom</td>\n<td style=\"text-align:left\">marginBottom</td>\n<td style=\"text-align:left\">Sets the bottom margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin-left</td>\n<td style=\"text-align:left\">marginLeft</td>\n<td style=\"text-align:left\">Sets the left margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">width</td>\n<td style=\"text-align:left\">width</td>\n<td style=\"text-align:left\">Sets the view width.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">height</td>\n<td style=\"text-align:left\">height</td>\n<td style=\"text-align:left\">Sets the view height.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">min-width</td>\n<td style=\"text-align:left\">minWidth</td>\n<td style=\"text-align:left\">Sets the minimal view width.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">min-height</td>\n<td style=\"text-align:left\">minHeight</td>\n<td style=\"text-align:left\">Sets the minimal view height.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding</td>\n<td style=\"text-align:left\">padding</td>\n<td style=\"text-align:left\">Sets the distance between the boundaries of the layout container and its children.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding-top</td>\n<td style=\"text-align:left\">paddingTop</td>\n<td style=\"text-align:left\">Sets the top padding of a layout container.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding-right</td>\n<td style=\"text-align:left\">paddingRight</td>\n<td style=\"text-align:left\">Sets the right padding of a layout container.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding-bottom</td>\n<td style=\"text-align:left\">paddingBottom</td>\n<td style=\"text-align:left\">Sets the bottom padding of a layout container.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding-left</td>\n<td style=\"text-align:left\">paddingLeft</td>\n<td style=\"text-align:left\">Sets the left padding of a layout container.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">visibility</td>\n<td style=\"text-align:left\">visibility</td>\n<td style=\"text-align:left\">Sets the view visibility. Possible values: “visible”, “collapse” (or “collapsed”).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">opacity</td>\n<td style=\"text-align:left\">opacity</td>\n<td style=\"text-align:left\">Sets the view opacity. The value is in the [0, 1] range.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Accessing-NativeScript-component-properties-with-CSS\"><a href=\"#Accessing-NativeScript-component-properties-with-CSS\" class=\"headerlink\" title=\"Accessing NativeScript component properties with CSS\"></a>Accessing NativeScript component properties with CSS</h2><p>You can set NativeScript component properties value that are not part of the CSS specification. For example:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">StackLayout</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">orientation</span>: horizontal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>This feature is limited to properties with simple types like string, number and boolean, and will set a local property value similar to component markup declaration in XML. CSS cascading and inheritance are not supported. </p>\n<h2 id=\"Using-fonts\"><a href=\"#Using-fonts\" class=\"headerlink\" title=\"Using fonts\"></a>Using fonts</h2><p>The <code>font-family</code> property can hold several values. The first supported font in the list will be used. There is also support for the following generic font-families:</p>\n<ul>\n<li>serif (ex. Times New Roman)</li>\n<li>sans-serif (ex. Helvetica)</li>\n<li>monospace (ex. Courier New)</li>\n</ul>\n<p>Platform specifics:</p>\n<ul>\n<li>Android: The supported fonts depend very much on the system, thus using the generic font-families or <a href=\"#custom-fonts\">custom-fonts</a> is recommended.</li>\n<li>iOS: You can check the <a href=\"https://support.apple.com/en-us/HT202771\" target=\"_blank\" rel=\"external\">supported fonts in iOS 7</a>.</li>\n</ul>\n<h3 id=\"Custom-fonts\"><a href=\"#Custom-fonts\" class=\"headerlink\" title=\"Custom fonts\"></a>Custom fonts</h3><p>You can use custom fonts in your app (in .TTF or .OTF format). The NativeScript runtime will look for the font files under the <code>app/fonts/</code> directory and load them automatically.</p>\n<p>Note: In iOS you should also do a one-time registration of the font to be able to use it (usually in the app.ts/app.js file):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fontModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling/font\"</span>);</div><div class=\"line\">fontModule.ios.registerFont(<span class=\"string\">\"MyFont.ttf\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> fontModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling/font\"</span>);</div><div class=\"line\">fontModule.ios.registerFont(<span class=\"string\">\"MyFont.ttf\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Import-external-CSS\"><a href=\"#Import-external-CSS\" class=\"headerlink\" title=\"Import external CSS\"></a>Import external CSS</h2><p>The @import CSS rule allows you to import external CSS from local file, resource or url. These rules must precede all other types of rules.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import &#123; url('http://some-domain.com/your-style.css') &#125;</div><div class=\"line\">@import &#123; url('res://your-style.css') &#125;</div><div class=\"line\">@import &#123; url('~/your-style.css') &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Styling\"><a href=\"#Styling\" class=\"headerlink\" title=\"Styling\"></a>Styling</h1><p>This article includes the following topics:</p>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#applying-css-styles\">Applying CSS Styles</a></li>\n<li><a href=\"#supported-selectors\">Supported Selectors</a></li>\n<li><a href=\"#supported-css-properties\">Supported CSS Properties</a></li>\n<li><a href=\"#accessing-nativeScript-component-properties-with-css\">Accessing NativeScript component properties with CSS</a></li>\n<li><a href=\"#using-fonts\">Using Fonts</a></li>\n<li><a href=\"#import-external-css\">Import External CSS</a></li>\n<li><a href=\"http://iamdustan.com/reworkcss_ast_explorer/\">CSS parser playground</a></li>\n</ul>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>You change the looks and appearance of views (elements) in a NativeScript application similarly to how you do it in a web application&mdash;using Cascading Style Sheets (CSS) or changing the style object of the elements in JavaScript. Only a subset of the CSS language is supported.</p>\n<p>Similarly to the <a href=\"http://www.w3schools.com/jsref/dom_obj_style.asp\">DOM Style Object</a>, each View instance exposes a <strong>style</strong> property, which holds all the style properties for the view. When the view is displayed, all its style properties are applied to the underlying native widget.</p>\n<h2 id=\"Applying-CSS-styles\"><a href=\"#Applying-CSS-styles\" class=\"headerlink\" title=\"Applying CSS styles\"></a>Applying CSS styles</h2><p>The CSS styles can be set on 3 different levels:</p>\n<ul>\n<li><a href=\"#application-wide-css\">Application-wide CSS</a>: Applies to every application page<div class=\"codeblock n\"><ul>\n<li><a href=\"#page-specific-css\">Page-specific CSS</a>: Applies to the page&#39;s UI views</li>\n</ul>\n</div>\n<div class=\"codeblock ng\"><ul>\n<li><a href=\"#component-specific-css\">Component-specific CSS</a>: Applies for component only</li>\n</ul>\n</div></li>\n<li><a href=\"#inline-css\">Inline CSS</a>: Applies directly to a UI view</li>\n</ul>\n<p>If there is CSS declared on different levels&mdash;all will be applied. The inline CSS will have the highest priority and the application CSS will have the lowest priority.</p>\n<h3 id=\"Application-wide-CSS\"><a href=\"#Application-wide-CSS\" class=\"headerlink\" title=\"Application-wide CSS\"></a>Application-wide CSS</h3><p>When the  application starts, NativeScript checks if the file <code>app.css</code> exists. If it does, any CSS styles that it contains are loaded and used across all application pages. This file is a convenient place to store styles that will be used on multiple pages.</p>\n<p>You can change the name of the file from which the application-wide CSS is loaded. You need to do the change before the application is started, usually in the app.js or app.ts file as shown below:</p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<blockquote>\n<p>The path to the CSS file is relative to the application root folder.</p>\n</blockquote>\n<div class=\"codeblock n\"><h3 id=\"page-specific-css\">Page-specific CSS</h3>\n<p>When the page&#39;s XML declaration file is loaded, NativeScript looks for a CSS file with the same name (if such exists), reads any CSS styles that it finds and automatically loads and applies them to the page.</p>\n<p>You can override CSS styles specified in the file by using the page&#39;s <code>css</code> property:</p>\nundefined\nundefined\n<p>After you have set the default CSS for the page, you can add to it using two methods: adding CSS from a string and adding CSS from a file.</p>\n</div>\n<div class=\"codeblock ng\"><h3 id=\"component-specific-css\">Component-specific CSS</h3>\n<p>In an Angular application everything is a component, therefore, it is a very common task to add some CSS code that should only apply to one component. Adding component-specific CSS in a NativeScript-Angular app involves using a component’s <code>styles</code> or <code>styleUrls</code> property.</p>\nundefined\nundefined\n<p>In each of these examples, the CSS rules will only apply to the declared component, and not other UI elements in the application.</p>\n<blockquote>\n<p>The <code>styles</code> and <code>styleUrls</code> will be applied even if the component is moved to another page within the application.</p>\n</blockquote>\n</div>\n<h4 id=\"Adding-CSS-from-a-string\"><a href=\"#Adding-CSS-from-a-string\" class=\"headerlink\" title=\"Adding CSS from a string\"></a>Adding CSS from a string</h4><p>This snippet adds a new style to the current set of styles. This is quite useful when you need to add a small CSS chunk to an element (for example, for testing purposes):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.addCss(<span class=\"string\">\"button &#123;background-color: blue&#125;\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.addCss(<span class=\"string\">\"button &#123;background-color: blue&#125;\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"Adding-CSS-from-a-file\"><a href=\"#Adding-CSS-from-a-file\" class=\"headerlink\" title=\"Adding CSS from a file\"></a>Adding CSS from a file</h4><p>This snippet adds new CSS styles to the current set. However, this method reads them from a file. It is useful for organizing styles in files and reusing them across multiple pages.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.addCssFile(cssFileName);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">page.addCssFile(cssFileName);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The path to the CSS file is relative to the application root folder.</p>\n</blockquote>\n<h3 id=\"Inline-CSS\"><a href=\"#Inline-CSS\" class=\"headerlink\" title=\"Inline CSS\"></a>Inline CSS</h3><p>Similarly to HTML, CSS can be defined inline for a UI view in the XML markup:</p>\n<div class=\"codeblock n\">undefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<h2 id=\"Supported-selectors\"><a href=\"#Supported-selectors\" class=\"headerlink\" title=\"Supported selectors\"></a>Supported selectors</h2><blockquote>\n<p>Currently the CSS support is limited only to the selectors and properties listed in the current article.</p>\n</blockquote>\n<p>NativeScript supports a subset of the <a href=\"http://www.w3schools.com/cssref/css_selectors.asp\">CSS selector syntax</a>. Here is how to use the supported selectors:</p>\n<ul>\n<li><a href=\"#type-selector\">Type selector</a></li>\n<li><a href=\"#class-selector\">Class selector</a></li>\n<li><a href=\"#id-selector\">ID selector</a></li>\n<li><a href=\"#hierachical-selector-css-combinators\">Hierarchical selector</a></li>\n<li><a href=\"#attribute-selector\">Attribute selector</a></li>\n</ul>\n<h3 id=\"Type-selector\"><a href=\"#Type-selector\" class=\"headerlink\" title=\"Type selector\"></a>Type selector</h3><p>Like <a href=\"http://www.w3schools.com/cssref/sel_element.asp\">CSS element selectors</a>, type selectors in NativeScript select all views of a given type. Type selectors are case insensitive, so you can use both <code>button</code> and <code>Button</code>.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">button</span> &#123; <span class=\"attribute\">background-color</span>: gray &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Class-selector\"><a href=\"#Class-selector\" class=\"headerlink\" title=\"Class selector\"></a>Class selector</h3><p><a href=\"http://www.w3schools.com/cssref/sel_class.asp\">Class selectors</a> select all views with a given class.\nThe class is set using the <code>cssClass</code> property of the view.</p>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\nundefined\nundefined\n</div>\n<h3 id=\"ID-selector\"><a href=\"#ID-selector\" class=\"headerlink\" title=\"ID selector\"></a>ID selector</h3><p><a href=\"http://www.w3schools.com/cssref/sel_id.asp\">Id selectors</a> select all views with a given id.\nThe id is set using the <code>id</code> property of the view.</p>\n<div class=\"codeblock n\">undefined\nundefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\nundefined\nundefined\n</div>\n<h3 id=\"Hierachical-selector-CSS-combinators\"><a href=\"#Hierachical-selector-CSS-combinators\" class=\"headerlink\" title=\"Hierachical selector (CSS combinators)\"></a>Hierachical selector (CSS combinators)</h3><p>A CSS selector could contain more than one simple selector, and between selectors a combinator symbol could be included.</p>\n<ul>\n<li>(space) - Descendant selector. For example, the following code will select all buttons inside StackLayouts (no matter) at which level.</li>\n</ul>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<ul>\n<li>(&gt;) - A direct child selector. Using the previous example, if the CSS is changed to:</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">StackLayout</span> &gt; <span class=\"selector-tag\">Button</span> &#123; <span class=\"attribute\">background-color</span>: blue; &#125;</div></pre></td></tr></table></figure>\n<p>The <code>background-color</code> rule will not be applied. In order to apply the selector, the WrapLayout element would need to be removed so that the Button is a direct child of the StackLayout.</p>\n<h3 id=\"Attribute-selector\"><a href=\"#Attribute-selector\" class=\"headerlink\" title=\"Attribute selector\"></a>Attribute selector</h3><div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<p>This selector will select all buttons that have the attribute <code>testAttr</code> with some value.</p>\n<p>Also, some more advanced scenarios are supported:</p>\n<ul>\n<li>button[testAttr=’flower’] {…} - Will apply CAA on every button that has the <code>testAttr</code> property set exactly to the value <code>flower</code>.</li>\n<li>button[testAttr~=’flower’] {…} - Selects all buttons with a <code>testAttr</code> property that contains a space-separated list of words, one of which is “flower”.</li>\n<li>button[testAttr|=’flower’] {…} - Selects all buttons with a <code>testAttr</code> property value that begins with “flower”. The value has to be a whole word, either alone like <code>btn[&#39;testAttr&#39;] = &#39;flower&#39;</code>, or followed by hyphen (-), like <code>btn[&#39;testAttr&#39;] = &#39;flower-house&#39;</code>.</li>\n<li>button[testAttr^=’flower’] {…} - Selects all buttons with a <code>testAttr</code> property value that begins with “flower”. The value does not have to be a whole word.</li>\n<li>button[testAttr$=’flower’] {…} - Selects all buttons with a <code>testAttr</code> property value that ends with “flower”. The value does not have to be a whole word.</li>\n<li>button[testAttr*=’flo’] {…} - Selects all buttons with a <code>testAttr</code> property value that contains “flo”. The value does not have to be a whole word.</li>\n</ul>\n<p>Attribute selectors could be used alone or could be combined with all type of CSS selectors. </p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<h2 id=\"Supported-CSS-properties\"><a href=\"#Supported-CSS-properties\" class=\"headerlink\" title=\"Supported CSS properties\"></a>Supported CSS properties</h2><p>This list of properties can be set in CSS or through the style property of each view:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">CSS Property</th>\n<th style=\"text-align:left\">JavaScript Property</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">color</td>\n<td style=\"text-align:left\">color</td>\n<td style=\"text-align:left\">Sets a solid-color value to the matched view’s foreground.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-color</td>\n<td style=\"text-align:left\">backgroundColor</td>\n<td style=\"text-align:left\">Sets a solid-color value to the matched view’s background.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-image</td>\n<td style=\"text-align:left\">backgroundImage</td>\n<td style=\"text-align:left\">Sets a image url to the matched view’s background image.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-repeat</td>\n<td style=\"text-align:left\">backgroundRepeat</td>\n<td style=\"text-align:left\">Sets if/how the background image should be repeated. Possible values: “repeat”, “repeat-x”, “repeat-y”, “no-repeat”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-position</td>\n<td style=\"text-align:left\">backgroundPosition</td>\n<td style=\"text-align:left\">Sets the starting position of the background image. You can set the position with absolute, percent or alignment values. More info <a href=\"http://www.w3schools.com/cssref/pr_background-position.asp\">here</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">background-size</td>\n<td style=\"text-align:left\">backgroundSize</td>\n<td style=\"text-align:left\">Sets the size of the background image. Possible values: “<em>length length</em>“, “<em>percent% percent%</em>“, “cover” or “contain”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">border-color</td>\n<td style=\"text-align:left\">borderColor</td>\n<td style=\"text-align:left\">Sets a border color to the matched view’s.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">border-width</td>\n<td style=\"text-align:left\">borderWidth</td>\n<td style=\"text-align:left\">Sets a border width to the matched view’s.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">border-radius</td>\n<td style=\"text-align:left\">borderRadius</td>\n<td style=\"text-align:left\">Sets a border radius to the matched view’s.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font</td>\n<td style=\"text-align:left\">font</td>\n<td style=\"text-align:left\">Sets the font properties (this includes font-family, font-size, font-style and font-weight)  of the matched view.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font-family</td>\n<td style=\"text-align:left\">fontFamily</td>\n<td style=\"text-align:left\">Sets the font family of the matched view.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font-size</td>\n<td style=\"text-align:left\">fontSize</td>\n<td style=\"text-align:left\">Sets the font size of the matched view (only supports device-independent units).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font-style</td>\n<td style=\"text-align:left\">fontStyle</td>\n<td style=\"text-align:left\">Sets the font style of the matched view. Possible values: “italic”, “normal”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">font-weight</td>\n<td style=\"text-align:left\">fontWeight</td>\n<td style=\"text-align:left\">Sets the font weight of the matched view Possible values: “bold”, “normal”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text-align</td>\n<td style=\"text-align:left\">textAlignment</td>\n<td style=\"text-align:left\">Sets text alignment in the matched view. Possible values: “left” , “center”, “right”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text-decoration</td>\n<td style=\"text-align:left\">textDecoration</td>\n<td style=\"text-align:left\">Sets the text formatting. Possible values: “none”, “line-through”, “underline”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text-transform</td>\n<td style=\"text-align:left\">textTransform</td>\n<td style=\"text-align:left\">Sets the text transform. Possible values: “none”, “capitalize”, “uppercase”, “lowercase”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">letter-spacing</td>\n<td style=\"text-align:left\">letterSpacing</td>\n<td style=\"text-align:left\">Sets the text letter spacing. (On Android API Level 21 and above.)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">z-index</td>\n<td style=\"text-align:left\">zIndex</td>\n<td style=\"text-align:left\">Sets the z-index. (On Android API Level 21 and above.)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clip-path</td>\n<td style=\"text-align:left\">clip-path</td>\n<td style=\"text-align:left\">Sets the clip-path. Supported shapes are circle, ellipse, rect and polygon. You can define your own shape using <a href=\"http://bennettfeely.com/clippy/\">clippy</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vertical-align</td>\n<td style=\"text-align:left\">verticalAlignment</td>\n<td style=\"text-align:left\">Sets the vertical alignment of the current view within its parent. Possible values: “top”, “center”, “bottom”, “stretch”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">horizontal-align</td>\n<td style=\"text-align:left\">horizontalAlignment</td>\n<td style=\"text-align:left\">Sets the horizontal alignment of the current view within its parent. Possible values: “left”, “center”, “right”, “stretch”.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin</td>\n<td style=\"text-align:left\">margin</td>\n<td style=\"text-align:left\">Sets the margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin-top</td>\n<td style=\"text-align:left\">marginTop</td>\n<td style=\"text-align:left\">Sets the top margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin-right</td>\n<td style=\"text-align:left\">marginRight</td>\n<td style=\"text-align:left\">Sets the right margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin-bottom</td>\n<td style=\"text-align:left\">marginBottom</td>\n<td style=\"text-align:left\">Sets the bottom margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">margin-left</td>\n<td style=\"text-align:left\">marginLeft</td>\n<td style=\"text-align:left\">Sets the left margin of the view within its parent.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">width</td>\n<td style=\"text-align:left\">width</td>\n<td style=\"text-align:left\">Sets the view width.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">height</td>\n<td style=\"text-align:left\">height</td>\n<td style=\"text-align:left\">Sets the view height.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">min-width</td>\n<td style=\"text-align:left\">minWidth</td>\n<td style=\"text-align:left\">Sets the minimal view width.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">min-height</td>\n<td style=\"text-align:left\">minHeight</td>\n<td style=\"text-align:left\">Sets the minimal view height.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding</td>\n<td style=\"text-align:left\">padding</td>\n<td style=\"text-align:left\">Sets the distance between the boundaries of the layout container and its children.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding-top</td>\n<td style=\"text-align:left\">paddingTop</td>\n<td style=\"text-align:left\">Sets the top padding of a layout container.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding-right</td>\n<td style=\"text-align:left\">paddingRight</td>\n<td style=\"text-align:left\">Sets the right padding of a layout container.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding-bottom</td>\n<td style=\"text-align:left\">paddingBottom</td>\n<td style=\"text-align:left\">Sets the bottom padding of a layout container.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">padding-left</td>\n<td style=\"text-align:left\">paddingLeft</td>\n<td style=\"text-align:left\">Sets the left padding of a layout container.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">visibility</td>\n<td style=\"text-align:left\">visibility</td>\n<td style=\"text-align:left\">Sets the view visibility. Possible values: “visible”, “collapse” (or “collapsed”).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">opacity</td>\n<td style=\"text-align:left\">opacity</td>\n<td style=\"text-align:left\">Sets the view opacity. The value is in the [0, 1] range.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Accessing-NativeScript-component-properties-with-CSS\"><a href=\"#Accessing-NativeScript-component-properties-with-CSS\" class=\"headerlink\" title=\"Accessing NativeScript component properties with CSS\"></a>Accessing NativeScript component properties with CSS</h2><p>You can set NativeScript component properties value that are not part of the CSS specification. For example:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">StackLayout</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">orientation</span>: horizontal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>This feature is limited to properties with simple types like string, number and boolean, and will set a local property value similar to component markup declaration in XML. CSS cascading and inheritance are not supported. </p>\n<h2 id=\"Using-fonts\"><a href=\"#Using-fonts\" class=\"headerlink\" title=\"Using fonts\"></a>Using fonts</h2><p>The <code>font-family</code> property can hold several values. The first supported font in the list will be used. There is also support for the following generic font-families:</p>\n<ul>\n<li>serif (ex. Times New Roman)</li>\n<li>sans-serif (ex. Helvetica)</li>\n<li>monospace (ex. Courier New)</li>\n</ul>\n<p>Platform specifics:</p>\n<ul>\n<li>Android: The supported fonts depend very much on the system, thus using the generic font-families or <a href=\"#custom-fonts\">custom-fonts</a> is recommended.</li>\n<li>iOS: You can check the <a href=\"https://support.apple.com/en-us/HT202771\">supported fonts in iOS 7</a>.</li>\n</ul>\n<h3 id=\"Custom-fonts\"><a href=\"#Custom-fonts\" class=\"headerlink\" title=\"Custom fonts\"></a>Custom fonts</h3><p>You can use custom fonts in your app (in .TTF or .OTF format). The NativeScript runtime will look for the font files under the <code>app/fonts/</code> directory and load them automatically.</p>\n<p>Note: In iOS you should also do a one-time registration of the font to be able to use it (usually in the app.ts/app.js file):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fontModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling/font\"</span>);</div><div class=\"line\">fontModule.ios.registerFont(<span class=\"string\">\"MyFont.ttf\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> fontModule = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/styling/font\"</span>);</div><div class=\"line\">fontModule.ios.registerFont(<span class=\"string\">\"MyFont.ttf\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Import-external-CSS\"><a href=\"#Import-external-CSS\" class=\"headerlink\" title=\"Import external CSS\"></a>Import external CSS</h2><p>The @import CSS rule allows you to import external CSS from local file, resource or url. These rules must precede all other types of rules.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import &#123; url('http://some-domain.com/your-style.css') &#125;</div><div class=\"line\">@import &#123; url('res://your-style.css') &#125;</div><div class=\"line\">@import &#123; url('~/your-style.css') &#125;</div></pre></td></tr></table></figure>\n"},{"title":"Icon Fonts","description":"Learn how to use icon fonts to display icons instead of using images.","position":13,"slug":"icon-fonts","previous_url":"/icon-fonts","_content":"\n# Icon Fonts\nWhile bitmap images are great, they present challenges in designing mobile applications. Images increase the size of the application if they are embedded in it. If not, they require additional http requests in order to be fetched. Images consume memory. Furthermore, bitmap images do not scale well. If scaled up, they will lose quality. If scaled down, they will waste space. On the other hand, fonts scale well, do not require additional http requests for each glyph and do not increase memory usage significantly. Icon fonts contain icons instead of alphabet characters and can be used instead of images in mobile applications.\n\n# Using Icon Fonts in NativeScript\n1. Choose or generate an icon font that best matches your needs. Two popular icon fonts are [IcoMoon](https://icomoon.io/) and [Font Awesome](https://fortawesome.github.io/Font-Awesome/).\n2. Once you have downloaded the icon font to your machine, locate the [TrueType](https://en.wikipedia.org/wiki/TrueType) font file with extension **.ttf**.\n3. In your NativeScript application **app** folder, create a folder called **fonts** and place the **.ttf** there.\n4. Follow the instructions on the icon font webpage to determine the hex codes of each font glyph, i.e., icon. Add a **Label** component to your NativeScript app and bind the Label's **text** property to a one-letter string generated from the character code of the icon you want to show, i.e., `String.fromCharCode(0xe903)`.\n\n> Do not forget to set the Label's **font-family** to the name of your font either through CSS, XML or code-behind.\n\n## Icon Font\n![icomoon](../docs/img/modules/icon-fonts/icomoon.png \"Icomoon\")\n\n## Fonts Folder\n![icon-fonts](../docs/img/modules/icon-fonts/fonts-folder.png \"Fonts Folder\")\n\n## The Code\n{% nativescript %}\n``` CSS\n.icon {\n   font-family: 'icomoon';\n   font-size: 48;\n}\n```\n``` XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\" loaded=\"pageLoaded\">\n  <ListView items=\"{%raw%}{{ glyphs }}{%endraw%}\">\n        <ListView.itemTemplate>\n            <StackLayout orientation=\"horizontal\">\n                <Label text=\"{%raw%}{{ icon }}{%endraw%}\" class=\"icon\"/>\n                <Label text=\"{%raw%}{{ code }}{%endraw%}\" />\n            </StackLayout>\n        </ListView.itemTemplate>\n    </ListView>\n</Page>\n```\n``` JavaScript\n\"use strict\";\nvar observable = require(\"data/observable\");\nfunction pageLoaded(args) {\n    var page = args.object;\n    var viewModel = new observable.Observable();\n    var glyphs = new Array();\n    var charCode = 0xe903;\n    for (; charCode <= 0xeaea; charCode++) {\n        var glyph = new observable.Observable();\n        glyph.set(\"icon\", String.fromCharCode(charCode));\n        glyph.set(\"code\", charCode.toString(16));\n        glyphs.push(glyph);\n    }\n    viewModel.set(\"glyphs\", glyphs);\n    page.bindingContext = viewModel;\n}\nexports.pageLoaded = pageLoaded;\n//# sourceMappingURL=main-page.js.map\n```\n``` TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pages.Page>args.object;\n    var viewModel = new observable.Observable();\n    var glyphs = new Array<observable.Observable>();\n    var charCode = 0xe903;\n    for(; charCode <= 0xeaea; charCode++){\n        var glyph = new observable.Observable();\n        glyph.set(\"icon\", String.fromCharCode(charCode));\n        glyph.set(\"code\", charCode.toString(16));\n        glyphs.push(glyph);\n    }\n    viewModel.set(\"glyphs\", glyphs)\n    page.bindingContext = viewModel;\n}\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet icon-font-sample%}{% endraw %}\n{% endangular %}\n\nAnd the result is:\n\n![sample-app](../docs/img/modules/icon-fonts/sample-app.png \"Sample App\")\n\n{% nativescript %}\nHere you can find the complete sample: [Icon Font Sample Application](https://github.com/NativeScript/icon-fonts)\n{% endnativescript %}\n","source":"ui/icon-fonts.md","raw":"---\ntitle: Icon Fonts\ndescription: Learn how to use icon fonts to display icons instead of using images.\nposition: 13\nslug: icon-fonts\nprevious_url: /icon-fonts\n---\n\n# Icon Fonts\nWhile bitmap images are great, they present challenges in designing mobile applications. Images increase the size of the application if they are embedded in it. If not, they require additional http requests in order to be fetched. Images consume memory. Furthermore, bitmap images do not scale well. If scaled up, they will lose quality. If scaled down, they will waste space. On the other hand, fonts scale well, do not require additional http requests for each glyph and do not increase memory usage significantly. Icon fonts contain icons instead of alphabet characters and can be used instead of images in mobile applications.\n\n# Using Icon Fonts in NativeScript\n1. Choose or generate an icon font that best matches your needs. Two popular icon fonts are [IcoMoon](https://icomoon.io/) and [Font Awesome](https://fortawesome.github.io/Font-Awesome/).\n2. Once you have downloaded the icon font to your machine, locate the [TrueType](https://en.wikipedia.org/wiki/TrueType) font file with extension **.ttf**.\n3. In your NativeScript application **app** folder, create a folder called **fonts** and place the **.ttf** there.\n4. Follow the instructions on the icon font webpage to determine the hex codes of each font glyph, i.e., icon. Add a **Label** component to your NativeScript app and bind the Label's **text** property to a one-letter string generated from the character code of the icon you want to show, i.e., `String.fromCharCode(0xe903)`.\n\n> Do not forget to set the Label's **font-family** to the name of your font either through CSS, XML or code-behind.\n\n## Icon Font\n![icomoon](../docs/img/modules/icon-fonts/icomoon.png \"Icomoon\")\n\n## Fonts Folder\n![icon-fonts](../docs/img/modules/icon-fonts/fonts-folder.png \"Fonts Folder\")\n\n## The Code\n{% nativescript %}\n``` CSS\n.icon {\n   font-family: 'icomoon';\n   font-size: 48;\n}\n```\n``` XML\n<Page xmlns=\"http://schemas.nativescript.org/tns.xsd\" loaded=\"pageLoaded\">\n  <ListView items=\"{%raw%}{{ glyphs }}{%endraw%}\">\n        <ListView.itemTemplate>\n            <StackLayout orientation=\"horizontal\">\n                <Label text=\"{%raw%}{{ icon }}{%endraw%}\" class=\"icon\"/>\n                <Label text=\"{%raw%}{{ code }}{%endraw%}\" />\n            </StackLayout>\n        </ListView.itemTemplate>\n    </ListView>\n</Page>\n```\n``` JavaScript\n\"use strict\";\nvar observable = require(\"data/observable\");\nfunction pageLoaded(args) {\n    var page = args.object;\n    var viewModel = new observable.Observable();\n    var glyphs = new Array();\n    var charCode = 0xe903;\n    for (; charCode <= 0xeaea; charCode++) {\n        var glyph = new observable.Observable();\n        glyph.set(\"icon\", String.fromCharCode(charCode));\n        glyph.set(\"code\", charCode.toString(16));\n        glyphs.push(glyph);\n    }\n    viewModel.set(\"glyphs\", glyphs);\n    page.bindingContext = viewModel;\n}\nexports.pageLoaded = pageLoaded;\n//# sourceMappingURL=main-page.js.map\n```\n``` TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pages.Page>args.object;\n    var viewModel = new observable.Observable();\n    var glyphs = new Array<observable.Observable>();\n    var charCode = 0xe903;\n    for(; charCode <= 0xeaea; charCode++){\n        var glyph = new observable.Observable();\n        glyph.set(\"icon\", String.fromCharCode(charCode));\n        glyph.set(\"code\", charCode.toString(16));\n        glyphs.push(glyph);\n    }\n    viewModel.set(\"glyphs\", glyphs)\n    page.bindingContext = viewModel;\n}\n```\n{% endnativescript %}\n{% angular %}\n{% raw %}{%snippet icon-font-sample%}{% endraw %}\n{% endangular %}\n\nAnd the result is:\n\n![sample-app](../docs/img/modules/icon-fonts/sample-app.png \"Sample App\")\n\n{% nativescript %}\nHere you can find the complete sample: [Icon Font Sample Application](https://github.com/NativeScript/icon-fonts)\n{% endnativescript %}\n","date":"2016-08-26T21:05:54.601Z","updated":"2016-08-26T21:05:54.601Z","path":"ui/icon-fonts.html","comments":1,"layout":"page","_id":"cisn95caz0016wsl0zdwkelb6","content":"<h1 id=\"Icon-Fonts\"><a href=\"#Icon-Fonts\" class=\"headerlink\" title=\"Icon Fonts\"></a>Icon Fonts</h1><p>While bitmap images are great, they present challenges in designing mobile applications. Images increase the size of the application if they are embedded in it. If not, they require additional http requests in order to be fetched. Images consume memory. Furthermore, bitmap images do not scale well. If scaled up, they will lose quality. If scaled down, they will waste space. On the other hand, fonts scale well, do not require additional http requests for each glyph and do not increase memory usage significantly. Icon fonts contain icons instead of alphabet characters and can be used instead of images in mobile applications.</p>\n<h1 id=\"Using-Icon-Fonts-in-NativeScript\"><a href=\"#Using-Icon-Fonts-in-NativeScript\" class=\"headerlink\" title=\"Using Icon Fonts in NativeScript\"></a>Using Icon Fonts in NativeScript</h1><ol>\n<li>Choose or generate an icon font that best matches your needs. Two popular icon fonts are <a href=\"https://icomoon.io/\" target=\"_blank\" rel=\"external\">IcoMoon</a> and <a href=\"https://fortawesome.github.io/Font-Awesome/\" target=\"_blank\" rel=\"external\">Font Awesome</a>.</li>\n<li>Once you have downloaded the icon font to your machine, locate the <a href=\"https://en.wikipedia.org/wiki/TrueType\" target=\"_blank\" rel=\"external\">TrueType</a> font file with extension <strong>.ttf</strong>.</li>\n<li>In your NativeScript application <strong>app</strong> folder, create a folder called <strong>fonts</strong> and place the <strong>.ttf</strong> there.</li>\n<li>Follow the instructions on the icon font webpage to determine the hex codes of each font glyph, i.e., icon. Add a <strong>Label</strong> component to your NativeScript app and bind the Label’s <strong>text</strong> property to a one-letter string generated from the character code of the icon you want to show, i.e., <code>String.fromCharCode(0xe903)</code>.</li>\n</ol>\n<blockquote>\n<p>Do not forget to set the Label’s <strong>font-family</strong> to the name of your font either through CSS, XML or code-behind.</p>\n</blockquote>\n<h2 id=\"Icon-Font\"><a href=\"#Icon-Font\" class=\"headerlink\" title=\"Icon Font\"></a>Icon Font</h2><p><img src=\"../docs/img/modules/icon-fonts/icomoon.png\" alt=\"icomoon\" title=\"Icomoon\"></p>\n<h2 id=\"Fonts-Folder\"><a href=\"#Fonts-Folder\" class=\"headerlink\" title=\"Fonts Folder\"></a>Fonts Folder</h2><p><img src=\"../docs/img/modules/icon-fonts/fonts-folder.png\" alt=\"icon-fonts\" title=\"Fonts Folder\"></p>\n<h2 id=\"The-Code\"><a href=\"#The-Code\" class=\"headerlink\" title=\"The Code\"></a>The Code</h2><div class=\"codeblock n\">undefined\nundefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet icon-font-sample%}</p>\n</div>\n<p>And the result is:</p>\n<p><img src=\"../docs/img/modules/icon-fonts/sample-app.png\" alt=\"sample-app\" title=\"Sample App\"></p>\n<div class=\"codeblock n\"><p>Here you can find the complete sample: <a href=\"https://github.com/NativeScript/icon-fonts\" target=\"_blank\" rel=\"external\">Icon Font Sample Application</a></p>\n</div>\n","excerpt":"","more":"<h1 id=\"Icon-Fonts\"><a href=\"#Icon-Fonts\" class=\"headerlink\" title=\"Icon Fonts\"></a>Icon Fonts</h1><p>While bitmap images are great, they present challenges in designing mobile applications. Images increase the size of the application if they are embedded in it. If not, they require additional http requests in order to be fetched. Images consume memory. Furthermore, bitmap images do not scale well. If scaled up, they will lose quality. If scaled down, they will waste space. On the other hand, fonts scale well, do not require additional http requests for each glyph and do not increase memory usage significantly. Icon fonts contain icons instead of alphabet characters and can be used instead of images in mobile applications.</p>\n<h1 id=\"Using-Icon-Fonts-in-NativeScript\"><a href=\"#Using-Icon-Fonts-in-NativeScript\" class=\"headerlink\" title=\"Using Icon Fonts in NativeScript\"></a>Using Icon Fonts in NativeScript</h1><ol>\n<li>Choose or generate an icon font that best matches your needs. Two popular icon fonts are <a href=\"https://icomoon.io/\">IcoMoon</a> and <a href=\"https://fortawesome.github.io/Font-Awesome/\">Font Awesome</a>.</li>\n<li>Once you have downloaded the icon font to your machine, locate the <a href=\"https://en.wikipedia.org/wiki/TrueType\">TrueType</a> font file with extension <strong>.ttf</strong>.</li>\n<li>In your NativeScript application <strong>app</strong> folder, create a folder called <strong>fonts</strong> and place the <strong>.ttf</strong> there.</li>\n<li>Follow the instructions on the icon font webpage to determine the hex codes of each font glyph, i.e., icon. Add a <strong>Label</strong> component to your NativeScript app and bind the Label’s <strong>text</strong> property to a one-letter string generated from the character code of the icon you want to show, i.e., <code>String.fromCharCode(0xe903)</code>.</li>\n</ol>\n<blockquote>\n<p>Do not forget to set the Label’s <strong>font-family</strong> to the name of your font either through CSS, XML or code-behind.</p>\n</blockquote>\n<h2 id=\"Icon-Font\"><a href=\"#Icon-Font\" class=\"headerlink\" title=\"Icon Font\"></a>Icon Font</h2><p><img src=\"../docs/img/modules/icon-fonts/icomoon.png\" alt=\"icomoon\" title=\"Icomoon\"></p>\n<h2 id=\"Fonts-Folder\"><a href=\"#Fonts-Folder\" class=\"headerlink\" title=\"Fonts Folder\"></a>Fonts Folder</h2><p><img src=\"../docs/img/modules/icon-fonts/fonts-folder.png\" alt=\"icon-fonts\" title=\"Fonts Folder\"></p>\n<h2 id=\"The-Code\"><a href=\"#The-Code\" class=\"headerlink\" title=\"The Code\"></a>The Code</h2><div class=\"codeblock n\">undefined\nundefined\nundefined\nundefined\n</div>\n<div class=\"codeblock ng\"><p>{%snippet icon-font-sample%}</p>\n</div>\n<p>And the result is:</p>\n<p><img src=\"../docs/img/modules/icon-fonts/sample-app.png\" alt=\"sample-app\" title=\"Sample App\"></p>\n<div class=\"codeblock n\"><p>Here you can find the complete sample: <a href=\"https://github.com/NativeScript/icon-fonts\">Icon Font Sample Application</a></p>\n</div>\n"},{"title":"Images","description":"How to work with images in a NativeScript application.","position":6,"slug":"images","previous_url":"/ui-images","_content":"\n# Working with Images\nIn this article, we will look at the different ways to show images in a NativeScript application.\nImages are added to an application either declaratively (XML) or with code (JS).\n\n{% nativescript %}\n```XML\n<Image src=\"~/logo.png\" />\n```\n```JavaScript\nvar image = new imageModule.Image();\nimage.src = \"~/logo.png\";\ndockLayout.addChild(image);\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Image src=\"~/logo.png\" ></Image>\n```\n```JavaScript\nvar image = new imageModule.Image();\nimage.src = \"~/logo.png\";\ndockLayout.addChild(image);\n```\n{% endangular %}\n\nThe prefix of the `src` value specifies where the image will be loaded form. The possible options are:\n\n* [From URL (`http://` or `https://` prefix)](#load-images-from-url)\n* [From local file system (`~/` prefix)](#load-images-from-local-file-system)\n* [From resource (`res://` prefix)](#load-images-from-resource)\n\nYou can also use the [image-source]() module to create an image source and manually set it to the image:\n\n```JavaScript\nvar image = new imageModule.Image();\nvar imageSource = imageSourceModule.fromResource(\"logo\");\nimage.imageSource = imageSource;\n```\n\nYou can also use the [image-source API](http://docs.nativescript.org/api-reference/classes/_image_source_.imagesource.html) to save and load images from a base64 encoded string.\n\n## Load images from URL\nWeb images have an `http://` or `https://` prefix. When such an image is loaded, an asynchronous http request will be sent and the image will be shown if the request is successful.\n\n{% nativescript %}\n```XML\n<Image src=\"https://www.google.com/images/errors/logo_sm_2.png\" />\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Image src=\"https://www.google.com/images/errors/logo_sm_2.png\" ></Image>\n```\n{% endangular %}\n\nYou can manually create an [ImageSource instance from URL]().\n\n## Load images from local file system\nUsing the `~/` prefix, you can load images relative to the `App` folder inside your project.\n\n{% nativescript %}\n```XML\n<Image src=\"~/images/logo.png\" stretch =\"none\" />\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Image src=\"~/images/logo.png\" stretch =\"none\" ></Image>\n```\n{% endangular %}\n\nYou can manually create an [ImageSource instance from local file]().\n\n> Currently, loading images from the file system does not respect filename qualifiers as described [here](). We have plans to implement that along with [density-specific qualifiers support](https://github.com/NativeScript/NativeScript/issues/276).\n\n## Load images from a resource\nUsing the `res://` prefix you can load a resource image. This is the suggested approach, as it uses the native methods for loading the best image for the current device screen density.\n\n{% nativescript %}\n```XML\n<Image src=\"res://logo\" stretch =\"none\" /> \n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Image src=\"res://logo\" stretch =\"none\" ></Image> \n```\n{% endangular %}\n\nYou can manually create an [ImageSource instance from resource]().\n\n> The file extension is not included when referencing resource images.\n\nThe actual resource images should be added to the `App_Resources` folder in your application and should follow the platform guidelines.\n\n### Adding Android resources\nAndroid resources should be added to the corresponding `drawable-XXX` folders inside the `App_Resources\\Android` folder in your app:\n\n![android resources](../docs/img/resources/android-resources.png \"android resources\")\n\nThe content of this directory will be copied inside the `platforms\\android\\res` when the app is prepared by the NativeScript CLI. More information about how to use drawable resources in Android can be found [here](http://developer.android.com/guide/practices/screens_support.html#DesigningResources).\n\n### Adding iOS resources\nIOS resources should be added inside the `App_Resources\\ios` folder in your app. You can use `@1x`, `@2x` and `@3x` suffixes to target devices with a specific screen scale. Here is a list of devices for each scale factor:\n\n* **@1x** - iPad 2 and iPad mini (1st Generation)\n* **@2x** - iPhone 4s, iPhone 5, iPhone 6, iPad (retina)\n* **@3x** - iPhone 6 Plus\n\nFor more information, see [Icon and Image Sizes](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1) in the iOS Developer Library.\n\nOnce the NativeScript project is prepared (`tns prepare ios`) all the images will be copied to the `platforms\\ios\\<project-name>\\Resources`.\n\n**iOS images must be `PNG` or `JPG` files.**\n","source":"ui/ui-images.md","raw":"---\ntitle: Images\ndescription: How to work with images in a NativeScript application.\nposition: 6\nslug: images\nprevious_url: /ui-images\n---\n\n# Working with Images\nIn this article, we will look at the different ways to show images in a NativeScript application.\nImages are added to an application either declaratively (XML) or with code (JS).\n\n{% nativescript %}\n```XML\n<Image src=\"~/logo.png\" />\n```\n```JavaScript\nvar image = new imageModule.Image();\nimage.src = \"~/logo.png\";\ndockLayout.addChild(image);\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Image src=\"~/logo.png\" ></Image>\n```\n```JavaScript\nvar image = new imageModule.Image();\nimage.src = \"~/logo.png\";\ndockLayout.addChild(image);\n```\n{% endangular %}\n\nThe prefix of the `src` value specifies where the image will be loaded form. The possible options are:\n\n* [From URL (`http://` or `https://` prefix)](#load-images-from-url)\n* [From local file system (`~/` prefix)](#load-images-from-local-file-system)\n* [From resource (`res://` prefix)](#load-images-from-resource)\n\nYou can also use the [image-source]() module to create an image source and manually set it to the image:\n\n```JavaScript\nvar image = new imageModule.Image();\nvar imageSource = imageSourceModule.fromResource(\"logo\");\nimage.imageSource = imageSource;\n```\n\nYou can also use the [image-source API](http://docs.nativescript.org/api-reference/classes/_image_source_.imagesource.html) to save and load images from a base64 encoded string.\n\n## Load images from URL\nWeb images have an `http://` or `https://` prefix. When such an image is loaded, an asynchronous http request will be sent and the image will be shown if the request is successful.\n\n{% nativescript %}\n```XML\n<Image src=\"https://www.google.com/images/errors/logo_sm_2.png\" />\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Image src=\"https://www.google.com/images/errors/logo_sm_2.png\" ></Image>\n```\n{% endangular %}\n\nYou can manually create an [ImageSource instance from URL]().\n\n## Load images from local file system\nUsing the `~/` prefix, you can load images relative to the `App` folder inside your project.\n\n{% nativescript %}\n```XML\n<Image src=\"~/images/logo.png\" stretch =\"none\" />\n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Image src=\"~/images/logo.png\" stretch =\"none\" ></Image>\n```\n{% endangular %}\n\nYou can manually create an [ImageSource instance from local file]().\n\n> Currently, loading images from the file system does not respect filename qualifiers as described [here](). We have plans to implement that along with [density-specific qualifiers support](https://github.com/NativeScript/NativeScript/issues/276).\n\n## Load images from a resource\nUsing the `res://` prefix you can load a resource image. This is the suggested approach, as it uses the native methods for loading the best image for the current device screen density.\n\n{% nativescript %}\n```XML\n<Image src=\"res://logo\" stretch =\"none\" /> \n```\n{% endnativescript %}\n{% angular %}\n```XML\n<Image src=\"res://logo\" stretch =\"none\" ></Image> \n```\n{% endangular %}\n\nYou can manually create an [ImageSource instance from resource]().\n\n> The file extension is not included when referencing resource images.\n\nThe actual resource images should be added to the `App_Resources` folder in your application and should follow the platform guidelines.\n\n### Adding Android resources\nAndroid resources should be added to the corresponding `drawable-XXX` folders inside the `App_Resources\\Android` folder in your app:\n\n![android resources](../docs/img/resources/android-resources.png \"android resources\")\n\nThe content of this directory will be copied inside the `platforms\\android\\res` when the app is prepared by the NativeScript CLI. More information about how to use drawable resources in Android can be found [here](http://developer.android.com/guide/practices/screens_support.html#DesigningResources).\n\n### Adding iOS resources\nIOS resources should be added inside the `App_Resources\\ios` folder in your app. You can use `@1x`, `@2x` and `@3x` suffixes to target devices with a specific screen scale. Here is a list of devices for each scale factor:\n\n* **@1x** - iPad 2 and iPad mini (1st Generation)\n* **@2x** - iPhone 4s, iPhone 5, iPhone 6, iPad (retina)\n* **@3x** - iPhone 6 Plus\n\nFor more information, see [Icon and Image Sizes](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1) in the iOS Developer Library.\n\nOnce the NativeScript project is prepared (`tns prepare ios`) all the images will be copied to the `platforms\\ios\\<project-name>\\Resources`.\n\n**iOS images must be `PNG` or `JPG` files.**\n","date":"2016-08-26T21:05:54.627Z","updated":"2016-08-26T21:05:54.627Z","path":"ui/ui-images.html","comments":1,"layout":"page","_id":"cisn95caz0017wsl0i20wa5tf","content":"<h1 id=\"Working-with-Images\"><a href=\"#Working-with-Images\" class=\"headerlink\" title=\"Working with Images\"></a>Working with Images</h1><p>In this article, we will look at the different ways to show images in a NativeScript application.\nImages are added to an application either declaratively (XML) or with code (JS).</p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<p>The prefix of the <code>src</code> value specifies where the image will be loaded form. The possible options are:</p>\n<ul>\n<li><a href=\"#load-images-from-url\">From URL (<code>http://</code> or <code>https://</code> prefix)</a></li>\n<li><a href=\"#load-images-from-local-file-system\">From local file system (<code>~/</code> prefix)</a></li>\n<li><a href=\"#load-images-from-resource\">From resource (<code>res://</code> prefix)</a></li>\n</ul>\n<p>You can also use the <a href=\"\">image-source</a> module to create an image source and manually set it to the image:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\"><span class=\"keyword\">var</span> imageSource = imageSourceModule.fromResource(<span class=\"string\">\"logo\"</span>);</div><div class=\"line\">image.imageSource = imageSource;</div></pre></td></tr></table></figure>\n<p>You can also use the <a href=\"http://docs.nativescript.org/api-reference/classes/_image_source_.imagesource.html\">image-source API</a> to save and load images from a base64 encoded string.</p>\n<h2 id=\"Load-images-from-URL\"><a href=\"#Load-images-from-URL\" class=\"headerlink\" title=\"Load images from URL\"></a>Load images from URL</h2><p>Web images have an <code>http://</code> or <code>https://</code> prefix. When such an image is loaded, an asynchronous http request will be sent and the image will be shown if the request is successful.</p>\n<div class=\"codeblock n\">undefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<p>You can manually create an <a href=\"\">ImageSource instance from URL</a>.</p>\n<h2 id=\"Load-images-from-local-file-system\"><a href=\"#Load-images-from-local-file-system\" class=\"headerlink\" title=\"Load images from local file system\"></a>Load images from local file system</h2><p>Using the <code>~/</code> prefix, you can load images relative to the <code>App</code> folder inside your project.</p>\n<div class=\"codeblock n\">undefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<p>You can manually create an <a href=\"\">ImageSource instance from local file</a>.</p>\n<blockquote>\n<p>Currently, loading images from the file system does not respect filename qualifiers as described <a href=\"\">here</a>. We have plans to implement that along with <a href=\"https://github.com/NativeScript/NativeScript/issues/276\" target=\"_blank\" rel=\"external\">density-specific qualifiers support</a>.</p>\n</blockquote>\n<h2 id=\"Load-images-from-a-resource\"><a href=\"#Load-images-from-a-resource\" class=\"headerlink\" title=\"Load images from a resource\"></a>Load images from a resource</h2><p>Using the <code>res://</code> prefix you can load a resource image. This is the suggested approach, as it uses the native methods for loading the best image for the current device screen density.</p>\n<div class=\"codeblock n\">undefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<p>You can manually create an <a href=\"\">ImageSource instance from resource</a>.</p>\n<blockquote>\n<p>The file extension is not included when referencing resource images.</p>\n</blockquote>\n<p>The actual resource images should be added to the <code>App_Resources</code> folder in your application and should follow the platform guidelines.</p>\n<h3 id=\"Adding-Android-resources\"><a href=\"#Adding-Android-resources\" class=\"headerlink\" title=\"Adding Android resources\"></a>Adding Android resources</h3><p>Android resources should be added to the corresponding <code>drawable-XXX</code> folders inside the <code>App_Resources\\Android</code> folder in your app:</p>\n<p><img src=\"../docs/img/resources/android-resources.png\" alt=\"android resources\" title=\"android resources\"></p>\n<p>The content of this directory will be copied inside the <code>platforms\\android\\res</code> when the app is prepared by the NativeScript CLI. More information about how to use drawable resources in Android can be found <a href=\"http://developer.android.com/guide/practices/screens_support.html#DesigningResources\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h3 id=\"Adding-iOS-resources\"><a href=\"#Adding-iOS-resources\" class=\"headerlink\" title=\"Adding iOS resources\"></a>Adding iOS resources</h3><p>IOS resources should be added inside the <code>App_Resources\\ios</code> folder in your app. You can use <code>@1x</code>, <code>@2x</code> and <code>@3x</code> suffixes to target devices with a specific screen scale. Here is a list of devices for each scale factor:</p>\n<ul>\n<li><strong>@1x</strong> - iPad 2 and iPad mini (1st Generation)</li>\n<li><strong>@2x</strong> - iPhone 4s, iPhone 5, iPhone 6, iPad (retina)</li>\n<li><strong>@3x</strong> - iPhone 6 Plus</li>\n</ul>\n<p>For more information, see <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1\" target=\"_blank\" rel=\"external\">Icon and Image Sizes</a> in the iOS Developer Library.</p>\n<p>Once the NativeScript project is prepared (<code>tns prepare ios</code>) all the images will be copied to the <code>platforms\\ios\\&lt;project-name&gt;\\Resources</code>.</p>\n<p><strong>iOS images must be <code>PNG</code> or <code>JPG</code> files.</strong></p>\n","excerpt":"","more":"<h1 id=\"Working-with-Images\"><a href=\"#Working-with-Images\" class=\"headerlink\" title=\"Working with Images\"></a>Working with Images</h1><p>In this article, we will look at the different ways to show images in a NativeScript application.\nImages are added to an application either declaratively (XML) or with code (JS).</p>\n<div class=\"codeblock n\">undefined\nundefined\n</div>\n<div class=\"codeblock ng\">undefined\nundefined\n</div>\n<p>The prefix of the <code>src</code> value specifies where the image will be loaded form. The possible options are:</p>\n<ul>\n<li><a href=\"#load-images-from-url\">From URL (<code>http://</code> or <code>https://</code> prefix)</a></li>\n<li><a href=\"#load-images-from-local-file-system\">From local file system (<code>~/</code> prefix)</a></li>\n<li><a href=\"#load-images-from-resource\">From resource (<code>res://</code> prefix)</a></li>\n</ul>\n<p>You can also use the <a href=\"\">image-source</a> module to create an image source and manually set it to the image:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> imageModule.Image();</div><div class=\"line\"><span class=\"keyword\">var</span> imageSource = imageSourceModule.fromResource(<span class=\"string\">\"logo\"</span>);</div><div class=\"line\">image.imageSource = imageSource;</div></pre></td></tr></table></figure>\n<p>You can also use the <a href=\"http://docs.nativescript.org/api-reference/classes/_image_source_.imagesource.html\">image-source API</a> to save and load images from a base64 encoded string.</p>\n<h2 id=\"Load-images-from-URL\"><a href=\"#Load-images-from-URL\" class=\"headerlink\" title=\"Load images from URL\"></a>Load images from URL</h2><p>Web images have an <code>http://</code> or <code>https://</code> prefix. When such an image is loaded, an asynchronous http request will be sent and the image will be shown if the request is successful.</p>\n<div class=\"codeblock n\">undefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<p>You can manually create an <a href=\"\">ImageSource instance from URL</a>.</p>\n<h2 id=\"Load-images-from-local-file-system\"><a href=\"#Load-images-from-local-file-system\" class=\"headerlink\" title=\"Load images from local file system\"></a>Load images from local file system</h2><p>Using the <code>~/</code> prefix, you can load images relative to the <code>App</code> folder inside your project.</p>\n<div class=\"codeblock n\">undefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<p>You can manually create an <a href=\"\">ImageSource instance from local file</a>.</p>\n<blockquote>\n<p>Currently, loading images from the file system does not respect filename qualifiers as described <a href=\"\">here</a>. We have plans to implement that along with <a href=\"https://github.com/NativeScript/NativeScript/issues/276\">density-specific qualifiers support</a>.</p>\n</blockquote>\n<h2 id=\"Load-images-from-a-resource\"><a href=\"#Load-images-from-a-resource\" class=\"headerlink\" title=\"Load images from a resource\"></a>Load images from a resource</h2><p>Using the <code>res://</code> prefix you can load a resource image. This is the suggested approach, as it uses the native methods for loading the best image for the current device screen density.</p>\n<div class=\"codeblock n\">undefined\n</div>\n<div class=\"codeblock ng\">undefined\n</div>\n<p>You can manually create an <a href=\"\">ImageSource instance from resource</a>.</p>\n<blockquote>\n<p>The file extension is not included when referencing resource images.</p>\n</blockquote>\n<p>The actual resource images should be added to the <code>App_Resources</code> folder in your application and should follow the platform guidelines.</p>\n<h3 id=\"Adding-Android-resources\"><a href=\"#Adding-Android-resources\" class=\"headerlink\" title=\"Adding Android resources\"></a>Adding Android resources</h3><p>Android resources should be added to the corresponding <code>drawable-XXX</code> folders inside the <code>App_Resources\\Android</code> folder in your app:</p>\n<p><img src=\"../docs/img/resources/android-resources.png\" alt=\"android resources\" title=\"android resources\"></p>\n<p>The content of this directory will be copied inside the <code>platforms\\android\\res</code> when the app is prepared by the NativeScript CLI. More information about how to use drawable resources in Android can be found <a href=\"http://developer.android.com/guide/practices/screens_support.html#DesigningResources\">here</a>.</p>\n<h3 id=\"Adding-iOS-resources\"><a href=\"#Adding-iOS-resources\" class=\"headerlink\" title=\"Adding iOS resources\"></a>Adding iOS resources</h3><p>IOS resources should be added inside the <code>App_Resources\\ios</code> folder in your app. You can use <code>@1x</code>, <code>@2x</code> and <code>@3x</code> suffixes to target devices with a specific screen scale. Here is a list of devices for each scale factor:</p>\n<ul>\n<li><strong>@1x</strong> - iPad 2 and iPad mini (1st Generation)</li>\n<li><strong>@2x</strong> - iPhone 4s, iPhone 5, iPhone 6, iPad (retina)</li>\n<li><strong>@3x</strong> - iPhone 6 Plus</li>\n</ul>\n<p>For more information, see <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1\">Icon and Image Sizes</a> in the iOS Developer Library.</p>\n<p>Once the NativeScript project is prepared (<code>tns prepare ios</code>) all the images will be copied to the <code>platforms\\ios\\&lt;project-name&gt;\\Resources</code>.</p>\n<p><strong>iOS images must be <code>PNG</code> or <code>JPG</code> files.</strong></p>\n"},{"title":"Components","description":"Get familiar with the default user interface elements (widgets) in NativeScript.","position":2,"slug":"components","previous_url":"/ui-views","_content":"\n# User Interface Widgets\n\nNativeScript ships with a set of user interface [`views`](api-reference/modules/_ui_core_view_.html) (also known as widgets) which you can use to build the user interface of a mobile application. Most of these views wrap the corresponding native view for each platform while providing a common API for working with it. For example, the `Button` view renders an [`android.widget.Button`](http://developer.android.com/reference/android/widget/Button.html) on Android and [`UIButton`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/) on iOS.\n\n* [Button](#button)\n* [Label](#label)\n* [TextField](#textfield)\n* [TextView](#textview)\n* [SearchBar](#searchbar)\n* [Switch](#switch)\n* [Slider](#slider)\n* [Progress ](#progress)\n* [ActivityIndicator](#activityindicator)\n* [Image](#image)\n* [ListView](#listview)\n* [HtmlView](#htmlview)\n* [WebView](#webview)\n* [TabView](#tabview)\n* [SegmentedBar](#segmentedbar)\n* [DatePicker](#datepicker)\n* [TimePicker](#timepicker)\n* [ListPicker](#listpicker)\n* [Dialogs](#dialogs)\n\nDefining the layout of the application is also an important part of the application development. For more information about the different layout containers that are available in NativeScript, see [The NativeScript Layout System]({%slug layouts %}).\n\n> **TIP:** You can access the underlying native widget for each view at runtime using the following properties:\n>\n> * Android: `<view>.android`\n> * iOS: `<view>.ios`\n>\n> Accessing the native widgets might be useful when you want to use some platform-specific functionalities of the widget. You can find information about the underlying native component for each view below.\n\n## Button\n\nThe [Button]({%ns_cookbook ui/button%}) widget provides a standard button widget that reacts to a `tap` event.\n\n![button android](../docs/img/gallery/android/buttonPage.png \"button android\")![button ios](../docs/img/gallery/ios/buttonPage.png \"button ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.Button](http://developer.android.com/reference/android/widget/Button.html) | [UIButton](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/) |\n\n## Label\n\nThe [Label]({%ns_cookbook ui/label%}) widget provides a text label that shows read-only text.\n\n![label android](../docs/img/gallery/android/labelPage.png \"label android\")![label ios](../docs/img/gallery/ios/labelPage.png \"label ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.TextView](http://developer.android.com/reference/android/widget/TextView.html) | [UILabel](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILabel_Class/) |\n\n## TextField\n\nThe [TextField]({%ns_cookbook ui/text-field%}) widget provides an editable **single-line** text field.\n\n![text-field android](../docs/img/gallery/android/textFieldPage.png \"text-field android\")![text-field ios](../docs/img/gallery/ios/textFieldPage.png \"text-field ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.EditText](http://developer.android.com/reference/android/widget/EditText.html) | [UITextField](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextField_Class/) |\n\n## TextView\n\nThe [TextView]({%ns_cookbook ui/text-view%}) widget provides an editable **multi-line** text view. \n\nYou can use it to show multi-line text and implement text editing.\n\n![text-view android](../docs/img/gallery/android/textViewPage.png \"text-view android\")![text-view ios](../docs/img/gallery/ios/textViewPage.png \"text-view ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.EditText](http://developer.android.com/reference/android/widget/EditText.html) | [UITextView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextView_Class/) |\n\n## SearchBar\n\nThe [SearchBar]({%ns_cookbook ui/search-bar%}) widget provides a user interface for entering search queries and submitting requests to the search provider.\n\n![search-bar android](../docs/img/gallery/android/searchBarPage.png \"search-bar android\")![search-bar ios](../docs/img/gallery/ios/searchBarPage.png \"search-bar ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.SearchView](http://developer.android.com/reference/android/widget/SearchView.html) | [UISearchBar](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchBar_Class/) |\n\n## Switch\n\nThe [Switch]({%ns_cookbook ui/switch%}) widget provides a two-state toggle switch from which you can choose between two options.\n\n![switch android](../docs/img/gallery/android/switchPage.png \"switch android\")![switch ios](../docs/img/gallery/ios/switchPage.png \"switch ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.Switch](http://developer.android.com/reference/android/widget/Switch.html) | [UISwitch](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISwitch_Class/) |\n\n## Slider\n\nThe [Slider]({%ns_cookbook ui/slider%}) widget provides a slider that you can use to pick a numeric value within a configurable range.\n\n![slider android](../docs/img/gallery/android/sliderPage.png \"slider android\")![slider ios](../docs/img/gallery/ios/sliderPage.png \"slider ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.SeekBar](http://developer.android.com/reference/android/widget/SeekBar.html) | [UISlider](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISlider_Class/) |\n\n## Progress\n\nThe [Progress]({%ns_cookbook ui/progress%}) widget is a visual bar indicator of a progress in a operation. It shows a bar representing the current progress of the operation.\n\n![progress android](../docs/img/gallery/android/progressPage.png \"progress android\")![progress ios](../docs/img/gallery/ios/progressPage.png \"progress ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.ProgressBar](http://developer.android.com/reference/android/widget/ProgressBar.html) (indeterminate = false) | [UIProgressView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIProgressView_Class/) |\n\n## ActivityIndicator\n\nThe [ActivityIndicator]({%ns_cookbook ui/activity-indicator%}) widget is a visual spinner indicator which shows that a task is in progress.\n\n![activity-indicator android](../docs/img/gallery/android/activityIndicatorPage.png \"activity-indicator android\")![activity-indicator ios](../docs/img/gallery/ios/activityIndicatorPage.png \"activity-indicator ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.ProgressBar](http://developer.android.com/reference/android/widget/ProgressBar.html) (indeterminate = true) | [UIActivityIndicatorView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActivityIndicatorView_Class/) |\n\n## Image\n\nThe [Image]({%ns_cookbook ui/image%}) widget shows an image. You can load the image from an [`ImageSource`](http://docs.nativescript.org/api-reference/modules/_image_source_.html) or from a URL.\n\n![image android](../docs/img/gallery/android/imagePage.png \"image android\")![image ios](../docs/img/gallery/ios/imagePage.png \"image ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.ImageView](http://developer.android.com/reference/android/widget/ImageView.html) | [UIImageView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImageView_Class/) |\n\n## ListView\n\nThe [ListView]({%ns_cookbook ui/list-view%}) shows items in a vertically scrolling list. You can set an [`itemTemplate`](api-reference/modules/_ui_list_view_.knowntemplates.html) to specify how each item in the list should be displayed.\n\n![list-view android](../docs/img/gallery/android/listViewPage.png \"list-view android\")![list-view ios](../docs/img/gallery/ios/listViewPage.png \"list-view ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.ListView](http://developer.android.com/reference/android/widget/ListView.html) | [UITableView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableView_Class/) |\n\n## HtmlView\n\nThe [HtmlView]({%ns_cookbook ui/html-view%}) represents a view with HTML content. Use this component instead of WebView when you want to show just static HTML content.\n\n![html-view android](../docs/img/gallery/android/htmlViewPage.png \"html-view android\")![html-view ios](../docs/img/gallery/ios/htmlViewPage.png \"html-view ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.TextView](http://developer.android.com/reference/android/widget/TextView.html) | [UILabel](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILabel_Class/) |\n\n## WebView\n\nThe [WebView]({%ns_cookbook ui/web-view%}) shows web pages. You can load a page from a URL or by navigating back and forward.\n\n![web-view android](../docs/img/gallery/android/webViewPage.png \"web-view android\")![web-view ios](../docs/img/gallery/ios/webViewPage.png \"web-view ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.webkit.WebView](http://developer.android.com/reference/android/webkit/WebView.html) | [UIWebView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWebView_Class/) |\n\n## TabView\n\nWith the [TabView]({%ns_cookbook ui/tab-view%}) control, you can implement tab navigation.\n\n![tab-view android](../docs/img/gallery/android/tabViewPage.png \"tab-view android\")![tab-view ios](../docs/img/gallery/ios/tabViewPage.png \"tab-view ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.support.v4.view.ViewPager](http://developer.android.com/reference/android/support/v4/view/ViewPager.html) | [UITabBarController](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITabBarController_Class/) |\n\n## SegmentedBar\n\nWith the [SegmentedBar]({%ns_cookbook ui/segmented-bar%}) control, you can implement discrete selection.\n\n![segmented-bar android](../docs/img/gallery/android/segmentedBarPage.png \"segmented-bar android\")![segmented-bar ios](../docs/img/gallery/ios/segmentedBarPage.png \"segmented-bar ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.TabHost](http://developer.android.com/reference/android/widget/TabHost.html) | [UISegmentedControl](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UISegmentedControl_Class/index.html) |\n\n## DatePicker\n\nWith the [DatePicker]({%ns_cookbook ui/date-picker%}) control, you can pick a date.\n\n![date-picker android](../docs/img/gallery/android/datePickerPage.png \"date-picker android\")![date-picker ios](../docs/img/gallery/ios/datePickerPage.png \"date-picker ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.DatePicker](http://developer.android.com/reference/android/widget/DatePicker.html) | [UIDatePicker](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDatePicker_Class/index.html) |\n\n## TimePicker\n\nWith the [TimePicker]({%ns_cookbook ui/time-picker%}) widget, you can pick a time.\n\n![time-picker android](../docs/img/gallery/android/timePickerPage.png \"time-picker android\")![time-picker ios](../docs/img/gallery/ios/timePickerPage.png \"time-picker ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.TimePicker](http://developer.android.com/reference/android/widget/TimePicker.html) | [UIDatePicker](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDatePicker_Class/index.html) |\n\n## ListPicker\n\nWith the [ListPicker]({%ns_cookbook ui/list-picker%}) widget, you can pick a value from a list.\n\n![list-picker android](../docs/img/gallery/android/listPickerPage.png \"list-picker android\")![list-picker ios](../docs/img/gallery/ios/listPickerPage.png \"list-picker ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.NumberPicker](http://developer.android.com/reference/android/widget/NumberPicker.html) | [UIPickerView](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html) |\n\n## Dialogs\n\nThe [dialogs module]({%slug dialogs %}) lets you create and show dialog windows.\n\n![dialog-confirm android](../docs/img/gallery/android/dialogsPage_confirm.png \"dialog-confirm android\")![dialog-confirm ios](../docs/img/gallery/ios/dialogsPage_confirm.png \"dialog-confirm ios\")\n","source":"ui/ui-views.md","raw":"---\ntitle: Components\ndescription: Get familiar with the default user interface elements (widgets) in NativeScript.\nposition: 2\nslug: components\nprevious_url: /ui-views\n---\n\n# User Interface Widgets\n\nNativeScript ships with a set of user interface [`views`](api-reference/modules/_ui_core_view_.html) (also known as widgets) which you can use to build the user interface of a mobile application. Most of these views wrap the corresponding native view for each platform while providing a common API for working with it. For example, the `Button` view renders an [`android.widget.Button`](http://developer.android.com/reference/android/widget/Button.html) on Android and [`UIButton`](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/) on iOS.\n\n* [Button](#button)\n* [Label](#label)\n* [TextField](#textfield)\n* [TextView](#textview)\n* [SearchBar](#searchbar)\n* [Switch](#switch)\n* [Slider](#slider)\n* [Progress ](#progress)\n* [ActivityIndicator](#activityindicator)\n* [Image](#image)\n* [ListView](#listview)\n* [HtmlView](#htmlview)\n* [WebView](#webview)\n* [TabView](#tabview)\n* [SegmentedBar](#segmentedbar)\n* [DatePicker](#datepicker)\n* [TimePicker](#timepicker)\n* [ListPicker](#listpicker)\n* [Dialogs](#dialogs)\n\nDefining the layout of the application is also an important part of the application development. For more information about the different layout containers that are available in NativeScript, see [The NativeScript Layout System]({%slug layouts %}).\n\n> **TIP:** You can access the underlying native widget for each view at runtime using the following properties:\n>\n> * Android: `<view>.android`\n> * iOS: `<view>.ios`\n>\n> Accessing the native widgets might be useful when you want to use some platform-specific functionalities of the widget. You can find information about the underlying native component for each view below.\n\n## Button\n\nThe [Button]({%ns_cookbook ui/button%}) widget provides a standard button widget that reacts to a `tap` event.\n\n![button android](../docs/img/gallery/android/buttonPage.png \"button android\")![button ios](../docs/img/gallery/ios/buttonPage.png \"button ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.Button](http://developer.android.com/reference/android/widget/Button.html) | [UIButton](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/) |\n\n## Label\n\nThe [Label]({%ns_cookbook ui/label%}) widget provides a text label that shows read-only text.\n\n![label android](../docs/img/gallery/android/labelPage.png \"label android\")![label ios](../docs/img/gallery/ios/labelPage.png \"label ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.TextView](http://developer.android.com/reference/android/widget/TextView.html) | [UILabel](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILabel_Class/) |\n\n## TextField\n\nThe [TextField]({%ns_cookbook ui/text-field%}) widget provides an editable **single-line** text field.\n\n![text-field android](../docs/img/gallery/android/textFieldPage.png \"text-field android\")![text-field ios](../docs/img/gallery/ios/textFieldPage.png \"text-field ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.EditText](http://developer.android.com/reference/android/widget/EditText.html) | [UITextField](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextField_Class/) |\n\n## TextView\n\nThe [TextView]({%ns_cookbook ui/text-view%}) widget provides an editable **multi-line** text view. \n\nYou can use it to show multi-line text and implement text editing.\n\n![text-view android](../docs/img/gallery/android/textViewPage.png \"text-view android\")![text-view ios](../docs/img/gallery/ios/textViewPage.png \"text-view ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.EditText](http://developer.android.com/reference/android/widget/EditText.html) | [UITextView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextView_Class/) |\n\n## SearchBar\n\nThe [SearchBar]({%ns_cookbook ui/search-bar%}) widget provides a user interface for entering search queries and submitting requests to the search provider.\n\n![search-bar android](../docs/img/gallery/android/searchBarPage.png \"search-bar android\")![search-bar ios](../docs/img/gallery/ios/searchBarPage.png \"search-bar ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.SearchView](http://developer.android.com/reference/android/widget/SearchView.html) | [UISearchBar](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchBar_Class/) |\n\n## Switch\n\nThe [Switch]({%ns_cookbook ui/switch%}) widget provides a two-state toggle switch from which you can choose between two options.\n\n![switch android](../docs/img/gallery/android/switchPage.png \"switch android\")![switch ios](../docs/img/gallery/ios/switchPage.png \"switch ios\")\n\n**Native Component**\n\n| Android               | iOS      |\n|:----------------------|:---------|\n| [android.widget.Switch](http://developer.android.com/reference/android/widget/Switch.html) | [UISwitch](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISwitch_Class/) |\n\n## Slider\n\nThe [Slider]({%ns_cookbook ui/slider%}) widget provides a slider that you can use to pick a numeric value within a configurable range.\n\n![slider android](../docs/img/gallery/android/sliderPage.png \"slider android\")![slider ios](../docs/img/gallery/ios/sliderPage.png \"slider ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.SeekBar](http://developer.android.com/reference/android/widget/SeekBar.html) | [UISlider](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISlider_Class/) |\n\n## Progress\n\nThe [Progress]({%ns_cookbook ui/progress%}) widget is a visual bar indicator of a progress in a operation. It shows a bar representing the current progress of the operation.\n\n![progress android](../docs/img/gallery/android/progressPage.png \"progress android\")![progress ios](../docs/img/gallery/ios/progressPage.png \"progress ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.ProgressBar](http://developer.android.com/reference/android/widget/ProgressBar.html) (indeterminate = false) | [UIProgressView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIProgressView_Class/) |\n\n## ActivityIndicator\n\nThe [ActivityIndicator]({%ns_cookbook ui/activity-indicator%}) widget is a visual spinner indicator which shows that a task is in progress.\n\n![activity-indicator android](../docs/img/gallery/android/activityIndicatorPage.png \"activity-indicator android\")![activity-indicator ios](../docs/img/gallery/ios/activityIndicatorPage.png \"activity-indicator ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.ProgressBar](http://developer.android.com/reference/android/widget/ProgressBar.html) (indeterminate = true) | [UIActivityIndicatorView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActivityIndicatorView_Class/) |\n\n## Image\n\nThe [Image]({%ns_cookbook ui/image%}) widget shows an image. You can load the image from an [`ImageSource`](http://docs.nativescript.org/api-reference/modules/_image_source_.html) or from a URL.\n\n![image android](../docs/img/gallery/android/imagePage.png \"image android\")![image ios](../docs/img/gallery/ios/imagePage.png \"image ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.ImageView](http://developer.android.com/reference/android/widget/ImageView.html) | [UIImageView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImageView_Class/) |\n\n## ListView\n\nThe [ListView]({%ns_cookbook ui/list-view%}) shows items in a vertically scrolling list. You can set an [`itemTemplate`](api-reference/modules/_ui_list_view_.knowntemplates.html) to specify how each item in the list should be displayed.\n\n![list-view android](../docs/img/gallery/android/listViewPage.png \"list-view android\")![list-view ios](../docs/img/gallery/ios/listViewPage.png \"list-view ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.ListView](http://developer.android.com/reference/android/widget/ListView.html) | [UITableView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableView_Class/) |\n\n## HtmlView\n\nThe [HtmlView]({%ns_cookbook ui/html-view%}) represents a view with HTML content. Use this component instead of WebView when you want to show just static HTML content.\n\n![html-view android](../docs/img/gallery/android/htmlViewPage.png \"html-view android\")![html-view ios](../docs/img/gallery/ios/htmlViewPage.png \"html-view ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.TextView](http://developer.android.com/reference/android/widget/TextView.html) | [UILabel](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILabel_Class/) |\n\n## WebView\n\nThe [WebView]({%ns_cookbook ui/web-view%}) shows web pages. You can load a page from a URL or by navigating back and forward.\n\n![web-view android](../docs/img/gallery/android/webViewPage.png \"web-view android\")![web-view ios](../docs/img/gallery/ios/webViewPage.png \"web-view ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.webkit.WebView](http://developer.android.com/reference/android/webkit/WebView.html) | [UIWebView](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWebView_Class/) |\n\n## TabView\n\nWith the [TabView]({%ns_cookbook ui/tab-view%}) control, you can implement tab navigation.\n\n![tab-view android](../docs/img/gallery/android/tabViewPage.png \"tab-view android\")![tab-view ios](../docs/img/gallery/ios/tabViewPage.png \"tab-view ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.support.v4.view.ViewPager](http://developer.android.com/reference/android/support/v4/view/ViewPager.html) | [UITabBarController](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITabBarController_Class/) |\n\n## SegmentedBar\n\nWith the [SegmentedBar]({%ns_cookbook ui/segmented-bar%}) control, you can implement discrete selection.\n\n![segmented-bar android](../docs/img/gallery/android/segmentedBarPage.png \"segmented-bar android\")![segmented-bar ios](../docs/img/gallery/ios/segmentedBarPage.png \"segmented-bar ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.TabHost](http://developer.android.com/reference/android/widget/TabHost.html) | [UISegmentedControl](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UISegmentedControl_Class/index.html) |\n\n## DatePicker\n\nWith the [DatePicker]({%ns_cookbook ui/date-picker%}) control, you can pick a date.\n\n![date-picker android](../docs/img/gallery/android/datePickerPage.png \"date-picker android\")![date-picker ios](../docs/img/gallery/ios/datePickerPage.png \"date-picker ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.DatePicker](http://developer.android.com/reference/android/widget/DatePicker.html) | [UIDatePicker](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDatePicker_Class/index.html) |\n\n## TimePicker\n\nWith the [TimePicker]({%ns_cookbook ui/time-picker%}) widget, you can pick a time.\n\n![time-picker android](../docs/img/gallery/android/timePickerPage.png \"time-picker android\")![time-picker ios](../docs/img/gallery/ios/timePickerPage.png \"time-picker ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.TimePicker](http://developer.android.com/reference/android/widget/TimePicker.html) | [UIDatePicker](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDatePicker_Class/index.html) |\n\n## ListPicker\n\nWith the [ListPicker]({%ns_cookbook ui/list-picker%}) widget, you can pick a value from a list.\n\n![list-picker android](../docs/img/gallery/android/listPickerPage.png \"list-picker android\")![list-picker ios](../docs/img/gallery/ios/listPickerPage.png \"list-picker ios\")\n\n**Native Component**\n\n| Android                | iOS      |\n|:-----------------------|:---------|\n| [android.widget.NumberPicker](http://developer.android.com/reference/android/widget/NumberPicker.html) | [UIPickerView](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html) |\n\n## Dialogs\n\nThe [dialogs module]({%slug dialogs %}) lets you create and show dialog windows.\n\n![dialog-confirm android](../docs/img/gallery/android/dialogsPage_confirm.png \"dialog-confirm android\")![dialog-confirm ios](../docs/img/gallery/ios/dialogsPage_confirm.png \"dialog-confirm ios\")\n","date":"2016-08-26T21:05:54.628Z","updated":"2016-08-26T21:05:54.628Z","path":"ui/ui-views.html","comments":1,"layout":"page","_id":"cisn95cb00018wsl0s9r53bm5","content":"<h1 id=\"User-Interface-Widgets\"><a href=\"#User-Interface-Widgets\" class=\"headerlink\" title=\"User Interface Widgets\"></a>User Interface Widgets</h1><p>NativeScript ships with a set of user interface <a href=\"api-reference/modules/_ui_core_view_.html\"><code>views</code></a> (also known as widgets) which you can use to build the user interface of a mobile application. Most of these views wrap the corresponding native view for each platform while providing a common API for working with it. For example, the <code>Button</code> view renders an <a href=\"http://developer.android.com/reference/android/widget/Button.html\" target=\"_blank\" rel=\"external\"><code>android.widget.Button</code></a> on Android and <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/\" target=\"_blank\" rel=\"external\"><code>UIButton</code></a> on iOS.</p>\n<ul>\n<li><a href=\"#button\">Button</a></li>\n<li><a href=\"#label\">Label</a></li>\n<li><a href=\"#textfield\">TextField</a></li>\n<li><a href=\"#textview\">TextView</a></li>\n<li><a href=\"#searchbar\">SearchBar</a></li>\n<li><a href=\"#switch\">Switch</a></li>\n<li><a href=\"#slider\">Slider</a></li>\n<li><a href=\"#progress\">Progress </a></li>\n<li><a href=\"#activityindicator\">ActivityIndicator</a></li>\n<li><a href=\"#image\">Image</a></li>\n<li><a href=\"#listview\">ListView</a></li>\n<li><a href=\"#htmlview\">HtmlView</a></li>\n<li><a href=\"#webview\">WebView</a></li>\n<li><a href=\"#tabview\">TabView</a></li>\n<li><a href=\"#segmentedbar\">SegmentedBar</a></li>\n<li><a href=\"#datepicker\">DatePicker</a></li>\n<li><a href=\"#timepicker\">TimePicker</a></li>\n<li><a href=\"#listpicker\">ListPicker</a></li>\n<li><a href=\"#dialogs\">Dialogs</a></li>\n</ul>\n<p>Defining the layout of the application is also an important part of the application development. For more information about the different layout containers that are available in NativeScript, see <a href=\"!--￼0--\">The NativeScript Layout System</a>.</p>\n<blockquote>\n<p><strong>TIP:</strong> You can access the underlying native widget for each view at runtime using the following properties:</p>\n<ul>\n<li>Android: <code>&lt;view&gt;.android</code></li>\n<li>iOS: <code>&lt;view&gt;.ios</code></li>\n</ul>\n<p>Accessing the native widgets might be useful when you want to use some platform-specific functionalities of the widget. You can find information about the underlying native component for each view below.</p>\n</blockquote>\n<h2 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h2><p>The <a href=\"!--￼1--\">Button</a> widget provides a standard button widget that reacts to a <code>tap</code> event.</p>\n<p><img src=\"../docs/img/gallery/android/buttonPage.png\" alt=\"button android\" title=\"button android\"><img src=\"../docs/img/gallery/ios/buttonPage.png\" alt=\"button ios\" title=\"button ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/Button.html\" target=\"_blank\" rel=\"external\">android.widget.Button</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/\" target=\"_blank\" rel=\"external\">UIButton</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h2><p>The <a href=\"!--￼2--\">Label</a> widget provides a text label that shows read-only text.</p>\n<p><img src=\"../docs/img/gallery/android/labelPage.png\" alt=\"label android\" title=\"label android\"><img src=\"../docs/img/gallery/ios/labelPage.png\" alt=\"label ios\" title=\"label ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/TextView.html\" target=\"_blank\" rel=\"external\">android.widget.TextView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILabel_Class/\" target=\"_blank\" rel=\"external\">UILabel</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TextField\"><a href=\"#TextField\" class=\"headerlink\" title=\"TextField\"></a>TextField</h2><p>The <a href=\"!--￼3--\">TextField</a> widget provides an editable <strong>single-line</strong> text field.</p>\n<p><img src=\"../docs/img/gallery/android/textFieldPage.png\" alt=\"text-field android\" title=\"text-field android\"><img src=\"../docs/img/gallery/ios/textFieldPage.png\" alt=\"text-field ios\" title=\"text-field ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/EditText.html\" target=\"_blank\" rel=\"external\">android.widget.EditText</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextField_Class/\" target=\"_blank\" rel=\"external\">UITextField</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h2><p>The <a href=\"!--￼4--\">TextView</a> widget provides an editable <strong>multi-line</strong> text view. </p>\n<p>You can use it to show multi-line text and implement text editing.</p>\n<p><img src=\"../docs/img/gallery/android/textViewPage.png\" alt=\"text-view android\" title=\"text-view android\"><img src=\"../docs/img/gallery/ios/textViewPage.png\" alt=\"text-view ios\" title=\"text-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/EditText.html\" target=\"_blank\" rel=\"external\">android.widget.EditText</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextView_Class/\" target=\"_blank\" rel=\"external\">UITextView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"SearchBar\"><a href=\"#SearchBar\" class=\"headerlink\" title=\"SearchBar\"></a>SearchBar</h2><p>The <a href=\"!--￼5--\">SearchBar</a> widget provides a user interface for entering search queries and submitting requests to the search provider.</p>\n<p><img src=\"../docs/img/gallery/android/searchBarPage.png\" alt=\"search-bar android\" title=\"search-bar android\"><img src=\"../docs/img/gallery/ios/searchBarPage.png\" alt=\"search-bar ios\" title=\"search-bar ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/SearchView.html\" target=\"_blank\" rel=\"external\">android.widget.SearchView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchBar_Class/\" target=\"_blank\" rel=\"external\">UISearchBar</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h2><p>The <a href=\"!--￼6--\">Switch</a> widget provides a two-state toggle switch from which you can choose between two options.</p>\n<p><img src=\"../docs/img/gallery/android/switchPage.png\" alt=\"switch android\" title=\"switch android\"><img src=\"../docs/img/gallery/ios/switchPage.png\" alt=\"switch ios\" title=\"switch ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/Switch.html\" target=\"_blank\" rel=\"external\">android.widget.Switch</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISwitch_Class/\" target=\"_blank\" rel=\"external\">UISwitch</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Slider\"><a href=\"#Slider\" class=\"headerlink\" title=\"Slider\"></a>Slider</h2><p>The <a href=\"!--￼7--\">Slider</a> widget provides a slider that you can use to pick a numeric value within a configurable range.</p>\n<p><img src=\"../docs/img/gallery/android/sliderPage.png\" alt=\"slider android\" title=\"slider android\"><img src=\"../docs/img/gallery/ios/sliderPage.png\" alt=\"slider ios\" title=\"slider ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/SeekBar.html\" target=\"_blank\" rel=\"external\">android.widget.SeekBar</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISlider_Class/\" target=\"_blank\" rel=\"external\">UISlider</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Progress\"><a href=\"#Progress\" class=\"headerlink\" title=\"Progress\"></a>Progress</h2><p>The <a href=\"!--￼8--\">Progress</a> widget is a visual bar indicator of a progress in a operation. It shows a bar representing the current progress of the operation.</p>\n<p><img src=\"../docs/img/gallery/android/progressPage.png\" alt=\"progress android\" title=\"progress android\"><img src=\"../docs/img/gallery/ios/progressPage.png\" alt=\"progress ios\" title=\"progress ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/ProgressBar.html\" target=\"_blank\" rel=\"external\">android.widget.ProgressBar</a> (indeterminate = false)</td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIProgressView_Class/\" target=\"_blank\" rel=\"external\">UIProgressView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ActivityIndicator\"><a href=\"#ActivityIndicator\" class=\"headerlink\" title=\"ActivityIndicator\"></a>ActivityIndicator</h2><p>The <a href=\"!--￼9--\">ActivityIndicator</a> widget is a visual spinner indicator which shows that a task is in progress.</p>\n<p><img src=\"../docs/img/gallery/android/activityIndicatorPage.png\" alt=\"activity-indicator android\" title=\"activity-indicator android\"><img src=\"../docs/img/gallery/ios/activityIndicatorPage.png\" alt=\"activity-indicator ios\" title=\"activity-indicator ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/ProgressBar.html\" target=\"_blank\" rel=\"external\">android.widget.ProgressBar</a> (indeterminate = true)</td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActivityIndicatorView_Class/\" target=\"_blank\" rel=\"external\">UIActivityIndicatorView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h2><p>The <a href=\"!--￼10--\">Image</a> widget shows an image. You can load the image from an <a href=\"http://docs.nativescript.org/api-reference/modules/_image_source_.html\"><code>ImageSource</code></a> or from a URL.</p>\n<p><img src=\"../docs/img/gallery/android/imagePage.png\" alt=\"image android\" title=\"image android\"><img src=\"../docs/img/gallery/ios/imagePage.png\" alt=\"image ios\" title=\"image ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/ImageView.html\" target=\"_blank\" rel=\"external\">android.widget.ImageView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImageView_Class/\" target=\"_blank\" rel=\"external\">UIImageView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h2><p>The <a href=\"!--￼11--\">ListView</a> shows items in a vertically scrolling list. You can set an <a href=\"api-reference/modules/_ui_list_view_.knowntemplates.html\"><code>itemTemplate</code></a> to specify how each item in the list should be displayed.</p>\n<p><img src=\"../docs/img/gallery/android/listViewPage.png\" alt=\"list-view android\" title=\"list-view android\"><img src=\"../docs/img/gallery/ios/listViewPage.png\" alt=\"list-view ios\" title=\"list-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/ListView.html\" target=\"_blank\" rel=\"external\">android.widget.ListView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableView_Class/\" target=\"_blank\" rel=\"external\">UITableView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HtmlView\"><a href=\"#HtmlView\" class=\"headerlink\" title=\"HtmlView\"></a>HtmlView</h2><p>The <a href=\"!--￼12--\">HtmlView</a> represents a view with HTML content. Use this component instead of WebView when you want to show just static HTML content.</p>\n<p><img src=\"../docs/img/gallery/android/htmlViewPage.png\" alt=\"html-view android\" title=\"html-view android\"><img src=\"../docs/img/gallery/ios/htmlViewPage.png\" alt=\"html-view ios\" title=\"html-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/TextView.html\" target=\"_blank\" rel=\"external\">android.widget.TextView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILabel_Class/\" target=\"_blank\" rel=\"external\">UILabel</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h2><p>The <a href=\"!--￼13--\">WebView</a> shows web pages. You can load a page from a URL or by navigating back and forward.</p>\n<p><img src=\"../docs/img/gallery/android/webViewPage.png\" alt=\"web-view android\" title=\"web-view android\"><img src=\"../docs/img/gallery/ios/webViewPage.png\" alt=\"web-view ios\" title=\"web-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/webkit/WebView.html\" target=\"_blank\" rel=\"external\">android.webkit.WebView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWebView_Class/\" target=\"_blank\" rel=\"external\">UIWebView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TabView\"><a href=\"#TabView\" class=\"headerlink\" title=\"TabView\"></a>TabView</h2><p>With the <a href=\"!--￼14--\">TabView</a> control, you can implement tab navigation.</p>\n<p><img src=\"../docs/img/gallery/android/tabViewPage.png\" alt=\"tab-view android\" title=\"tab-view android\"><img src=\"../docs/img/gallery/ios/tabViewPage.png\" alt=\"tab-view ios\" title=\"tab-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/support/v4/view/ViewPager.html\" target=\"_blank\" rel=\"external\">android.support.v4.view.ViewPager</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITabBarController_Class/\" target=\"_blank\" rel=\"external\">UITabBarController</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"SegmentedBar\"><a href=\"#SegmentedBar\" class=\"headerlink\" title=\"SegmentedBar\"></a>SegmentedBar</h2><p>With the <a href=\"!--￼15--\">SegmentedBar</a> control, you can implement discrete selection.</p>\n<p><img src=\"../docs/img/gallery/android/segmentedBarPage.png\" alt=\"segmented-bar android\" title=\"segmented-bar android\"><img src=\"../docs/img/gallery/ios/segmentedBarPage.png\" alt=\"segmented-bar ios\" title=\"segmented-bar ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/TabHost.html\" target=\"_blank\" rel=\"external\">android.widget.TabHost</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UISegmentedControl_Class/index.html\" target=\"_blank\" rel=\"external\">UISegmentedControl</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"DatePicker\"><a href=\"#DatePicker\" class=\"headerlink\" title=\"DatePicker\"></a>DatePicker</h2><p>With the <a href=\"!--￼16--\">DatePicker</a> control, you can pick a date.</p>\n<p><img src=\"../docs/img/gallery/android/datePickerPage.png\" alt=\"date-picker android\" title=\"date-picker android\"><img src=\"../docs/img/gallery/ios/datePickerPage.png\" alt=\"date-picker ios\" title=\"date-picker ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/DatePicker.html\" target=\"_blank\" rel=\"external\">android.widget.DatePicker</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDatePicker_Class/index.html\" target=\"_blank\" rel=\"external\">UIDatePicker</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TimePicker\"><a href=\"#TimePicker\" class=\"headerlink\" title=\"TimePicker\"></a>TimePicker</h2><p>With the <a href=\"!--￼17--\">TimePicker</a> widget, you can pick a time.</p>\n<p><img src=\"../docs/img/gallery/android/timePickerPage.png\" alt=\"time-picker android\" title=\"time-picker android\"><img src=\"../docs/img/gallery/ios/timePickerPage.png\" alt=\"time-picker ios\" title=\"time-picker ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/TimePicker.html\" target=\"_blank\" rel=\"external\">android.widget.TimePicker</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDatePicker_Class/index.html\" target=\"_blank\" rel=\"external\">UIDatePicker</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ListPicker\"><a href=\"#ListPicker\" class=\"headerlink\" title=\"ListPicker\"></a>ListPicker</h2><p>With the <a href=\"!--￼18--\">ListPicker</a> widget, you can pick a value from a list.</p>\n<p><img src=\"../docs/img/gallery/android/listPickerPage.png\" alt=\"list-picker android\" title=\"list-picker android\"><img src=\"../docs/img/gallery/ios/listPickerPage.png\" alt=\"list-picker ios\" title=\"list-picker ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/NumberPicker.html\" target=\"_blank\" rel=\"external\">android.widget.NumberPicker</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html\" target=\"_blank\" rel=\"external\">UIPickerView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Dialogs\"><a href=\"#Dialogs\" class=\"headerlink\" title=\"Dialogs\"></a>Dialogs</h2><p>The <a href=\"!--￼19--\">dialogs module</a> lets you create and show dialog windows.</p>\n<p><img src=\"../docs/img/gallery/android/dialogsPage_confirm.png\" alt=\"dialog-confirm android\" title=\"dialog-confirm android\"><img src=\"../docs/img/gallery/ios/dialogsPage_confirm.png\" alt=\"dialog-confirm ios\" title=\"dialog-confirm ios\"></p>\n","excerpt":"","more":"<h1 id=\"User-Interface-Widgets\"><a href=\"#User-Interface-Widgets\" class=\"headerlink\" title=\"User Interface Widgets\"></a>User Interface Widgets</h1><p>NativeScript ships with a set of user interface <a href=\"api-reference/modules/_ui_core_view_.html\"><code>views</code></a> (also known as widgets) which you can use to build the user interface of a mobile application. Most of these views wrap the corresponding native view for each platform while providing a common API for working with it. For example, the <code>Button</code> view renders an <a href=\"http://developer.android.com/reference/android/widget/Button.html\"><code>android.widget.Button</code></a> on Android and <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/\"><code>UIButton</code></a> on iOS.</p>\n<ul>\n<li><a href=\"#button\">Button</a></li>\n<li><a href=\"#label\">Label</a></li>\n<li><a href=\"#textfield\">TextField</a></li>\n<li><a href=\"#textview\">TextView</a></li>\n<li><a href=\"#searchbar\">SearchBar</a></li>\n<li><a href=\"#switch\">Switch</a></li>\n<li><a href=\"#slider\">Slider</a></li>\n<li><a href=\"#progress\">Progress </a></li>\n<li><a href=\"#activityindicator\">ActivityIndicator</a></li>\n<li><a href=\"#image\">Image</a></li>\n<li><a href=\"#listview\">ListView</a></li>\n<li><a href=\"#htmlview\">HtmlView</a></li>\n<li><a href=\"#webview\">WebView</a></li>\n<li><a href=\"#tabview\">TabView</a></li>\n<li><a href=\"#segmentedbar\">SegmentedBar</a></li>\n<li><a href=\"#datepicker\">DatePicker</a></li>\n<li><a href=\"#timepicker\">TimePicker</a></li>\n<li><a href=\"#listpicker\">ListPicker</a></li>\n<li><a href=\"#dialogs\">Dialogs</a></li>\n</ul>\n<p>Defining the layout of the application is also an important part of the application development. For more information about the different layout containers that are available in NativeScript, see <a href=\"!--￼0--\">The NativeScript Layout System</a>.</p>\n<blockquote>\n<p><strong>TIP:</strong> You can access the underlying native widget for each view at runtime using the following properties:</p>\n<ul>\n<li>Android: <code>&lt;view&gt;.android</code></li>\n<li>iOS: <code>&lt;view&gt;.ios</code></li>\n</ul>\n<p>Accessing the native widgets might be useful when you want to use some platform-specific functionalities of the widget. You can find information about the underlying native component for each view below.</p>\n</blockquote>\n<h2 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h2><p>The <a href=\"!--￼1--\">Button</a> widget provides a standard button widget that reacts to a <code>tap</code> event.</p>\n<p><img src=\"../docs/img/gallery/android/buttonPage.png\" alt=\"button android\" title=\"button android\"><img src=\"../docs/img/gallery/ios/buttonPage.png\" alt=\"button ios\" title=\"button ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/Button.html\">android.widget.Button</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/\">UIButton</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h2><p>The <a href=\"!--￼2--\">Label</a> widget provides a text label that shows read-only text.</p>\n<p><img src=\"../docs/img/gallery/android/labelPage.png\" alt=\"label android\" title=\"label android\"><img src=\"../docs/img/gallery/ios/labelPage.png\" alt=\"label ios\" title=\"label ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/TextView.html\">android.widget.TextView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILabel_Class/\">UILabel</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TextField\"><a href=\"#TextField\" class=\"headerlink\" title=\"TextField\"></a>TextField</h2><p>The <a href=\"!--￼3--\">TextField</a> widget provides an editable <strong>single-line</strong> text field.</p>\n<p><img src=\"../docs/img/gallery/android/textFieldPage.png\" alt=\"text-field android\" title=\"text-field android\"><img src=\"../docs/img/gallery/ios/textFieldPage.png\" alt=\"text-field ios\" title=\"text-field ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/EditText.html\">android.widget.EditText</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextField_Class/\">UITextField</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h2><p>The <a href=\"!--￼4--\">TextView</a> widget provides an editable <strong>multi-line</strong> text view. </p>\n<p>You can use it to show multi-line text and implement text editing.</p>\n<p><img src=\"../docs/img/gallery/android/textViewPage.png\" alt=\"text-view android\" title=\"text-view android\"><img src=\"../docs/img/gallery/ios/textViewPage.png\" alt=\"text-view ios\" title=\"text-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/EditText.html\">android.widget.EditText</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextView_Class/\">UITextView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"SearchBar\"><a href=\"#SearchBar\" class=\"headerlink\" title=\"SearchBar\"></a>SearchBar</h2><p>The <a href=\"!--￼5--\">SearchBar</a> widget provides a user interface for entering search queries and submitting requests to the search provider.</p>\n<p><img src=\"../docs/img/gallery/android/searchBarPage.png\" alt=\"search-bar android\" title=\"search-bar android\"><img src=\"../docs/img/gallery/ios/searchBarPage.png\" alt=\"search-bar ios\" title=\"search-bar ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/SearchView.html\">android.widget.SearchView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchBar_Class/\">UISearchBar</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h2><p>The <a href=\"!--￼6--\">Switch</a> widget provides a two-state toggle switch from which you can choose between two options.</p>\n<p><img src=\"../docs/img/gallery/android/switchPage.png\" alt=\"switch android\" title=\"switch android\"><img src=\"../docs/img/gallery/ios/switchPage.png\" alt=\"switch ios\" title=\"switch ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/Switch.html\">android.widget.Switch</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISwitch_Class/\">UISwitch</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Slider\"><a href=\"#Slider\" class=\"headerlink\" title=\"Slider\"></a>Slider</h2><p>The <a href=\"!--￼7--\">Slider</a> widget provides a slider that you can use to pick a numeric value within a configurable range.</p>\n<p><img src=\"../docs/img/gallery/android/sliderPage.png\" alt=\"slider android\" title=\"slider android\"><img src=\"../docs/img/gallery/ios/sliderPage.png\" alt=\"slider ios\" title=\"slider ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/SeekBar.html\">android.widget.SeekBar</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISlider_Class/\">UISlider</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Progress\"><a href=\"#Progress\" class=\"headerlink\" title=\"Progress\"></a>Progress</h2><p>The <a href=\"!--￼8--\">Progress</a> widget is a visual bar indicator of a progress in a operation. It shows a bar representing the current progress of the operation.</p>\n<p><img src=\"../docs/img/gallery/android/progressPage.png\" alt=\"progress android\" title=\"progress android\"><img src=\"../docs/img/gallery/ios/progressPage.png\" alt=\"progress ios\" title=\"progress ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/ProgressBar.html\">android.widget.ProgressBar</a> (indeterminate = false)</td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIProgressView_Class/\">UIProgressView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ActivityIndicator\"><a href=\"#ActivityIndicator\" class=\"headerlink\" title=\"ActivityIndicator\"></a>ActivityIndicator</h2><p>The <a href=\"!--￼9--\">ActivityIndicator</a> widget is a visual spinner indicator which shows that a task is in progress.</p>\n<p><img src=\"../docs/img/gallery/android/activityIndicatorPage.png\" alt=\"activity-indicator android\" title=\"activity-indicator android\"><img src=\"../docs/img/gallery/ios/activityIndicatorPage.png\" alt=\"activity-indicator ios\" title=\"activity-indicator ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/ProgressBar.html\">android.widget.ProgressBar</a> (indeterminate = true)</td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActivityIndicatorView_Class/\">UIActivityIndicatorView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h2><p>The <a href=\"!--￼10--\">Image</a> widget shows an image. You can load the image from an <a href=\"http://docs.nativescript.org/api-reference/modules/_image_source_.html\"><code>ImageSource</code></a> or from a URL.</p>\n<p><img src=\"../docs/img/gallery/android/imagePage.png\" alt=\"image android\" title=\"image android\"><img src=\"../docs/img/gallery/ios/imagePage.png\" alt=\"image ios\" title=\"image ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/ImageView.html\">android.widget.ImageView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImageView_Class/\">UIImageView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h2><p>The <a href=\"!--￼11--\">ListView</a> shows items in a vertically scrolling list. You can set an <a href=\"api-reference/modules/_ui_list_view_.knowntemplates.html\"><code>itemTemplate</code></a> to specify how each item in the list should be displayed.</p>\n<p><img src=\"../docs/img/gallery/android/listViewPage.png\" alt=\"list-view android\" title=\"list-view android\"><img src=\"../docs/img/gallery/ios/listViewPage.png\" alt=\"list-view ios\" title=\"list-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/ListView.html\">android.widget.ListView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableView_Class/\">UITableView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HtmlView\"><a href=\"#HtmlView\" class=\"headerlink\" title=\"HtmlView\"></a>HtmlView</h2><p>The <a href=\"!--￼12--\">HtmlView</a> represents a view with HTML content. Use this component instead of WebView when you want to show just static HTML content.</p>\n<p><img src=\"../docs/img/gallery/android/htmlViewPage.png\" alt=\"html-view android\" title=\"html-view android\"><img src=\"../docs/img/gallery/ios/htmlViewPage.png\" alt=\"html-view ios\" title=\"html-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/TextView.html\">android.widget.TextView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILabel_Class/\">UILabel</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h2><p>The <a href=\"!--￼13--\">WebView</a> shows web pages. You can load a page from a URL or by navigating back and forward.</p>\n<p><img src=\"../docs/img/gallery/android/webViewPage.png\" alt=\"web-view android\" title=\"web-view android\"><img src=\"../docs/img/gallery/ios/webViewPage.png\" alt=\"web-view ios\" title=\"web-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/webkit/WebView.html\">android.webkit.WebView</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWebView_Class/\">UIWebView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TabView\"><a href=\"#TabView\" class=\"headerlink\" title=\"TabView\"></a>TabView</h2><p>With the <a href=\"!--￼14--\">TabView</a> control, you can implement tab navigation.</p>\n<p><img src=\"../docs/img/gallery/android/tabViewPage.png\" alt=\"tab-view android\" title=\"tab-view android\"><img src=\"../docs/img/gallery/ios/tabViewPage.png\" alt=\"tab-view ios\" title=\"tab-view ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/support/v4/view/ViewPager.html\">android.support.v4.view.ViewPager</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITabBarController_Class/\">UITabBarController</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"SegmentedBar\"><a href=\"#SegmentedBar\" class=\"headerlink\" title=\"SegmentedBar\"></a>SegmentedBar</h2><p>With the <a href=\"!--￼15--\">SegmentedBar</a> control, you can implement discrete selection.</p>\n<p><img src=\"../docs/img/gallery/android/segmentedBarPage.png\" alt=\"segmented-bar android\" title=\"segmented-bar android\"><img src=\"../docs/img/gallery/ios/segmentedBarPage.png\" alt=\"segmented-bar ios\" title=\"segmented-bar ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/TabHost.html\">android.widget.TabHost</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UISegmentedControl_Class/index.html\">UISegmentedControl</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"DatePicker\"><a href=\"#DatePicker\" class=\"headerlink\" title=\"DatePicker\"></a>DatePicker</h2><p>With the <a href=\"!--￼16--\">DatePicker</a> control, you can pick a date.</p>\n<p><img src=\"../docs/img/gallery/android/datePickerPage.png\" alt=\"date-picker android\" title=\"date-picker android\"><img src=\"../docs/img/gallery/ios/datePickerPage.png\" alt=\"date-picker ios\" title=\"date-picker ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/DatePicker.html\">android.widget.DatePicker</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDatePicker_Class/index.html\">UIDatePicker</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TimePicker\"><a href=\"#TimePicker\" class=\"headerlink\" title=\"TimePicker\"></a>TimePicker</h2><p>With the <a href=\"!--￼17--\">TimePicker</a> widget, you can pick a time.</p>\n<p><img src=\"../docs/img/gallery/android/timePickerPage.png\" alt=\"time-picker android\" title=\"time-picker android\"><img src=\"../docs/img/gallery/ios/timePickerPage.png\" alt=\"time-picker ios\" title=\"time-picker ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/TimePicker.html\">android.widget.TimePicker</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDatePicker_Class/index.html\">UIDatePicker</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ListPicker\"><a href=\"#ListPicker\" class=\"headerlink\" title=\"ListPicker\"></a>ListPicker</h2><p>With the <a href=\"!--￼18--\">ListPicker</a> widget, you can pick a value from a list.</p>\n<p><img src=\"../docs/img/gallery/android/listPickerPage.png\" alt=\"list-picker android\" title=\"list-picker android\"><img src=\"../docs/img/gallery/ios/listPickerPage.png\" alt=\"list-picker ios\" title=\"list-picker ios\"></p>\n<p><strong>Native Component</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Android</th>\n<th style=\"text-align:left\">iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://developer.android.com/reference/android/widget/NumberPicker.html\">android.widget.NumberPicker</a></td>\n<td style=\"text-align:left\"><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html\">UIPickerView</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Dialogs\"><a href=\"#Dialogs\" class=\"headerlink\" title=\"Dialogs\"></a>Dialogs</h2><p>The <a href=\"!--￼19--\">dialogs module</a> lets you create and show dialog windows.</p>\n<p><img src=\"../docs/img/gallery/android/dialogsPage_confirm.png\" alt=\"dialog-confirm android\" title=\"dialog-confirm android\"><img src=\"../docs/img/gallery/ios/dialogsPage_confirm.png\" alt=\"dialog-confirm ios\" title=\"dialog-confirm ios\"></p>\n"},{"title":"The Basics","description":"Learn the basic principles of designing a user interface with NativeScript. In NativeScript, you can design the UI using XML and CSS.","position":1,"slug":"ui-basics","previous_url":"/ui-with-xml","environment":"nativescript","_content":"\n# The User Interface\n\nThe user interface of NativeScript mobile apps consists of pages. Typically, the design of the user interface is developed and stored in `XML` files, styling is done via CSS and the business logic is developed and stored in `JavaScript` or `TypeScript` files. \n\n* [The basics](#the-basics)\n  * [Declare the home page](#declare-the-home-page)\n  * [Navigate to a page](#navigate-to-a-page)\n  * [Execute business logic](#execute-business-logic)\n* [User interface components](#user-interface-components)\n  * [The default content components](#the-default-content-components)\n  * [Custom components](#custom-components)\n* [Bindings](#bindings)\n  * [Property binding](#property-binding)\n  * [Event binding](#event-binding)\n  * [ListView binding](#listview-binding)\n  * [Expressions](#expressions)\n* [Platform-specific declarations](#platform-specific-declarations)\n  * [Platform-specific property value](#platform-specific-property-value)\n  * [Platform-specific component declaration](#platform-specific-component-declaration)\n* [Lower-case-dashed component declaration](#lower-case-dashed-component-declaration)\n\n## The basics\n\nWhen you develop the user interface of your app, you can implement each application screen in a separate page or implement your application screens on a single page with a tab view. \n\nFor each page, you need to have a separate `XML` file that holds the layout of the page. For each `XML` file that NativeScript parses, the framework also looks for a `JavaScript` or `TypeScript` file with the same name and executes the business logic inside it. \n\n### Declare the home page\n\nEach NativeScript app must have a home page&mdash;the page that loads when you launch the app.\n\nYou need to explicitly set the home page for your app. You can do this by calling the `start()` method of the [`Application`](http://docs.nativescript.org/api-reference/modules/_application_.html) module and pass `NavigationEntry` with the desired `moduleName`.\n\nThe NativeScript navigation framework looks for an `XML` file with the specified name, loads it and navigates to the respective page. If NativeScript discovers a `JavaScript` or `TypeScript` file with the same name, it executes the code inside it.\n\n```JavaScript\nvar application = require(\"application\");\n// Start the application. Don't place any code after this line.\napplication.start({ moduleName: \"my-page\" });\n```\n```TypeScript\nimport application = require(\"application\");\n// Start the application. Don't place any code after this line.\napplication.start({ moduleName: \"my-page\" });\n```\n\n### Navigate to a page\n\nYou can navigate between pages with the `navigate` method of the [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) class. The [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) class represents the logical unit that is responsible for navigation between different pages. Typically, each app has one frame at the root level&mdash;the topmost frame.\n\nWhen you trigger navigation, NativeScript looks for an `XML` file with the specified name, loads it and navigates to the respective page. If NativeScript discovers a `JavaScript` or `TypeScript` file with the same name, it executes the code inside it.\n\n```JavaScript\n// To import the \"ui/frame\" module:\nvar frames = require(\"ui/frame\");\n// Navigate to page called “my-page”\nframes.topmost().navigate(\"my-page\");\n```\n```TypeScript\n// To import the \"ui/frame\" module:\nimport frames = require(\"ui/frame\");\n// Navigate to page called “my-page”\nframes.topmost().navigate(\"my-page\");\n```\n\n> Paths are relative to the application root. In the example above, NativeScript looks for a `my-page.xml` file in the app directory of your project.\n\n### Execute business logic\n\nWhen you have a `JavaScript` or a `TypeScript` file in the same location with the same name as your `XML` file, NativeScript loads it together with the `XML` file. In this `JavaScript` or `TypeScript` file you can manage event handlers, bind context or execute additional business logic.\n\n#### Example\n\nIn this example of `main-page.xml`, your page consists of a button. When you tap the button, the `buttonTap` function is triggered.  \n\n```XML\n<Page>\n  <StackLayout>\n     <Label id=\"Label1\" text=\"This is Label!\" />\n     <Button text=\"This is Button!\" tap=\"buttonTap\" />\n   </StackLayout>\n</Page>\n```\n\nThis example app is a simple counter app. The logic for the counter is implemented in a `main-page.js` or `main-page.ts` file.\n\n```JavaScript\nvar view = require(\"ui/core/view\");\nvar count = 0;\nfunction buttonTap(args) {\n    count++;\n    var sender = args.object;\n    var parent = sender.parent;\n    if (parent) {\n        var lbl = view.getViewById(parent, \"Label1\");\n        if (lbl) {\n            lbl.text = \"You tapped \" + count + \" times!\";\n        }\n    }\n}\nexports.buttonTap = buttonTap;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport view = require(\"ui/core/view\");\nimport label = require(\"ui/label\");\n\nvar count = 0;\nexport function buttonTap(args: observable.EventData) {\n    count++;\n    var sender = <view.View>args.object;\n    var parent = sender.parent;\n    if (parent) {\n        var lbl = <label.Label>view.getViewById(parent, \"Label1\");\n        if (lbl) {\n            lbl.text = \"You tapped \" + count + \" times!\";\n        }\n    }\n}\n```\nTo access variables or functions from the user interface, you need to declare them in the `exports` object in the module.\n\nNativeScript sets each attribute value in the XML declaration to a respective property or an event of the component. If a respective property does not exist, NativeScript sets the attribute value as an expando object.\n\nStarting with NativeScript 1.3 you can specify code and CSS files for your Page XML using `codeFile` and `cssFile` attributes:\n```XML\n<Page codeFile=\"~/your-code-file\" cssFile=\"~/your-styles.css\">\n    <StackLayout>\n     ...\n    </StackLayout>\n</Page>\n```\n\n## User interface components\n\nNativeScript provides a wide range of built-in user interface components:mdash;layouts and widgets. You can also create your own custom user interface components. \n\nWhen NativeScript parses your `XML` files, it looks for components that match a name in the module exports.\n\nFor example, when you have a `Button` declaration in your `XML` file, NativeScript looks for a `Button` name in the module exports.\n\n```JavaScript\nvar Button = ...\n    ...\nexports.Button = Button;\n```\n\n### The default content components\n\nThe top-level user interface components are content components:mdash;pages and layouts. These content components let you arrange your interactive user interface components in specific ways.\n\n#### Page\n\nYour application pages (or screens) are instances of the [`page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) class of the [`Page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) module. Typically, an app will consist of multiple application screens.\n\n##### Example\n\nYou can execute some business logic when your page loads using the `pageLoaded` event.\n\nYou need to set the `loaded` attribute for your page in your `main-page.xml`.\n\n```XML\n<Page loaded=\"pageLoaded\">\n …\n</Page>\n```\n\nYou need to handle the business logic that loads in a `main-page.js` or `main-page.ts` file.\n\n```JavaScript\nfunction pageLoaded(args) {\n    var page = args.object;\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\n\n// Event handler for Page \"loaded\" event attached in main-page.xml\nexport function pageLoaded(args: observable.EventData) {\n    // Get the event sender\n    var page = <pages.Page>args.object;\n}\n```\n\n#### TabView \n\nWith a [`tabview`](http://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabview.html), you can avoid spreading your user interface across multiple pages. Instead, you can have one page with multiple tabs.\n\n##### Example\n\nThe following sample `main-page.xml` contains two tabs with labels.\n\n```XML\n<Page loaded=\"pageLoaded\">\n  <TabView id=\"tabView1\">\n    <TabView.items>\n      <TabViewItem title=\"Tab 1\">\n        <TabViewItem.view>\n          <Label text=\"This is Label in Tab 1\" />\n        </TabViewItem.view>\n      </TabViewItem>\n      <TabViewItem title=\"Tab 2\">\n        <TabViewItem.view>\n          <Label text=\"This is Label in Tab 2\" />\n        </TabViewItem.view>\n      </TabViewItem>\n    </TabView.items>\n  </TabView>\n</Page>\n```\n\nThe respective `main-page.js` or `main-page.ts` loads the first tab by its ID and shows its contents.\n\n```JavaScript\nvar view = require(\"ui/core/view\");\nfunction pageLoaded(args) {\n    var page = args.object;\n    var tabView1 = view.getViewById(page, \"tabView1\");\n    tabView1.selectedIndex = 1;\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport view = require(\"ui/core/view\");\nimport pages = require(\"ui/page\");\nimport tab = require(\"ui/tab-view\");\n\n// Event handler for Page \"loaded\" event attached in main-page.xml\nexport function pageLoaded(args: observable.EventData) {\n    // Get the event sender\n    var page = <pages.Page>args.object;\n    var tabView1 = <tab.TabView>view.getViewById(page, \"tabView1\");\n    tabView1.selectedIndex = 1;\n}\n```\n\n#### ScrollView\n\nYou can insert a [`scrollView`](http://docs.nativescript.org/api-reference/classes/_ui_scroll_view_.scrollview.html) inside your page to make the page or the content enclosed in the `scrollView` scrollable.\n\n##### Example\n\nThis sample `main-page.xml` shows how to insert a `scrollView` inside your page.\n\n```XML\n<Page>\n  <ScrollView>\n\t…\n  </ScrollView>\n</Page>\n```\n\n#### StackLayout\n\nYou can arrange the user interface components in your page in a horizontal or vertical stack using [`stackLayout`](http://docs.nativescript.org/api-reference/classes/_ui_layouts_stack_layout_.stacklayout.html).\n\n##### Example\n\nThis sample `main-page.xml` shows how to arrange the labels in a page in a horizontal stack.\n\n```XML\n<Page>\n  <StackLayout orientation=\"horizontal\">\n    <Label text=\"This is Label 1\" />\n    <Label text=\"This is Label 2\" />\n  </StackLayout>\n</Page>\n```\n\n#### GridLayout\n\nYou can arrange the user interface components in your page in a flexible grid area using [`gridLayout`](http://docs.nativescript.org/api-reference/classes/_ui_layouts_grid_layout_.gridlayout.html).\n\n##### Example\n\nThis sample `main-page.xml` shows how to arrange labels inside a table by setting their position by row or column.\n\n```XML\n<Page>\n  <GridLayout rows=\"*, auto\" columns=\"250, *\">\n    <Label text=\"This is Label in row 0, col 0\" />\n    <Label text=\"This is Label in row 0, col 1\" col=\"1\" />\n    <Label text=\"This is Label in row 1, col 0\" row=\"1\" />\n    <Label text=\"This is Label in row 1, col 1\" row=\"1\" col=\"1\" />\n    <Label text=\"This is Label in row 0, col 0\" rowSpan=\"2\" colSpan=\"2\" />\n  </GridLayout>\n</Page>\n```\n\n#### WrapLayout\n\nYou can arrange your user interface components in rows or columns until the space is filled and then wrap them on a new row or column using [`wrapLayout`](http://docs.nativescript.org/api-reference/classes/_ui_layouts_wrap_layout_.wraplayout.html). By default, if orientation is not specified, `wrapLayout` arranges items horizontally.\n\n##### Example\n\nThis sample `main-page.xml` provides four labels wrapped horizontally within the visible space of the page.\n\n```XML\n<Page>\n  <WrapLayout>\n    <Label text=\"This is Label 1\" />\n    <Label text=\"This is Label 2\" />\n    <Label text=\"This is Label 3\" />\n    <Label text=\"This is Label 4\" />\n  </WrapLayout>\n</Page>\n```\n\n#### AbsoluteLayout\n\nYou can arrange your user interface components by left/top coordinates using [`absoluteLayout`](http://docs.nativescript.org/api-reference/classes/_ui_layouts_absolute_layout_.absolutelayout.html).\n\n##### Example\n\nThe following `main-page.xml` contains a page with a single label positioned at the specified coordinates.\n\n```XML\n<Page>\n  <AbsoluteLayout>\n    <Label text=\"This is Label 1\" left=\"30\" top=\"70\" />\n  </AbsoluteLayout>\n</Page>\n```\n\n### Custom components\n\nYou can define your own XML namespaces to create custom user interface components.\n\n#### Code-only custom component\n\nThis sample `main-page.xml` is using a custom component defined in separate declarations in the `xml-declaration/mymodule` directory. \n\n```XML\n<Page\n    xmlns:customControls=\"xml-declaration/mymodule\">\n  <customControls:MyControl />\n</Page>\n```\n\nThis sample custom component declared in `xml-declaration/mymodule.js` or `xml-declaration/mymodule.ts` exports the `MyControl` variable, which creates a simple counter inside your `main-page.xml` page.\n\n```JavaScript\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar stackLayout = require(\"ui/layouts/stack-layout\");\nvar label = require(\"ui/label\");\nvar button = require(\"ui/button\");\nvar MyControl = (function (_super) {\n    __extends(MyControl, _super);\n    function MyControl() {\n        _super.call(this);\n        var counter = 0;\n        var lbl = new label.Label();\n        var btn = new button.Button();\n        btn.text = \"Tap me!\";\n        btn.on(button.Button.tapEvent, function (args) {\n            lbl.text = \"Tap \" + counter++;\n        });\n        this.addChild(lbl);\n        this.addChild(btn);\n    }\n    return MyControl;\n})(stackLayout.StackLayout);\nexports.MyControl = MyControl;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport stackLayout = require(\"ui/layouts/stack-layout\");\nimport label = require(\"ui/label\");\nimport button = require(\"ui/button\");\n\nexport class MyControl extends stackLayout.StackLayout {\n    constructor() {\n        super();\n\n        var counter: number = 0;\n\n        var lbl = new label.Label();\n        var btn = new button.Button();\n        btn.text = \"Tap me!\";\n        btn.on(button.Button.tapEvent, (args: observable.EventData) => {\n            lbl.text = \"Tap \" + counter++;\n        });\n\n        this.addChild(lbl);\n        this.addChild(btn);\n    }\n}\n```\n\nWhen referring to code-only components in your pages with an `xmlns` declaration, you should point it either to the code file with the component implementation or to the folder containing the files. In the latter case, you will have to add a `package.json` file in the folder so that the file can be required properly.\n\n#### XML-based custom component with a code file\n\nThis sample `main-page.xml` uses a custom component defined in an `xml-declaration/mymodulewithxml/MyControl.xml` file together with `xml-declaration/mymodulewithxml/MyControl.js` or `xml-declaration/mymodulewithxml/MyControl.ts` code file. \n\n```XML\n<Page\n    xmlns:customOtherControls=\"xml-declaration/mymodulewithxml\">\n    <customOtherControls:MyControl />\n</Page>\n```\n\nThe custom component in `xml-declaration/MyControl.xml` defines a button, a label and a `buttonTap` function, located in the code file, which changes the label on every tap of the button.\n\n```XML\n<StackLayout>\n  <Label id=\"Label1\" />\n  <Button text=\"Click!\" tap=\"buttonTap\" /> \n</StackLayout>\n```\n\n```JavaScript\nvar view = require(\"ui/core/view\");\nvar count = 0;\nfunction buttonTap(args) {\n    count++;\n    var parent = args.object.parent;\n    if (parent) {\n        var lbl = view.getViewById(parent, \"Label1\");\n        if (lbl) {\n            lbl.text = \"You tapped \" + count + \" times!\";\n        }\n    }\n}\nexports.buttonTap = buttonTap;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport view = require(\"ui/core/view\");\nimport label = require(\"ui/label\");\n\nvar count = 0;\nexport function buttonTap(args: observable.EventData) {\n    count++;\n\n    var parent = (<view.View>args.object).parent;\n    if (parent) {\n        var lbl = <label.Label>view.getViewById(parent, \"Label1\");\n        if (lbl) {\n            lbl.text = \"You tapped \" + count + \" times!\";\n        }\n    }\n}\n```\n#### Dynamically loading custom components\nLoad a pure JavaScript component by finding it in the exports of the module. The component is specified by a path and its name. Then the code from the JavaScript file is executed.\n```JavaScript\nvar builder = require(\"ui/builder\");\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodule\",\n        name: \"MyControl\"\n});\n```\n```TypeScript\nimport builder = require(\"ui/builder\");\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodule\",\n        name: \"MyControl\"\n});\n```\n\nLoad the XML file with JavaScript code-behind by finding the specified XML filename through the specified path in the exports of the modules. JavaScript file with the same name will be required and served as code-behind of the XML.\n```JavaScript\nvar builder = require(\"ui/builder\");\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodulewithxml\",\n        name: \"MyControl\"\n});\n```\n```TypeScript\nimport builder = require(\"ui/builder\");\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodulewithxml\",\n        name: \"MyControl\"\n});\n```\n\n> The UI builder will automatically load the CSS file with the same name as the component name and apply it to the specified page:\n```JavaScript\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodulewithxml\",\n        name: \"MyControl\",\n        page: yourPageInstance\n});\n```\n```TypeScript\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodulewithxml\",\n        name: \"MyControl\",\n        page: yourPageInstance\n});\n```\n\n## Gestures\nAll [UI Gestures]({% slug gestures %})\n(gestures.md) can be defined in XML. For example:\n```XML\n<Page>\n  <Label text=\"Some text\" tap=\"myTapHandler\" />\n</Page>\n```\n```JavaScript\nfunction myTapHandler(args) {\n    var context = args.view.bindingContext;\n}\nexports.myTapHandler = myTapHandler;\n```\n```TypeScript\nimport gestures = require(\"ui/gestures\");\n\nexport function myTapHandler(args: gestures.GestureEventData) {\n    var context = args.view.bindingContext;\n}\n```\n\n## Bindings\n\nTo set a binding for a property in the `XML`, you can use double curly brackets syntax.\n\n### Property binding\n\nThis sample `main-page.xml` contains a simple label whose text will be populated when the page loads.\n\n```XML\n<Page loaded=\"pageLoaded\">\n{%raw%}\n  <Label text=\"{{ name }}\" />\n{%endraw%}\n</Page>\n```\n\nThis sample `main-page.js` or `main-page.ts` file sets a `bindingContext` for the page. The `bindingContext` contains the custom property and its value. When NativeScript parses `main-page.xml`, it will populate the custom name property with the value in the `bindingContext`.\n\n```JavaScript\nfunction pageLoaded(args) {\n\tvar page = args.object;\n\n\tpage.bindingContext = { name: \"Some name\" };\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pages.Page>args.object;\n    page.bindingContext = { name: \"Some name\" };\n}\n```\n> NativeScript looks for the custom property in the `bindingContext` of the current component or the `bindingContext` of its parents. By default, all bindings, defined in XML, are two-way bindings.\n\n### Event binding\n\nThis sample `main-page.xml` contains a button. The text for the button and the event that the button triggers are determined when the page loads from the matching `main-page.js` or `main-page.ts` file.\n\n```XML\n<Page loaded=\"pageLoaded\">\n{%raw%}\n  <Button text=\"{{ myProperty }}\" tap=\"{{ myFunction }}\" />\n{%endraw%}\n</Page>\n```\n\nThis sample `main-page.js` or `main-page.ts` sets a `bindingContext` for the page. The `bindingContext` contains the custom property for the button text and its value and the custom function that will be triggered when the button is tapped. When NativeScript parses `main-page.xml`, it will populate the button text with the value in the `bindingContext` and will bind the custom function to the tap event.\n\n```JavaScript\nfunction pageLoaded(args) {\n    var page = args.object;\n    page.bindingContext = {\n        myProperty: \"Some text\",\n        myFunction: function () {\n          // Your code\n        }\n    };\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pages.Page>args.object;\n    page.bindingContext = {\n        myProperty: \"Some text\",\n        myFunction: () => {\n            // Your code\n        }\n    };\n}\n```\n\n### ListView binding\n\nYou can use the double curly brackets syntax to bind the items to a [`listView`](http://docs.nativescript.org/api-reference/classes/_ui_list_view_.listview.html). You can also define a template with the `itemTemplate` property from which NativeScript will create the items for your `listView`.\n\n> Avoid accessing components by ID, especially when the component is part of a template. It is recommended that you use bindings to specify component properties. \n\nNativeScript can create the items from a template when the `listView` loads inside your page. When you work with templates and a `listView`, keep in mind the scope of the `listView` and its items. \n\nIn this sample `main-page.xml`, the ListView consists of labels and each item will be created from a template. The text of each label is the value of the name property of the corresponding item. \n\n```XML\n<Page loaded=\"pageLoaded\">\n{%raw%}\n  <ListView id=\"listView1\" items=\"{{ myItems }}\">\n    <ListView.itemTemplate>\n      <Label id=\"label1\" text=\"{{ name }}\"  />\n    </ListView.itemTemplate>\n  </ListView>\n{%endraw%}\n</Page>\n```\n\nThe sample `main-page.js` or `main-page.ts` populates the `bindingContext` for the page. In this case, the code sets values for the name property for each label. Note that because the `ListView` and the Label have different scopes, you can access ListView by ID from the page but you cannot access the Label by ID. The `ListView` creates a new `Label` for every item.\n\n```JavaScript\nvar view = require(\"ui/core/view\");\nfunction pageLoaded(args) {\n    var page = args.object;\n    page.bindingContext = { myItems: [{ name: \"Name1\" }, { name: \"Name2\" }, { name: \"Name3\" }] };\n\n    // Will work!\n    var listView1 = view.getViewById(page, \"listView1\");\n\n    // Will not work!\n    var label1 = view.getViewById(page, \"label1\");\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\nimport view = require(\"ui/core/view\");\nimport listView = require(\"ui/list-view\");\nimport label = require(\"ui/label\");\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pages.Page>args.object;\n    page.bindingContext = { myItems: [{ name: \"Name1\" }, { name: \"Name2\" }, { name: \"Name3\" }] };\n\n    // Will work!\n    var listView1 = <listView.ListView>view.getViewById(page, \"listView1\");\n\n    // Will not work!\n    var label1 = <label.Label>view.getViewById(page, \"label1\");\n}\n```\n\nIf you want to show some inner collection items inside ```ListView.itemTemplate``` you can use a [Repeater]({%slug layouts %}#repeating-layout-children):\n```XML\n<Page>\n{%raw%}\n  <ListView items=\"{{ myItems }}\">\n    <ListView.itemTemplate>\n      <Repeater items=\"{{ mySubItems }}\"  />\n    </ListView.itemTemplate>\n  </ListView>\n{%endraw%}\n</Page>\n```\n\n### Expressions\n\nTo set an expression as a value of a property in the `XML`, you might as well go with the mustache syntax here.\n\n> NativeScript reevaluates your expression on every property change of the `Observable` object set for `bindingContext`. This binding is a one-way binding;mdash;from the view model to the user interface.\n\nThe following sample `main-page.xml` shows how to set an expression as the value for a label.\n\n```XML\n{%raw%}\n<Label text=\"{{ author ? 'by ' + author : '[no author]' }}\" />\n<Label text=\"{{ author || '[no author]' }}\" />\n{%endraw%}\n```\n\n**Complex property paths**\n\n```JavaScript\nyour.sub.property[name]\n```\n\n**Logical not operator and comparators**\n\n```JavaScript\n!,<, >, <=, >=, ==, !=, ===, !==,||, &&\n```\n\n**Unary and binary operators**\n\n```JavaScript\n+, -, *, /, %\n```\n\n**Ternary operator**\n\n```JavaScript\na ? b : c\n```\n\n**Grouping**\n\n```JavaScript\n(a + b) * (c + d)\n```\n\n**Constants**\n\n```JavaScript\nnumbers, strings, null, undefined\n```\n## Platform-specific declarations\n\nTo declare a platform-specific property value or platform-specific component in the `XML`, you can use the following syntax:\n\n### Platform-specific property value\n```XML\n<Page>\n  <TextField ios:editable='False' android:editable='True' />\n</Page>\n```\n### Platform-specific component declaration\n```XML\n<Page>\n  <ios>\n    <TextField />\n  </ios>\n  <android>\n    <Label />\n  </android>\n</Page>\n```\n> You cannot nest platform tags!\n\n## Lowercase-dashed component declaration\nSince the release of NativeScript 1.3, you can declare your UI using lowercase-dashed syntax:\n```XML\n<page>\n  <scroll-view>\n    <stack-layout>\n      <label ctext=\"Label\" />\n      <button text=\"Button\" tap=\"tap\" />\n      ...\n```\n","source":"ui/ui-with-xml.md","raw":"---\ntitle: The Basics\ndescription: Learn the basic principles of designing a user interface with NativeScript. In NativeScript, you can design the UI using XML and CSS.\nposition: 1\nslug: ui-basics\nprevious_url: /ui-with-xml\nenvironment: nativescript\n---\n\n# The User Interface\n\nThe user interface of NativeScript mobile apps consists of pages. Typically, the design of the user interface is developed and stored in `XML` files, styling is done via CSS and the business logic is developed and stored in `JavaScript` or `TypeScript` files. \n\n* [The basics](#the-basics)\n  * [Declare the home page](#declare-the-home-page)\n  * [Navigate to a page](#navigate-to-a-page)\n  * [Execute business logic](#execute-business-logic)\n* [User interface components](#user-interface-components)\n  * [The default content components](#the-default-content-components)\n  * [Custom components](#custom-components)\n* [Bindings](#bindings)\n  * [Property binding](#property-binding)\n  * [Event binding](#event-binding)\n  * [ListView binding](#listview-binding)\n  * [Expressions](#expressions)\n* [Platform-specific declarations](#platform-specific-declarations)\n  * [Platform-specific property value](#platform-specific-property-value)\n  * [Platform-specific component declaration](#platform-specific-component-declaration)\n* [Lower-case-dashed component declaration](#lower-case-dashed-component-declaration)\n\n## The basics\n\nWhen you develop the user interface of your app, you can implement each application screen in a separate page or implement your application screens on a single page with a tab view. \n\nFor each page, you need to have a separate `XML` file that holds the layout of the page. For each `XML` file that NativeScript parses, the framework also looks for a `JavaScript` or `TypeScript` file with the same name and executes the business logic inside it. \n\n### Declare the home page\n\nEach NativeScript app must have a home page&mdash;the page that loads when you launch the app.\n\nYou need to explicitly set the home page for your app. You can do this by calling the `start()` method of the [`Application`](http://docs.nativescript.org/api-reference/modules/_application_.html) module and pass `NavigationEntry` with the desired `moduleName`.\n\nThe NativeScript navigation framework looks for an `XML` file with the specified name, loads it and navigates to the respective page. If NativeScript discovers a `JavaScript` or `TypeScript` file with the same name, it executes the code inside it.\n\n```JavaScript\nvar application = require(\"application\");\n// Start the application. Don't place any code after this line.\napplication.start({ moduleName: \"my-page\" });\n```\n```TypeScript\nimport application = require(\"application\");\n// Start the application. Don't place any code after this line.\napplication.start({ moduleName: \"my-page\" });\n```\n\n### Navigate to a page\n\nYou can navigate between pages with the `navigate` method of the [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) class. The [`Frame`](http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html) class represents the logical unit that is responsible for navigation between different pages. Typically, each app has one frame at the root level&mdash;the topmost frame.\n\nWhen you trigger navigation, NativeScript looks for an `XML` file with the specified name, loads it and navigates to the respective page. If NativeScript discovers a `JavaScript` or `TypeScript` file with the same name, it executes the code inside it.\n\n```JavaScript\n// To import the \"ui/frame\" module:\nvar frames = require(\"ui/frame\");\n// Navigate to page called “my-page”\nframes.topmost().navigate(\"my-page\");\n```\n```TypeScript\n// To import the \"ui/frame\" module:\nimport frames = require(\"ui/frame\");\n// Navigate to page called “my-page”\nframes.topmost().navigate(\"my-page\");\n```\n\n> Paths are relative to the application root. In the example above, NativeScript looks for a `my-page.xml` file in the app directory of your project.\n\n### Execute business logic\n\nWhen you have a `JavaScript` or a `TypeScript` file in the same location with the same name as your `XML` file, NativeScript loads it together with the `XML` file. In this `JavaScript` or `TypeScript` file you can manage event handlers, bind context or execute additional business logic.\n\n#### Example\n\nIn this example of `main-page.xml`, your page consists of a button. When you tap the button, the `buttonTap` function is triggered.  \n\n```XML\n<Page>\n  <StackLayout>\n     <Label id=\"Label1\" text=\"This is Label!\" />\n     <Button text=\"This is Button!\" tap=\"buttonTap\" />\n   </StackLayout>\n</Page>\n```\n\nThis example app is a simple counter app. The logic for the counter is implemented in a `main-page.js` or `main-page.ts` file.\n\n```JavaScript\nvar view = require(\"ui/core/view\");\nvar count = 0;\nfunction buttonTap(args) {\n    count++;\n    var sender = args.object;\n    var parent = sender.parent;\n    if (parent) {\n        var lbl = view.getViewById(parent, \"Label1\");\n        if (lbl) {\n            lbl.text = \"You tapped \" + count + \" times!\";\n        }\n    }\n}\nexports.buttonTap = buttonTap;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport view = require(\"ui/core/view\");\nimport label = require(\"ui/label\");\n\nvar count = 0;\nexport function buttonTap(args: observable.EventData) {\n    count++;\n    var sender = <view.View>args.object;\n    var parent = sender.parent;\n    if (parent) {\n        var lbl = <label.Label>view.getViewById(parent, \"Label1\");\n        if (lbl) {\n            lbl.text = \"You tapped \" + count + \" times!\";\n        }\n    }\n}\n```\nTo access variables or functions from the user interface, you need to declare them in the `exports` object in the module.\n\nNativeScript sets each attribute value in the XML declaration to a respective property or an event of the component. If a respective property does not exist, NativeScript sets the attribute value as an expando object.\n\nStarting with NativeScript 1.3 you can specify code and CSS files for your Page XML using `codeFile` and `cssFile` attributes:\n```XML\n<Page codeFile=\"~/your-code-file\" cssFile=\"~/your-styles.css\">\n    <StackLayout>\n     ...\n    </StackLayout>\n</Page>\n```\n\n## User interface components\n\nNativeScript provides a wide range of built-in user interface components:mdash;layouts and widgets. You can also create your own custom user interface components. \n\nWhen NativeScript parses your `XML` files, it looks for components that match a name in the module exports.\n\nFor example, when you have a `Button` declaration in your `XML` file, NativeScript looks for a `Button` name in the module exports.\n\n```JavaScript\nvar Button = ...\n    ...\nexports.Button = Button;\n```\n\n### The default content components\n\nThe top-level user interface components are content components:mdash;pages and layouts. These content components let you arrange your interactive user interface components in specific ways.\n\n#### Page\n\nYour application pages (or screens) are instances of the [`page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) class of the [`Page`](http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html) module. Typically, an app will consist of multiple application screens.\n\n##### Example\n\nYou can execute some business logic when your page loads using the `pageLoaded` event.\n\nYou need to set the `loaded` attribute for your page in your `main-page.xml`.\n\n```XML\n<Page loaded=\"pageLoaded\">\n …\n</Page>\n```\n\nYou need to handle the business logic that loads in a `main-page.js` or `main-page.ts` file.\n\n```JavaScript\nfunction pageLoaded(args) {\n    var page = args.object;\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\n\n// Event handler for Page \"loaded\" event attached in main-page.xml\nexport function pageLoaded(args: observable.EventData) {\n    // Get the event sender\n    var page = <pages.Page>args.object;\n}\n```\n\n#### TabView \n\nWith a [`tabview`](http://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabview.html), you can avoid spreading your user interface across multiple pages. Instead, you can have one page with multiple tabs.\n\n##### Example\n\nThe following sample `main-page.xml` contains two tabs with labels.\n\n```XML\n<Page loaded=\"pageLoaded\">\n  <TabView id=\"tabView1\">\n    <TabView.items>\n      <TabViewItem title=\"Tab 1\">\n        <TabViewItem.view>\n          <Label text=\"This is Label in Tab 1\" />\n        </TabViewItem.view>\n      </TabViewItem>\n      <TabViewItem title=\"Tab 2\">\n        <TabViewItem.view>\n          <Label text=\"This is Label in Tab 2\" />\n        </TabViewItem.view>\n      </TabViewItem>\n    </TabView.items>\n  </TabView>\n</Page>\n```\n\nThe respective `main-page.js` or `main-page.ts` loads the first tab by its ID and shows its contents.\n\n```JavaScript\nvar view = require(\"ui/core/view\");\nfunction pageLoaded(args) {\n    var page = args.object;\n    var tabView1 = view.getViewById(page, \"tabView1\");\n    tabView1.selectedIndex = 1;\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport view = require(\"ui/core/view\");\nimport pages = require(\"ui/page\");\nimport tab = require(\"ui/tab-view\");\n\n// Event handler for Page \"loaded\" event attached in main-page.xml\nexport function pageLoaded(args: observable.EventData) {\n    // Get the event sender\n    var page = <pages.Page>args.object;\n    var tabView1 = <tab.TabView>view.getViewById(page, \"tabView1\");\n    tabView1.selectedIndex = 1;\n}\n```\n\n#### ScrollView\n\nYou can insert a [`scrollView`](http://docs.nativescript.org/api-reference/classes/_ui_scroll_view_.scrollview.html) inside your page to make the page or the content enclosed in the `scrollView` scrollable.\n\n##### Example\n\nThis sample `main-page.xml` shows how to insert a `scrollView` inside your page.\n\n```XML\n<Page>\n  <ScrollView>\n\t…\n  </ScrollView>\n</Page>\n```\n\n#### StackLayout\n\nYou can arrange the user interface components in your page in a horizontal or vertical stack using [`stackLayout`](http://docs.nativescript.org/api-reference/classes/_ui_layouts_stack_layout_.stacklayout.html).\n\n##### Example\n\nThis sample `main-page.xml` shows how to arrange the labels in a page in a horizontal stack.\n\n```XML\n<Page>\n  <StackLayout orientation=\"horizontal\">\n    <Label text=\"This is Label 1\" />\n    <Label text=\"This is Label 2\" />\n  </StackLayout>\n</Page>\n```\n\n#### GridLayout\n\nYou can arrange the user interface components in your page in a flexible grid area using [`gridLayout`](http://docs.nativescript.org/api-reference/classes/_ui_layouts_grid_layout_.gridlayout.html).\n\n##### Example\n\nThis sample `main-page.xml` shows how to arrange labels inside a table by setting their position by row or column.\n\n```XML\n<Page>\n  <GridLayout rows=\"*, auto\" columns=\"250, *\">\n    <Label text=\"This is Label in row 0, col 0\" />\n    <Label text=\"This is Label in row 0, col 1\" col=\"1\" />\n    <Label text=\"This is Label in row 1, col 0\" row=\"1\" />\n    <Label text=\"This is Label in row 1, col 1\" row=\"1\" col=\"1\" />\n    <Label text=\"This is Label in row 0, col 0\" rowSpan=\"2\" colSpan=\"2\" />\n  </GridLayout>\n</Page>\n```\n\n#### WrapLayout\n\nYou can arrange your user interface components in rows or columns until the space is filled and then wrap them on a new row or column using [`wrapLayout`](http://docs.nativescript.org/api-reference/classes/_ui_layouts_wrap_layout_.wraplayout.html). By default, if orientation is not specified, `wrapLayout` arranges items horizontally.\n\n##### Example\n\nThis sample `main-page.xml` provides four labels wrapped horizontally within the visible space of the page.\n\n```XML\n<Page>\n  <WrapLayout>\n    <Label text=\"This is Label 1\" />\n    <Label text=\"This is Label 2\" />\n    <Label text=\"This is Label 3\" />\n    <Label text=\"This is Label 4\" />\n  </WrapLayout>\n</Page>\n```\n\n#### AbsoluteLayout\n\nYou can arrange your user interface components by left/top coordinates using [`absoluteLayout`](http://docs.nativescript.org/api-reference/classes/_ui_layouts_absolute_layout_.absolutelayout.html).\n\n##### Example\n\nThe following `main-page.xml` contains a page with a single label positioned at the specified coordinates.\n\n```XML\n<Page>\n  <AbsoluteLayout>\n    <Label text=\"This is Label 1\" left=\"30\" top=\"70\" />\n  </AbsoluteLayout>\n</Page>\n```\n\n### Custom components\n\nYou can define your own XML namespaces to create custom user interface components.\n\n#### Code-only custom component\n\nThis sample `main-page.xml` is using a custom component defined in separate declarations in the `xml-declaration/mymodule` directory. \n\n```XML\n<Page\n    xmlns:customControls=\"xml-declaration/mymodule\">\n  <customControls:MyControl />\n</Page>\n```\n\nThis sample custom component declared in `xml-declaration/mymodule.js` or `xml-declaration/mymodule.ts` exports the `MyControl` variable, which creates a simple counter inside your `main-page.xml` page.\n\n```JavaScript\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar stackLayout = require(\"ui/layouts/stack-layout\");\nvar label = require(\"ui/label\");\nvar button = require(\"ui/button\");\nvar MyControl = (function (_super) {\n    __extends(MyControl, _super);\n    function MyControl() {\n        _super.call(this);\n        var counter = 0;\n        var lbl = new label.Label();\n        var btn = new button.Button();\n        btn.text = \"Tap me!\";\n        btn.on(button.Button.tapEvent, function (args) {\n            lbl.text = \"Tap \" + counter++;\n        });\n        this.addChild(lbl);\n        this.addChild(btn);\n    }\n    return MyControl;\n})(stackLayout.StackLayout);\nexports.MyControl = MyControl;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport stackLayout = require(\"ui/layouts/stack-layout\");\nimport label = require(\"ui/label\");\nimport button = require(\"ui/button\");\n\nexport class MyControl extends stackLayout.StackLayout {\n    constructor() {\n        super();\n\n        var counter: number = 0;\n\n        var lbl = new label.Label();\n        var btn = new button.Button();\n        btn.text = \"Tap me!\";\n        btn.on(button.Button.tapEvent, (args: observable.EventData) => {\n            lbl.text = \"Tap \" + counter++;\n        });\n\n        this.addChild(lbl);\n        this.addChild(btn);\n    }\n}\n```\n\nWhen referring to code-only components in your pages with an `xmlns` declaration, you should point it either to the code file with the component implementation or to the folder containing the files. In the latter case, you will have to add a `package.json` file in the folder so that the file can be required properly.\n\n#### XML-based custom component with a code file\n\nThis sample `main-page.xml` uses a custom component defined in an `xml-declaration/mymodulewithxml/MyControl.xml` file together with `xml-declaration/mymodulewithxml/MyControl.js` or `xml-declaration/mymodulewithxml/MyControl.ts` code file. \n\n```XML\n<Page\n    xmlns:customOtherControls=\"xml-declaration/mymodulewithxml\">\n    <customOtherControls:MyControl />\n</Page>\n```\n\nThe custom component in `xml-declaration/MyControl.xml` defines a button, a label and a `buttonTap` function, located in the code file, which changes the label on every tap of the button.\n\n```XML\n<StackLayout>\n  <Label id=\"Label1\" />\n  <Button text=\"Click!\" tap=\"buttonTap\" /> \n</StackLayout>\n```\n\n```JavaScript\nvar view = require(\"ui/core/view\");\nvar count = 0;\nfunction buttonTap(args) {\n    count++;\n    var parent = args.object.parent;\n    if (parent) {\n        var lbl = view.getViewById(parent, \"Label1\");\n        if (lbl) {\n            lbl.text = \"You tapped \" + count + \" times!\";\n        }\n    }\n}\nexports.buttonTap = buttonTap;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport view = require(\"ui/core/view\");\nimport label = require(\"ui/label\");\n\nvar count = 0;\nexport function buttonTap(args: observable.EventData) {\n    count++;\n\n    var parent = (<view.View>args.object).parent;\n    if (parent) {\n        var lbl = <label.Label>view.getViewById(parent, \"Label1\");\n        if (lbl) {\n            lbl.text = \"You tapped \" + count + \" times!\";\n        }\n    }\n}\n```\n#### Dynamically loading custom components\nLoad a pure JavaScript component by finding it in the exports of the module. The component is specified by a path and its name. Then the code from the JavaScript file is executed.\n```JavaScript\nvar builder = require(\"ui/builder\");\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodule\",\n        name: \"MyControl\"\n});\n```\n```TypeScript\nimport builder = require(\"ui/builder\");\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodule\",\n        name: \"MyControl\"\n});\n```\n\nLoad the XML file with JavaScript code-behind by finding the specified XML filename through the specified path in the exports of the modules. JavaScript file with the same name will be required and served as code-behind of the XML.\n```JavaScript\nvar builder = require(\"ui/builder\");\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodulewithxml\",\n        name: \"MyControl\"\n});\n```\n```TypeScript\nimport builder = require(\"ui/builder\");\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodulewithxml\",\n        name: \"MyControl\"\n});\n```\n\n> The UI builder will automatically load the CSS file with the same name as the component name and apply it to the specified page:\n```JavaScript\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodulewithxml\",\n        name: \"MyControl\",\n        page: yourPageInstance\n});\n```\n```TypeScript\nvar myComponentInstance = builder.load({\n        path: \"~/xml-declaration/mymodulewithxml\",\n        name: \"MyControl\",\n        page: yourPageInstance\n});\n```\n\n## Gestures\nAll [UI Gestures]({% slug gestures %})\n(gestures.md) can be defined in XML. For example:\n```XML\n<Page>\n  <Label text=\"Some text\" tap=\"myTapHandler\" />\n</Page>\n```\n```JavaScript\nfunction myTapHandler(args) {\n    var context = args.view.bindingContext;\n}\nexports.myTapHandler = myTapHandler;\n```\n```TypeScript\nimport gestures = require(\"ui/gestures\");\n\nexport function myTapHandler(args: gestures.GestureEventData) {\n    var context = args.view.bindingContext;\n}\n```\n\n## Bindings\n\nTo set a binding for a property in the `XML`, you can use double curly brackets syntax.\n\n### Property binding\n\nThis sample `main-page.xml` contains a simple label whose text will be populated when the page loads.\n\n```XML\n<Page loaded=\"pageLoaded\">\n{%raw%}\n  <Label text=\"{{ name }}\" />\n{%endraw%}\n</Page>\n```\n\nThis sample `main-page.js` or `main-page.ts` file sets a `bindingContext` for the page. The `bindingContext` contains the custom property and its value. When NativeScript parses `main-page.xml`, it will populate the custom name property with the value in the `bindingContext`.\n\n```JavaScript\nfunction pageLoaded(args) {\n\tvar page = args.object;\n\n\tpage.bindingContext = { name: \"Some name\" };\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pages.Page>args.object;\n    page.bindingContext = { name: \"Some name\" };\n}\n```\n> NativeScript looks for the custom property in the `bindingContext` of the current component or the `bindingContext` of its parents. By default, all bindings, defined in XML, are two-way bindings.\n\n### Event binding\n\nThis sample `main-page.xml` contains a button. The text for the button and the event that the button triggers are determined when the page loads from the matching `main-page.js` or `main-page.ts` file.\n\n```XML\n<Page loaded=\"pageLoaded\">\n{%raw%}\n  <Button text=\"{{ myProperty }}\" tap=\"{{ myFunction }}\" />\n{%endraw%}\n</Page>\n```\n\nThis sample `main-page.js` or `main-page.ts` sets a `bindingContext` for the page. The `bindingContext` contains the custom property for the button text and its value and the custom function that will be triggered when the button is tapped. When NativeScript parses `main-page.xml`, it will populate the button text with the value in the `bindingContext` and will bind the custom function to the tap event.\n\n```JavaScript\nfunction pageLoaded(args) {\n    var page = args.object;\n    page.bindingContext = {\n        myProperty: \"Some text\",\n        myFunction: function () {\n          // Your code\n        }\n    };\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pages.Page>args.object;\n    page.bindingContext = {\n        myProperty: \"Some text\",\n        myFunction: () => {\n            // Your code\n        }\n    };\n}\n```\n\n### ListView binding\n\nYou can use the double curly brackets syntax to bind the items to a [`listView`](http://docs.nativescript.org/api-reference/classes/_ui_list_view_.listview.html). You can also define a template with the `itemTemplate` property from which NativeScript will create the items for your `listView`.\n\n> Avoid accessing components by ID, especially when the component is part of a template. It is recommended that you use bindings to specify component properties. \n\nNativeScript can create the items from a template when the `listView` loads inside your page. When you work with templates and a `listView`, keep in mind the scope of the `listView` and its items. \n\nIn this sample `main-page.xml`, the ListView consists of labels and each item will be created from a template. The text of each label is the value of the name property of the corresponding item. \n\n```XML\n<Page loaded=\"pageLoaded\">\n{%raw%}\n  <ListView id=\"listView1\" items=\"{{ myItems }}\">\n    <ListView.itemTemplate>\n      <Label id=\"label1\" text=\"{{ name }}\"  />\n    </ListView.itemTemplate>\n  </ListView>\n{%endraw%}\n</Page>\n```\n\nThe sample `main-page.js` or `main-page.ts` populates the `bindingContext` for the page. In this case, the code sets values for the name property for each label. Note that because the `ListView` and the Label have different scopes, you can access ListView by ID from the page but you cannot access the Label by ID. The `ListView` creates a new `Label` for every item.\n\n```JavaScript\nvar view = require(\"ui/core/view\");\nfunction pageLoaded(args) {\n    var page = args.object;\n    page.bindingContext = { myItems: [{ name: \"Name1\" }, { name: \"Name2\" }, { name: \"Name3\" }] };\n\n    // Will work!\n    var listView1 = view.getViewById(page, \"listView1\");\n\n    // Will not work!\n    var label1 = view.getViewById(page, \"label1\");\n}\nexports.pageLoaded = pageLoaded;\n```\n```TypeScript\nimport observable = require(\"data/observable\");\nimport pages = require(\"ui/page\");\nimport view = require(\"ui/core/view\");\nimport listView = require(\"ui/list-view\");\nimport label = require(\"ui/label\");\n\nexport function pageLoaded(args: observable.EventData) {\n    var page = <pages.Page>args.object;\n    page.bindingContext = { myItems: [{ name: \"Name1\" }, { name: \"Name2\" }, { name: \"Name3\" }] };\n\n    // Will work!\n    var listView1 = <listView.ListView>view.getViewById(page, \"listView1\");\n\n    // Will not work!\n    var label1 = <label.Label>view.getViewById(page, \"label1\");\n}\n```\n\nIf you want to show some inner collection items inside ```ListView.itemTemplate``` you can use a [Repeater]({%slug layouts %}#repeating-layout-children):\n```XML\n<Page>\n{%raw%}\n  <ListView items=\"{{ myItems }}\">\n    <ListView.itemTemplate>\n      <Repeater items=\"{{ mySubItems }}\"  />\n    </ListView.itemTemplate>\n  </ListView>\n{%endraw%}\n</Page>\n```\n\n### Expressions\n\nTo set an expression as a value of a property in the `XML`, you might as well go with the mustache syntax here.\n\n> NativeScript reevaluates your expression on every property change of the `Observable` object set for `bindingContext`. This binding is a one-way binding;mdash;from the view model to the user interface.\n\nThe following sample `main-page.xml` shows how to set an expression as the value for a label.\n\n```XML\n{%raw%}\n<Label text=\"{{ author ? 'by ' + author : '[no author]' }}\" />\n<Label text=\"{{ author || '[no author]' }}\" />\n{%endraw%}\n```\n\n**Complex property paths**\n\n```JavaScript\nyour.sub.property[name]\n```\n\n**Logical not operator and comparators**\n\n```JavaScript\n!,<, >, <=, >=, ==, !=, ===, !==,||, &&\n```\n\n**Unary and binary operators**\n\n```JavaScript\n+, -, *, /, %\n```\n\n**Ternary operator**\n\n```JavaScript\na ? b : c\n```\n\n**Grouping**\n\n```JavaScript\n(a + b) * (c + d)\n```\n\n**Constants**\n\n```JavaScript\nnumbers, strings, null, undefined\n```\n## Platform-specific declarations\n\nTo declare a platform-specific property value or platform-specific component in the `XML`, you can use the following syntax:\n\n### Platform-specific property value\n```XML\n<Page>\n  <TextField ios:editable='False' android:editable='True' />\n</Page>\n```\n### Platform-specific component declaration\n```XML\n<Page>\n  <ios>\n    <TextField />\n  </ios>\n  <android>\n    <Label />\n  </android>\n</Page>\n```\n> You cannot nest platform tags!\n\n## Lowercase-dashed component declaration\nSince the release of NativeScript 1.3, you can declare your UI using lowercase-dashed syntax:\n```XML\n<page>\n  <scroll-view>\n    <stack-layout>\n      <label ctext=\"Label\" />\n      <button text=\"Button\" tap=\"tap\" />\n      ...\n```\n","date":"2016-08-26T21:05:54.629Z","updated":"2016-08-26T21:05:54.629Z","path":"ui/ui-with-xml.html","comments":1,"layout":"page","_id":"cisn95cb10019wsl0okxagc0z","content":"<h1 id=\"The-User-Interface\"><a href=\"#The-User-Interface\" class=\"headerlink\" title=\"The User Interface\"></a>The User Interface</h1><p>The user interface of NativeScript mobile apps consists of pages. Typically, the design of the user interface is developed and stored in <code>XML</code> files, styling is done via CSS and the business logic is developed and stored in <code>JavaScript</code> or <code>TypeScript</code> files. </p>\n<ul>\n<li><a href=\"#the-basics\">The basics</a><ul>\n<li><a href=\"#declare-the-home-page\">Declare the home page</a></li>\n<li><a href=\"#navigate-to-a-page\">Navigate to a page</a></li>\n<li><a href=\"#execute-business-logic\">Execute business logic</a></li>\n</ul>\n</li>\n<li><a href=\"#user-interface-components\">User interface components</a><ul>\n<li><a href=\"#the-default-content-components\">The default content components</a></li>\n<li><a href=\"#custom-components\">Custom components</a></li>\n</ul>\n</li>\n<li><a href=\"#bindings\">Bindings</a><ul>\n<li><a href=\"#property-binding\">Property binding</a></li>\n<li><a href=\"#event-binding\">Event binding</a></li>\n<li><a href=\"#listview-binding\">ListView binding</a></li>\n<li><a href=\"#expressions\">Expressions</a></li>\n</ul>\n</li>\n<li><a href=\"#platform-specific-declarations\">Platform-specific declarations</a><ul>\n<li><a href=\"#platform-specific-property-value\">Platform-specific property value</a></li>\n<li><a href=\"#platform-specific-component-declaration\">Platform-specific component declaration</a></li>\n</ul>\n</li>\n<li><a href=\"#lower-case-dashed-component-declaration\">Lower-case-dashed component declaration</a></li>\n</ul>\n<h2 id=\"The-basics\"><a href=\"#The-basics\" class=\"headerlink\" title=\"The basics\"></a>The basics</h2><p>When you develop the user interface of your app, you can implement each application screen in a separate page or implement your application screens on a single page with a tab view. </p>\n<p>For each page, you need to have a separate <code>XML</code> file that holds the layout of the page. For each <code>XML</code> file that NativeScript parses, the framework also looks for a <code>JavaScript</code> or <code>TypeScript</code> file with the same name and executes the business logic inside it. </p>\n<h3 id=\"Declare-the-home-page\"><a href=\"#Declare-the-home-page\" class=\"headerlink\" title=\"Declare the home page\"></a>Declare the home page</h3><p>Each NativeScript app must have a home page&mdash;the page that loads when you launch the app.</p>\n<p>You need to explicitly set the home page for your app. You can do this by calling the <code>start()</code> method of the <a href=\"http://docs.nativescript.org/api-reference/modules/_application_.html\"><code>Application</code></a> module and pass <code>NavigationEntry</code> with the desired <code>moduleName</code>.</p>\n<p>The NativeScript navigation framework looks for an <code>XML</code> file with the specified name, loads it and navigates to the respective page. If NativeScript discovers a <code>JavaScript</code> or <code>TypeScript</code> file with the same name, it executes the code inside it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"comment\">// Start the application. Don't place any code after this line.</span></div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"my-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"comment\">// Start the application. Don't place any code after this line.</span></div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"my-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-to-a-page\"><a href=\"#Navigate-to-a-page\" class=\"headerlink\" title=\"Navigate to a page\"></a>Navigate to a page</h3><p>You can navigate between pages with the <code>navigate</code> method of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> class. The <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> class represents the logical unit that is responsible for navigation between different pages. Typically, each app has one frame at the root level&mdash;the topmost frame.</p>\n<p>When you trigger navigation, NativeScript looks for an <code>XML</code> file with the specified name, loads it and navigates to the respective page. If NativeScript discovers a <code>JavaScript</code> or <code>TypeScript</code> file with the same name, it executes the code inside it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// To import the \"ui/frame\" module:</span></div><div class=\"line\"><span class=\"keyword\">var</span> frames = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"comment\">// Navigate to page called “my-page”</span></div><div class=\"line\">frames.topmost().navigate(<span class=\"string\">\"my-page\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// To import the \"ui/frame\" module:</span></div><div class=\"line\"><span class=\"keyword\">import</span> frames = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"comment\">// Navigate to page called “my-page”</span></div><div class=\"line\">frames.topmost().navigate(<span class=\"string\">\"my-page\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Paths are relative to the application root. In the example above, NativeScript looks for a <code>my-page.xml</code> file in the app directory of your project.</p>\n</blockquote>\n<h3 id=\"Execute-business-logic\"><a href=\"#Execute-business-logic\" class=\"headerlink\" title=\"Execute business logic\"></a>Execute business logic</h3><p>When you have a <code>JavaScript</code> or a <code>TypeScript</code> file in the same location with the same name as your <code>XML</code> file, NativeScript loads it together with the <code>XML</code> file. In this <code>JavaScript</code> or <code>TypeScript</code> file you can manage event handlers, bind context or execute additional business logic.</p>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>In this example of <code>main-page.xml</code>, your page consists of a button. When you tap the button, the <code>buttonTap</code> function is triggered.  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Label1\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label!\"</span> /&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Button!\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"buttonTap\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This example app is a simple counter app. The logic for the counter is implemented in a <code>main-page.js</code> or <code>main-page.ts</code> file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buttonTap</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\">    <span class=\"keyword\">var</span> sender = args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> parent = sender.parent;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = view.getViewById(parent, <span class=\"string\">\"Label1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lbl) &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"You tapped \"</span> + count + <span class=\"string\">\" times!\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.buttonTap = buttonTap;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buttonTap</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\">    <span class=\"keyword\">var</span> sender = &lt;view.View&gt;args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> parent = sender.parent;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = &lt;label.Label&gt;view.getViewById(parent, <span class=\"string\">\"Label1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lbl) &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"You tapped \"</span> + count + <span class=\"string\">\" times!\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To access variables or functions from the user interface, you need to declare them in the <code>exports</code> object in the module.</p>\n<p>NativeScript sets each attribute value in the XML declaration to a respective property or an event of the component. If a respective property does not exist, NativeScript sets the attribute value as an expando object.</p>\n<p>Starting with NativeScript 1.3 you can specify code and CSS files for your Page XML using <code>codeFile</code> and <code>cssFile</code> attributes:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">codeFile</span>=<span class=\"string\">\"~/your-code-file\"</span> <span class=\"attr\">cssFile</span>=<span class=\"string\">\"~/your-styles.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">     ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"User-interface-components\"><a href=\"#User-interface-components\" class=\"headerlink\" title=\"User interface components\"></a>User interface components</h2><p>NativeScript provides a wide range of built-in user interface components:mdash;layouts and widgets. You can also create your own custom user interface components. </p>\n<p>When NativeScript parses your <code>XML</code> files, it looks for components that match a name in the module exports.</p>\n<p>For example, when you have a <code>Button</code> declaration in your <code>XML</code> file, NativeScript looks for a <code>Button</code> name in the module exports.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Button = ...</div><div class=\"line\">    ...</div><div class=\"line\">exports.Button = Button;</div></pre></td></tr></table></figure>\n<h3 id=\"The-default-content-components\"><a href=\"#The-default-content-components\" class=\"headerlink\" title=\"The default content components\"></a>The default content components</h3><p>The top-level user interface components are content components:mdash;pages and layouts. These content components let you arrange your interactive user interface components in specific ways.</p>\n<h4 id=\"Page\"><a href=\"#Page\" class=\"headerlink\" title=\"Page\"></a>Page</h4><p>Your application pages (or screens) are instances of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>page</code></a> class of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>Page</code></a> module. Typically, an app will consist of multiple application screens.</p>\n<h5 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>You can execute some business logic when your page loads using the <code>pageLoaded</code> event.</p>\n<p>You need to set the <code>loaded</code> attribute for your page in your <code>main-page.xml</code>.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\"> …</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You need to handle the business logic that loads in a <code>main-page.js</code> or <code>main-page.ts</code> file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Event handler for Page \"loaded\" event attached in main-page.xml</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Get the event sender</span></div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"TabView\"><a href=\"#TabView\" class=\"headerlink\" title=\"TabView\"></a>TabView</h4><p>With a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabview.html\"><code>tabview</code></a>, you can avoid spreading your user interface across multiple pages. Instead, you can have one page with multiple tabs.</p>\n<h5 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>The following sample <code>main-page.xml</code> contains two tabs with labels.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TabView</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tabView1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TabView.items</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">TabViewItem</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Tab 1\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TabViewItem.view</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in Tab 1\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TabViewItem.view</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">TabViewItem</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">TabViewItem</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Tab 2\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TabViewItem.view</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in Tab 2\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TabViewItem.view</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">TabViewItem</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">TabView.items</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">TabView</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The respective <code>main-page.js</code> or <code>main-page.ts</code> loads the first tab by its ID and shows its contents.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> tabView1 = view.getViewById(page, <span class=\"string\">\"tabView1\"</span>);</div><div class=\"line\">    tabView1.selectedIndex = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> tab = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/tab-view\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Event handler for Page \"loaded\" event attached in main-page.xml</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Get the event sender</span></div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> tabView1 = &lt;tab.TabView&gt;view.getViewById(page, <span class=\"string\">\"tabView1\"</span>);</div><div class=\"line\">    tabView1.selectedIndex = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ScrollView\"><a href=\"#ScrollView\" class=\"headerlink\" title=\"ScrollView\"></a>ScrollView</h4><p>You can insert a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_scroll_view_.scrollview.html\"><code>scrollView</code></a> inside your page to make the page or the content enclosed in the <code>scrollView</code> scrollable.</p>\n<h5 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>This sample <code>main-page.xml</code> shows how to insert a <code>scrollView</code> inside your page.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\">\t…</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"StackLayout\"><a href=\"#StackLayout\" class=\"headerlink\" title=\"StackLayout\"></a>StackLayout</h4><p>You can arrange the user interface components in your page in a horizontal or vertical stack using <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_layouts_stack_layout_.stacklayout.html\"><code>stackLayout</code></a>.</p>\n<h5 id=\"Example-4\"><a href=\"#Example-4\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>This sample <code>main-page.xml</code> shows how to arrange the labels in a page in a horizontal stack.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 2\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"GridLayout\"><a href=\"#GridLayout\" class=\"headerlink\" title=\"GridLayout\"></a>GridLayout</h4><p>You can arrange the user interface components in your page in a flexible grid area using <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_layouts_grid_layout_.gridlayout.html\"><code>gridLayout</code></a>.</p>\n<h5 id=\"Example-5\"><a href=\"#Example-5\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>This sample <code>main-page.xml</code> shows how to arrange labels inside a table by setting their position by row or column.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"*, auto\"</span> <span class=\"attr\">columns</span>=<span class=\"string\">\"250, *\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 0, col 0\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 0, col 1\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 1, col 0\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 1, col 1\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 0, col 0\"</span> <span class=\"attr\">rowSpan</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">colSpan</span>=<span class=\"string\">\"2\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">GridLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"WrapLayout\"><a href=\"#WrapLayout\" class=\"headerlink\" title=\"WrapLayout\"></a>WrapLayout</h4><p>You can arrange your user interface components in rows or columns until the space is filled and then wrap them on a new row or column using <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_layouts_wrap_layout_.wraplayout.html\"><code>wrapLayout</code></a>. By default, if orientation is not specified, <code>wrapLayout</code> arranges items horizontally.</p>\n<h5 id=\"Example-6\"><a href=\"#Example-6\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>This sample <code>main-page.xml</code> provides four labels wrapped horizontally within the visible space of the page.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">WrapLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 2\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 3\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 4\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">WrapLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"AbsoluteLayout\"><a href=\"#AbsoluteLayout\" class=\"headerlink\" title=\"AbsoluteLayout\"></a>AbsoluteLayout</h4><p>You can arrange your user interface components by left/top coordinates using <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_layouts_absolute_layout_.absolutelayout.html\"><code>absoluteLayout</code></a>.</p>\n<h5 id=\"Example-7\"><a href=\"#Example-7\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>The following <code>main-page.xml</code> contains a page with a single label positioned at the specified coordinates.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">AbsoluteLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 1\"</span> <span class=\"attr\">left</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">top</span>=<span class=\"string\">\"70\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">AbsoluteLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Custom-components\"><a href=\"#Custom-components\" class=\"headerlink\" title=\"Custom components\"></a>Custom components</h3><p>You can define your own XML namespaces to create custom user interface components.</p>\n<h4 id=\"Code-only-custom-component\"><a href=\"#Code-only-custom-component\" class=\"headerlink\" title=\"Code-only custom component\"></a>Code-only custom component</h4><p>This sample <code>main-page.xml</code> is using a custom component defined in separate declarations in the <code>xml-declaration/mymodule</code> directory. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:customControls</span>=<span class=\"string\">\"xml-declaration/mymodule\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">customControls:MyControl</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This sample custom component declared in <code>xml-declaration/mymodule.js</code> or <code>xml-declaration/mymodule.ts</code> exports the <code>MyControl</code> variable, which creates a simple counter inside your <code>main-page.xml</code> page.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> __extends = <span class=\"keyword\">this</span>.__extends || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> b) <span class=\"keyword\">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">this</span>.constructor = d; &#125;</div><div class=\"line\">    __.prototype = b.prototype;</div><div class=\"line\">    d.prototype = <span class=\"keyword\">new</span> __();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> stackLayout = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/layouts/stack-layout\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> MyControl = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    __extends(MyControl, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyControl</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = <span class=\"keyword\">new</span> label.Label();</div><div class=\"line\">        <span class=\"keyword\">var</span> btn = <span class=\"keyword\">new</span> button.Button();</div><div class=\"line\">        btn.text = <span class=\"string\">\"Tap me!\"</span>;</div><div class=\"line\">        btn.on(button.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"Tap \"</span> + counter++;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addChild(lbl);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addChild(btn);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> MyControl;</div><div class=\"line\">&#125;)(stackLayout.StackLayout);</div><div class=\"line\">exports.MyControl = MyControl;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> stackLayout = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/layouts/stack-layout\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> button = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyControl extends stackLayout.StackLayout &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> counter: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = <span class=\"keyword\">new</span> label.Label();</div><div class=\"line\">        <span class=\"keyword\">var</span> btn = <span class=\"keyword\">new</span> button.Button();</div><div class=\"line\">        btn.text = <span class=\"string\">\"Tap me!\"</span>;</div><div class=\"line\">        btn.on(button.Button.tapEvent, (args: observable.EventData) =&gt; &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"Tap \"</span> + counter++;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.addChild(lbl);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addChild(btn);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>When referring to code-only components in your pages with an <code>xmlns</code> declaration, you should point it either to the code file with the component implementation or to the folder containing the files. In the latter case, you will have to add a <code>package.json</code> file in the folder so that the file can be required properly.</p>\n<h4 id=\"XML-based-custom-component-with-a-code-file\"><a href=\"#XML-based-custom-component-with-a-code-file\" class=\"headerlink\" title=\"XML-based custom component with a code file\"></a>XML-based custom component with a code file</h4><p>This sample <code>main-page.xml</code> uses a custom component defined in an <code>xml-declaration/mymodulewithxml/MyControl.xml</code> file together with <code>xml-declaration/mymodulewithxml/MyControl.js</code> or <code>xml-declaration/mymodulewithxml/MyControl.ts</code> code file. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:customOtherControls</span>=<span class=\"string\">\"xml-declaration/mymodulewithxml\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">customOtherControls:MyControl</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The custom component in <code>xml-declaration/MyControl.xml</code> defines a button, a label and a <code>buttonTap</code> function, located in the code file, which changes the label on every tap of the button.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Label1\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Click!\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"buttonTap\"</span> /&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buttonTap</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\">    <span class=\"keyword\">var</span> parent = args.object.parent;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = view.getViewById(parent, <span class=\"string\">\"Label1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lbl) &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"You tapped \"</span> + count + <span class=\"string\">\" times!\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.buttonTap = buttonTap;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buttonTap</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> parent = (&lt;view.View&gt;args.object).parent;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = &lt;label.Label&gt;view.getViewById(parent, <span class=\"string\">\"Label1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lbl) &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"You tapped \"</span> + count + <span class=\"string\">\" times!\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Dynamically-loading-custom-components\"><a href=\"#Dynamically-loading-custom-components\" class=\"headerlink\" title=\"Dynamically loading custom components\"></a>Dynamically loading custom components</h4><p>Load a pure JavaScript component by finding it in the exports of the module. The component is specified by a path and its name. Then the code from the JavaScript file is executed.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/builder\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodule\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> builder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/builder\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodule\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Load the XML file with JavaScript code-behind by finding the specified XML filename through the specified path in the exports of the modules. JavaScript file with the same name will be required and served as code-behind of the XML.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/builder\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodulewithxml\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> builder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/builder\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodulewithxml\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The UI builder will automatically load the CSS file with the same name as the component name and apply it to the specified page:\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodulewithxml\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span>,</div><div class=\"line\">        page: yourPageInstance</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodulewithxml\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span>,</div><div class=\"line\">        page: yourPageInstance</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Gestures\"><a href=\"#Gestures\" class=\"headerlink\" title=\"Gestures\"></a>Gestures</h2><p>All <a href=\"!--￼56--\">UI Gestures</a>\n(gestures.md) can be defined in XML. For example:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Some text\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"myTapHandler\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTapHandler</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> context = args.view.bindingContext;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.myTapHandler = myTapHandler;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> gestures = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/gestures\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTapHandler</span>(<span class=\"params\">args: gestures.GestureEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> context = args.view.bindingContext;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Bindings\"><a href=\"#Bindings\" class=\"headerlink\" title=\"Bindings\"></a>Bindings</h2><p>To set a binding for a property in the <code>XML</code>, you can use double curly brackets syntax.</p>\n<h3 id=\"Property-binding\"><a href=\"#Property-binding\" class=\"headerlink\" title=\"Property binding\"></a>Property binding</h3><p>This sample <code>main-page.xml</code> contains a simple label whose text will be populated when the page loads.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This sample <code>main-page.js</code> or <code>main-page.ts</code> file sets a <code>bindingContext</code> for the page. The <code>bindingContext</code> contains the custom property and its value. When NativeScript parses <code>main-page.xml</code>, it will populate the custom name property with the value in the <code>bindingContext</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\"></div><div class=\"line\">\tpage.bindingContext = &#123; name: <span class=\"string\">\"Some name\"</span> &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    page.bindingContext = &#123; name: <span class=\"string\">\"Some name\"</span> &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>NativeScript looks for the custom property in the <code>bindingContext</code> of the current component or the <code>bindingContext</code> of its parents. By default, all bindings, defined in XML, are two-way bindings.</p>\n</blockquote>\n<h3 id=\"Event-binding\"><a href=\"#Event-binding\" class=\"headerlink\" title=\"Event binding\"></a>Event binding</h3><p>This sample <code>main-page.xml</code> contains a button. The text for the button and the event that the button triggers are determined when the page loads from the matching <code>main-page.js</code> or <code>main-page.ts</code> file.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; myProperty &#125;&#125;\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"&#123;&#123; myFunction &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This sample <code>main-page.js</code> or <code>main-page.ts</code> sets a <code>bindingContext</code> for the page. The <code>bindingContext</code> contains the custom property for the button text and its value and the custom function that will be triggered when the button is tapped. When NativeScript parses <code>main-page.xml</code>, it will populate the button text with the value in the <code>bindingContext</code> and will bind the custom function to the tap event.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    page.bindingContext = &#123;</div><div class=\"line\">        myProperty: <span class=\"string\">\"Some text\"</span>,</div><div class=\"line\">        myFunction: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// Your code</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    page.bindingContext = &#123;</div><div class=\"line\">        myProperty: <span class=\"string\">\"Some text\"</span>,</div><div class=\"line\">        myFunction: () =&gt; &#123;</div><div class=\"line\">            <span class=\"comment\">// Your code</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ListView-binding\"><a href=\"#ListView-binding\" class=\"headerlink\" title=\"ListView binding\"></a>ListView binding</h3><p>You can use the double curly brackets syntax to bind the items to a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_list_view_.listview.html\"><code>listView</code></a>. You can also define a template with the <code>itemTemplate</code> property from which NativeScript will create the items for your <code>listView</code>.</p>\n<blockquote>\n<p>Avoid accessing components by ID, especially when the component is part of a template. It is recommended that you use bindings to specify component properties. </p>\n</blockquote>\n<p>NativeScript can create the items from a template when the <code>listView</code> loads inside your page. When you work with templates and a <code>listView</code>, keep in mind the scope of the <code>listView</code> and its items. </p>\n<p>In this sample <code>main-page.xml</code>, the ListView consists of labels and each item will be created from a template. The text of each label is the value of the name property of the corresponding item. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">id</span>=<span class=\"string\">\"listView1\"</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;&#123; myItems &#125;&#125;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">id</span>=<span class=\"string\">\"label1\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span>  /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The sample <code>main-page.js</code> or <code>main-page.ts</code> populates the <code>bindingContext</code> for the page. In this case, the code sets values for the name property for each label. Note that because the <code>ListView</code> and the Label have different scopes, you can access ListView by ID from the page but you cannot access the Label by ID. The <code>ListView</code> creates a new <code>Label</code> for every item.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    page.bindingContext = &#123; myItems: [&#123; name: <span class=\"string\">\"Name1\"</span> &#125;, &#123; name: <span class=\"string\">\"Name2\"</span> &#125;, &#123; name: <span class=\"string\">\"Name3\"</span> &#125;] &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Will work!</span></div><div class=\"line\">    <span class=\"keyword\">var</span> listView1 = view.getViewById(page, <span class=\"string\">\"listView1\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Will not work!</span></div><div class=\"line\">    <span class=\"keyword\">var</span> label1 = view.getViewById(page, <span class=\"string\">\"label1\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> listView = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/list-view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    page.bindingContext = &#123; myItems: [&#123; name: <span class=\"string\">\"Name1\"</span> &#125;, &#123; name: <span class=\"string\">\"Name2\"</span> &#125;, &#123; name: <span class=\"string\">\"Name3\"</span> &#125;] &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Will work!</span></div><div class=\"line\">    <span class=\"keyword\">var</span> listView1 = &lt;listView.ListView&gt;view.getViewById(page, <span class=\"string\">\"listView1\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Will not work!</span></div><div class=\"line\">    <span class=\"keyword\">var</span> label1 = &lt;label.Label&gt;view.getViewById(page, <span class=\"string\">\"label1\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you want to show some inner collection items inside <figure class=\"highlight plain\"><figcaption><span>you can use a [Repeater](&#123;%slug layouts %&#125;#repeating-layout-children):</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">```XML</div><div class=\"line\">&lt;Page&gt;</div><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\">  &lt;ListView items=&quot;&#123;&#123; myItems &#125;&#125;&quot;&gt;</div><div class=\"line\">    &lt;ListView.itemTemplate&gt;</div><div class=\"line\">      &lt;Repeater items=&quot;&#123;&#123; mySubItems &#125;&#125;&quot;  /&gt;</div><div class=\"line\">    &lt;/ListView.itemTemplate&gt;</div><div class=\"line\">  &lt;/ListView&gt;</div><div class=\"line\">&#123;%endraw%&#125;</div><div class=\"line\">&lt;/Page&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h3><p>To set an expression as a value of a property in the <code>XML</code>, you might as well go with the mustache syntax here.</p>\n<blockquote>\n<p>NativeScript reevaluates your expression on every property change of the <code>Observable</code> object set for <code>bindingContext</code>. This binding is a one-way binding;mdash;from the view model to the user interface.</p>\n</blockquote>\n<p>The following sample <code>main-page.xml</code> shows how to set an expression as the value for a label.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; author ? 'by ' + author : '[no author]' &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; author || '[no author]' &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;</div></pre></td></tr></table></figure>\n<p><strong>Complex property paths</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">your.sub.property[name]</div></pre></td></tr></table></figure>\n<p><strong>Logical not operator and comparators</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">!,<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">,</span> &gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">=,</span> &gt;</span>=, ==, !=, ===, !==,||, &amp;&amp;</span></div></pre></td></tr></table></figure>\n<p><strong>Unary and binary operators</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">+, -, *, <span class=\"regexp\">/, %</span></div></pre></td></tr></table></figure>\n<p><strong>Ternary operator</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a ? b : c</div></pre></td></tr></table></figure>\n<p><strong>Grouping</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(a + b) * (c + d)</div></pre></td></tr></table></figure>\n<p><strong>Constants</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">numbers, strings, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span></div></pre></td></tr></table></figure>\n<h2 id=\"Platform-specific-declarations\"><a href=\"#Platform-specific-declarations\" class=\"headerlink\" title=\"Platform-specific declarations\"></a>Platform-specific declarations</h2><p>To declare a platform-specific property value or platform-specific component in the <code>XML</code>, you can use the following syntax:</p>\n<h3 id=\"Platform-specific-property-value\"><a href=\"#Platform-specific-property-value\" class=\"headerlink\" title=\"Platform-specific property value\"></a>Platform-specific property value</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">ios:editable</span>=<span class=\"string\">'False'</span> <span class=\"attr\">android:editable</span>=<span class=\"string\">'True'</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Platform-specific-component-declaration\"><a href=\"#Platform-specific-component-declaration\" class=\"headerlink\" title=\"Platform-specific component declaration\"></a>Platform-specific component declaration</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ios</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextField</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ios</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">android</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">android</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>You cannot nest platform tags!</p>\n</blockquote>\n<h2 id=\"Lowercase-dashed-component-declaration\"><a href=\"#Lowercase-dashed-component-declaration\" class=\"headerlink\" title=\"Lowercase-dashed component declaration\"></a>Lowercase-dashed component declaration</h2><p>Since the release of NativeScript 1.3, you can declare your UI using lowercase-dashed syntax:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scroll-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stack-layout</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">ctext</span>=<span class=\"string\">\"Label\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Button\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"tap\"</span> /&gt;</span></div><div class=\"line\">      ...</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"The-User-Interface\"><a href=\"#The-User-Interface\" class=\"headerlink\" title=\"The User Interface\"></a>The User Interface</h1><p>The user interface of NativeScript mobile apps consists of pages. Typically, the design of the user interface is developed and stored in <code>XML</code> files, styling is done via CSS and the business logic is developed and stored in <code>JavaScript</code> or <code>TypeScript</code> files. </p>\n<ul>\n<li><a href=\"#the-basics\">The basics</a><ul>\n<li><a href=\"#declare-the-home-page\">Declare the home page</a></li>\n<li><a href=\"#navigate-to-a-page\">Navigate to a page</a></li>\n<li><a href=\"#execute-business-logic\">Execute business logic</a></li>\n</ul>\n</li>\n<li><a href=\"#user-interface-components\">User interface components</a><ul>\n<li><a href=\"#the-default-content-components\">The default content components</a></li>\n<li><a href=\"#custom-components\">Custom components</a></li>\n</ul>\n</li>\n<li><a href=\"#bindings\">Bindings</a><ul>\n<li><a href=\"#property-binding\">Property binding</a></li>\n<li><a href=\"#event-binding\">Event binding</a></li>\n<li><a href=\"#listview-binding\">ListView binding</a></li>\n<li><a href=\"#expressions\">Expressions</a></li>\n</ul>\n</li>\n<li><a href=\"#platform-specific-declarations\">Platform-specific declarations</a><ul>\n<li><a href=\"#platform-specific-property-value\">Platform-specific property value</a></li>\n<li><a href=\"#platform-specific-component-declaration\">Platform-specific component declaration</a></li>\n</ul>\n</li>\n<li><a href=\"#lower-case-dashed-component-declaration\">Lower-case-dashed component declaration</a></li>\n</ul>\n<h2 id=\"The-basics\"><a href=\"#The-basics\" class=\"headerlink\" title=\"The basics\"></a>The basics</h2><p>When you develop the user interface of your app, you can implement each application screen in a separate page or implement your application screens on a single page with a tab view. </p>\n<p>For each page, you need to have a separate <code>XML</code> file that holds the layout of the page. For each <code>XML</code> file that NativeScript parses, the framework also looks for a <code>JavaScript</code> or <code>TypeScript</code> file with the same name and executes the business logic inside it. </p>\n<h3 id=\"Declare-the-home-page\"><a href=\"#Declare-the-home-page\" class=\"headerlink\" title=\"Declare the home page\"></a>Declare the home page</h3><p>Each NativeScript app must have a home page&mdash;the page that loads when you launch the app.</p>\n<p>You need to explicitly set the home page for your app. You can do this by calling the <code>start()</code> method of the <a href=\"http://docs.nativescript.org/api-reference/modules/_application_.html\"><code>Application</code></a> module and pass <code>NavigationEntry</code> with the desired <code>moduleName</code>.</p>\n<p>The NativeScript navigation framework looks for an <code>XML</code> file with the specified name, loads it and navigates to the respective page. If NativeScript discovers a <code>JavaScript</code> or <code>TypeScript</code> file with the same name, it executes the code inside it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"comment\">// Start the application. Don't place any code after this line.</span></div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"my-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> application = <span class=\"built_in\">require</span>(<span class=\"string\">\"application\"</span>);</div><div class=\"line\"><span class=\"comment\">// Start the application. Don't place any code after this line.</span></div><div class=\"line\">application.start(&#123; moduleName: <span class=\"string\">\"my-page\"</span> &#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Navigate-to-a-page\"><a href=\"#Navigate-to-a-page\" class=\"headerlink\" title=\"Navigate to a page\"></a>Navigate to a page</h3><p>You can navigate between pages with the <code>navigate</code> method of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> class. The <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_frame_.frame.html\"><code>Frame</code></a> class represents the logical unit that is responsible for navigation between different pages. Typically, each app has one frame at the root level&mdash;the topmost frame.</p>\n<p>When you trigger navigation, NativeScript looks for an <code>XML</code> file with the specified name, loads it and navigates to the respective page. If NativeScript discovers a <code>JavaScript</code> or <code>TypeScript</code> file with the same name, it executes the code inside it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// To import the \"ui/frame\" module:</span></div><div class=\"line\"><span class=\"keyword\">var</span> frames = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"comment\">// Navigate to page called “my-page”</span></div><div class=\"line\">frames.topmost().navigate(<span class=\"string\">\"my-page\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// To import the \"ui/frame\" module:</span></div><div class=\"line\"><span class=\"keyword\">import</span> frames = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/frame\"</span>);</div><div class=\"line\"><span class=\"comment\">// Navigate to page called “my-page”</span></div><div class=\"line\">frames.topmost().navigate(<span class=\"string\">\"my-page\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Paths are relative to the application root. In the example above, NativeScript looks for a <code>my-page.xml</code> file in the app directory of your project.</p>\n</blockquote>\n<h3 id=\"Execute-business-logic\"><a href=\"#Execute-business-logic\" class=\"headerlink\" title=\"Execute business logic\"></a>Execute business logic</h3><p>When you have a <code>JavaScript</code> or a <code>TypeScript</code> file in the same location with the same name as your <code>XML</code> file, NativeScript loads it together with the <code>XML</code> file. In this <code>JavaScript</code> or <code>TypeScript</code> file you can manage event handlers, bind context or execute additional business logic.</p>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>In this example of <code>main-page.xml</code>, your page consists of a button. When you tap the button, the <code>buttonTap</code> function is triggered.  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Label1\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label!\"</span> /&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Button!\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"buttonTap\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This example app is a simple counter app. The logic for the counter is implemented in a <code>main-page.js</code> or <code>main-page.ts</code> file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buttonTap</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\">    <span class=\"keyword\">var</span> sender = args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> parent = sender.parent;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = view.getViewById(parent, <span class=\"string\">\"Label1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lbl) &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"You tapped \"</span> + count + <span class=\"string\">\" times!\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.buttonTap = buttonTap;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buttonTap</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\">    <span class=\"keyword\">var</span> sender = &lt;view.View&gt;args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> parent = sender.parent;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = &lt;label.Label&gt;view.getViewById(parent, <span class=\"string\">\"Label1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lbl) &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"You tapped \"</span> + count + <span class=\"string\">\" times!\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To access variables or functions from the user interface, you need to declare them in the <code>exports</code> object in the module.</p>\n<p>NativeScript sets each attribute value in the XML declaration to a respective property or an event of the component. If a respective property does not exist, NativeScript sets the attribute value as an expando object.</p>\n<p>Starting with NativeScript 1.3 you can specify code and CSS files for your Page XML using <code>codeFile</code> and <code>cssFile</code> attributes:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">codeFile</span>=<span class=\"string\">\"~/your-code-file\"</span> <span class=\"attr\">cssFile</span>=<span class=\"string\">\"~/your-styles.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">     ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"User-interface-components\"><a href=\"#User-interface-components\" class=\"headerlink\" title=\"User interface components\"></a>User interface components</h2><p>NativeScript provides a wide range of built-in user interface components:mdash;layouts and widgets. You can also create your own custom user interface components. </p>\n<p>When NativeScript parses your <code>XML</code> files, it looks for components that match a name in the module exports.</p>\n<p>For example, when you have a <code>Button</code> declaration in your <code>XML</code> file, NativeScript looks for a <code>Button</code> name in the module exports.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Button = ...</div><div class=\"line\">    ...</div><div class=\"line\">exports.Button = Button;</div></pre></td></tr></table></figure>\n<h3 id=\"The-default-content-components\"><a href=\"#The-default-content-components\" class=\"headerlink\" title=\"The default content components\"></a>The default content components</h3><p>The top-level user interface components are content components:mdash;pages and layouts. These content components let you arrange your interactive user interface components in specific ways.</p>\n<h4 id=\"Page\"><a href=\"#Page\" class=\"headerlink\" title=\"Page\"></a>Page</h4><p>Your application pages (or screens) are instances of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>page</code></a> class of the <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_page_.page.html\"><code>Page</code></a> module. Typically, an app will consist of multiple application screens.</p>\n<h5 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>You can execute some business logic when your page loads using the <code>pageLoaded</code> event.</p>\n<p>You need to set the <code>loaded</code> attribute for your page in your <code>main-page.xml</code>.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\"> …</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You need to handle the business logic that loads in a <code>main-page.js</code> or <code>main-page.ts</code> file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Event handler for Page \"loaded\" event attached in main-page.xml</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Get the event sender</span></div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"TabView\"><a href=\"#TabView\" class=\"headerlink\" title=\"TabView\"></a>TabView</h4><p>With a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_tab_view_.tabview.html\"><code>tabview</code></a>, you can avoid spreading your user interface across multiple pages. Instead, you can have one page with multiple tabs.</p>\n<h5 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>The following sample <code>main-page.xml</code> contains two tabs with labels.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TabView</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tabView1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TabView.items</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">TabViewItem</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Tab 1\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TabViewItem.view</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in Tab 1\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TabViewItem.view</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">TabViewItem</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">TabViewItem</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Tab 2\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TabViewItem.view</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in Tab 2\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TabViewItem.view</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">TabViewItem</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">TabView.items</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">TabView</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The respective <code>main-page.js</code> or <code>main-page.ts</code> loads the first tab by its ID and shows its contents.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> tabView1 = view.getViewById(page, <span class=\"string\">\"tabView1\"</span>);</div><div class=\"line\">    tabView1.selectedIndex = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> tab = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/tab-view\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Event handler for Page \"loaded\" event attached in main-page.xml</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Get the event sender</span></div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    <span class=\"keyword\">var</span> tabView1 = &lt;tab.TabView&gt;view.getViewById(page, <span class=\"string\">\"tabView1\"</span>);</div><div class=\"line\">    tabView1.selectedIndex = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ScrollView\"><a href=\"#ScrollView\" class=\"headerlink\" title=\"ScrollView\"></a>ScrollView</h4><p>You can insert a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_scroll_view_.scrollview.html\"><code>scrollView</code></a> inside your page to make the page or the content enclosed in the <code>scrollView</code> scrollable.</p>\n<h5 id=\"Example-3\"><a href=\"#Example-3\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>This sample <code>main-page.xml</code> shows how to insert a <code>scrollView</code> inside your page.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\">\t…</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"StackLayout\"><a href=\"#StackLayout\" class=\"headerlink\" title=\"StackLayout\"></a>StackLayout</h4><p>You can arrange the user interface components in your page in a horizontal or vertical stack using <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_layouts_stack_layout_.stacklayout.html\"><code>stackLayout</code></a>.</p>\n<h5 id=\"Example-4\"><a href=\"#Example-4\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>This sample <code>main-page.xml</code> shows how to arrange the labels in a page in a horizontal stack.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackLayout</span> <span class=\"attr\">orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 2\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"GridLayout\"><a href=\"#GridLayout\" class=\"headerlink\" title=\"GridLayout\"></a>GridLayout</h4><p>You can arrange the user interface components in your page in a flexible grid area using <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_layouts_grid_layout_.gridlayout.html\"><code>gridLayout</code></a>.</p>\n<h5 id=\"Example-5\"><a href=\"#Example-5\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>This sample <code>main-page.xml</code> shows how to arrange labels inside a table by setting their position by row or column.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GridLayout</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"*, auto\"</span> <span class=\"attr\">columns</span>=<span class=\"string\">\"250, *\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 0, col 0\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 0, col 1\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 1, col 0\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 1, col 1\"</span> <span class=\"attr\">row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">col</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label in row 0, col 0\"</span> <span class=\"attr\">rowSpan</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">colSpan</span>=<span class=\"string\">\"2\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">GridLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"WrapLayout\"><a href=\"#WrapLayout\" class=\"headerlink\" title=\"WrapLayout\"></a>WrapLayout</h4><p>You can arrange your user interface components in rows or columns until the space is filled and then wrap them on a new row or column using <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_layouts_wrap_layout_.wraplayout.html\"><code>wrapLayout</code></a>. By default, if orientation is not specified, <code>wrapLayout</code> arranges items horizontally.</p>\n<h5 id=\"Example-6\"><a href=\"#Example-6\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>This sample <code>main-page.xml</code> provides four labels wrapped horizontally within the visible space of the page.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">WrapLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 1\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 2\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 3\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 4\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">WrapLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"AbsoluteLayout\"><a href=\"#AbsoluteLayout\" class=\"headerlink\" title=\"AbsoluteLayout\"></a>AbsoluteLayout</h4><p>You can arrange your user interface components by left/top coordinates using <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_layouts_absolute_layout_.absolutelayout.html\"><code>absoluteLayout</code></a>.</p>\n<h5 id=\"Example-7\"><a href=\"#Example-7\" class=\"headerlink\" title=\"Example\"></a>Example</h5><p>The following <code>main-page.xml</code> contains a page with a single label positioned at the specified coordinates.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">AbsoluteLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"This is Label 1\"</span> <span class=\"attr\">left</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">top</span>=<span class=\"string\">\"70\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">AbsoluteLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Custom-components\"><a href=\"#Custom-components\" class=\"headerlink\" title=\"Custom components\"></a>Custom components</h3><p>You can define your own XML namespaces to create custom user interface components.</p>\n<h4 id=\"Code-only-custom-component\"><a href=\"#Code-only-custom-component\" class=\"headerlink\" title=\"Code-only custom component\"></a>Code-only custom component</h4><p>This sample <code>main-page.xml</code> is using a custom component defined in separate declarations in the <code>xml-declaration/mymodule</code> directory. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span></div><div class=\"line\">    <span class=\"attr\">xmlns:customControls</span>=<span class=\"string\">\"xml-declaration/mymodule\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">customControls:MyControl</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This sample custom component declared in <code>xml-declaration/mymodule.js</code> or <code>xml-declaration/mymodule.ts</code> exports the <code>MyControl</code> variable, which creates a simple counter inside your <code>main-page.xml</code> page.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> __extends = <span class=\"keyword\">this</span>.__extends || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> b) <span class=\"keyword\">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">this</span>.constructor = d; &#125;</div><div class=\"line\">    __.prototype = b.prototype;</div><div class=\"line\">    d.prototype = <span class=\"keyword\">new</span> __();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> stackLayout = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/layouts/stack-layout\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> MyControl = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    __extends(MyControl, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyControl</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _super.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = <span class=\"keyword\">new</span> label.Label();</div><div class=\"line\">        <span class=\"keyword\">var</span> btn = <span class=\"keyword\">new</span> button.Button();</div><div class=\"line\">        btn.text = <span class=\"string\">\"Tap me!\"</span>;</div><div class=\"line\">        btn.on(button.Button.tapEvent, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"Tap \"</span> + counter++;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addChild(lbl);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addChild(btn);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> MyControl;</div><div class=\"line\">&#125;)(stackLayout.StackLayout);</div><div class=\"line\">exports.MyControl = MyControl;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> stackLayout = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/layouts/stack-layout\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> button = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/button\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MyControl extends stackLayout.StackLayout &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> counter: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = <span class=\"keyword\">new</span> label.Label();</div><div class=\"line\">        <span class=\"keyword\">var</span> btn = <span class=\"keyword\">new</span> button.Button();</div><div class=\"line\">        btn.text = <span class=\"string\">\"Tap me!\"</span>;</div><div class=\"line\">        btn.on(button.Button.tapEvent, (args: observable.EventData) =&gt; &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"Tap \"</span> + counter++;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.addChild(lbl);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addChild(btn);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>When referring to code-only components in your pages with an <code>xmlns</code> declaration, you should point it either to the code file with the component implementation or to the folder containing the files. In the latter case, you will have to add a <code>package.json</code> file in the folder so that the file can be required properly.</p>\n<h4 id=\"XML-based-custom-component-with-a-code-file\"><a href=\"#XML-based-custom-component-with-a-code-file\" class=\"headerlink\" title=\"XML-based custom component with a code file\"></a>XML-based custom component with a code file</h4><p>This sample <code>main-page.xml</code> uses a custom component defined in an <code>xml-declaration/mymodulewithxml/MyControl.xml</code> file together with <code>xml-declaration/mymodulewithxml/MyControl.js</code> or <code>xml-declaration/mymodulewithxml/MyControl.ts</code> code file. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span></div><div class=\"line\">    <span class=\"attr\">xmlns:customOtherControls</span>=<span class=\"string\">\"xml-declaration/mymodulewithxml\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">customOtherControls:MyControl</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The custom component in <code>xml-declaration/MyControl.xml</code> defines a button, a label and a <code>buttonTap</code> function, located in the code file, which changes the label on every tap of the button.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackLayout</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Label1\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Click!\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"buttonTap\"</span> /&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buttonTap</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\">    <span class=\"keyword\">var</span> parent = args.object.parent;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = view.getViewById(parent, <span class=\"string\">\"Label1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lbl) &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"You tapped \"</span> + count + <span class=\"string\">\" times!\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.buttonTap = buttonTap;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buttonTap</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> parent = (&lt;view.View&gt;args.object).parent;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lbl = &lt;label.Label&gt;view.getViewById(parent, <span class=\"string\">\"Label1\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (lbl) &#123;</div><div class=\"line\">            lbl.text = <span class=\"string\">\"You tapped \"</span> + count + <span class=\"string\">\" times!\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Dynamically-loading-custom-components\"><a href=\"#Dynamically-loading-custom-components\" class=\"headerlink\" title=\"Dynamically loading custom components\"></a>Dynamically loading custom components</h4><p>Load a pure JavaScript component by finding it in the exports of the module. The component is specified by a path and its name. Then the code from the JavaScript file is executed.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/builder\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodule\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> builder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/builder\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodule\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Load the XML file with JavaScript code-behind by finding the specified XML filename through the specified path in the exports of the modules. JavaScript file with the same name will be required and served as code-behind of the XML.\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/builder\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodulewithxml\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> builder = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/builder\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodulewithxml\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The UI builder will automatically load the CSS file with the same name as the component name and apply it to the specified page:\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodulewithxml\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span>,</div><div class=\"line\">        page: yourPageInstance</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = builder.load(&#123;</div><div class=\"line\">        path: <span class=\"string\">\"~/xml-declaration/mymodulewithxml\"</span>,</div><div class=\"line\">        name: <span class=\"string\">\"MyControl\"</span>,</div><div class=\"line\">        page: yourPageInstance</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Gestures\"><a href=\"#Gestures\" class=\"headerlink\" title=\"Gestures\"></a>Gestures</h2><p>All <a href=\"!--￼56--\">UI Gestures</a>\n(gestures.md) can be defined in XML. For example:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Some text\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"myTapHandler\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTapHandler</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> context = args.view.bindingContext;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.myTapHandler = myTapHandler;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> gestures = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/gestures\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTapHandler</span>(<span class=\"params\">args: gestures.GestureEventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> context = args.view.bindingContext;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Bindings\"><a href=\"#Bindings\" class=\"headerlink\" title=\"Bindings\"></a>Bindings</h2><p>To set a binding for a property in the <code>XML</code>, you can use double curly brackets syntax.</p>\n<h3 id=\"Property-binding\"><a href=\"#Property-binding\" class=\"headerlink\" title=\"Property binding\"></a>Property binding</h3><p>This sample <code>main-page.xml</code> contains a simple label whose text will be populated when the page loads.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This sample <code>main-page.js</code> or <code>main-page.ts</code> file sets a <code>bindingContext</code> for the page. The <code>bindingContext</code> contains the custom property and its value. When NativeScript parses <code>main-page.xml</code>, it will populate the custom name property with the value in the <code>bindingContext</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\"></div><div class=\"line\">\tpage.bindingContext = &#123; name: <span class=\"string\">\"Some name\"</span> &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    page.bindingContext = &#123; name: <span class=\"string\">\"Some name\"</span> &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>NativeScript looks for the custom property in the <code>bindingContext</code> of the current component or the <code>bindingContext</code> of its parents. By default, all bindings, defined in XML, are two-way bindings.</p>\n</blockquote>\n<h3 id=\"Event-binding\"><a href=\"#Event-binding\" class=\"headerlink\" title=\"Event binding\"></a>Event binding</h3><p>This sample <code>main-page.xml</code> contains a button. The text for the button and the event that the button triggers are determined when the page loads from the matching <code>main-page.js</code> or <code>main-page.ts</code> file.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; myProperty &#125;&#125;\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"&#123;&#123; myFunction &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This sample <code>main-page.js</code> or <code>main-page.ts</code> sets a <code>bindingContext</code> for the page. The <code>bindingContext</code> contains the custom property for the button text and its value and the custom function that will be triggered when the button is tapped. When NativeScript parses <code>main-page.xml</code>, it will populate the button text with the value in the <code>bindingContext</code> and will bind the custom function to the tap event.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    page.bindingContext = &#123;</div><div class=\"line\">        myProperty: <span class=\"string\">\"Some text\"</span>,</div><div class=\"line\">        myFunction: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// Your code</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    page.bindingContext = &#123;</div><div class=\"line\">        myProperty: <span class=\"string\">\"Some text\"</span>,</div><div class=\"line\">        myFunction: () =&gt; &#123;</div><div class=\"line\">            <span class=\"comment\">// Your code</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ListView-binding\"><a href=\"#ListView-binding\" class=\"headerlink\" title=\"ListView binding\"></a>ListView binding</h3><p>You can use the double curly brackets syntax to bind the items to a <a href=\"http://docs.nativescript.org/api-reference/classes/_ui_list_view_.listview.html\"><code>listView</code></a>. You can also define a template with the <code>itemTemplate</code> property from which NativeScript will create the items for your <code>listView</code>.</p>\n<blockquote>\n<p>Avoid accessing components by ID, especially when the component is part of a template. It is recommended that you use bindings to specify component properties. </p>\n</blockquote>\n<p>NativeScript can create the items from a template when the <code>listView</code> loads inside your page. When you work with templates and a <code>listView</code>, keep in mind the scope of the <code>listView</code> and its items. </p>\n<p>In this sample <code>main-page.xml</code>, the ListView consists of labels and each item will be created from a template. The text of each label is the value of the name property of the corresponding item. </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span> <span class=\"attr\">loaded</span>=<span class=\"string\">\"pageLoaded\"</span>&gt;</span></div><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ListView</span> <span class=\"attr\">id</span>=<span class=\"string\">\"listView1\"</span> <span class=\"attr\">items</span>=<span class=\"string\">\"&#123;&#123; myItems &#125;&#125;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">id</span>=<span class=\"string\">\"label1\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span>  /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ListView.itemTemplate</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ListView</span>&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The sample <code>main-page.js</code> or <code>main-page.ts</code> populates the <code>bindingContext</code> for the page. In this case, the code sets values for the name property for each label. Note that because the <code>ListView</code> and the Label have different scopes, you can access ListView by ID from the page but you cannot access the Label by ID. The <code>ListView</code> creates a new <code>Label</code> for every item.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = args.object;</div><div class=\"line\">    page.bindingContext = &#123; myItems: [&#123; name: <span class=\"string\">\"Name1\"</span> &#125;, &#123; name: <span class=\"string\">\"Name2\"</span> &#125;, &#123; name: <span class=\"string\">\"Name3\"</span> &#125;] &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Will work!</span></div><div class=\"line\">    <span class=\"keyword\">var</span> listView1 = view.getViewById(page, <span class=\"string\">\"listView1\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Will not work!</span></div><div class=\"line\">    <span class=\"keyword\">var</span> label1 = view.getViewById(page, <span class=\"string\">\"label1\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.pageLoaded = pageLoaded;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">\"data/observable\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> pages = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/page\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> view = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/core/view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> listView = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/list-view\"</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> label = <span class=\"built_in\">require</span>(<span class=\"string\">\"ui/label\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pageLoaded</span>(<span class=\"params\">args: observable.EventData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = &lt;pages.Page&gt;args.object;</div><div class=\"line\">    page.bindingContext = &#123; myItems: [&#123; name: <span class=\"string\">\"Name1\"</span> &#125;, &#123; name: <span class=\"string\">\"Name2\"</span> &#125;, &#123; name: <span class=\"string\">\"Name3\"</span> &#125;] &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Will work!</span></div><div class=\"line\">    <span class=\"keyword\">var</span> listView1 = &lt;listView.ListView&gt;view.getViewById(page, <span class=\"string\">\"listView1\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Will not work!</span></div><div class=\"line\">    <span class=\"keyword\">var</span> label1 = &lt;label.Label&gt;view.getViewById(page, <span class=\"string\">\"label1\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you want to show some inner collection items inside <figure class=\"highlight plain\"><figcaption><span>you can use a [Repeater](&#123;%slug layouts %&#125;#repeating-layout-children):</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">```XML</div><div class=\"line\">&lt;Page&gt;</div><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\">  &lt;ListView items=&quot;&#123;&#123; myItems &#125;&#125;&quot;&gt;</div><div class=\"line\">    &lt;ListView.itemTemplate&gt;</div><div class=\"line\">      &lt;Repeater items=&quot;&#123;&#123; mySubItems &#125;&#125;&quot;  /&gt;</div><div class=\"line\">    &lt;/ListView.itemTemplate&gt;</div><div class=\"line\">  &lt;/ListView&gt;</div><div class=\"line\">&#123;%endraw%&#125;</div><div class=\"line\">&lt;/Page&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h3><p>To set an expression as a value of a property in the <code>XML</code>, you might as well go with the mustache syntax here.</p>\n<blockquote>\n<p>NativeScript reevaluates your expression on every property change of the <code>Observable</code> object set for <code>bindingContext</code>. This binding is a one-way binding;mdash;from the view model to the user interface.</p>\n</blockquote>\n<p>The following sample <code>main-page.xml</code> shows how to set an expression as the value for a label.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;%raw%&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; author ? 'by ' + author : '[no author]' &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">text</span>=<span class=\"string\">\"&#123;&#123; author || '[no author]' &#125;&#125;\"</span> /&gt;</span></div><div class=\"line\">&#123;%endraw%&#125;</div></pre></td></tr></table></figure>\n<p><strong>Complex property paths</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">your.sub.property[name]</div></pre></td></tr></table></figure>\n<p><strong>Logical not operator and comparators</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">!,<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">,</span> &gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">=,</span> &gt;</span>=, ==, !=, ===, !==,||, &amp;&amp;</span></div></pre></td></tr></table></figure>\n<p><strong>Unary and binary operators</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">+, -, *, <span class=\"regexp\">/, %</span></div></pre></td></tr></table></figure>\n<p><strong>Ternary operator</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a ? b : c</div></pre></td></tr></table></figure>\n<p><strong>Grouping</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(a + b) * (c + d)</div></pre></td></tr></table></figure>\n<p><strong>Constants</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">numbers, strings, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span></div></pre></td></tr></table></figure>\n<h2 id=\"Platform-specific-declarations\"><a href=\"#Platform-specific-declarations\" class=\"headerlink\" title=\"Platform-specific declarations\"></a>Platform-specific declarations</h2><p>To declare a platform-specific property value or platform-specific component in the <code>XML</code>, you can use the following syntax:</p>\n<h3 id=\"Platform-specific-property-value\"><a href=\"#Platform-specific-property-value\" class=\"headerlink\" title=\"Platform-specific property value\"></a>Platform-specific property value</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextField</span> <span class=\"attr\">ios:editable</span>=<span class=\"string\">'False'</span> <span class=\"attr\">android:editable</span>=<span class=\"string\">'True'</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Platform-specific-component-declaration\"><a href=\"#Platform-specific-component-declaration\" class=\"headerlink\" title=\"Platform-specific component declaration\"></a>Platform-specific component declaration</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ios</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextField</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ios</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">android</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">android</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Page</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>You cannot nest platform tags!</p>\n</blockquote>\n<h2 id=\"Lowercase-dashed-component-declaration\"><a href=\"#Lowercase-dashed-component-declaration\" class=\"headerlink\" title=\"Lowercase-dashed component declaration\"></a>Lowercase-dashed component declaration</h2><p>Since the release of NativeScript 1.3, you can declare your UI using lowercase-dashed syntax:\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">page</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scroll-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stack-layout</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">ctext</span>=<span class=\"string\">\"Label\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">text</span>=<span class=\"string\">\"Button\"</span> <span class=\"attr\">tap</span>=<span class=\"string\">\"tap\"</span> /&gt;</span></div><div class=\"line\">      ...</div></pre></td></tr></table></figure></p>\n"},{"title":"Bundling Script Code with Webpack","description":"Learn how to optimize your code and reduce application size.","position":14,"slug":"bundling-with-webpack","_content":"\n# Using Webpack to Bundle Your Code\n\n0. [Overview](#overview)\n1. [Introducing Webpack](#introducing-webpack)\n2. [Installation](#installation)\n3. [How nativescript-dev-webpack works](#how-nativescript-dev-webpack-works)\n    : config, hooks\n4. [Bundling](#bundling)\n5. [Android Native Classes](#android-native-classes)\n6. [Tips and Tricks](#tips-and-tricks)\n    1. [Dynamic Imports](#dynamic-requires)\n    2. [Advanced Configuration](#advanced-configuration)\n7. Webpack resources (#webpack-resources)\n\n## Overview\n\nJavaScript code and general asset bundling has been a member of the web developer toolbox for a long time. Tools like [webpack](https://webpack.github.io/) have been providing support for an enjoyable development experience that lets you assemble client-side code from various module sources and formats and then package it together. Most importantly, they allow for page load time optimizations that reduce or parallelize the number of requests a browser makes to the server.\n\nWhy bundle scripts in a mobile app though? Aren't all files stored on the local device, so requesting them should be faster than an HTTP request?! Yes, that is the case, but bundling still has an important place in mobile app optimizations:\n\n* Fewer filesystem operations on app startup since all code is loaded from a single bundle file. Mobile file storage is not known for being very performant.\n* Smaller code size. Bundlers traverse the module import graph and do not bundle unused modules. Not using that obscure feature in module X? Don't make your users pay for it then.\n* Preprocessing and interoperability hooks (not covered in this article). Webpack provides a way to resolve modules and expressions differently according to its configuration. It also contains a lot of plugins and loaders that let you embed different content in your application or use code written in different programming languages.\n\n## Introducing Webpack\n\nWebpack works by traversing your source tree starting from a number of \"entry\" modules. This makes it possible to collect just modules that are actually used in your program.\n\nBundling options are configured in the `webpack.config.js` file, which has the benefit of being a fully-functional JavaScript program that can give you great flexibility. See the [advanced configuration](#advanced-configuration) section below for examples.\n\nSince bundling can be a slow and resource intensive operation, we do not enable it for every build. It is easiest to develop and debug your code without bundling, and use bundled code for QA/release builds.\n\n\n## Installation\n\nThe easiest way to enable webpack support for your application is to install the `nativescript-dev-webpack` plugin. To do that, run this in your application folder:\n\n```\n$ tns install webpack\n```\n\n## How nativescript-dev-webpack works\n\nInstalling the plugin adds the following files to your project:\n\n* `webpack.config.js` -- the main bundling config. Add it to source control.\n* `app/tns-java-classes.js` -- native Java classes entrypoint . See [below](#android-native-classes) for details. Add it to source control too.\n* An \"after-prepare\" bundling build hook. Add it to source control or gitignore `hooks/after-prepare`, as that directory will be recreated if missing.\n\nThe nativescript-dev-webpack plugin works together with the `tns` CLI tool. Its \"after-prepare\" build hook invokes the webpack process. Since most transpiler plugins are run as \"before-prepare\" hooks, this happens after all your code has been verified and transpiled to JavaScript.\n\n### Bundling Transpiled Code\n\nWebpack supports two modes of operation when using code that transpiles to JavaScript e.g. TypeScript, CoffeeScript:\n\n1. Run the transpiler, and then run webpack on the generated file. This is the simplest and hence the recommended approach for NativeScript apps at the moment.\n2. Register a loader for the transpilable language, and run transpilation as a part of the bundling process.\n\n## Bundling\n\nBundling is run as a part of the platform \"preparation\" process and is invoked by the respective `tns prepare <platform>` command, and its relatives like `tns build <platform>` and `tns run <platform>`.\n\n\nNote that the default behavior will **NOT** trigger bundling. You need to explicitly request it with the `--bundle` option:\n\n```\n$ tns prepare android --bundle\n```\n\nor\n\n```\n$ tns run ios --bundle\n```\n\nand, of course:\n\n```\n$ tns build ios --for-device --bundle\n```\n\nTo reiterate, passing the `--bundle` option will **not** include any JavaScript modules from your `node_modules` folder in your app. The resulting bundle is the only code that will get executed on the emulator/device.\n\n## Android Native Classes\n\nThe NativeScript Android runtime allows for certain classes to contain both a Java and a JavaScript implementation. The way this works is by using a Java annotation that points to the JavaScript module which contains the corresponding JavaScript class. Those classes need some special handling by the bundling process since they need to be loaded by Java code (which webpack does not control), and they usually need to be loaded earlier than the rest of the application.\n\nThe way `nativescript-dev-webpack` solves this problem is to add mappings for those classes to a config file called `tns-java-classes.js` and split the bundle in two chunks. This allows us to load the chunk containing the Java-related code first.\n\nOn installation, you will get a default file that registers built-in classes like `com.tns.NativeScriptApplication` and `com.tns.NativeScriptActivity`. You can modify this file and include other classes that need to be instantiated from Java code.\n\n### Dynamic Imports\n\nA significant drawback to using bundled code is that you have to know the names of all imported modules in advance at bundle time. That means code using variables and passing them to `require` will not work:\n\n```JavaScript\n// THROWS AN ERROR!\nrequire(myPlugin);\n```\n\nYou can solve this if you have a known set of resolvable modules and you need to switch between them by registering those so that webpack discovers them. You do that by adding a set of `global.registerModule` calls to your application bootstrap code (or some other module that is discovered by webpack when traversing the module import graph):\n\n```JavaScript\nrequire(\"globals\");\nglobal.registerModule(\"my-plugin\", function() { return require(\"my-plugin\"); });\n```\n\nThen you will be able to import this module using the `global.loadModule` API:\n\n```JavaScript\nvar myPlugin = \"my-plugin\";\n//...\nglobal.loadModule(myPlugin);\n```\n\n## Tips and Tricks\n\nWebpack bundling can fail for different reasons, or it can generate code that breaks at runtime (like the dynamic imports scenario outlined above). Debugging problems is easy once you know what code runs on your device.\n\n### Debugging Bundling Errors\n\nWebpack may not show all error details by default, but you can always enable that by passing the `--display-error-details` [configuration option](https://webpack.github.io/docs/cli.html#display-error-details). Since the plugin invokes webpack automatically, the way to pass those options is via the `WEBPACK_OPTS` environment variable. For example, when running in a bash-like command shell you can do:\n\n```\n$ WEBPACK_OPTS=\"--display-error-details\" tns prepare android --bundle\n```\n\nOther options that can be useful when diagnosing a problem are: `--display-modules`, `--display-reasons`, `--display-chunks`.\n\n### Inspecting Bundles\n\nBundles are generated in the platform output folders. Look for the `bundle.js` and `tns-bundle-js` files in your `platforms/android/...` and `platforms/ios/...` \"app\" folders.\n\n### Advanced Configuration\n\nThe `webpack.config.js` file exports a valid webpack configuration that you can modify in-flight. A typical file looks like:\n\n```JavaScript\nvar bundler = require(\"nativescript-dev-webpack\");\n\nmodule.exports = bundler.getConfig({\n    // TODO: add project-specific webpack settings here...\n});\n```\n\nYou have two customization options:\n\n1. Pass your pre-populated configuration in the object parameter to `bundler.getConfig`. Any top-level webpack properties that you set will be preserved by the plugin.\n2. Modify the `bundler.getConfig` result before reexporting it. This might be more convenient if you need to modify a single suboption of an option that is set by default. For example, here is how you can **only** disable module path information, and preserve the rest of the `output` options:\n\n```JavaScript\nvar bundler = require(\"nativescript-dev-webpack\");\n\nvar config = bundler.getConfig({});\nconfig.output.pathinfo = false;\nmodule.exports = config;\n\n```\n\n## Webpack Resources\n\nBundling JavaScript code can get complex very soon, and encountering webpack for the first time can get daunting. A full introduction to webpack and related technologies is beyond the scope of this article, and we recommend the following resources:\n\n* [Introduction](https://webpack.github.io/docs/what-is-webpack.html)\n* [Tutorial](https://webpack.github.io/docs/tutorials/getting-started/)\n* [CommonJS Guide](https://webpack.github.io/docs/commonjs.html)\n* [Webpack CLI Reference](https://webpack.github.io/docs/cli.html)\n","source":"workflow/bundling-with-webpack.md","raw":"---\ntitle: Bundling Script Code with Webpack\ndescription: Learn how to optimize your code and reduce application size.\nposition: 14\nslug: bundling-with-webpack\n---\n\n# Using Webpack to Bundle Your Code\n\n0. [Overview](#overview)\n1. [Introducing Webpack](#introducing-webpack)\n2. [Installation](#installation)\n3. [How nativescript-dev-webpack works](#how-nativescript-dev-webpack-works)\n    : config, hooks\n4. [Bundling](#bundling)\n5. [Android Native Classes](#android-native-classes)\n6. [Tips and Tricks](#tips-and-tricks)\n    1. [Dynamic Imports](#dynamic-requires)\n    2. [Advanced Configuration](#advanced-configuration)\n7. Webpack resources (#webpack-resources)\n\n## Overview\n\nJavaScript code and general asset bundling has been a member of the web developer toolbox for a long time. Tools like [webpack](https://webpack.github.io/) have been providing support for an enjoyable development experience that lets you assemble client-side code from various module sources and formats and then package it together. Most importantly, they allow for page load time optimizations that reduce or parallelize the number of requests a browser makes to the server.\n\nWhy bundle scripts in a mobile app though? Aren't all files stored on the local device, so requesting them should be faster than an HTTP request?! Yes, that is the case, but bundling still has an important place in mobile app optimizations:\n\n* Fewer filesystem operations on app startup since all code is loaded from a single bundle file. Mobile file storage is not known for being very performant.\n* Smaller code size. Bundlers traverse the module import graph and do not bundle unused modules. Not using that obscure feature in module X? Don't make your users pay for it then.\n* Preprocessing and interoperability hooks (not covered in this article). Webpack provides a way to resolve modules and expressions differently according to its configuration. It also contains a lot of plugins and loaders that let you embed different content in your application or use code written in different programming languages.\n\n## Introducing Webpack\n\nWebpack works by traversing your source tree starting from a number of \"entry\" modules. This makes it possible to collect just modules that are actually used in your program.\n\nBundling options are configured in the `webpack.config.js` file, which has the benefit of being a fully-functional JavaScript program that can give you great flexibility. See the [advanced configuration](#advanced-configuration) section below for examples.\n\nSince bundling can be a slow and resource intensive operation, we do not enable it for every build. It is easiest to develop and debug your code without bundling, and use bundled code for QA/release builds.\n\n\n## Installation\n\nThe easiest way to enable webpack support for your application is to install the `nativescript-dev-webpack` plugin. To do that, run this in your application folder:\n\n```\n$ tns install webpack\n```\n\n## How nativescript-dev-webpack works\n\nInstalling the plugin adds the following files to your project:\n\n* `webpack.config.js` -- the main bundling config. Add it to source control.\n* `app/tns-java-classes.js` -- native Java classes entrypoint . See [below](#android-native-classes) for details. Add it to source control too.\n* An \"after-prepare\" bundling build hook. Add it to source control or gitignore `hooks/after-prepare`, as that directory will be recreated if missing.\n\nThe nativescript-dev-webpack plugin works together with the `tns` CLI tool. Its \"after-prepare\" build hook invokes the webpack process. Since most transpiler plugins are run as \"before-prepare\" hooks, this happens after all your code has been verified and transpiled to JavaScript.\n\n### Bundling Transpiled Code\n\nWebpack supports two modes of operation when using code that transpiles to JavaScript e.g. TypeScript, CoffeeScript:\n\n1. Run the transpiler, and then run webpack on the generated file. This is the simplest and hence the recommended approach for NativeScript apps at the moment.\n2. Register a loader for the transpilable language, and run transpilation as a part of the bundling process.\n\n## Bundling\n\nBundling is run as a part of the platform \"preparation\" process and is invoked by the respective `tns prepare <platform>` command, and its relatives like `tns build <platform>` and `tns run <platform>`.\n\n\nNote that the default behavior will **NOT** trigger bundling. You need to explicitly request it with the `--bundle` option:\n\n```\n$ tns prepare android --bundle\n```\n\nor\n\n```\n$ tns run ios --bundle\n```\n\nand, of course:\n\n```\n$ tns build ios --for-device --bundle\n```\n\nTo reiterate, passing the `--bundle` option will **not** include any JavaScript modules from your `node_modules` folder in your app. The resulting bundle is the only code that will get executed on the emulator/device.\n\n## Android Native Classes\n\nThe NativeScript Android runtime allows for certain classes to contain both a Java and a JavaScript implementation. The way this works is by using a Java annotation that points to the JavaScript module which contains the corresponding JavaScript class. Those classes need some special handling by the bundling process since they need to be loaded by Java code (which webpack does not control), and they usually need to be loaded earlier than the rest of the application.\n\nThe way `nativescript-dev-webpack` solves this problem is to add mappings for those classes to a config file called `tns-java-classes.js` and split the bundle in two chunks. This allows us to load the chunk containing the Java-related code first.\n\nOn installation, you will get a default file that registers built-in classes like `com.tns.NativeScriptApplication` and `com.tns.NativeScriptActivity`. You can modify this file and include other classes that need to be instantiated from Java code.\n\n### Dynamic Imports\n\nA significant drawback to using bundled code is that you have to know the names of all imported modules in advance at bundle time. That means code using variables and passing them to `require` will not work:\n\n```JavaScript\n// THROWS AN ERROR!\nrequire(myPlugin);\n```\n\nYou can solve this if you have a known set of resolvable modules and you need to switch between them by registering those so that webpack discovers them. You do that by adding a set of `global.registerModule` calls to your application bootstrap code (or some other module that is discovered by webpack when traversing the module import graph):\n\n```JavaScript\nrequire(\"globals\");\nglobal.registerModule(\"my-plugin\", function() { return require(\"my-plugin\"); });\n```\n\nThen you will be able to import this module using the `global.loadModule` API:\n\n```JavaScript\nvar myPlugin = \"my-plugin\";\n//...\nglobal.loadModule(myPlugin);\n```\n\n## Tips and Tricks\n\nWebpack bundling can fail for different reasons, or it can generate code that breaks at runtime (like the dynamic imports scenario outlined above). Debugging problems is easy once you know what code runs on your device.\n\n### Debugging Bundling Errors\n\nWebpack may not show all error details by default, but you can always enable that by passing the `--display-error-details` [configuration option](https://webpack.github.io/docs/cli.html#display-error-details). Since the plugin invokes webpack automatically, the way to pass those options is via the `WEBPACK_OPTS` environment variable. For example, when running in a bash-like command shell you can do:\n\n```\n$ WEBPACK_OPTS=\"--display-error-details\" tns prepare android --bundle\n```\n\nOther options that can be useful when diagnosing a problem are: `--display-modules`, `--display-reasons`, `--display-chunks`.\n\n### Inspecting Bundles\n\nBundles are generated in the platform output folders. Look for the `bundle.js` and `tns-bundle-js` files in your `platforms/android/...` and `platforms/ios/...` \"app\" folders.\n\n### Advanced Configuration\n\nThe `webpack.config.js` file exports a valid webpack configuration that you can modify in-flight. A typical file looks like:\n\n```JavaScript\nvar bundler = require(\"nativescript-dev-webpack\");\n\nmodule.exports = bundler.getConfig({\n    // TODO: add project-specific webpack settings here...\n});\n```\n\nYou have two customization options:\n\n1. Pass your pre-populated configuration in the object parameter to `bundler.getConfig`. Any top-level webpack properties that you set will be preserved by the plugin.\n2. Modify the `bundler.getConfig` result before reexporting it. This might be more convenient if you need to modify a single suboption of an option that is set by default. For example, here is how you can **only** disable module path information, and preserve the rest of the `output` options:\n\n```JavaScript\nvar bundler = require(\"nativescript-dev-webpack\");\n\nvar config = bundler.getConfig({});\nconfig.output.pathinfo = false;\nmodule.exports = config;\n\n```\n\n## Webpack Resources\n\nBundling JavaScript code can get complex very soon, and encountering webpack for the first time can get daunting. A full introduction to webpack and related technologies is beyond the scope of this article, and we recommend the following resources:\n\n* [Introduction](https://webpack.github.io/docs/what-is-webpack.html)\n* [Tutorial](https://webpack.github.io/docs/tutorials/getting-started/)\n* [CommonJS Guide](https://webpack.github.io/docs/commonjs.html)\n* [Webpack CLI Reference](https://webpack.github.io/docs/cli.html)\n","date":"2016-08-26T21:05:54.630Z","updated":"2016-08-26T21:05:54.630Z","path":"workflow/bundling-with-webpack.html","comments":1,"layout":"page","_id":"cisn95cb2001awsl09l3e1mdo","content":"<h1 id=\"Using-Webpack-to-Bundle-Your-Code\"><a href=\"#Using-Webpack-to-Bundle-Your-Code\" class=\"headerlink\" title=\"Using Webpack to Bundle Your Code\"></a>Using Webpack to Bundle Your Code</h1><ol>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#introducing-webpack\">Introducing Webpack</a></li>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#how-nativescript-dev-webpack-works\">How nativescript-dev-webpack works</a>\n : config, hooks</li>\n<li><a href=\"#bundling\">Bundling</a></li>\n<li><a href=\"#android-native-classes\">Android Native Classes</a></li>\n<li><a href=\"#tips-and-tricks\">Tips and Tricks</a><ol>\n<li><a href=\"#dynamic-requires\">Dynamic Imports</a></li>\n<li><a href=\"#advanced-configuration\">Advanced Configuration</a></li>\n</ol>\n</li>\n<li>Webpack resources (#webpack-resources)</li>\n</ol>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>JavaScript code and general asset bundling has been a member of the web developer toolbox for a long time. Tools like <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">webpack</a> have been providing support for an enjoyable development experience that lets you assemble client-side code from various module sources and formats and then package it together. Most importantly, they allow for page load time optimizations that reduce or parallelize the number of requests a browser makes to the server.</p>\n<p>Why bundle scripts in a mobile app though? Aren’t all files stored on the local device, so requesting them should be faster than an HTTP request?! Yes, that is the case, but bundling still has an important place in mobile app optimizations:</p>\n<ul>\n<li>Fewer filesystem operations on app startup since all code is loaded from a single bundle file. Mobile file storage is not known for being very performant.</li>\n<li>Smaller code size. Bundlers traverse the module import graph and do not bundle unused modules. Not using that obscure feature in module X? Don’t make your users pay for it then.</li>\n<li>Preprocessing and interoperability hooks (not covered in this article). Webpack provides a way to resolve modules and expressions differently according to its configuration. It also contains a lot of plugins and loaders that let you embed different content in your application or use code written in different programming languages.</li>\n</ul>\n<h2 id=\"Introducing-Webpack\"><a href=\"#Introducing-Webpack\" class=\"headerlink\" title=\"Introducing Webpack\"></a>Introducing Webpack</h2><p>Webpack works by traversing your source tree starting from a number of “entry” modules. This makes it possible to collect just modules that are actually used in your program.</p>\n<p>Bundling options are configured in the <code>webpack.config.js</code> file, which has the benefit of being a fully-functional JavaScript program that can give you great flexibility. See the <a href=\"#advanced-configuration\">advanced configuration</a> section below for examples.</p>\n<p>Since bundling can be a slow and resource intensive operation, we do not enable it for every build. It is easiest to develop and debug your code without bundling, and use bundled code for QA/release builds.</p>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>The easiest way to enable webpack support for your application is to install the <code>nativescript-dev-webpack</code> plugin. To do that, run this in your application folder:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns install webpack</div></pre></td></tr></table></figure>\n<h2 id=\"How-nativescript-dev-webpack-works\"><a href=\"#How-nativescript-dev-webpack-works\" class=\"headerlink\" title=\"How nativescript-dev-webpack works\"></a>How nativescript-dev-webpack works</h2><p>Installing the plugin adds the following files to your project:</p>\n<ul>\n<li><code>webpack.config.js</code> – the main bundling config. Add it to source control.</li>\n<li><code>app/tns-java-classes.js</code> – native Java classes entrypoint . See <a href=\"#android-native-classes\">below</a> for details. Add it to source control too.</li>\n<li>An “after-prepare” bundling build hook. Add it to source control or gitignore <code>hooks/after-prepare</code>, as that directory will be recreated if missing.</li>\n</ul>\n<p>The nativescript-dev-webpack plugin works together with the <code>tns</code> CLI tool. Its “after-prepare” build hook invokes the webpack process. Since most transpiler plugins are run as “before-prepare” hooks, this happens after all your code has been verified and transpiled to JavaScript.</p>\n<h3 id=\"Bundling-Transpiled-Code\"><a href=\"#Bundling-Transpiled-Code\" class=\"headerlink\" title=\"Bundling Transpiled Code\"></a>Bundling Transpiled Code</h3><p>Webpack supports two modes of operation when using code that transpiles to JavaScript e.g. TypeScript, CoffeeScript:</p>\n<ol>\n<li>Run the transpiler, and then run webpack on the generated file. This is the simplest and hence the recommended approach for NativeScript apps at the moment.</li>\n<li>Register a loader for the transpilable language, and run transpilation as a part of the bundling process.</li>\n</ol>\n<h2 id=\"Bundling\"><a href=\"#Bundling\" class=\"headerlink\" title=\"Bundling\"></a>Bundling</h2><p>Bundling is run as a part of the platform “preparation” process and is invoked by the respective <code>tns prepare &lt;platform&gt;</code> command, and its relatives like <code>tns build &lt;platform&gt;</code> and <code>tns run &lt;platform&gt;</code>.</p>\n<p>Note that the default behavior will <strong>NOT</strong> trigger bundling. You need to explicitly request it with the <code>--bundle</code> option:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns prepare android --bundle</div></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns run ios --bundle</div></pre></td></tr></table></figure>\n<p>and, of course:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns build ios --for-device --bundle</div></pre></td></tr></table></figure>\n<p>To reiterate, passing the <code>--bundle</code> option will <strong>not</strong> include any JavaScript modules from your <code>node_modules</code> folder in your app. The resulting bundle is the only code that will get executed on the emulator/device.</p>\n<h2 id=\"Android-Native-Classes\"><a href=\"#Android-Native-Classes\" class=\"headerlink\" title=\"Android Native Classes\"></a>Android Native Classes</h2><p>The NativeScript Android runtime allows for certain classes to contain both a Java and a JavaScript implementation. The way this works is by using a Java annotation that points to the JavaScript module which contains the corresponding JavaScript class. Those classes need some special handling by the bundling process since they need to be loaded by Java code (which webpack does not control), and they usually need to be loaded earlier than the rest of the application.</p>\n<p>The way <code>nativescript-dev-webpack</code> solves this problem is to add mappings for those classes to a config file called <code>tns-java-classes.js</code> and split the bundle in two chunks. This allows us to load the chunk containing the Java-related code first.</p>\n<p>On installation, you will get a default file that registers built-in classes like <code>com.tns.NativeScriptApplication</code> and <code>com.tns.NativeScriptActivity</code>. You can modify this file and include other classes that need to be instantiated from Java code.</p>\n<h3 id=\"Dynamic-Imports\"><a href=\"#Dynamic-Imports\" class=\"headerlink\" title=\"Dynamic Imports\"></a>Dynamic Imports</h3><p>A significant drawback to using bundled code is that you have to know the names of all imported modules in advance at bundle time. That means code using variables and passing them to <code>require</code> will not work:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// THROWS AN ERROR!</span></div><div class=\"line\"><span class=\"built_in\">require</span>(myPlugin);</div></pre></td></tr></table></figure>\n<p>You can solve this if you have a known set of resolvable modules and you need to switch between them by registering those so that webpack discovers them. You do that by adding a set of <code>global.registerModule</code> calls to your application bootstrap code (or some other module that is discovered by webpack when traversing the module import graph):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"globals\"</span>);</div><div class=\"line\">global.registerModule(<span class=\"string\">\"my-plugin\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">\"my-plugin\"</span>); &#125;);</div></pre></td></tr></table></figure>\n<p>Then you will be able to import this module using the <code>global.loadModule</code> API:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPlugin = <span class=\"string\">\"my-plugin\"</span>;</div><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\">global.loadModule(myPlugin);</div></pre></td></tr></table></figure>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><p>Webpack bundling can fail for different reasons, or it can generate code that breaks at runtime (like the dynamic imports scenario outlined above). Debugging problems is easy once you know what code runs on your device.</p>\n<h3 id=\"Debugging-Bundling-Errors\"><a href=\"#Debugging-Bundling-Errors\" class=\"headerlink\" title=\"Debugging Bundling Errors\"></a>Debugging Bundling Errors</h3><p>Webpack may not show all error details by default, but you can always enable that by passing the <code>--display-error-details</code> <a href=\"https://webpack.github.io/docs/cli.html#display-error-details\" target=\"_blank\" rel=\"external\">configuration option</a>. Since the plugin invokes webpack automatically, the way to pass those options is via the <code>WEBPACK_OPTS</code> environment variable. For example, when running in a bash-like command shell you can do:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ WEBPACK_OPTS=&quot;--display-error-details&quot; tns prepare android --bundle</div></pre></td></tr></table></figure>\n<p>Other options that can be useful when diagnosing a problem are: <code>--display-modules</code>, <code>--display-reasons</code>, <code>--display-chunks</code>.</p>\n<h3 id=\"Inspecting-Bundles\"><a href=\"#Inspecting-Bundles\" class=\"headerlink\" title=\"Inspecting Bundles\"></a>Inspecting Bundles</h3><p>Bundles are generated in the platform output folders. Look for the <code>bundle.js</code> and <code>tns-bundle-js</code> files in your <code>platforms/android/...</code> and <code>platforms/ios/...</code> “app” folders.</p>\n<h3 id=\"Advanced-Configuration\"><a href=\"#Advanced-Configuration\" class=\"headerlink\" title=\"Advanced Configuration\"></a>Advanced Configuration</h3><p>The <code>webpack.config.js</code> file exports a valid webpack configuration that you can modify in-flight. A typical file looks like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bundler = <span class=\"built_in\">require</span>(<span class=\"string\">\"nativescript-dev-webpack\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = bundler.getConfig(&#123;</div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> add project-specific webpack settings here...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>You have two customization options:</p>\n<ol>\n<li>Pass your pre-populated configuration in the object parameter to <code>bundler.getConfig</code>. Any top-level webpack properties that you set will be preserved by the plugin.</li>\n<li>Modify the <code>bundler.getConfig</code> result before reexporting it. This might be more convenient if you need to modify a single suboption of an option that is set by default. For example, here is how you can <strong>only</strong> disable module path information, and preserve the rest of the <code>output</code> options:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bundler = <span class=\"built_in\">require</span>(<span class=\"string\">\"nativescript-dev-webpack\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = bundler.getConfig(&#123;&#125;);</div><div class=\"line\">config.output.pathinfo = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<h2 id=\"Webpack-Resources\"><a href=\"#Webpack-Resources\" class=\"headerlink\" title=\"Webpack Resources\"></a>Webpack Resources</h2><p>Bundling JavaScript code can get complex very soon, and encountering webpack for the first time can get daunting. A full introduction to webpack and related technologies is beyond the scope of this article, and we recommend the following resources:</p>\n<ul>\n<li><a href=\"https://webpack.github.io/docs/what-is-webpack.html\" target=\"_blank\" rel=\"external\">Introduction</a></li>\n<li><a href=\"https://webpack.github.io/docs/tutorials/getting-started/\" target=\"_blank\" rel=\"external\">Tutorial</a></li>\n<li><a href=\"https://webpack.github.io/docs/commonjs.html\" target=\"_blank\" rel=\"external\">CommonJS Guide</a></li>\n<li><a href=\"https://webpack.github.io/docs/cli.html\" target=\"_blank\" rel=\"external\">Webpack CLI Reference</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Using-Webpack-to-Bundle-Your-Code\"><a href=\"#Using-Webpack-to-Bundle-Your-Code\" class=\"headerlink\" title=\"Using Webpack to Bundle Your Code\"></a>Using Webpack to Bundle Your Code</h1><ol>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#introducing-webpack\">Introducing Webpack</a></li>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#how-nativescript-dev-webpack-works\">How nativescript-dev-webpack works</a>\n : config, hooks</li>\n<li><a href=\"#bundling\">Bundling</a></li>\n<li><a href=\"#android-native-classes\">Android Native Classes</a></li>\n<li><a href=\"#tips-and-tricks\">Tips and Tricks</a><ol>\n<li><a href=\"#dynamic-requires\">Dynamic Imports</a></li>\n<li><a href=\"#advanced-configuration\">Advanced Configuration</a></li>\n</ol>\n</li>\n<li>Webpack resources (#webpack-resources)</li>\n</ol>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>JavaScript code and general asset bundling has been a member of the web developer toolbox for a long time. Tools like <a href=\"https://webpack.github.io/\">webpack</a> have been providing support for an enjoyable development experience that lets you assemble client-side code from various module sources and formats and then package it together. Most importantly, they allow for page load time optimizations that reduce or parallelize the number of requests a browser makes to the server.</p>\n<p>Why bundle scripts in a mobile app though? Aren’t all files stored on the local device, so requesting them should be faster than an HTTP request?! Yes, that is the case, but bundling still has an important place in mobile app optimizations:</p>\n<ul>\n<li>Fewer filesystem operations on app startup since all code is loaded from a single bundle file. Mobile file storage is not known for being very performant.</li>\n<li>Smaller code size. Bundlers traverse the module import graph and do not bundle unused modules. Not using that obscure feature in module X? Don’t make your users pay for it then.</li>\n<li>Preprocessing and interoperability hooks (not covered in this article). Webpack provides a way to resolve modules and expressions differently according to its configuration. It also contains a lot of plugins and loaders that let you embed different content in your application or use code written in different programming languages.</li>\n</ul>\n<h2 id=\"Introducing-Webpack\"><a href=\"#Introducing-Webpack\" class=\"headerlink\" title=\"Introducing Webpack\"></a>Introducing Webpack</h2><p>Webpack works by traversing your source tree starting from a number of “entry” modules. This makes it possible to collect just modules that are actually used in your program.</p>\n<p>Bundling options are configured in the <code>webpack.config.js</code> file, which has the benefit of being a fully-functional JavaScript program that can give you great flexibility. See the <a href=\"#advanced-configuration\">advanced configuration</a> section below for examples.</p>\n<p>Since bundling can be a slow and resource intensive operation, we do not enable it for every build. It is easiest to develop and debug your code without bundling, and use bundled code for QA/release builds.</p>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>The easiest way to enable webpack support for your application is to install the <code>nativescript-dev-webpack</code> plugin. To do that, run this in your application folder:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns install webpack</div></pre></td></tr></table></figure>\n<h2 id=\"How-nativescript-dev-webpack-works\"><a href=\"#How-nativescript-dev-webpack-works\" class=\"headerlink\" title=\"How nativescript-dev-webpack works\"></a>How nativescript-dev-webpack works</h2><p>Installing the plugin adds the following files to your project:</p>\n<ul>\n<li><code>webpack.config.js</code> – the main bundling config. Add it to source control.</li>\n<li><code>app/tns-java-classes.js</code> – native Java classes entrypoint . See <a href=\"#android-native-classes\">below</a> for details. Add it to source control too.</li>\n<li>An “after-prepare” bundling build hook. Add it to source control or gitignore <code>hooks/after-prepare</code>, as that directory will be recreated if missing.</li>\n</ul>\n<p>The nativescript-dev-webpack plugin works together with the <code>tns</code> CLI tool. Its “after-prepare” build hook invokes the webpack process. Since most transpiler plugins are run as “before-prepare” hooks, this happens after all your code has been verified and transpiled to JavaScript.</p>\n<h3 id=\"Bundling-Transpiled-Code\"><a href=\"#Bundling-Transpiled-Code\" class=\"headerlink\" title=\"Bundling Transpiled Code\"></a>Bundling Transpiled Code</h3><p>Webpack supports two modes of operation when using code that transpiles to JavaScript e.g. TypeScript, CoffeeScript:</p>\n<ol>\n<li>Run the transpiler, and then run webpack on the generated file. This is the simplest and hence the recommended approach for NativeScript apps at the moment.</li>\n<li>Register a loader for the transpilable language, and run transpilation as a part of the bundling process.</li>\n</ol>\n<h2 id=\"Bundling\"><a href=\"#Bundling\" class=\"headerlink\" title=\"Bundling\"></a>Bundling</h2><p>Bundling is run as a part of the platform “preparation” process and is invoked by the respective <code>tns prepare &lt;platform&gt;</code> command, and its relatives like <code>tns build &lt;platform&gt;</code> and <code>tns run &lt;platform&gt;</code>.</p>\n<p>Note that the default behavior will <strong>NOT</strong> trigger bundling. You need to explicitly request it with the <code>--bundle</code> option:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns prepare android --bundle</div></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns run ios --bundle</div></pre></td></tr></table></figure>\n<p>and, of course:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tns build ios --for-device --bundle</div></pre></td></tr></table></figure>\n<p>To reiterate, passing the <code>--bundle</code> option will <strong>not</strong> include any JavaScript modules from your <code>node_modules</code> folder in your app. The resulting bundle is the only code that will get executed on the emulator/device.</p>\n<h2 id=\"Android-Native-Classes\"><a href=\"#Android-Native-Classes\" class=\"headerlink\" title=\"Android Native Classes\"></a>Android Native Classes</h2><p>The NativeScript Android runtime allows for certain classes to contain both a Java and a JavaScript implementation. The way this works is by using a Java annotation that points to the JavaScript module which contains the corresponding JavaScript class. Those classes need some special handling by the bundling process since they need to be loaded by Java code (which webpack does not control), and they usually need to be loaded earlier than the rest of the application.</p>\n<p>The way <code>nativescript-dev-webpack</code> solves this problem is to add mappings for those classes to a config file called <code>tns-java-classes.js</code> and split the bundle in two chunks. This allows us to load the chunk containing the Java-related code first.</p>\n<p>On installation, you will get a default file that registers built-in classes like <code>com.tns.NativeScriptApplication</code> and <code>com.tns.NativeScriptActivity</code>. You can modify this file and include other classes that need to be instantiated from Java code.</p>\n<h3 id=\"Dynamic-Imports\"><a href=\"#Dynamic-Imports\" class=\"headerlink\" title=\"Dynamic Imports\"></a>Dynamic Imports</h3><p>A significant drawback to using bundled code is that you have to know the names of all imported modules in advance at bundle time. That means code using variables and passing them to <code>require</code> will not work:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// THROWS AN ERROR!</span></div><div class=\"line\"><span class=\"built_in\">require</span>(myPlugin);</div></pre></td></tr></table></figure>\n<p>You can solve this if you have a known set of resolvable modules and you need to switch between them by registering those so that webpack discovers them. You do that by adding a set of <code>global.registerModule</code> calls to your application bootstrap code (or some other module that is discovered by webpack when traversing the module import graph):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"globals\"</span>);</div><div class=\"line\">global.registerModule(<span class=\"string\">\"my-plugin\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">\"my-plugin\"</span>); &#125;);</div></pre></td></tr></table></figure>\n<p>Then you will be able to import this module using the <code>global.loadModule</code> API:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPlugin = <span class=\"string\">\"my-plugin\"</span>;</div><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\">global.loadModule(myPlugin);</div></pre></td></tr></table></figure>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><p>Webpack bundling can fail for different reasons, or it can generate code that breaks at runtime (like the dynamic imports scenario outlined above). Debugging problems is easy once you know what code runs on your device.</p>\n<h3 id=\"Debugging-Bundling-Errors\"><a href=\"#Debugging-Bundling-Errors\" class=\"headerlink\" title=\"Debugging Bundling Errors\"></a>Debugging Bundling Errors</h3><p>Webpack may not show all error details by default, but you can always enable that by passing the <code>--display-error-details</code> <a href=\"https://webpack.github.io/docs/cli.html#display-error-details\">configuration option</a>. Since the plugin invokes webpack automatically, the way to pass those options is via the <code>WEBPACK_OPTS</code> environment variable. For example, when running in a bash-like command shell you can do:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ WEBPACK_OPTS=&quot;--display-error-details&quot; tns prepare android --bundle</div></pre></td></tr></table></figure>\n<p>Other options that can be useful when diagnosing a problem are: <code>--display-modules</code>, <code>--display-reasons</code>, <code>--display-chunks</code>.</p>\n<h3 id=\"Inspecting-Bundles\"><a href=\"#Inspecting-Bundles\" class=\"headerlink\" title=\"Inspecting Bundles\"></a>Inspecting Bundles</h3><p>Bundles are generated in the platform output folders. Look for the <code>bundle.js</code> and <code>tns-bundle-js</code> files in your <code>platforms/android/...</code> and <code>platforms/ios/...</code> “app” folders.</p>\n<h3 id=\"Advanced-Configuration\"><a href=\"#Advanced-Configuration\" class=\"headerlink\" title=\"Advanced Configuration\"></a>Advanced Configuration</h3><p>The <code>webpack.config.js</code> file exports a valid webpack configuration that you can modify in-flight. A typical file looks like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bundler = <span class=\"built_in\">require</span>(<span class=\"string\">\"nativescript-dev-webpack\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = bundler.getConfig(&#123;</div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> add project-specific webpack settings here...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>You have two customization options:</p>\n<ol>\n<li>Pass your pre-populated configuration in the object parameter to <code>bundler.getConfig</code>. Any top-level webpack properties that you set will be preserved by the plugin.</li>\n<li>Modify the <code>bundler.getConfig</code> result before reexporting it. This might be more convenient if you need to modify a single suboption of an option that is set by default. For example, here is how you can <strong>only</strong> disable module path information, and preserve the rest of the <code>output</code> options:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bundler = <span class=\"built_in\">require</span>(<span class=\"string\">\"nativescript-dev-webpack\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = bundler.getConfig(&#123;&#125;);</div><div class=\"line\">config.output.pathinfo = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<h2 id=\"Webpack-Resources\"><a href=\"#Webpack-Resources\" class=\"headerlink\" title=\"Webpack Resources\"></a>Webpack Resources</h2><p>Bundling JavaScript code can get complex very soon, and encountering webpack for the first time can get daunting. A full introduction to webpack and related technologies is beyond the scope of this article, and we recommend the following resources:</p>\n<ul>\n<li><a href=\"https://webpack.github.io/docs/what-is-webpack.html\">Introduction</a></li>\n<li><a href=\"https://webpack.github.io/docs/tutorials/getting-started/\">Tutorial</a></li>\n<li><a href=\"https://webpack.github.io/docs/commonjs.html\">CommonJS Guide</a></li>\n<li><a href=\"https://webpack.github.io/docs/cli.html\">Webpack CLI Reference</a></li>\n</ul>\n"},{"title":"Debugging","description":"How to debug n applications.","position":11,"slug":"debugging","previous_url":"/debugging","_content":"\n# Debugging\n\nYou can debug apps developed with the NativeScript framework from both the NativeScript CLI and [Visual Studio Code](https://code.visualstudio.com/).\n\n* [Debugger Commands](#debugger-commands)\n* [Debugger Options](#debugger-options)\n* [Debugging with Visual Studio Code](#debugging-with-visual-studio-code)\n\n## Debugger Commands\n\n> **Note** For more details about `Debugger Command` options, you can use `tns debug android --help` or `tns debug ios --help`.\n\nTo start the debugger for Android, run the following command:\n\n```Bash\ntns debug android\n```\n\nTo start the debugger for iOS, run the following command:\n\n```Bash\ntns debug ios\n```\n\nThis command starts the platform-specific debugger with the default `--debug-brk` option.\n\n## Debugger Options\n\nYou can customize the `tns debug` command using any of the following options:\n* `--debug-brk` - Prepares, builds and deploys the application package on a device or in an emulator, launches the browser and stops at the first breakpoint. This option is enabled by default when you run `tns debug` and no other options are specified.\n* `--start` - Attaches the debug tools to a deployed and running app.\n* `--stop` - Detaches the debug tools.\n* `--emulator` - Specifies that you want to debug the app in an emulator.\n* `--timeout` - Sets the number of seconds that the NativeScript CLI will wait for the debugger to boot. If not set, the default timeout is 90 seconds.\n\nFor more information about Android debugging, run the following command:\n\n```Bash\ntns help debug android\n```\n\nFor more information about iOS debugging, run the following command:\n\n```Bash\ntns help debug ios\n```\n\n## Debugging with Visual Studio Code\n\nTo debug NativeScript applications in [Visual Studio Code](https://code.visualstudio.com/), you need the [NativeScript extension for VS Code](https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript). You can find detailed instructions about how to install and set up the NativeScript extension for VS Code [here]({% slug nativescript-extension-for-visual-studio-code %}).\n","source":"workflow/debugging.md","raw":"---\ntitle: Debugging\ndescription: How to debug n applications.\nposition: 11\nslug: debugging\nprevious_url: /debugging\n---\n\n# Debugging\n\nYou can debug apps developed with the NativeScript framework from both the NativeScript CLI and [Visual Studio Code](https://code.visualstudio.com/).\n\n* [Debugger Commands](#debugger-commands)\n* [Debugger Options](#debugger-options)\n* [Debugging with Visual Studio Code](#debugging-with-visual-studio-code)\n\n## Debugger Commands\n\n> **Note** For more details about `Debugger Command` options, you can use `tns debug android --help` or `tns debug ios --help`.\n\nTo start the debugger for Android, run the following command:\n\n```Bash\ntns debug android\n```\n\nTo start the debugger for iOS, run the following command:\n\n```Bash\ntns debug ios\n```\n\nThis command starts the platform-specific debugger with the default `--debug-brk` option.\n\n## Debugger Options\n\nYou can customize the `tns debug` command using any of the following options:\n* `--debug-brk` - Prepares, builds and deploys the application package on a device or in an emulator, launches the browser and stops at the first breakpoint. This option is enabled by default when you run `tns debug` and no other options are specified.\n* `--start` - Attaches the debug tools to a deployed and running app.\n* `--stop` - Detaches the debug tools.\n* `--emulator` - Specifies that you want to debug the app in an emulator.\n* `--timeout` - Sets the number of seconds that the NativeScript CLI will wait for the debugger to boot. If not set, the default timeout is 90 seconds.\n\nFor more information about Android debugging, run the following command:\n\n```Bash\ntns help debug android\n```\n\nFor more information about iOS debugging, run the following command:\n\n```Bash\ntns help debug ios\n```\n\n## Debugging with Visual Studio Code\n\nTo debug NativeScript applications in [Visual Studio Code](https://code.visualstudio.com/), you need the [NativeScript extension for VS Code](https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript). You can find detailed instructions about how to install and set up the NativeScript extension for VS Code [here]({% slug nativescript-extension-for-visual-studio-code %}).\n","date":"2016-08-26T21:05:54.632Z","updated":"2016-08-26T21:05:54.632Z","path":"workflow/debugging.html","comments":1,"layout":"page","_id":"cisn95cb3001bwsl0h4ze83z3","content":"<h1 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h1><p>You can debug apps developed with the NativeScript framework from both the NativeScript CLI and <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">Visual Studio Code</a>.</p>\n<ul>\n<li><a href=\"#debugger-commands\">Debugger Commands</a></li>\n<li><a href=\"#debugger-options\">Debugger Options</a></li>\n<li><a href=\"#debugging-with-visual-studio-code\">Debugging with Visual Studio Code</a></li>\n</ul>\n<h2 id=\"Debugger-Commands\"><a href=\"#Debugger-Commands\" class=\"headerlink\" title=\"Debugger Commands\"></a>Debugger Commands</h2><blockquote>\n<p><strong>Note</strong> For more details about <code>Debugger Command</code> options, you can use <code>tns debug android --help</code> or <code>tns debug ios --help</code>.</p>\n</blockquote>\n<p>To start the debugger for Android, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns debug android</div></pre></td></tr></table></figure>\n<p>To start the debugger for iOS, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns debug ios</div></pre></td></tr></table></figure>\n<p>This command starts the platform-specific debugger with the default <code>--debug-brk</code> option.</p>\n<h2 id=\"Debugger-Options\"><a href=\"#Debugger-Options\" class=\"headerlink\" title=\"Debugger Options\"></a>Debugger Options</h2><p>You can customize the <code>tns debug</code> command using any of the following options:</p>\n<ul>\n<li><code>--debug-brk</code> - Prepares, builds and deploys the application package on a device or in an emulator, launches the browser and stops at the first breakpoint. This option is enabled by default when you run <code>tns debug</code> and no other options are specified.</li>\n<li><code>--start</code> - Attaches the debug tools to a deployed and running app.</li>\n<li><code>--stop</code> - Detaches the debug tools.</li>\n<li><code>--emulator</code> - Specifies that you want to debug the app in an emulator.</li>\n<li><code>--timeout</code> - Sets the number of seconds that the NativeScript CLI will wait for the debugger to boot. If not set, the default timeout is 90 seconds.</li>\n</ul>\n<p>For more information about Android debugging, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns <span class=\"built_in\">help</span> debug android</div></pre></td></tr></table></figure>\n<p>For more information about iOS debugging, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns <span class=\"built_in\">help</span> debug ios</div></pre></td></tr></table></figure>\n<h2 id=\"Debugging-with-Visual-Studio-Code\"><a href=\"#Debugging-with-Visual-Studio-Code\" class=\"headerlink\" title=\"Debugging with Visual Studio Code\"></a>Debugging with Visual Studio Code</h2><p>To debug NativeScript applications in <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">Visual Studio Code</a>, you need the <a href=\"https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript\" target=\"_blank\" rel=\"external\">NativeScript extension for VS Code</a>. You can find detailed instructions about how to install and set up the NativeScript extension for VS Code <a href=\"!--￼4--\">here</a>.</p>\n","excerpt":"","more":"<h1 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h1><p>You can debug apps developed with the NativeScript framework from both the NativeScript CLI and <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>.</p>\n<ul>\n<li><a href=\"#debugger-commands\">Debugger Commands</a></li>\n<li><a href=\"#debugger-options\">Debugger Options</a></li>\n<li><a href=\"#debugging-with-visual-studio-code\">Debugging with Visual Studio Code</a></li>\n</ul>\n<h2 id=\"Debugger-Commands\"><a href=\"#Debugger-Commands\" class=\"headerlink\" title=\"Debugger Commands\"></a>Debugger Commands</h2><blockquote>\n<p><strong>Note</strong> For more details about <code>Debugger Command</code> options, you can use <code>tns debug android --help</code> or <code>tns debug ios --help</code>.</p>\n</blockquote>\n<p>To start the debugger for Android, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns debug android</div></pre></td></tr></table></figure>\n<p>To start the debugger for iOS, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns debug ios</div></pre></td></tr></table></figure>\n<p>This command starts the platform-specific debugger with the default <code>--debug-brk</code> option.</p>\n<h2 id=\"Debugger-Options\"><a href=\"#Debugger-Options\" class=\"headerlink\" title=\"Debugger Options\"></a>Debugger Options</h2><p>You can customize the <code>tns debug</code> command using any of the following options:</p>\n<ul>\n<li><code>--debug-brk</code> - Prepares, builds and deploys the application package on a device or in an emulator, launches the browser and stops at the first breakpoint. This option is enabled by default when you run <code>tns debug</code> and no other options are specified.</li>\n<li><code>--start</code> - Attaches the debug tools to a deployed and running app.</li>\n<li><code>--stop</code> - Detaches the debug tools.</li>\n<li><code>--emulator</code> - Specifies that you want to debug the app in an emulator.</li>\n<li><code>--timeout</code> - Sets the number of seconds that the NativeScript CLI will wait for the debugger to boot. If not set, the default timeout is 90 seconds.</li>\n</ul>\n<p>For more information about Android debugging, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns <span class=\"built_in\">help</span> debug android</div></pre></td></tr></table></figure>\n<p>For more information about iOS debugging, run the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns <span class=\"built_in\">help</span> debug ios</div></pre></td></tr></table></figure>\n<h2 id=\"Debugging-with-Visual-Studio-Code\"><a href=\"#Debugging-with-Visual-Studio-Code\" class=\"headerlink\" title=\"Debugging with Visual Studio Code\"></a>Debugging with Visual Studio Code</h2><p>To debug NativeScript applications in <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>, you need the <a href=\"https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript\">NativeScript extension for VS Code</a>. You can find detailed instructions about how to install and set up the NativeScript extension for VS Code <a href=\"!--￼4--\">here</a>.</p>\n"},{"title":"Publishing for Android","description":"Learn how to publish your app in the Play Store for Android users.","position":14,"slug":"publishing-android-apps","_content":"\n# Publishing a NativeScript Android App in Google Play\n\n0. [Overview](#overview)\n1. [Creating Android NativeScript app](#creating-android-nativescript-app)\n  1. [Application Id and Package Name](#application-id-and-package-name)\n  2. [App name](#app-name)\n  3. [App icons](#app-icons)\n2. [Certificates](#certificates)\n  1. [Debug certificate](#debug-certificate)\n  2. [Release certificate](#release-certificate)\n3. [Google Play Developer Console](#google-play-developer-console)\n  1. [Creating an app](#creating-an-app)\n  2. [Builds](#builds)\n    1. [Build versioning](#build-versioning)\n    2. [Build signed release APK](#build-signed-release-apk)\n    3. [Submit with the Google Play Developer Console](#submit-with-the-google-play-developer-console)\n    4. [Submit with Telerik AppManager](#submit-with-telerik-appmanager)\n    5. [Submission automation](#submission-automation)\n4. [Publish](#publish)\n\n## Overview\nYou can publish a NativeScript app in *Google Play* the same way [you would release a purely native Android app](http://developer.android.com/tools/publishing/publishing_overview.html).\n\n 1. Verify that the Android native project inside your app contains your latest changes and resources by running the following command.\n \n     ```\n     tns prepare android\n     ```\n 2. Make sure that you have a `.keystore` file to sign your app with. For more information, see [How to create  a .keystore file](http://developer.android.com/tools/publishing/app-signing.html#signing-manually)?\n 3. Build your project in release mode by running the following command:\n \n    ```\n    tns build android --release --key-store-path <path-to-your-keystore> --key-store-password <your-key-store-password> --key-store-alias <your-alias-name> --key-store-alias-password <your-alias-password> \n    ```\n 4. Obtain the release `.apk` located at `<app_name>/platforms/android/build/outputs/apk/<app_name>-release.apk`.\n 5. Publish your Android app by uploading the `.apk` file to the Google Developer Console. For more information, see [How to publish an Android app?](http://developer.android.com/distribute/googleplay/start.html)\n\n## Creating Android NativeScript app\n### Application Id and Package Name\nBoth *Package Name*, and *Application Id*, are unique identifiers, provided by you for your app.\n - *Package Name* is used to identify resources such as the `R`.\n - *Application Id* is used to identify your app on devices and at the *Google Play*.\nIn the NativeScript framework, both are set to the `nativescript.id` in `package.json`.\nThe NativeScript CLI build system will set them as the `package` attribute in the generated project in `platforms/android/src/main/AndroidManifest.xml`.\nIn the `app/App_Resources/Android/AndroidManifest.xml` it will use a placeholder: `package=\"__PACKAGE__\"`. Do **not** modify the `package` attribute there.\n\n> **NOTE:** To edit the *Package Name* and the *Application Id*, modify the `package.json` of your app and set the `nativescript.id` key.\nYou may need to delete `platforms/android` and rebuild using the CLI command `tns prepare android`.\n\n[Read more about \"ApplicationId versus PackageName\"](http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename).\n\n### App name\nThis is the display name for your app. It is purely cosmetic but highly important. For example, it appears under the app icon.\nThe value can be stored in the `app/App_Resources/Android/AndroidManifest.xml` file, as an `android:label=\"<App Name>\"` attribute, on the `<application>` element.\n\nYou can check out more information about [the elements you can define in the `AndroidManifest.xml` here](http://developer.android.com/guide/topics/manifest/application-element.html).\n\n### App icons\nApp icons are defined similar to the app name.\nThe icon name is defined in the `app/App_Resources/Android/AndroidManifest.xml` file, as an `android:icon=\"@drawable/icon\"` attribute, on the `<application>` element.\n\nThe actual .PNG icons stay at the Android resources in `app/App_Resource/Android/<DPI>/icon.png`, DPIs:\n\n| directory         | DPI | screen                                | size          |\n|-------------------|-----|---------------------------------------|---------------|\n| `drawable-ldpi`   | 120 | Low density screen                    | 36px  x 36px  |\n| `drawable-mdpi`   | 160 | Medium density screen                 | 48px  x 48px  |\n| `drawable-hdpi`   | 240 | High density screen                   | 72px  x 72px  |\n| `drawable-xhdpi`  | 320 | Extra-high density screen             | 96px  x 96px  |\n| `drawable-xxhdpi` | 480 | Extra-extra-high density screen       | 144px x 144px |\n| `drawable-xxxhdpi`| 640 | Extra-extra-extra-high density screen | 192px x 192px |\n\n### Splash screen\nAndroid has no built-in mechanism to provide splash screen image.\n[Here is a blog post that describes how to implement a splash screen in the NativeScript framework.](https://www.nativescript.org/blog/details/splash-screen-for-your-android-applications)\n\n## Certificates\n### Debug certificate\nThese are automatically generated by the Android SDK tools for you.\n\nIn debug mode, you sign your app with a debug certificate.\nThis certificate has a private key with a known password.\nThe process is handled by the Android tooling.\n\nYou can read more at [\"Signing in Debug Mode\"](http://developer.android.com/tools/publishing/app-signing.html).\n\n### Release certificate\nThe release certificate for Android is created by you; it does not have to be signed by a certificate authority.\nIt is easier to create a release certificate for Android than it is for iOS. You should, however, be more careful with your certificate.\n\nA few pitfalls are:\n - You create the certificate only once. If you lose it, you will not be able to publish any updates to your app, because you must always sign all versions of your app with the same key.\n - If your certificate expires, you will not be able to renew it. Ensure long validity when creating a new certificate (for 20+ years).\n - If a third party obtains your private key, that party could sign and distribute apps that maliciously replace your authentic apps or corrupt them.\n\nYou can generate a private key for a release certificate using the [keytool](http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html).\n```\nkeytool -genkey -v -keystore <my-release-key>.keystore -alias <alias_name> -keyalg RSA -keysize 2048 -validity 10000\n```\n\nThis will run an interactive session collecting information about your name, organization and most importantly &mdash; keystore and alias passwords.\n\n## Google Play Developer Console\nYou will need a developer account and you will need to log into the [Google Play Developer Console](https://play.google.com/apps/publish/).\n\n### Creating an app\nGo to the **All applications** section and click the **+ Add new application** button.\n\n1.You will get prompted to provide the app title\n\n2.You can then proceed with the store listings.\n\n3.You can fill in app description, screenshots and so on.\n\nYou can also submit an APK. Read about how to obtain an APK from a NativeScript app.\n\n### Builds\n\n<h4 id=\"build-versioning\">Build versioning</h4>\nWe have already explained how the *Application Id* is set in your project, how icons are added to your app and how you can set the display name.\n\nBefore the build, you need to set two important things: the *versionCode* and the *android:versionName*.\n\nWhen a build is uploaded, its *versionCode* should be larger than previous builds.\nA new build with a higher *versionCode* is considered an upgrade to builds that have a lower *versionCode*.\nThe *versionCode* is an integer so you should carefully consider a strategy for versioning.\n\nBoth values are stored in `app/App_Resources/Android/AndroidManifest.xml`.\n> **NOTE:** `android:versionName` is a string value, which is used to represent the application version to the user whereas `android:versionCode`, which is integer value showing version of the application code relative to the other versions.\nYou can read more about [\"Versioning Your Applications\"](http://developer.android.com/tools/publishing/versioning.html).\n\nIn the `app/App_Resources/Android/AndroidManifest.xml`, the *versionCode* and *versionName* appear as:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"org.nativescript.name\"\n      android:versionCode=\"2\"\n      android:versionName=\"1.1\">\n      ...\n```\n\n<h4 id=\"build-signed-release-apk\">Build signed release APK</h4>\n\nYou can perform a full build and produce a signed APK using the NativeScript CLI:\n```\ntns build android --release --key-store-path <path-to-your-keystore> --key-store-password <your-key-store-password> --key-store-alias <your-alias-name> --key-store-alias-password <your-alias-password> --copy-to <apk-location>.apk\n```\nYou can then use the produced `<apk-location>.apk` for upload to *Google Play*.\n\n<h4 id=\"submit-with-the-google-play-developer-console\">Submit with the Google Play Developer Console</h4>\n\nTo submit your app to the *Google Play Developer Console*:\n\n1. Log into the [Google Play Developer Console](https://play.google.com/apps/publish).\n2. Select your application and go to the **APK** section.\n3. Choose *Production*, *Beta* or *Alpha* stage and click the **Upload new APK**.\n4. Select the APK produced by the CLI.\n\nYou can read more about these stages at [\"Set up alpha/beta tests\"](https://support.google.com/googleplay/android-developer/answer/3131213?hl=en).\n\nOnce you upload your APK, it will go through a review. When approved, you can move it to production to make it available on *Google Play*.\n\n<h4 id=\"submit-with-telerik-appmanager\">Submit with Telerik AppManager</h4>\n\nIt is worth mentioning that the NativeScript platform is integrated in the *Telerik Platform*. And the *Telerik Platform* has everything you need in the cloud, easing the submission process. This includes managing your distribution certificates and provisioning profiles, as well as support for cloud builds and *App Store* submission.\n\nRead more about the app submission process in the *Telerik Platform* in ['Introduction to Telerik AppManager'](http://docs.telerik.com/platform/appmanager/getting-started/introduction).\n\n<h4 id=\"submission-automation\">Submission automation</h4>\n\nSome tools allow the submission process to be automated - [MIT Licensed one: fastlane](https://github.com/fastlane/fastlane).\nYou can also hack your own scripts around the [Google Play Developer API](https://developers.google.com/android-publisher/api-ref/edits/apks/upload).\n\n## Publish\nOnce you successfully upload your APK, and it passes Google review, you will be able to move your APK to production, and it will go live on *Google Play*.\n","source":"workflow/publishing-android-apps.md","raw":"---\ntitle: Publishing for Android\ndescription: Learn how to publish your app in the Play Store for Android users.\nposition: 14\nslug: publishing-android-apps\n---\n\n# Publishing a NativeScript Android App in Google Play\n\n0. [Overview](#overview)\n1. [Creating Android NativeScript app](#creating-android-nativescript-app)\n  1. [Application Id and Package Name](#application-id-and-package-name)\n  2. [App name](#app-name)\n  3. [App icons](#app-icons)\n2. [Certificates](#certificates)\n  1. [Debug certificate](#debug-certificate)\n  2. [Release certificate](#release-certificate)\n3. [Google Play Developer Console](#google-play-developer-console)\n  1. [Creating an app](#creating-an-app)\n  2. [Builds](#builds)\n    1. [Build versioning](#build-versioning)\n    2. [Build signed release APK](#build-signed-release-apk)\n    3. [Submit with the Google Play Developer Console](#submit-with-the-google-play-developer-console)\n    4. [Submit with Telerik AppManager](#submit-with-telerik-appmanager)\n    5. [Submission automation](#submission-automation)\n4. [Publish](#publish)\n\n## Overview\nYou can publish a NativeScript app in *Google Play* the same way [you would release a purely native Android app](http://developer.android.com/tools/publishing/publishing_overview.html).\n\n 1. Verify that the Android native project inside your app contains your latest changes and resources by running the following command.\n \n     ```\n     tns prepare android\n     ```\n 2. Make sure that you have a `.keystore` file to sign your app with. For more information, see [How to create  a .keystore file](http://developer.android.com/tools/publishing/app-signing.html#signing-manually)?\n 3. Build your project in release mode by running the following command:\n \n    ```\n    tns build android --release --key-store-path <path-to-your-keystore> --key-store-password <your-key-store-password> --key-store-alias <your-alias-name> --key-store-alias-password <your-alias-password> \n    ```\n 4. Obtain the release `.apk` located at `<app_name>/platforms/android/build/outputs/apk/<app_name>-release.apk`.\n 5. Publish your Android app by uploading the `.apk` file to the Google Developer Console. For more information, see [How to publish an Android app?](http://developer.android.com/distribute/googleplay/start.html)\n\n## Creating Android NativeScript app\n### Application Id and Package Name\nBoth *Package Name*, and *Application Id*, are unique identifiers, provided by you for your app.\n - *Package Name* is used to identify resources such as the `R`.\n - *Application Id* is used to identify your app on devices and at the *Google Play*.\nIn the NativeScript framework, both are set to the `nativescript.id` in `package.json`.\nThe NativeScript CLI build system will set them as the `package` attribute in the generated project in `platforms/android/src/main/AndroidManifest.xml`.\nIn the `app/App_Resources/Android/AndroidManifest.xml` it will use a placeholder: `package=\"__PACKAGE__\"`. Do **not** modify the `package` attribute there.\n\n> **NOTE:** To edit the *Package Name* and the *Application Id*, modify the `package.json` of your app and set the `nativescript.id` key.\nYou may need to delete `platforms/android` and rebuild using the CLI command `tns prepare android`.\n\n[Read more about \"ApplicationId versus PackageName\"](http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename).\n\n### App name\nThis is the display name for your app. It is purely cosmetic but highly important. For example, it appears under the app icon.\nThe value can be stored in the `app/App_Resources/Android/AndroidManifest.xml` file, as an `android:label=\"<App Name>\"` attribute, on the `<application>` element.\n\nYou can check out more information about [the elements you can define in the `AndroidManifest.xml` here](http://developer.android.com/guide/topics/manifest/application-element.html).\n\n### App icons\nApp icons are defined similar to the app name.\nThe icon name is defined in the `app/App_Resources/Android/AndroidManifest.xml` file, as an `android:icon=\"@drawable/icon\"` attribute, on the `<application>` element.\n\nThe actual .PNG icons stay at the Android resources in `app/App_Resource/Android/<DPI>/icon.png`, DPIs:\n\n| directory         | DPI | screen                                | size          |\n|-------------------|-----|---------------------------------------|---------------|\n| `drawable-ldpi`   | 120 | Low density screen                    | 36px  x 36px  |\n| `drawable-mdpi`   | 160 | Medium density screen                 | 48px  x 48px  |\n| `drawable-hdpi`   | 240 | High density screen                   | 72px  x 72px  |\n| `drawable-xhdpi`  | 320 | Extra-high density screen             | 96px  x 96px  |\n| `drawable-xxhdpi` | 480 | Extra-extra-high density screen       | 144px x 144px |\n| `drawable-xxxhdpi`| 640 | Extra-extra-extra-high density screen | 192px x 192px |\n\n### Splash screen\nAndroid has no built-in mechanism to provide splash screen image.\n[Here is a blog post that describes how to implement a splash screen in the NativeScript framework.](https://www.nativescript.org/blog/details/splash-screen-for-your-android-applications)\n\n## Certificates\n### Debug certificate\nThese are automatically generated by the Android SDK tools for you.\n\nIn debug mode, you sign your app with a debug certificate.\nThis certificate has a private key with a known password.\nThe process is handled by the Android tooling.\n\nYou can read more at [\"Signing in Debug Mode\"](http://developer.android.com/tools/publishing/app-signing.html).\n\n### Release certificate\nThe release certificate for Android is created by you; it does not have to be signed by a certificate authority.\nIt is easier to create a release certificate for Android than it is for iOS. You should, however, be more careful with your certificate.\n\nA few pitfalls are:\n - You create the certificate only once. If you lose it, you will not be able to publish any updates to your app, because you must always sign all versions of your app with the same key.\n - If your certificate expires, you will not be able to renew it. Ensure long validity when creating a new certificate (for 20+ years).\n - If a third party obtains your private key, that party could sign and distribute apps that maliciously replace your authentic apps or corrupt them.\n\nYou can generate a private key for a release certificate using the [keytool](http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html).\n```\nkeytool -genkey -v -keystore <my-release-key>.keystore -alias <alias_name> -keyalg RSA -keysize 2048 -validity 10000\n```\n\nThis will run an interactive session collecting information about your name, organization and most importantly &mdash; keystore and alias passwords.\n\n## Google Play Developer Console\nYou will need a developer account and you will need to log into the [Google Play Developer Console](https://play.google.com/apps/publish/).\n\n### Creating an app\nGo to the **All applications** section and click the **+ Add new application** button.\n\n1.You will get prompted to provide the app title\n\n2.You can then proceed with the store listings.\n\n3.You can fill in app description, screenshots and so on.\n\nYou can also submit an APK. Read about how to obtain an APK from a NativeScript app.\n\n### Builds\n\n<h4 id=\"build-versioning\">Build versioning</h4>\nWe have already explained how the *Application Id* is set in your project, how icons are added to your app and how you can set the display name.\n\nBefore the build, you need to set two important things: the *versionCode* and the *android:versionName*.\n\nWhen a build is uploaded, its *versionCode* should be larger than previous builds.\nA new build with a higher *versionCode* is considered an upgrade to builds that have a lower *versionCode*.\nThe *versionCode* is an integer so you should carefully consider a strategy for versioning.\n\nBoth values are stored in `app/App_Resources/Android/AndroidManifest.xml`.\n> **NOTE:** `android:versionName` is a string value, which is used to represent the application version to the user whereas `android:versionCode`, which is integer value showing version of the application code relative to the other versions.\nYou can read more about [\"Versioning Your Applications\"](http://developer.android.com/tools/publishing/versioning.html).\n\nIn the `app/App_Resources/Android/AndroidManifest.xml`, the *versionCode* and *versionName* appear as:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"org.nativescript.name\"\n      android:versionCode=\"2\"\n      android:versionName=\"1.1\">\n      ...\n```\n\n<h4 id=\"build-signed-release-apk\">Build signed release APK</h4>\n\nYou can perform a full build and produce a signed APK using the NativeScript CLI:\n```\ntns build android --release --key-store-path <path-to-your-keystore> --key-store-password <your-key-store-password> --key-store-alias <your-alias-name> --key-store-alias-password <your-alias-password> --copy-to <apk-location>.apk\n```\nYou can then use the produced `<apk-location>.apk` for upload to *Google Play*.\n\n<h4 id=\"submit-with-the-google-play-developer-console\">Submit with the Google Play Developer Console</h4>\n\nTo submit your app to the *Google Play Developer Console*:\n\n1. Log into the [Google Play Developer Console](https://play.google.com/apps/publish).\n2. Select your application and go to the **APK** section.\n3. Choose *Production*, *Beta* or *Alpha* stage and click the **Upload new APK**.\n4. Select the APK produced by the CLI.\n\nYou can read more about these stages at [\"Set up alpha/beta tests\"](https://support.google.com/googleplay/android-developer/answer/3131213?hl=en).\n\nOnce you upload your APK, it will go through a review. When approved, you can move it to production to make it available on *Google Play*.\n\n<h4 id=\"submit-with-telerik-appmanager\">Submit with Telerik AppManager</h4>\n\nIt is worth mentioning that the NativeScript platform is integrated in the *Telerik Platform*. And the *Telerik Platform* has everything you need in the cloud, easing the submission process. This includes managing your distribution certificates and provisioning profiles, as well as support for cloud builds and *App Store* submission.\n\nRead more about the app submission process in the *Telerik Platform* in ['Introduction to Telerik AppManager'](http://docs.telerik.com/platform/appmanager/getting-started/introduction).\n\n<h4 id=\"submission-automation\">Submission automation</h4>\n\nSome tools allow the submission process to be automated - [MIT Licensed one: fastlane](https://github.com/fastlane/fastlane).\nYou can also hack your own scripts around the [Google Play Developer API](https://developers.google.com/android-publisher/api-ref/edits/apks/upload).\n\n## Publish\nOnce you successfully upload your APK, and it passes Google review, you will be able to move your APK to production, and it will go live on *Google Play*.\n","date":"2016-08-26T21:05:54.639Z","updated":"2016-08-26T21:05:54.639Z","path":"workflow/publishing-android-apps.html","comments":1,"layout":"page","_id":"cisn95cb3001cwsl0r78642fm","content":"<h1 id=\"Publishing-a-NativeScript-Android-App-in-Google-Play\"><a href=\"#Publishing-a-NativeScript-Android-App-in-Google-Play\" class=\"headerlink\" title=\"Publishing a NativeScript Android App in Google Play\"></a>Publishing a NativeScript Android App in Google Play</h1><ol>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#creating-android-nativescript-app\">Creating Android NativeScript app</a><ol>\n<li><a href=\"#application-id-and-package-name\">Application Id and Package Name</a></li>\n<li><a href=\"#app-name\">App name</a></li>\n<li><a href=\"#app-icons\">App icons</a></li>\n</ol>\n</li>\n<li><a href=\"#certificates\">Certificates</a><ol>\n<li><a href=\"#debug-certificate\">Debug certificate</a></li>\n<li><a href=\"#release-certificate\">Release certificate</a></li>\n</ol>\n</li>\n<li><a href=\"#google-play-developer-console\">Google Play Developer Console</a><ol>\n<li><a href=\"#creating-an-app\">Creating an app</a></li>\n<li><a href=\"#builds\">Builds</a><ol>\n<li><a href=\"#build-versioning\">Build versioning</a></li>\n<li><a href=\"#build-signed-release-apk\">Build signed release APK</a></li>\n<li><a href=\"#submit-with-the-google-play-developer-console\">Submit with the Google Play Developer Console</a></li>\n<li><a href=\"#submit-with-telerik-appmanager\">Submit with Telerik AppManager</a></li>\n<li><a href=\"#submission-automation\">Submission automation</a></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><a href=\"#publish\">Publish</a></li>\n</ol>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>You can publish a NativeScript app in <em>Google Play</em> the same way <a href=\"http://developer.android.com/tools/publishing/publishing_overview.html\" target=\"_blank\" rel=\"external\">you would release a purely native Android app</a>.</p>\n<ol>\n<li><p>Verify that the Android native project inside your app contains your latest changes and resources by running the following command.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns prepare android</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure that you have a <code>.keystore</code> file to sign your app with. For more information, see <a href=\"http://developer.android.com/tools/publishing/app-signing.html#signing-manually\" target=\"_blank\" rel=\"external\">How to create  a .keystore file</a>?</p>\n</li>\n<li><p>Build your project in release mode by running the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns build android --release --key-store-path &lt;path-to-your-keystore&gt; --key-store-password &lt;your-key-store-password&gt; --key-store-alias &lt;your-alias-name&gt; --key-store-alias-password &lt;your-alias-password&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Obtain the release <code>.apk</code> located at <code>&lt;app_name&gt;/platforms/android/build/outputs/apk/&lt;app_name&gt;-release.apk</code>.</p>\n</li>\n<li>Publish your Android app by uploading the <code>.apk</code> file to the Google Developer Console. For more information, see <a href=\"http://developer.android.com/distribute/googleplay/start.html\" target=\"_blank\" rel=\"external\">How to publish an Android app?</a></li>\n</ol>\n<h2 id=\"Creating-Android-NativeScript-app\"><a href=\"#Creating-Android-NativeScript-app\" class=\"headerlink\" title=\"Creating Android NativeScript app\"></a>Creating Android NativeScript app</h2><h3 id=\"Application-Id-and-Package-Name\"><a href=\"#Application-Id-and-Package-Name\" class=\"headerlink\" title=\"Application Id and Package Name\"></a>Application Id and Package Name</h3><p>Both <em>Package Name</em>, and <em>Application Id</em>, are unique identifiers, provided by you for your app.</p>\n<ul>\n<li><em>Package Name</em> is used to identify resources such as the <code>R</code>.</li>\n<li><em>Application Id</em> is used to identify your app on devices and at the <em>Google Play</em>.\nIn the NativeScript framework, both are set to the <code>nativescript.id</code> in <code>package.json</code>.\nThe NativeScript CLI build system will set them as the <code>package</code> attribute in the generated project in <code>platforms/android/src/main/AndroidManifest.xml</code>.\nIn the <code>app/App_Resources/Android/AndroidManifest.xml</code> it will use a placeholder: <code>package=&quot;__PACKAGE__&quot;</code>. Do <strong>not</strong> modify the <code>package</code> attribute there.</li>\n</ul>\n<blockquote>\n<p><strong>NOTE:</strong> To edit the <em>Package Name</em> and the <em>Application Id</em>, modify the <code>package.json</code> of your app and set the <code>nativescript.id</code> key.\nYou may need to delete <code>platforms/android</code> and rebuild using the CLI command <code>tns prepare android</code>.</p>\n</blockquote>\n<p><a href=\"http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename\" target=\"_blank\" rel=\"external\">Read more about “ApplicationId versus PackageName”</a>.</p>\n<h3 id=\"App-name\"><a href=\"#App-name\" class=\"headerlink\" title=\"App name\"></a>App name</h3><p>This is the display name for your app. It is purely cosmetic but highly important. For example, it appears under the app icon.\nThe value can be stored in the <code>app/App_Resources/Android/AndroidManifest.xml</code> file, as an <code>android:label=&quot;&lt;App Name&gt;&quot;</code> attribute, on the <code>&lt;application&gt;</code> element.</p>\n<p>You can check out more information about <a href=\"http://developer.android.com/guide/topics/manifest/application-element.html\" target=\"_blank\" rel=\"external\">the elements you can define in the <code>AndroidManifest.xml</code> here</a>.</p>\n<h3 id=\"App-icons\"><a href=\"#App-icons\" class=\"headerlink\" title=\"App icons\"></a>App icons</h3><p>App icons are defined similar to the app name.\nThe icon name is defined in the <code>app/App_Resources/Android/AndroidManifest.xml</code> file, as an <code>android:icon=&quot;@drawable/icon&quot;</code> attribute, on the <code>&lt;application&gt;</code> element.</p>\n<p>The actual .PNG icons stay at the Android resources in <code>app/App_Resource/Android/&lt;DPI&gt;/icon.png</code>, DPIs:</p>\n<table>\n<thead>\n<tr>\n<th>directory</th>\n<th>DPI</th>\n<th>screen</th>\n<th>size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>drawable-ldpi</code></td>\n<td>120</td>\n<td>Low density screen</td>\n<td>36px  x 36px</td>\n</tr>\n<tr>\n<td><code>drawable-mdpi</code></td>\n<td>160</td>\n<td>Medium density screen</td>\n<td>48px  x 48px</td>\n</tr>\n<tr>\n<td><code>drawable-hdpi</code></td>\n<td>240</td>\n<td>High density screen</td>\n<td>72px  x 72px</td>\n</tr>\n<tr>\n<td><code>drawable-xhdpi</code></td>\n<td>320</td>\n<td>Extra-high density screen</td>\n<td>96px  x 96px</td>\n</tr>\n<tr>\n<td><code>drawable-xxhdpi</code></td>\n<td>480</td>\n<td>Extra-extra-high density screen</td>\n<td>144px x 144px</td>\n</tr>\n<tr>\n<td><code>drawable-xxxhdpi</code></td>\n<td>640</td>\n<td>Extra-extra-extra-high density screen</td>\n<td>192px x 192px</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Splash-screen\"><a href=\"#Splash-screen\" class=\"headerlink\" title=\"Splash screen\"></a>Splash screen</h3><p>Android has no built-in mechanism to provide splash screen image.\n<a href=\"https://www.nativescript.org/blog/details/splash-screen-for-your-android-applications\" target=\"_blank\" rel=\"external\">Here is a blog post that describes how to implement a splash screen in the NativeScript framework.</a></p>\n<h2 id=\"Certificates\"><a href=\"#Certificates\" class=\"headerlink\" title=\"Certificates\"></a>Certificates</h2><h3 id=\"Debug-certificate\"><a href=\"#Debug-certificate\" class=\"headerlink\" title=\"Debug certificate\"></a>Debug certificate</h3><p>These are automatically generated by the Android SDK tools for you.</p>\n<p>In debug mode, you sign your app with a debug certificate.\nThis certificate has a private key with a known password.\nThe process is handled by the Android tooling.</p>\n<p>You can read more at <a href=\"http://developer.android.com/tools/publishing/app-signing.html\" target=\"_blank\" rel=\"external\">“Signing in Debug Mode”</a>.</p>\n<h3 id=\"Release-certificate\"><a href=\"#Release-certificate\" class=\"headerlink\" title=\"Release certificate\"></a>Release certificate</h3><p>The release certificate for Android is created by you; it does not have to be signed by a certificate authority.\nIt is easier to create a release certificate for Android than it is for iOS. You should, however, be more careful with your certificate.</p>\n<p>A few pitfalls are:</p>\n<ul>\n<li>You create the certificate only once. If you lose it, you will not be able to publish any updates to your app, because you must always sign all versions of your app with the same key.</li>\n<li>If your certificate expires, you will not be able to renew it. Ensure long validity when creating a new certificate (for 20+ years).</li>\n<li>If a third party obtains your private key, that party could sign and distribute apps that maliciously replace your authentic apps or corrupt them.</li>\n</ul>\n<p>You can generate a private key for a release certificate using the <a href=\"http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html\" target=\"_blank\" rel=\"external\">keytool</a>.\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -genkey -v -keystore &lt;my-release-key&gt;.keystore -alias &lt;alias_name&gt; -keyalg RSA -keysize 2048 -validity 10000</div></pre></td></tr></table></figure></p>\n<p>This will run an interactive session collecting information about your name, organization and most importantly &mdash; keystore and alias passwords.</p>\n<h2 id=\"Google-Play-Developer-Console\"><a href=\"#Google-Play-Developer-Console\" class=\"headerlink\" title=\"Google Play Developer Console\"></a>Google Play Developer Console</h2><p>You will need a developer account and you will need to log into the <a href=\"https://play.google.com/apps/publish/\" target=\"_blank\" rel=\"external\">Google Play Developer Console</a>.</p>\n<h3 id=\"Creating-an-app\"><a href=\"#Creating-an-app\" class=\"headerlink\" title=\"Creating an app\"></a>Creating an app</h3><p>Go to the <strong>All applications</strong> section and click the <strong>+ Add new application</strong> button.</p>\n<p>1.You will get prompted to provide the app title</p>\n<p>2.You can then proceed with the store listings.</p>\n<p>3.You can fill in app description, screenshots and so on.</p>\n<p>You can also submit an APK. Read about how to obtain an APK from a NativeScript app.</p>\n<h3 id=\"Builds\"><a href=\"#Builds\" class=\"headerlink\" title=\"Builds\"></a>Builds</h3><h4 id=\"build-versioning\">Build versioning</h4>\nWe have already explained how the <em>Application Id</em> is set in your project, how icons are added to your app and how you can set the display name.\n\nBefore the build, you need to set two important things: the <em>versionCode</em> and the <em>android:versionName</em>.\n\nWhen a build is uploaded, its <em>versionCode</em> should be larger than previous builds.\nA new build with a higher <em>versionCode</em> is considered an upgrade to builds that have a lower <em>versionCode</em>.\nThe <em>versionCode</em> is an integer so you should carefully consider a strategy for versioning.\n\nBoth values are stored in <code>app/App_Resources/Android/AndroidManifest.xml</code>.\n&gt; <strong>NOTE:</strong> <code>android:versionName</code> is a string value, which is used to represent the application version to the user whereas <code>android:versionCode</code>, which is integer value showing version of the application code relative to the other versions.\nYou can read more about <a href=\"http://developer.android.com/tools/publishing/versioning.html\" target=\"_blank\" rel=\"external\">“Versioning Your Applications”</a>.\n\nIn the <code>app/App_Resources/Android/AndroidManifest.xml</code>, the <em>versionCode</em> and <em>versionName</em> appear as:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">      package=&quot;org.nativescript.name&quot;</div><div class=\"line\">      android:versionCode=&quot;2&quot;</div><div class=\"line\">      android:versionName=&quot;1.1&quot;&gt;</div><div class=\"line\">      ...</div></pre></td></tr></table></figure>\n\n<h4 id=\"build-signed-release-apk\">Build signed release APK</h4>\n\n<p>You can perform a full build and produce a signed APK using the NativeScript CLI:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns build android --release --key-store-path &lt;path-to-your-keystore&gt; --key-store-password &lt;your-key-store-password&gt; --key-store-alias &lt;your-alias-name&gt; --key-store-alias-password &lt;your-alias-password&gt; --copy-to &lt;apk-location&gt;.apk</div></pre></td></tr></table></figure></p>\n<p>You can then use the produced <code>&lt;apk-location&gt;.apk</code> for upload to <em>Google Play</em>.</p>\n<h4 id=\"submit-with-the-google-play-developer-console\">Submit with the Google Play Developer Console</h4>\n\n<p>To submit your app to the <em>Google Play Developer Console</em>:</p>\n<ol>\n<li>Log into the <a href=\"https://play.google.com/apps/publish\" target=\"_blank\" rel=\"external\">Google Play Developer Console</a>.</li>\n<li>Select your application and go to the <strong>APK</strong> section.</li>\n<li>Choose <em>Production</em>, <em>Beta</em> or <em>Alpha</em> stage and click the <strong>Upload new APK</strong>.</li>\n<li>Select the APK produced by the CLI.</li>\n</ol>\n<p>You can read more about these stages at <a href=\"https://support.google.com/googleplay/android-developer/answer/3131213?hl=en\" target=\"_blank\" rel=\"external\">“Set up alpha/beta tests”</a>.</p>\n<p>Once you upload your APK, it will go through a review. When approved, you can move it to production to make it available on <em>Google Play</em>.</p>\n<h4 id=\"submit-with-telerik-appmanager\">Submit with Telerik AppManager</h4>\n\n<p>It is worth mentioning that the NativeScript platform is integrated in the <em>Telerik Platform</em>. And the <em>Telerik Platform</em> has everything you need in the cloud, easing the submission process. This includes managing your distribution certificates and provisioning profiles, as well as support for cloud builds and <em>App Store</em> submission.</p>\n<p>Read more about the app submission process in the <em>Telerik Platform</em> in <a href=\"http://docs.telerik.com/platform/appmanager/getting-started/introduction\" target=\"_blank\" rel=\"external\">‘Introduction to Telerik AppManager’</a>.</p>\n<h4 id=\"submission-automation\">Submission automation</h4>\n\n<p>Some tools allow the submission process to be automated - <a href=\"https://github.com/fastlane/fastlane\" target=\"_blank\" rel=\"external\">MIT Licensed one: fastlane</a>.\nYou can also hack your own scripts around the <a href=\"https://developers.google.com/android-publisher/api-ref/edits/apks/upload\" target=\"_blank\" rel=\"external\">Google Play Developer API</a>.</p>\n<h2 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h2><p>Once you successfully upload your APK, and it passes Google review, you will be able to move your APK to production, and it will go live on <em>Google Play</em>.</p>\n","excerpt":"","more":"<h1 id=\"Publishing-a-NativeScript-Android-App-in-Google-Play\"><a href=\"#Publishing-a-NativeScript-Android-App-in-Google-Play\" class=\"headerlink\" title=\"Publishing a NativeScript Android App in Google Play\"></a>Publishing a NativeScript Android App in Google Play</h1><ol>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#creating-android-nativescript-app\">Creating Android NativeScript app</a><ol>\n<li><a href=\"#application-id-and-package-name\">Application Id and Package Name</a></li>\n<li><a href=\"#app-name\">App name</a></li>\n<li><a href=\"#app-icons\">App icons</a></li>\n</ol>\n</li>\n<li><a href=\"#certificates\">Certificates</a><ol>\n<li><a href=\"#debug-certificate\">Debug certificate</a></li>\n<li><a href=\"#release-certificate\">Release certificate</a></li>\n</ol>\n</li>\n<li><a href=\"#google-play-developer-console\">Google Play Developer Console</a><ol>\n<li><a href=\"#creating-an-app\">Creating an app</a></li>\n<li><a href=\"#builds\">Builds</a><ol>\n<li><a href=\"#build-versioning\">Build versioning</a></li>\n<li><a href=\"#build-signed-release-apk\">Build signed release APK</a></li>\n<li><a href=\"#submit-with-the-google-play-developer-console\">Submit with the Google Play Developer Console</a></li>\n<li><a href=\"#submit-with-telerik-appmanager\">Submit with Telerik AppManager</a></li>\n<li><a href=\"#submission-automation\">Submission automation</a></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><a href=\"#publish\">Publish</a></li>\n</ol>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>You can publish a NativeScript app in <em>Google Play</em> the same way <a href=\"http://developer.android.com/tools/publishing/publishing_overview.html\">you would release a purely native Android app</a>.</p>\n<ol>\n<li><p>Verify that the Android native project inside your app contains your latest changes and resources by running the following command.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns prepare android</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure that you have a <code>.keystore</code> file to sign your app with. For more information, see <a href=\"http://developer.android.com/tools/publishing/app-signing.html#signing-manually\">How to create  a .keystore file</a>?</p>\n</li>\n<li><p>Build your project in release mode by running the following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns build android --release --key-store-path &lt;path-to-your-keystore&gt; --key-store-password &lt;your-key-store-password&gt; --key-store-alias &lt;your-alias-name&gt; --key-store-alias-password &lt;your-alias-password&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Obtain the release <code>.apk</code> located at <code>&lt;app_name&gt;/platforms/android/build/outputs/apk/&lt;app_name&gt;-release.apk</code>.</p>\n</li>\n<li>Publish your Android app by uploading the <code>.apk</code> file to the Google Developer Console. For more information, see <a href=\"http://developer.android.com/distribute/googleplay/start.html\">How to publish an Android app?</a></li>\n</ol>\n<h2 id=\"Creating-Android-NativeScript-app\"><a href=\"#Creating-Android-NativeScript-app\" class=\"headerlink\" title=\"Creating Android NativeScript app\"></a>Creating Android NativeScript app</h2><h3 id=\"Application-Id-and-Package-Name\"><a href=\"#Application-Id-and-Package-Name\" class=\"headerlink\" title=\"Application Id and Package Name\"></a>Application Id and Package Name</h3><p>Both <em>Package Name</em>, and <em>Application Id</em>, are unique identifiers, provided by you for your app.</p>\n<ul>\n<li><em>Package Name</em> is used to identify resources such as the <code>R</code>.</li>\n<li><em>Application Id</em> is used to identify your app on devices and at the <em>Google Play</em>.\nIn the NativeScript framework, both are set to the <code>nativescript.id</code> in <code>package.json</code>.\nThe NativeScript CLI build system will set them as the <code>package</code> attribute in the generated project in <code>platforms/android/src/main/AndroidManifest.xml</code>.\nIn the <code>app/App_Resources/Android/AndroidManifest.xml</code> it will use a placeholder: <code>package=&quot;__PACKAGE__&quot;</code>. Do <strong>not</strong> modify the <code>package</code> attribute there.</li>\n</ul>\n<blockquote>\n<p><strong>NOTE:</strong> To edit the <em>Package Name</em> and the <em>Application Id</em>, modify the <code>package.json</code> of your app and set the <code>nativescript.id</code> key.\nYou may need to delete <code>platforms/android</code> and rebuild using the CLI command <code>tns prepare android</code>.</p>\n</blockquote>\n<p><a href=\"http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename\">Read more about “ApplicationId versus PackageName”</a>.</p>\n<h3 id=\"App-name\"><a href=\"#App-name\" class=\"headerlink\" title=\"App name\"></a>App name</h3><p>This is the display name for your app. It is purely cosmetic but highly important. For example, it appears under the app icon.\nThe value can be stored in the <code>app/App_Resources/Android/AndroidManifest.xml</code> file, as an <code>android:label=&quot;&lt;App Name&gt;&quot;</code> attribute, on the <code>&lt;application&gt;</code> element.</p>\n<p>You can check out more information about <a href=\"http://developer.android.com/guide/topics/manifest/application-element.html\">the elements you can define in the <code>AndroidManifest.xml</code> here</a>.</p>\n<h3 id=\"App-icons\"><a href=\"#App-icons\" class=\"headerlink\" title=\"App icons\"></a>App icons</h3><p>App icons are defined similar to the app name.\nThe icon name is defined in the <code>app/App_Resources/Android/AndroidManifest.xml</code> file, as an <code>android:icon=&quot;@drawable/icon&quot;</code> attribute, on the <code>&lt;application&gt;</code> element.</p>\n<p>The actual .PNG icons stay at the Android resources in <code>app/App_Resource/Android/&lt;DPI&gt;/icon.png</code>, DPIs:</p>\n<table>\n<thead>\n<tr>\n<th>directory</th>\n<th>DPI</th>\n<th>screen</th>\n<th>size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>drawable-ldpi</code></td>\n<td>120</td>\n<td>Low density screen</td>\n<td>36px  x 36px</td>\n</tr>\n<tr>\n<td><code>drawable-mdpi</code></td>\n<td>160</td>\n<td>Medium density screen</td>\n<td>48px  x 48px</td>\n</tr>\n<tr>\n<td><code>drawable-hdpi</code></td>\n<td>240</td>\n<td>High density screen</td>\n<td>72px  x 72px</td>\n</tr>\n<tr>\n<td><code>drawable-xhdpi</code></td>\n<td>320</td>\n<td>Extra-high density screen</td>\n<td>96px  x 96px</td>\n</tr>\n<tr>\n<td><code>drawable-xxhdpi</code></td>\n<td>480</td>\n<td>Extra-extra-high density screen</td>\n<td>144px x 144px</td>\n</tr>\n<tr>\n<td><code>drawable-xxxhdpi</code></td>\n<td>640</td>\n<td>Extra-extra-extra-high density screen</td>\n<td>192px x 192px</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Splash-screen\"><a href=\"#Splash-screen\" class=\"headerlink\" title=\"Splash screen\"></a>Splash screen</h3><p>Android has no built-in mechanism to provide splash screen image.\n<a href=\"https://www.nativescript.org/blog/details/splash-screen-for-your-android-applications\">Here is a blog post that describes how to implement a splash screen in the NativeScript framework.</a></p>\n<h2 id=\"Certificates\"><a href=\"#Certificates\" class=\"headerlink\" title=\"Certificates\"></a>Certificates</h2><h3 id=\"Debug-certificate\"><a href=\"#Debug-certificate\" class=\"headerlink\" title=\"Debug certificate\"></a>Debug certificate</h3><p>These are automatically generated by the Android SDK tools for you.</p>\n<p>In debug mode, you sign your app with a debug certificate.\nThis certificate has a private key with a known password.\nThe process is handled by the Android tooling.</p>\n<p>You can read more at <a href=\"http://developer.android.com/tools/publishing/app-signing.html\">“Signing in Debug Mode”</a>.</p>\n<h3 id=\"Release-certificate\"><a href=\"#Release-certificate\" class=\"headerlink\" title=\"Release certificate\"></a>Release certificate</h3><p>The release certificate for Android is created by you; it does not have to be signed by a certificate authority.\nIt is easier to create a release certificate for Android than it is for iOS. You should, however, be more careful with your certificate.</p>\n<p>A few pitfalls are:</p>\n<ul>\n<li>You create the certificate only once. If you lose it, you will not be able to publish any updates to your app, because you must always sign all versions of your app with the same key.</li>\n<li>If your certificate expires, you will not be able to renew it. Ensure long validity when creating a new certificate (for 20+ years).</li>\n<li>If a third party obtains your private key, that party could sign and distribute apps that maliciously replace your authentic apps or corrupt them.</li>\n</ul>\n<p>You can generate a private key for a release certificate using the <a href=\"http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html\">keytool</a>.\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -genkey -v -keystore &lt;my-release-key&gt;.keystore -alias &lt;alias_name&gt; -keyalg RSA -keysize 2048 -validity 10000</div></pre></td></tr></table></figure></p>\n<p>This will run an interactive session collecting information about your name, organization and most importantly &mdash; keystore and alias passwords.</p>\n<h2 id=\"Google-Play-Developer-Console\"><a href=\"#Google-Play-Developer-Console\" class=\"headerlink\" title=\"Google Play Developer Console\"></a>Google Play Developer Console</h2><p>You will need a developer account and you will need to log into the <a href=\"https://play.google.com/apps/publish/\">Google Play Developer Console</a>.</p>\n<h3 id=\"Creating-an-app\"><a href=\"#Creating-an-app\" class=\"headerlink\" title=\"Creating an app\"></a>Creating an app</h3><p>Go to the <strong>All applications</strong> section and click the <strong>+ Add new application</strong> button.</p>\n<p>1.You will get prompted to provide the app title</p>\n<p>2.You can then proceed with the store listings.</p>\n<p>3.You can fill in app description, screenshots and so on.</p>\n<p>You can also submit an APK. Read about how to obtain an APK from a NativeScript app.</p>\n<h3 id=\"Builds\"><a href=\"#Builds\" class=\"headerlink\" title=\"Builds\"></a>Builds</h3><h4 id=\"build-versioning\">Build versioning</h4>\nWe have already explained how the <em>Application Id</em> is set in your project, how icons are added to your app and how you can set the display name.\n\nBefore the build, you need to set two important things: the <em>versionCode</em> and the <em>android:versionName</em>.\n\nWhen a build is uploaded, its <em>versionCode</em> should be larger than previous builds.\nA new build with a higher <em>versionCode</em> is considered an upgrade to builds that have a lower <em>versionCode</em>.\nThe <em>versionCode</em> is an integer so you should carefully consider a strategy for versioning.\n\nBoth values are stored in <code>app/App_Resources/Android/AndroidManifest.xml</code>.\n&gt; <strong>NOTE:</strong> <code>android:versionName</code> is a string value, which is used to represent the application version to the user whereas <code>android:versionCode</code>, which is integer value showing version of the application code relative to the other versions.\nYou can read more about <a href=\"http://developer.android.com/tools/publishing/versioning.html\">“Versioning Your Applications”</a>.\n\nIn the <code>app/App_Resources/Android/AndroidManifest.xml</code>, the <em>versionCode</em> and <em>versionName</em> appear as:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">      package=&quot;org.nativescript.name&quot;</div><div class=\"line\">      android:versionCode=&quot;2&quot;</div><div class=\"line\">      android:versionName=&quot;1.1&quot;&gt;</div><div class=\"line\">      ...</div></pre></td></tr></table></figure>\n\n<h4 id=\"build-signed-release-apk\">Build signed release APK</h4>\n\n<p>You can perform a full build and produce a signed APK using the NativeScript CLI:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns build android --release --key-store-path &lt;path-to-your-keystore&gt; --key-store-password &lt;your-key-store-password&gt; --key-store-alias &lt;your-alias-name&gt; --key-store-alias-password &lt;your-alias-password&gt; --copy-to &lt;apk-location&gt;.apk</div></pre></td></tr></table></figure></p>\n<p>You can then use the produced <code>&lt;apk-location&gt;.apk</code> for upload to <em>Google Play</em>.</p>\n<h4 id=\"submit-with-the-google-play-developer-console\">Submit with the Google Play Developer Console</h4>\n\n<p>To submit your app to the <em>Google Play Developer Console</em>:</p>\n<ol>\n<li>Log into the <a href=\"https://play.google.com/apps/publish\">Google Play Developer Console</a>.</li>\n<li>Select your application and go to the <strong>APK</strong> section.</li>\n<li>Choose <em>Production</em>, <em>Beta</em> or <em>Alpha</em> stage and click the <strong>Upload new APK</strong>.</li>\n<li>Select the APK produced by the CLI.</li>\n</ol>\n<p>You can read more about these stages at <a href=\"https://support.google.com/googleplay/android-developer/answer/3131213?hl=en\">“Set up alpha/beta tests”</a>.</p>\n<p>Once you upload your APK, it will go through a review. When approved, you can move it to production to make it available on <em>Google Play</em>.</p>\n<h4 id=\"submit-with-telerik-appmanager\">Submit with Telerik AppManager</h4>\n\n<p>It is worth mentioning that the NativeScript platform is integrated in the <em>Telerik Platform</em>. And the <em>Telerik Platform</em> has everything you need in the cloud, easing the submission process. This includes managing your distribution certificates and provisioning profiles, as well as support for cloud builds and <em>App Store</em> submission.</p>\n<p>Read more about the app submission process in the <em>Telerik Platform</em> in <a href=\"http://docs.telerik.com/platform/appmanager/getting-started/introduction\">‘Introduction to Telerik AppManager’</a>.</p>\n<h4 id=\"submission-automation\">Submission automation</h4>\n\n<p>Some tools allow the submission process to be automated - <a href=\"https://github.com/fastlane/fastlane\">MIT Licensed one: fastlane</a>.\nYou can also hack your own scripts around the <a href=\"https://developers.google.com/android-publisher/api-ref/edits/apks/upload\">Google Play Developer API</a>.</p>\n<h2 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h2><p>Once you successfully upload your APK, and it passes Google review, you will be able to move your APK to production, and it will go live on <em>Google Play</em>.</p>\n"},{"title":"Publishing for iOS","description":"Learn how to publish your app in the App Store for iOS users.","position":13,"slug":"publishing-ios-apps","previous_url":"/core-concepts/releasing-apps","_content":"\n# Publishing a NativeScript iOS App in the App Store\n\n0. [Overview](#overview)\n1. [Creating iOS NativeScript app](#creating-ios-nativescript-app)\n  1. [Bundle ID](#bundle-id)\n  2. [App name](#app-name)\n  3. [App icons](#app-icons)\n  4. [Launch files](#launch-files)\n    1. [Launch screen images](#launch-screen-images)\n    2. [Launch Screen Storyboard](#launch-screen-storyboard)\n2. [Certificates, identifiers & profiles](#certificates-identifiers--profiles)\n  1. [Account with Apple ID](#account-with-apple-id)\n  2. [Development certificates](#development-certificates)\n  3. [Production certificates](#distribution-certificates)\n  4. [Identifiers - App IDs](#identifiers---app-ids)\n  5. [Devices](#devices)\n  6. [Development provisioning profiles](#development-provisioning-profiles)\n  7. [Distribution provisioning profiles](#distribution-provisioning-profiles)\n3. [iTunes Connect](#itunes-connect)\n  1. [Account](#account)\n  2. [Creating an app](#creating-an-app)\n  3. [Builds](#builds)\n    1. [Build versioning](#build-versioning)\n    2. [Submit from the NativeScript CLI](#submit-from-the-nativescript-cli)\n    3. [Submit from Xcode](#submit-from-xcode)\n    4. [Submit with Telerik AppManager](#submit-with-telerik-appmanager)\n    5. [Submission automation](#submission-automation)\n  4. [Send for approval and publish](#send-for-approval-and-publish)\n\n## Overview\nYou can publish a NativeScript app in the *App Store* the same way you would [release a purely native iOS app](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html).\n\n 1. Verify that the iOS native project inside your app contains your latest changes and resources by running the following command.\n     ```\n     tns prepare ios\n     ```\n 2. Open the iOS native project in Xcode. Your native project is located at: `{app-name}/platforms/ios/{app-name}.xcodeproj`.\n 3. [Configure the project for distribution](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html).\n 4. [Upload the app to iTunes Connect](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/UploadingYourApptoiTunesConnect/UploadingYourApptoiTunesConnect.html).\n 5. [Submit it to the *App Store*](https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html).\n\n## Creating iOS NativeScript app\n### Bundle ID\nThe *Bundle ID* is a unique identifier, provided by you for your app. It uses reverse domain name notation. For example, the NativeScript CLI will use `org.nativescript.<AppName>` as default. During `tns create` you can provide the *Bundle ID* using the `--appid <id>` option.\n\nIn iOS apps, the *Bundle ID* is stored in the `CFBundleIdentifier` in the `Info.plist`, but the NativeScript CLI will explicitly set this to the value of the `nativescript.id` key stored in the `package.json` file in the root of your application.\n\n> **NOTE:** To edit the *Bundle ID*, edit the `package.json` of your app and set the `nativescript.id` key.\n\nThe *Bundle ID* is used to precisely identify your app at various situations and plays an important role, when it is built and launched by the CLI, as well as when *Provisioning Profiles* and certificates are created in the *Apple Member Center*.\n\nFor more information consider [the 'About Bundle IDs' section in the following article](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html).\n\n### App name\nThis is the display name for your app. It is purely cosmetic but highly important. Fot example, it will appear under the app icon.\nThe value is stored in the `app/App_Resources/iOS/Info.plist` file as the `CFBundleDisplayName` key.\n\n### App icons\nThe NativeScript framework will use icons from `app/App_Resources/iOS/`. All files from that folder are added as resources in the generated Xcode project in `platforms/ios`.\n\n*App Store* submissions will be rejected if certain icon files are not present. To ensure you have the required icons, you can consider the following Apple article: ['App Icons on iPad and iPhone'](https://developer.apple.com/library/ios/qa/qa1686/_index.html).\n\nIf you want to extend the default icon set, and you don't want to use the default naming, or you need finer control, you can use the `app/App_Resources/iOS/Info.plist`.\nList the icons using [`CFBundleIconFiles`](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW10) or [`CFBundleIcon`](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW13).\n\nFor example, listing icons using `CFBundleIconFiles`:\n### Example 1: How to customise Info.plist.__>\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <!-- The full content of the Info.plist still should be here. -->\n\t<key>CFBundleIconFiles</key>\n\t<array>\n\t\t<string>Icon@2x.png</string>\n\t\t<string>Icon.png</string>\n\t\t<string>Icon-Small@3x.png</string>\n\t\t<string>Icon-Small@2x.png</string>\n\t\t<string>Icon-Small.png</string>\n\t\t<string>Icon-Small-50@2x.png</string>\n        <!-- etc -->\n\t</array>\n</dict>\n</plist>\n```\n\n### Launch files\nLaunch screens are an essential part of your iOS app. This is the first thing your users see when they start your app.\n\nThe Springboard will play a subtle animation transitioning from the home screen to your app. In order to provide a pleasing experience, it's best to avoid a default that's entirely black or white.\n\nThe launch files are not a splash screen; instead, they are a way for the OS to quickly grab a preview image of your app and use it during the first ~300ms while your app is booting.\n\n[For design guidelines you can consider the following article provided by Apple](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html).\n\n> **QUOTE:** If you think that following these guidelines will result in a plain, boring launch image, you’re right. Remember, the launch image doesn’t provide you with an opportunity for artistic expression. It’s solely intended to enhance the user’s perception of your app as quick to launch and immediately ready for use.\n\n*App Store* submissions will be rejected if certain launch files are not present. Make sure that when new iOS versions and devices are released that you update your *launch files* and accommodate the upcoming form factors.\n\nIf a customer runs your app on a device with a high resolution screen and your app is missing the launch screen file for that device, then iOS will render your app using a smaller resolution, degrading its quality:\n - Your app may be upscaled, and blurred\n - Your app may have black areas\n\nEarlier iOS versions had to support a small range of form factors. Providing a different launch image per screen size was trivial. With the new devices released by Apple, the number of images that had to be provided increased. That's where Apple introduced the *launch screen storyboard*. \nThe storyboard allows basic primitives such as images to be presented on the screen, and you can have dynamic layout using layout constraints. This makes it possible to design a single *launch screen* that fits well for all form factors.\n\nThe NativeScript framework default project has a *Launch Screen Storyboard* and *Launch Images*. In iOS8 and later, your app may use storyboards; your app can use launch images for devices that run earlier versions of iOS. \n\n#### Launch screen images\nThe images are placed, similar to the icons already mentioned, in `app/App_Resources/iOS`. The default project template ships several `Default-*.PNG` files there; you may consider changing them.\n\nIn iOS8 and later versions, your app will display its storyboard. If you want to use images on all devices, you can consider disabling the *Launch Screen Storyboard*. Instructions for how to do this are explained later in the next section.\n\nSimilar to the icons, you can use the [`UILaunchImageFile`](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW24) and [`UILaunchImages`](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW28) key in the `app/App_Resources/iOS`.\n\n#### Launch Screen Storyboard\nThe NativeScript framework will provide a *Launch Screen Storyboard* in `platforms/ios/<YourAppName>/en.lproj/LaunchScreen.xib`, but does **not** yet provide a means to store it at `app/App_Resources/iOS`.\nIf you want to edit it you can use the `.xcodeproj` generated in `platforms/ios`. You will have to add it in source control.\nCLI rebuilds may overwrite it, so you will have to watch out for automatic changes in it when you commit.\n\nTo disable the default *Launch Screen Storyboard*, remove the `UILaunchStoryboardName` from the `app/App_Resources/iOS/Info.plist`:\n```\n\t<key>UILaunchStoryboardName</key>\n\t<string>LaunchScreen</string>\n```\nThis will force all supported launch screens to use the *launch image*. \n\n## Certificates, identifiers & profiles\nCertificates, identifiers and profiles are managed at [https://developer.apple.com/membercenter](https://developer.apple.com/membercenter).\n\n[You should really explore the information Apple provides on certificates and identities](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html).\nThis article will cover only the basics.\n\n### Account with Apple ID\nYou will need a developer account with an *Apple ID* so you can access the [Apple Developer Member Center](https://developer.apple.com/membercenter). \n\nYou will need to be added as an iOS developer in your organization.\n\n### Development certificates\nDevelopment certificates are used to sign iOS apps proving the origin of the app. If you plan to use the Xcode tooling it would be best to create a *development certificate*.\n\nA few pitfalls are:\n - A developer is allowed to have one certificate at any time. You must 'revoke' an existing certificate before you can create a new one.\n - Certificates consist of public and private keys. The private key is never sent to Apple, so you cannot 'download' your certificate from the *Member Center*. If you lose the private key of your certificate, you have to revoke it and create a new one.\n - When revoked or expired, the certificates may further invalidate *provisioning profiles*. Once the certificate is recreated, the *provisioning profiles* need to be updated as well.\n - Making a certificate requires a Mac. You use the Keychain Access tool to create a certificate request, generating a public and private keys at your side, then send the public key to Apple while storing the private key in your keychain.\n - If you follow the steps at the *Member Center* to create a new *development certificate*, the certificate must be stored in your keychain. You can consider exporting it and backing it up.\n\n> **NOTE:** Go to [https://developer.apple.com/account/ios/certificate/certificateList.action?type=development](https://developer.apple.com/account/ios/certificate/certificateList.action?type=development) click the '+' (add) button and follow the instructions for making a new 'iOS App Development' certificate. \n\n### Production certificates\n*Production certificates* work similarly to development certificates. They consist of public and private keys. The private key stays at your side and is never sent to Apple. Your app is signed with the distribution certificate using your private key,\n so Apple can verify the origin of submissions in *iTunes Connect* using the public key you sent them.\n\nThis *production certificates* is used to sign the application binary when it is prepared for submission.\nUsually when an app is built for a device, its IPA file is signed with the development certificate. \n> **Note** You can read more about IPA (file extension) [here](https://en.wikipedia.org/wiki/.ipa_(file_extension))\nLater, the tooling resigns the IPA with the *production certificate* and appends the distribution provisioning profile when submitting to *iTunes Connect*.\n\nA few pitfalls are:\n - Creating *production certificates* are more restricted than creating development certificates. Apple limit the number of *production certificates* per team.\n - Because production certificates are limited in quantity per team, and frequently shared between multiple team members, you must be extremely careful when you revoke an existing distribution certificate. If you ultimately lost your private key of a distribution certificate and revoke it, consult with anyone that may have backed it up or is in need of the new certificate. Hopefully this will avoid your new copy being revoked in the future or losing your admin rights. \n - *Production certificates* can be shared between team members. If you follow the steps at the *Member Center* to create a new one (link below) the certificate will be stored in your keychain. You can export it as a .p12 file, easily backing it up and sharing it with senior team peers.\n\nIf you need a new distribution certificate, go to [https://developer.apple.com/account/ios/certificate/certificateList.action?type=distribution](https://developer.apple.com/account/ios/certificate/certificateList.action?type=distribution) click the '+' (add) button and follow the instructions for making a new 'App Store Distribution' certificate. Chances are you are part of a larger organization and your role does not have sufficient rights to create a new distribution certificate. Admins or other team member may provide you the certificates in that case. In such cases, you will probably be given a .p12 file and a password. You should import the file in your keychain using the `Keychain Access` application. \n\n### Identifiers - App IDs\nTo test your app on a device or submit in the *App Store*, you will need to create an *App ID*.\nApp IDs consist of a *Prefix* or a *Team ID* that is generated by Apple, followed by an ID provided by you that must match your *Bundle ID*.\nFor example, you can create an *App ID* with the `org.nativescript.*` ID that will match all your NativeScript apps.\nThe wildcard pattern imposes some restrictions on the services you can use, so you may also cosider using a non-wildcard pattern such as `org.nativescript.<my-app>`.\n\nThese identifiers are later used to bind apps with *provisioning profiles*.\n\n### Devices\nAt the *Member Center* you can register the devices you and your team use for testing.\nGo to [https://developer.apple.com/account/ios/device/deviceList.action](https://developer.apple.com/account/ios/device/deviceList.action).\n\nTo register a phone you will need its UDID. Connect it to the Mac and run in a terminal:\n```\ninstruments -s devices\n```\nIt will output all known devices and their UDIDs.\n\n### Development provisioning profiles\nDevelopment provisioning profiles bind together one or multiple developer signing identities (developer certificates), *App ID* and device IDs.\nThese are created at [https://developer.apple.com/account/ios/profile/profileList.action?type=limited](https://developer.apple.com/account/ios/profile/profileList.action?type=limited).\nIf you are making a new one, or adding a new app to an existing one, make sure to select these three:\n - Your *development certificate*\n - *App ID identifier*, that matches your App ID\n - The *device* you will test on\n\nUnlike the certificates, *provisioning profiles* are files that can be easily updated and downloaded from the Member Center (in .mobileprovision files) and installed in Xcode by double-clicking that file.\n\nXcode is also capable of obtaining these automatically. Open Xcode and from the menu go to  `Xcode > Preferences... > Accounts > (select your apple ID) > (select your Team Name) > View Details...`.\nThere you can check all signing identities (developer and *production certificates*) available to Xcode as well as `Download All` *provisioning profiles*.\n\nWhen you run an app on a device, Xcode will sign the app with your development certificate and add a provisioning profile that has your certificate, device ID and App ID.\n\nWhile the *development provisioning profiles* are easily created and updated, they frequently invalidate, especially when multiple *developer certificates* are involved. Every time one of them is revoked or expires, you need to update the provisioning certificate.\n\nThese are not of a particular interest for *App Store* submissions but you may need one to test on a real device.\n\n### Distribution provisioning profiles\nThere are several *distribution provisioning profile* types. The one you will need for *App Store* submission is 'App Store Distribution Provisioning Profile'.\nThese are similar to the *development provisioning profiles* because they bind:\n - Your *distribution certificate*\n - Your *device*-es\n - An *App ID*\n - Various settings, enabled services, etc.\n\n*Distribution provisioning profiles* are created at [https://developer.apple.com/account/ios/profile/profileList.action?type=production](https://developer.apple.com/account/ios/profile/profileList.action?type=production).\n\nFor *App Store* submissions, you must create an *App Store Distribution Provisioning Profile*. Once you create it, download it and double-click it on your Mac so it gets registered with Xcode.\n\n*Distribution provisioning profiles* invalidate rarely since they refer a single *Distribution Certificate*.\n\n## iTunes Connect\nWhile you manage your *provisioning profiles* and certificates at the *Apple Developer Member Center*, apps are registered and submitted at [iTunes Connect](https://itunesconnect.apple.com).\nThis is where you will be able to create new apps, prepare app screens, descriptions, manage app versions, etc.\n\n### Account\nYou will need your *Apple ID* added to your organization with sufficient rights at [https://itunesconnect.apple.com](https://itunesconnect.apple.com).\n\n### Creating an app\nTo publish your app in the iOS *App Store* you will have to register your app. Log into [https://itunesconnect.apple.com](https://itunesconnect.apple.com) and go to 'My Apps'.\nThere you can check the status and edit existing apps or create a new app.\n\nClick the '+' button at the top left corner. The 'New App' dialog should appear. There you have to fill the public *App Store* name of your app and primary language.\n\nAlso, you have to set *Bundle ID*, which must match the *Bundle ID* referred in ['1.1. Bundle ID'](#bundle-id).\nIf the drop-down does not contain a suitable match, you are probably missing an *App ID* referred at ['2.4. Identifiers - App IDs'](#identifiers-app-ids).\nIf there is a wildcard *App ID*, that is a potential match so select it. You will be able to type the suffix, replacing the wildcard in a text box.\n\nAt that point you have to fill in the App Information.\nThere are various assets that you must provide such as screenshots, icons, description, etc.\nFailing to provide all necessary assets may prevent you from submitting your app, or result in app rejection.\n\n>Note: Screenshots not matching the actual app may result in rejection of a new version sent for approval.\n\n### Builds\nOnce you have your app information registered at [https://itunesconnect.apple.com](https://itunesconnect.apple.com) it is time to build your NativeScript app for iOS and submit it.\n\nThere are two main ways to submit an app to *iTunes Connect* — using Xcode or using *Application Loader*.\n\n#### Build versioning\nWe have already explained how the *Bundle ID* is set in your project, how the launch screen (or storyboard) and images are added to your app, and how you can set the display name.\n\nBefore the build, you need to set two important things: the *Bundle Short Version String* and the *Bundle Version String*.\n\n*Bundle Short Version String* is the public version of your app. It is incremented between releases. For example: `2.1`.\n*Bundle Version String* is the internal build number. One public release usually has multiple release candidates. For example `2.1.1`, `2.1.1`, etc.\n\niTunes Connect has a restriction that a bundle cannot be uploaded with the same version twice, so you must increment the *Bundle Version String* with each upload.\n\nThe *Bundle Short Version String* should be incremented once your app version is uploaded, sent for approval, approved and published.\n\nBoth values are stored in `app/App_Resources/iOS/Info.plist`:\n - The `CFBundleShortVersionString` key stores the *Bundle Short Version String*.\n - The `CFBundleVersion` key stores the *Bundle Version String*.\n\nIn the `app/App_Resources/iOS/Info.plist` they appear as:\n```\n\t<key>CFBundleShortVersionString</key>\n\t<string>2.1</string>\n\t<key>CFBundleVersion</key>\n\t<string>2.1.2</string>\n```\n\nIf you need to edit these from the command line, there is a handy tool called `PlistBuddy` that can read and write Plist files.\nFor example, the following shell script appends the Jenkins `$BUILD_NUMBER` to the `CFBundleVersion` in the Info.plist:\n``` bash\n### Set CFBundleVersion ###\nexport CFBundleVersion=`/usr/libexec/PlistBuddy app/App_Resources/iOS/Info.plist -c \"Print :CFBundleVersion\"`\n/usr/libexec/PlistBuddy app/App_Resources/iOS/Info.plist -c \"Set :CFBundleVersion $CFBundleVersion.$BUILD_NUMBER\"\n```\n\n#### Submit from the NativeScript CLI\nYou can execute the following command inside a NativeScript project using the CLI:\n```\ntns publish ios\n```\n\nThe command will prompt for your `Apple ID` and `Password` for authentication with [iTunes Connect](https://itunesconnect.apple.com) and then produce a `release` build and proceed to upload it to iTunes Connect.\n\nAlternatively, you can use an existing build by running the following command:\n```\ntns publish ios --ipa <Ipa File Path>\n```\n\nFor more information, run the following command:\n```\ntns help publish ios\n```\n\n#### Submit from Xcode\nYou can execute the following command using the CLI:\n```\ntns prepare ios\n```\nThis will create an Xcode project in `platforms/ios/`. Then you may consider the following Apple article about how to [configure the project for distribution](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html).\n\nThe `platform` folder is not meant to stay in source control and you should be careful when you do modifications there.\nRebuilds may erase your changes and you should add changed files to source control.\n\nA common pitfall, if you are using CocoaPods, is to open the Xcode project instead of the workspace.\n\nOnce you have it open in Xcode, you have to go to your target's General settings and pick a team.\nIn 'Build Settings' there should be a suitable 'iOS Developer' and 'Code Signing Identity'.\n\nFrom the top drop-down, select your target, and from the devices and emulators, pick 'Generic iOS Device'.\n\nThen you should be able to select from the top menu `Product > Archive`.\n\nThis makes an xcodearchive and opens it in the Xcode Organizer.\nThe Xcode Organizer displays a list with builds of your app. Pick the last build and click `Upload to App Store...`.\nYou should select a team again and whether to include app symbols for your app. Next, you can see a list with the binary information, entitlements, etc.\nClick `Upload`.\n\nIf you upload successfully, you should be able to log in at [https://itunesconnect.apple.com](https://itunesconnect.apple.com) and see your build in 'Activities'. From there you can enable Test Flight beta testing or send it for approval.\n\n#### Submit with Telerik AppManager\n\nIt is worth mentioning that the NativeScript platform is integreated in the Telerik platform.\nThe Telerik platform has everything you need in the cloud, easing the submission process.\nThis includes managing your *production certificates* and *provisioning profiles*,\nas well as support for cloud builds and *Google Play* submission. \n\nRead more about app submission process in the *Telerik Platform* in ['Introduction to Telerik AppManager'](http://docs.telerik.com/platform/appmanager/getting-started/introduction)\n\n#### Submission automation\nAutomation can be achieved using the NativeScript CLI only. All of the parameters needed for publishing can be passed to the `publish` command directly:\n\n```\ntns publish ios [<Apple ID> [<Password> [<Mobile Provisioning Profile Identifier> [<Code Sign Identity>]]]]]\n```\nFor example, assuming that you want to issue a build using a mobile provision with an identifier *d5d40f61-b303-4fc8-aea3-fbb229a8171c*, you could run:\n```\ntns publish ios my-apple-id my-password d5d40f61-b303-4fc8-aea3-fbb229a8171c \"iPhone Distribution\"\n```\nNote that the `Code Sign Identity` can be set to something generic like *iPhone Distribution* in order to let the build automatically detect a code sign identity.\n\nYou can also automate the uploads of already built packages:\n```\ntns publish ios my-apple-id my-password --ipa /tmp/build/myIpa.ipa\n```\n\nSome tools that allow the submission process to be automated - [MIT Licensed one: fastlane](https://github.com/fastlane/fastlane). \nAlso, the previously mentioned *Application Loader* has a command line tool called *iTMSTransporter* in its package,\nwhich you may use to hack your own [shell scripts](https://gist.github.com/jedi4ever/b1f8b27d4a803d487fa4) around.\n\n### Send for approval and publish\nOnce you successfully submit a build at *iTunes Connect*, you can enable testing through *Test Flight*.\nWhen you are ready, go to the 'Build' section of your iOS app, pick the build, and click 'Submit for Review' for that version.\nThe app will pass through several [App Statuses](https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/ChangingAppStatus.html#//apple_ref/doc/uid/TP40011225-CH30-SW23). If your app passes Apple review, it can go live at the *App Store*.\n","source":"workflow/publishing-ios-apps.md","raw":"---\ntitle: Publishing for iOS\ndescription: Learn how to publish your app in the App Store for iOS users.\nposition: 13\nslug: publishing-ios-apps\nprevious_url: /core-concepts/releasing-apps\n---\n\n# Publishing a NativeScript iOS App in the App Store\n\n0. [Overview](#overview)\n1. [Creating iOS NativeScript app](#creating-ios-nativescript-app)\n  1. [Bundle ID](#bundle-id)\n  2. [App name](#app-name)\n  3. [App icons](#app-icons)\n  4. [Launch files](#launch-files)\n    1. [Launch screen images](#launch-screen-images)\n    2. [Launch Screen Storyboard](#launch-screen-storyboard)\n2. [Certificates, identifiers & profiles](#certificates-identifiers--profiles)\n  1. [Account with Apple ID](#account-with-apple-id)\n  2. [Development certificates](#development-certificates)\n  3. [Production certificates](#distribution-certificates)\n  4. [Identifiers - App IDs](#identifiers---app-ids)\n  5. [Devices](#devices)\n  6. [Development provisioning profiles](#development-provisioning-profiles)\n  7. [Distribution provisioning profiles](#distribution-provisioning-profiles)\n3. [iTunes Connect](#itunes-connect)\n  1. [Account](#account)\n  2. [Creating an app](#creating-an-app)\n  3. [Builds](#builds)\n    1. [Build versioning](#build-versioning)\n    2. [Submit from the NativeScript CLI](#submit-from-the-nativescript-cli)\n    3. [Submit from Xcode](#submit-from-xcode)\n    4. [Submit with Telerik AppManager](#submit-with-telerik-appmanager)\n    5. [Submission automation](#submission-automation)\n  4. [Send for approval and publish](#send-for-approval-and-publish)\n\n## Overview\nYou can publish a NativeScript app in the *App Store* the same way you would [release a purely native iOS app](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html).\n\n 1. Verify that the iOS native project inside your app contains your latest changes and resources by running the following command.\n     ```\n     tns prepare ios\n     ```\n 2. Open the iOS native project in Xcode. Your native project is located at: `{app-name}/platforms/ios/{app-name}.xcodeproj`.\n 3. [Configure the project for distribution](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html).\n 4. [Upload the app to iTunes Connect](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/UploadingYourApptoiTunesConnect/UploadingYourApptoiTunesConnect.html).\n 5. [Submit it to the *App Store*](https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html).\n\n## Creating iOS NativeScript app\n### Bundle ID\nThe *Bundle ID* is a unique identifier, provided by you for your app. It uses reverse domain name notation. For example, the NativeScript CLI will use `org.nativescript.<AppName>` as default. During `tns create` you can provide the *Bundle ID* using the `--appid <id>` option.\n\nIn iOS apps, the *Bundle ID* is stored in the `CFBundleIdentifier` in the `Info.plist`, but the NativeScript CLI will explicitly set this to the value of the `nativescript.id` key stored in the `package.json` file in the root of your application.\n\n> **NOTE:** To edit the *Bundle ID*, edit the `package.json` of your app and set the `nativescript.id` key.\n\nThe *Bundle ID* is used to precisely identify your app at various situations and plays an important role, when it is built and launched by the CLI, as well as when *Provisioning Profiles* and certificates are created in the *Apple Member Center*.\n\nFor more information consider [the 'About Bundle IDs' section in the following article](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html).\n\n### App name\nThis is the display name for your app. It is purely cosmetic but highly important. Fot example, it will appear under the app icon.\nThe value is stored in the `app/App_Resources/iOS/Info.plist` file as the `CFBundleDisplayName` key.\n\n### App icons\nThe NativeScript framework will use icons from `app/App_Resources/iOS/`. All files from that folder are added as resources in the generated Xcode project in `platforms/ios`.\n\n*App Store* submissions will be rejected if certain icon files are not present. To ensure you have the required icons, you can consider the following Apple article: ['App Icons on iPad and iPhone'](https://developer.apple.com/library/ios/qa/qa1686/_index.html).\n\nIf you want to extend the default icon set, and you don't want to use the default naming, or you need finer control, you can use the `app/App_Resources/iOS/Info.plist`.\nList the icons using [`CFBundleIconFiles`](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW10) or [`CFBundleIcon`](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW13).\n\nFor example, listing icons using `CFBundleIconFiles`:\n### Example 1: How to customise Info.plist.__>\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <!-- The full content of the Info.plist still should be here. -->\n\t<key>CFBundleIconFiles</key>\n\t<array>\n\t\t<string>Icon@2x.png</string>\n\t\t<string>Icon.png</string>\n\t\t<string>Icon-Small@3x.png</string>\n\t\t<string>Icon-Small@2x.png</string>\n\t\t<string>Icon-Small.png</string>\n\t\t<string>Icon-Small-50@2x.png</string>\n        <!-- etc -->\n\t</array>\n</dict>\n</plist>\n```\n\n### Launch files\nLaunch screens are an essential part of your iOS app. This is the first thing your users see when they start your app.\n\nThe Springboard will play a subtle animation transitioning from the home screen to your app. In order to provide a pleasing experience, it's best to avoid a default that's entirely black or white.\n\nThe launch files are not a splash screen; instead, they are a way for the OS to quickly grab a preview image of your app and use it during the first ~300ms while your app is booting.\n\n[For design guidelines you can consider the following article provided by Apple](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html).\n\n> **QUOTE:** If you think that following these guidelines will result in a plain, boring launch image, you’re right. Remember, the launch image doesn’t provide you with an opportunity for artistic expression. It’s solely intended to enhance the user’s perception of your app as quick to launch and immediately ready for use.\n\n*App Store* submissions will be rejected if certain launch files are not present. Make sure that when new iOS versions and devices are released that you update your *launch files* and accommodate the upcoming form factors.\n\nIf a customer runs your app on a device with a high resolution screen and your app is missing the launch screen file for that device, then iOS will render your app using a smaller resolution, degrading its quality:\n - Your app may be upscaled, and blurred\n - Your app may have black areas\n\nEarlier iOS versions had to support a small range of form factors. Providing a different launch image per screen size was trivial. With the new devices released by Apple, the number of images that had to be provided increased. That's where Apple introduced the *launch screen storyboard*. \nThe storyboard allows basic primitives such as images to be presented on the screen, and you can have dynamic layout using layout constraints. This makes it possible to design a single *launch screen* that fits well for all form factors.\n\nThe NativeScript framework default project has a *Launch Screen Storyboard* and *Launch Images*. In iOS8 and later, your app may use storyboards; your app can use launch images for devices that run earlier versions of iOS. \n\n#### Launch screen images\nThe images are placed, similar to the icons already mentioned, in `app/App_Resources/iOS`. The default project template ships several `Default-*.PNG` files there; you may consider changing them.\n\nIn iOS8 and later versions, your app will display its storyboard. If you want to use images on all devices, you can consider disabling the *Launch Screen Storyboard*. Instructions for how to do this are explained later in the next section.\n\nSimilar to the icons, you can use the [`UILaunchImageFile`](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW24) and [`UILaunchImages`](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW28) key in the `app/App_Resources/iOS`.\n\n#### Launch Screen Storyboard\nThe NativeScript framework will provide a *Launch Screen Storyboard* in `platforms/ios/<YourAppName>/en.lproj/LaunchScreen.xib`, but does **not** yet provide a means to store it at `app/App_Resources/iOS`.\nIf you want to edit it you can use the `.xcodeproj` generated in `platforms/ios`. You will have to add it in source control.\nCLI rebuilds may overwrite it, so you will have to watch out for automatic changes in it when you commit.\n\nTo disable the default *Launch Screen Storyboard*, remove the `UILaunchStoryboardName` from the `app/App_Resources/iOS/Info.plist`:\n```\n\t<key>UILaunchStoryboardName</key>\n\t<string>LaunchScreen</string>\n```\nThis will force all supported launch screens to use the *launch image*. \n\n## Certificates, identifiers & profiles\nCertificates, identifiers and profiles are managed at [https://developer.apple.com/membercenter](https://developer.apple.com/membercenter).\n\n[You should really explore the information Apple provides on certificates and identities](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html).\nThis article will cover only the basics.\n\n### Account with Apple ID\nYou will need a developer account with an *Apple ID* so you can access the [Apple Developer Member Center](https://developer.apple.com/membercenter). \n\nYou will need to be added as an iOS developer in your organization.\n\n### Development certificates\nDevelopment certificates are used to sign iOS apps proving the origin of the app. If you plan to use the Xcode tooling it would be best to create a *development certificate*.\n\nA few pitfalls are:\n - A developer is allowed to have one certificate at any time. You must 'revoke' an existing certificate before you can create a new one.\n - Certificates consist of public and private keys. The private key is never sent to Apple, so you cannot 'download' your certificate from the *Member Center*. If you lose the private key of your certificate, you have to revoke it and create a new one.\n - When revoked or expired, the certificates may further invalidate *provisioning profiles*. Once the certificate is recreated, the *provisioning profiles* need to be updated as well.\n - Making a certificate requires a Mac. You use the Keychain Access tool to create a certificate request, generating a public and private keys at your side, then send the public key to Apple while storing the private key in your keychain.\n - If you follow the steps at the *Member Center* to create a new *development certificate*, the certificate must be stored in your keychain. You can consider exporting it and backing it up.\n\n> **NOTE:** Go to [https://developer.apple.com/account/ios/certificate/certificateList.action?type=development](https://developer.apple.com/account/ios/certificate/certificateList.action?type=development) click the '+' (add) button and follow the instructions for making a new 'iOS App Development' certificate. \n\n### Production certificates\n*Production certificates* work similarly to development certificates. They consist of public and private keys. The private key stays at your side and is never sent to Apple. Your app is signed with the distribution certificate using your private key,\n so Apple can verify the origin of submissions in *iTunes Connect* using the public key you sent them.\n\nThis *production certificates* is used to sign the application binary when it is prepared for submission.\nUsually when an app is built for a device, its IPA file is signed with the development certificate. \n> **Note** You can read more about IPA (file extension) [here](https://en.wikipedia.org/wiki/.ipa_(file_extension))\nLater, the tooling resigns the IPA with the *production certificate* and appends the distribution provisioning profile when submitting to *iTunes Connect*.\n\nA few pitfalls are:\n - Creating *production certificates* are more restricted than creating development certificates. Apple limit the number of *production certificates* per team.\n - Because production certificates are limited in quantity per team, and frequently shared between multiple team members, you must be extremely careful when you revoke an existing distribution certificate. If you ultimately lost your private key of a distribution certificate and revoke it, consult with anyone that may have backed it up or is in need of the new certificate. Hopefully this will avoid your new copy being revoked in the future or losing your admin rights. \n - *Production certificates* can be shared between team members. If you follow the steps at the *Member Center* to create a new one (link below) the certificate will be stored in your keychain. You can export it as a .p12 file, easily backing it up and sharing it with senior team peers.\n\nIf you need a new distribution certificate, go to [https://developer.apple.com/account/ios/certificate/certificateList.action?type=distribution](https://developer.apple.com/account/ios/certificate/certificateList.action?type=distribution) click the '+' (add) button and follow the instructions for making a new 'App Store Distribution' certificate. Chances are you are part of a larger organization and your role does not have sufficient rights to create a new distribution certificate. Admins or other team member may provide you the certificates in that case. In such cases, you will probably be given a .p12 file and a password. You should import the file in your keychain using the `Keychain Access` application. \n\n### Identifiers - App IDs\nTo test your app on a device or submit in the *App Store*, you will need to create an *App ID*.\nApp IDs consist of a *Prefix* or a *Team ID* that is generated by Apple, followed by an ID provided by you that must match your *Bundle ID*.\nFor example, you can create an *App ID* with the `org.nativescript.*` ID that will match all your NativeScript apps.\nThe wildcard pattern imposes some restrictions on the services you can use, so you may also cosider using a non-wildcard pattern such as `org.nativescript.<my-app>`.\n\nThese identifiers are later used to bind apps with *provisioning profiles*.\n\n### Devices\nAt the *Member Center* you can register the devices you and your team use for testing.\nGo to [https://developer.apple.com/account/ios/device/deviceList.action](https://developer.apple.com/account/ios/device/deviceList.action).\n\nTo register a phone you will need its UDID. Connect it to the Mac and run in a terminal:\n```\ninstruments -s devices\n```\nIt will output all known devices and their UDIDs.\n\n### Development provisioning profiles\nDevelopment provisioning profiles bind together one or multiple developer signing identities (developer certificates), *App ID* and device IDs.\nThese are created at [https://developer.apple.com/account/ios/profile/profileList.action?type=limited](https://developer.apple.com/account/ios/profile/profileList.action?type=limited).\nIf you are making a new one, or adding a new app to an existing one, make sure to select these three:\n - Your *development certificate*\n - *App ID identifier*, that matches your App ID\n - The *device* you will test on\n\nUnlike the certificates, *provisioning profiles* are files that can be easily updated and downloaded from the Member Center (in .mobileprovision files) and installed in Xcode by double-clicking that file.\n\nXcode is also capable of obtaining these automatically. Open Xcode and from the menu go to  `Xcode > Preferences... > Accounts > (select your apple ID) > (select your Team Name) > View Details...`.\nThere you can check all signing identities (developer and *production certificates*) available to Xcode as well as `Download All` *provisioning profiles*.\n\nWhen you run an app on a device, Xcode will sign the app with your development certificate and add a provisioning profile that has your certificate, device ID and App ID.\n\nWhile the *development provisioning profiles* are easily created and updated, they frequently invalidate, especially when multiple *developer certificates* are involved. Every time one of them is revoked or expires, you need to update the provisioning certificate.\n\nThese are not of a particular interest for *App Store* submissions but you may need one to test on a real device.\n\n### Distribution provisioning profiles\nThere are several *distribution provisioning profile* types. The one you will need for *App Store* submission is 'App Store Distribution Provisioning Profile'.\nThese are similar to the *development provisioning profiles* because they bind:\n - Your *distribution certificate*\n - Your *device*-es\n - An *App ID*\n - Various settings, enabled services, etc.\n\n*Distribution provisioning profiles* are created at [https://developer.apple.com/account/ios/profile/profileList.action?type=production](https://developer.apple.com/account/ios/profile/profileList.action?type=production).\n\nFor *App Store* submissions, you must create an *App Store Distribution Provisioning Profile*. Once you create it, download it and double-click it on your Mac so it gets registered with Xcode.\n\n*Distribution provisioning profiles* invalidate rarely since they refer a single *Distribution Certificate*.\n\n## iTunes Connect\nWhile you manage your *provisioning profiles* and certificates at the *Apple Developer Member Center*, apps are registered and submitted at [iTunes Connect](https://itunesconnect.apple.com).\nThis is where you will be able to create new apps, prepare app screens, descriptions, manage app versions, etc.\n\n### Account\nYou will need your *Apple ID* added to your organization with sufficient rights at [https://itunesconnect.apple.com](https://itunesconnect.apple.com).\n\n### Creating an app\nTo publish your app in the iOS *App Store* you will have to register your app. Log into [https://itunesconnect.apple.com](https://itunesconnect.apple.com) and go to 'My Apps'.\nThere you can check the status and edit existing apps or create a new app.\n\nClick the '+' button at the top left corner. The 'New App' dialog should appear. There you have to fill the public *App Store* name of your app and primary language.\n\nAlso, you have to set *Bundle ID*, which must match the *Bundle ID* referred in ['1.1. Bundle ID'](#bundle-id).\nIf the drop-down does not contain a suitable match, you are probably missing an *App ID* referred at ['2.4. Identifiers - App IDs'](#identifiers-app-ids).\nIf there is a wildcard *App ID*, that is a potential match so select it. You will be able to type the suffix, replacing the wildcard in a text box.\n\nAt that point you have to fill in the App Information.\nThere are various assets that you must provide such as screenshots, icons, description, etc.\nFailing to provide all necessary assets may prevent you from submitting your app, or result in app rejection.\n\n>Note: Screenshots not matching the actual app may result in rejection of a new version sent for approval.\n\n### Builds\nOnce you have your app information registered at [https://itunesconnect.apple.com](https://itunesconnect.apple.com) it is time to build your NativeScript app for iOS and submit it.\n\nThere are two main ways to submit an app to *iTunes Connect* — using Xcode or using *Application Loader*.\n\n#### Build versioning\nWe have already explained how the *Bundle ID* is set in your project, how the launch screen (or storyboard) and images are added to your app, and how you can set the display name.\n\nBefore the build, you need to set two important things: the *Bundle Short Version String* and the *Bundle Version String*.\n\n*Bundle Short Version String* is the public version of your app. It is incremented between releases. For example: `2.1`.\n*Bundle Version String* is the internal build number. One public release usually has multiple release candidates. For example `2.1.1`, `2.1.1`, etc.\n\niTunes Connect has a restriction that a bundle cannot be uploaded with the same version twice, so you must increment the *Bundle Version String* with each upload.\n\nThe *Bundle Short Version String* should be incremented once your app version is uploaded, sent for approval, approved and published.\n\nBoth values are stored in `app/App_Resources/iOS/Info.plist`:\n - The `CFBundleShortVersionString` key stores the *Bundle Short Version String*.\n - The `CFBundleVersion` key stores the *Bundle Version String*.\n\nIn the `app/App_Resources/iOS/Info.plist` they appear as:\n```\n\t<key>CFBundleShortVersionString</key>\n\t<string>2.1</string>\n\t<key>CFBundleVersion</key>\n\t<string>2.1.2</string>\n```\n\nIf you need to edit these from the command line, there is a handy tool called `PlistBuddy` that can read and write Plist files.\nFor example, the following shell script appends the Jenkins `$BUILD_NUMBER` to the `CFBundleVersion` in the Info.plist:\n``` bash\n### Set CFBundleVersion ###\nexport CFBundleVersion=`/usr/libexec/PlistBuddy app/App_Resources/iOS/Info.plist -c \"Print :CFBundleVersion\"`\n/usr/libexec/PlistBuddy app/App_Resources/iOS/Info.plist -c \"Set :CFBundleVersion $CFBundleVersion.$BUILD_NUMBER\"\n```\n\n#### Submit from the NativeScript CLI\nYou can execute the following command inside a NativeScript project using the CLI:\n```\ntns publish ios\n```\n\nThe command will prompt for your `Apple ID` and `Password` for authentication with [iTunes Connect](https://itunesconnect.apple.com) and then produce a `release` build and proceed to upload it to iTunes Connect.\n\nAlternatively, you can use an existing build by running the following command:\n```\ntns publish ios --ipa <Ipa File Path>\n```\n\nFor more information, run the following command:\n```\ntns help publish ios\n```\n\n#### Submit from Xcode\nYou can execute the following command using the CLI:\n```\ntns prepare ios\n```\nThis will create an Xcode project in `platforms/ios/`. Then you may consider the following Apple article about how to [configure the project for distribution](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html).\n\nThe `platform` folder is not meant to stay in source control and you should be careful when you do modifications there.\nRebuilds may erase your changes and you should add changed files to source control.\n\nA common pitfall, if you are using CocoaPods, is to open the Xcode project instead of the workspace.\n\nOnce you have it open in Xcode, you have to go to your target's General settings and pick a team.\nIn 'Build Settings' there should be a suitable 'iOS Developer' and 'Code Signing Identity'.\n\nFrom the top drop-down, select your target, and from the devices and emulators, pick 'Generic iOS Device'.\n\nThen you should be able to select from the top menu `Product > Archive`.\n\nThis makes an xcodearchive and opens it in the Xcode Organizer.\nThe Xcode Organizer displays a list with builds of your app. Pick the last build and click `Upload to App Store...`.\nYou should select a team again and whether to include app symbols for your app. Next, you can see a list with the binary information, entitlements, etc.\nClick `Upload`.\n\nIf you upload successfully, you should be able to log in at [https://itunesconnect.apple.com](https://itunesconnect.apple.com) and see your build in 'Activities'. From there you can enable Test Flight beta testing or send it for approval.\n\n#### Submit with Telerik AppManager\n\nIt is worth mentioning that the NativeScript platform is integreated in the Telerik platform.\nThe Telerik platform has everything you need in the cloud, easing the submission process.\nThis includes managing your *production certificates* and *provisioning profiles*,\nas well as support for cloud builds and *Google Play* submission. \n\nRead more about app submission process in the *Telerik Platform* in ['Introduction to Telerik AppManager'](http://docs.telerik.com/platform/appmanager/getting-started/introduction)\n\n#### Submission automation\nAutomation can be achieved using the NativeScript CLI only. All of the parameters needed for publishing can be passed to the `publish` command directly:\n\n```\ntns publish ios [<Apple ID> [<Password> [<Mobile Provisioning Profile Identifier> [<Code Sign Identity>]]]]]\n```\nFor example, assuming that you want to issue a build using a mobile provision with an identifier *d5d40f61-b303-4fc8-aea3-fbb229a8171c*, you could run:\n```\ntns publish ios my-apple-id my-password d5d40f61-b303-4fc8-aea3-fbb229a8171c \"iPhone Distribution\"\n```\nNote that the `Code Sign Identity` can be set to something generic like *iPhone Distribution* in order to let the build automatically detect a code sign identity.\n\nYou can also automate the uploads of already built packages:\n```\ntns publish ios my-apple-id my-password --ipa /tmp/build/myIpa.ipa\n```\n\nSome tools that allow the submission process to be automated - [MIT Licensed one: fastlane](https://github.com/fastlane/fastlane). \nAlso, the previously mentioned *Application Loader* has a command line tool called *iTMSTransporter* in its package,\nwhich you may use to hack your own [shell scripts](https://gist.github.com/jedi4ever/b1f8b27d4a803d487fa4) around.\n\n### Send for approval and publish\nOnce you successfully submit a build at *iTunes Connect*, you can enable testing through *Test Flight*.\nWhen you are ready, go to the 'Build' section of your iOS app, pick the build, and click 'Submit for Review' for that version.\nThe app will pass through several [App Statuses](https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/ChangingAppStatus.html#//apple_ref/doc/uid/TP40011225-CH30-SW23). If your app passes Apple review, it can go live at the *App Store*.\n","date":"2016-08-26T21:05:54.640Z","updated":"2016-08-26T21:05:54.640Z","path":"workflow/publishing-ios-apps.html","comments":1,"layout":"page","_id":"cisn95cb4001dwsl044k2efil","content":"<h1 id=\"Publishing-a-NativeScript-iOS-App-in-the-App-Store\"><a href=\"#Publishing-a-NativeScript-iOS-App-in-the-App-Store\" class=\"headerlink\" title=\"Publishing a NativeScript iOS App in the App Store\"></a>Publishing a NativeScript iOS App in the App Store</h1><ol>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#creating-ios-nativescript-app\">Creating iOS NativeScript app</a><ol>\n<li><a href=\"#bundle-id\">Bundle ID</a></li>\n<li><a href=\"#app-name\">App name</a></li>\n<li><a href=\"#app-icons\">App icons</a></li>\n<li><a href=\"#launch-files\">Launch files</a><ol>\n<li><a href=\"#launch-screen-images\">Launch screen images</a></li>\n<li><a href=\"#launch-screen-storyboard\">Launch Screen Storyboard</a></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><a href=\"#certificates-identifiers--profiles\">Certificates, identifiers &amp; profiles</a><ol>\n<li><a href=\"#account-with-apple-id\">Account with Apple ID</a></li>\n<li><a href=\"#development-certificates\">Development certificates</a></li>\n<li><a href=\"#distribution-certificates\">Production certificates</a></li>\n<li><a href=\"#identifiers---app-ids\">Identifiers - App IDs</a></li>\n<li><a href=\"#devices\">Devices</a></li>\n<li><a href=\"#development-provisioning-profiles\">Development provisioning profiles</a></li>\n<li><a href=\"#distribution-provisioning-profiles\">Distribution provisioning profiles</a></li>\n</ol>\n</li>\n<li><a href=\"#itunes-connect\">iTunes Connect</a><ol>\n<li><a href=\"#account\">Account</a></li>\n<li><a href=\"#creating-an-app\">Creating an app</a></li>\n<li><a href=\"#builds\">Builds</a><ol>\n<li><a href=\"#build-versioning\">Build versioning</a></li>\n<li><a href=\"#submit-from-the-nativescript-cli\">Submit from the NativeScript CLI</a></li>\n<li><a href=\"#submit-from-xcode\">Submit from Xcode</a></li>\n<li><a href=\"#submit-with-telerik-appmanager\">Submit with Telerik AppManager</a></li>\n<li><a href=\"#submission-automation\">Submission automation</a></li>\n</ol>\n</li>\n<li><a href=\"#send-for-approval-and-publish\">Send for approval and publish</a></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>You can publish a NativeScript app in the <em>App Store</em> the same way you would <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html\" target=\"_blank\" rel=\"external\">release a purely native iOS app</a>.</p>\n<ol>\n<li><p>Verify that the iOS native project inside your app contains your latest changes and resources by running the following command.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns prepare ios</div></pre></td></tr></table></figure>\n</li>\n<li><p>Open the iOS native project in Xcode. Your native project is located at: <code>{app-name}/platforms/ios/{app-name}.xcodeproj</code>.</p>\n</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html\" target=\"_blank\" rel=\"external\">Configure the project for distribution</a>.</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/UploadingYourApptoiTunesConnect/UploadingYourApptoiTunesConnect.html\" target=\"_blank\" rel=\"external\">Upload the app to iTunes Connect</a>.</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html\" target=\"_blank\" rel=\"external\">Submit it to the <em>App Store</em></a>.</li>\n</ol>\n<h2 id=\"Creating-iOS-NativeScript-app\"><a href=\"#Creating-iOS-NativeScript-app\" class=\"headerlink\" title=\"Creating iOS NativeScript app\"></a>Creating iOS NativeScript app</h2><h3 id=\"Bundle-ID\"><a href=\"#Bundle-ID\" class=\"headerlink\" title=\"Bundle ID\"></a>Bundle ID</h3><p>The <em>Bundle ID</em> is a unique identifier, provided by you for your app. It uses reverse domain name notation. For example, the NativeScript CLI will use <code>org.nativescript.&lt;AppName&gt;</code> as default. During <code>tns create</code> you can provide the <em>Bundle ID</em> using the <code>--appid &lt;id&gt;</code> option.</p>\n<p>In iOS apps, the <em>Bundle ID</em> is stored in the <code>CFBundleIdentifier</code> in the <code>Info.plist</code>, but the NativeScript CLI will explicitly set this to the value of the <code>nativescript.id</code> key stored in the <code>package.json</code> file in the root of your application.</p>\n<blockquote>\n<p><strong>NOTE:</strong> To edit the <em>Bundle ID</em>, edit the <code>package.json</code> of your app and set the <code>nativescript.id</code> key.</p>\n</blockquote>\n<p>The <em>Bundle ID</em> is used to precisely identify your app at various situations and plays an important role, when it is built and launched by the CLI, as well as when <em>Provisioning Profiles</em> and certificates are created in the <em>Apple Member Center</em>.</p>\n<p>For more information consider <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html\" target=\"_blank\" rel=\"external\">the ‘About Bundle IDs’ section in the following article</a>.</p>\n<h3 id=\"App-name\"><a href=\"#App-name\" class=\"headerlink\" title=\"App name\"></a>App name</h3><p>This is the display name for your app. It is purely cosmetic but highly important. Fot example, it will appear under the app icon.\nThe value is stored in the <code>app/App_Resources/iOS/Info.plist</code> file as the <code>CFBundleDisplayName</code> key.</p>\n<h3 id=\"App-icons\"><a href=\"#App-icons\" class=\"headerlink\" title=\"App icons\"></a>App icons</h3><p>The NativeScript framework will use icons from <code>app/App_Resources/iOS/</code>. All files from that folder are added as resources in the generated Xcode project in <code>platforms/ios</code>.</p>\n<p><em>App Store</em> submissions will be rejected if certain icon files are not present. To ensure you have the required icons, you can consider the following Apple article: <a href=\"https://developer.apple.com/library/ios/qa/qa1686/_index.html\" target=\"_blank\" rel=\"external\">‘App Icons on iPad and iPhone’</a>.</p>\n<p>If you want to extend the default icon set, and you don’t want to use the default naming, or you need finer control, you can use the <code>app/App_Resources/iOS/Info.plist</code>.\nList the icons using <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW10\" target=\"_blank\" rel=\"external\"><code>CFBundleIconFiles</code></a> or <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW13\" target=\"_blank\" rel=\"external\"><code>CFBundleIcon</code></a>.</p>\n<p>For example, listing icons using <code>CFBundleIconFiles</code>:</p>\n<h3 id=\"Example-1-How-to-customise-Info-plist-gt\"><a href=\"#Example-1-How-to-customise-Info-plist-gt\" class=\"headerlink\" title=\"Example 1: How to customise Info.plist.__&gt;\"></a>Example 1: How to customise Info.plist.__&gt;</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</div><div class=\"line\">&lt;dict&gt;</div><div class=\"line\">    &lt;!-- The full content of the Info.plist still should be here. --&gt;</div><div class=\"line\">\t&lt;key&gt;CFBundleIconFiles&lt;/key&gt;</div><div class=\"line\">\t&lt;array&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon@2x.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon-Small@3x.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon-Small@2x.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon-Small.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon-Small-50@2x.png&lt;/string&gt;</div><div class=\"line\">        &lt;!-- etc --&gt;</div><div class=\"line\">\t&lt;/array&gt;</div><div class=\"line\">&lt;/dict&gt;</div><div class=\"line\">&lt;/plist&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Launch-files\"><a href=\"#Launch-files\" class=\"headerlink\" title=\"Launch files\"></a>Launch files</h3><p>Launch screens are an essential part of your iOS app. This is the first thing your users see when they start your app.</p>\n<p>The Springboard will play a subtle animation transitioning from the home screen to your app. In order to provide a pleasing experience, it’s best to avoid a default that’s entirely black or white.</p>\n<p>The launch files are not a splash screen; instead, they are a way for the OS to quickly grab a preview image of your app and use it during the first ~300ms while your app is booting.</p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html\" target=\"_blank\" rel=\"external\">For design guidelines you can consider the following article provided by Apple</a>.</p>\n<blockquote>\n<p><strong>QUOTE:</strong> If you think that following these guidelines will result in a plain, boring launch image, you’re right. Remember, the launch image doesn’t provide you with an opportunity for artistic expression. It’s solely intended to enhance the user’s perception of your app as quick to launch and immediately ready for use.</p>\n</blockquote>\n<p><em>App Store</em> submissions will be rejected if certain launch files are not present. Make sure that when new iOS versions and devices are released that you update your <em>launch files</em> and accommodate the upcoming form factors.</p>\n<p>If a customer runs your app on a device with a high resolution screen and your app is missing the launch screen file for that device, then iOS will render your app using a smaller resolution, degrading its quality:</p>\n<ul>\n<li>Your app may be upscaled, and blurred</li>\n<li>Your app may have black areas</li>\n</ul>\n<p>Earlier iOS versions had to support a small range of form factors. Providing a different launch image per screen size was trivial. With the new devices released by Apple, the number of images that had to be provided increased. That’s where Apple introduced the <em>launch screen storyboard</em>. \nThe storyboard allows basic primitives such as images to be presented on the screen, and you can have dynamic layout using layout constraints. This makes it possible to design a single <em>launch screen</em> that fits well for all form factors.</p>\n<p>The NativeScript framework default project has a <em>Launch Screen Storyboard</em> and <em>Launch Images</em>. In iOS8 and later, your app may use storyboards; your app can use launch images for devices that run earlier versions of iOS. </p>\n<h4 id=\"Launch-screen-images\"><a href=\"#Launch-screen-images\" class=\"headerlink\" title=\"Launch screen images\"></a>Launch screen images</h4><p>The images are placed, similar to the icons already mentioned, in <code>app/App_Resources/iOS</code>. The default project template ships several <code>Default-*.PNG</code> files there; you may consider changing them.</p>\n<p>In iOS8 and later versions, your app will display its storyboard. If you want to use images on all devices, you can consider disabling the <em>Launch Screen Storyboard</em>. Instructions for how to do this are explained later in the next section.</p>\n<p>Similar to the icons, you can use the <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW24\" target=\"_blank\" rel=\"external\"><code>UILaunchImageFile</code></a> and <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW28\" target=\"_blank\" rel=\"external\"><code>UILaunchImages</code></a> key in the <code>app/App_Resources/iOS</code>.</p>\n<h4 id=\"Launch-Screen-Storyboard\"><a href=\"#Launch-Screen-Storyboard\" class=\"headerlink\" title=\"Launch Screen Storyboard\"></a>Launch Screen Storyboard</h4><p>The NativeScript framework will provide a <em>Launch Screen Storyboard</em> in <code>platforms/ios/&lt;YourAppName&gt;/en.lproj/LaunchScreen.xib</code>, but does <strong>not</strong> yet provide a means to store it at <code>app/App_Resources/iOS</code>.\nIf you want to edit it you can use the <code>.xcodeproj</code> generated in <code>platforms/ios</code>. You will have to add it in source control.\nCLI rebuilds may overwrite it, so you will have to watch out for automatic changes in it when you commit.</p>\n<p>To disable the default <em>Launch Screen Storyboard</em>, remove the <code>UILaunchStoryboardName</code> from the <code>app/App_Resources/iOS/Info.plist</code>:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;key&gt;UILaunchStoryboardName&lt;/key&gt;</div><div class=\"line\">&lt;string&gt;LaunchScreen&lt;/string&gt;</div></pre></td></tr></table></figure></p>\n<p>This will force all supported launch screens to use the <em>launch image</em>. </p>\n<h2 id=\"Certificates-identifiers-amp-profiles\"><a href=\"#Certificates-identifiers-amp-profiles\" class=\"headerlink\" title=\"Certificates, identifiers &amp; profiles\"></a>Certificates, identifiers &amp; profiles</h2><p>Certificates, identifiers and profiles are managed at <a href=\"https://developer.apple.com/membercenter\" target=\"_blank\" rel=\"external\">https://developer.apple.com/membercenter</a>.</p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html\" target=\"_blank\" rel=\"external\">You should really explore the information Apple provides on certificates and identities</a>.\nThis article will cover only the basics.</p>\n<h3 id=\"Account-with-Apple-ID\"><a href=\"#Account-with-Apple-ID\" class=\"headerlink\" title=\"Account with Apple ID\"></a>Account with Apple ID</h3><p>You will need a developer account with an <em>Apple ID</em> so you can access the <a href=\"https://developer.apple.com/membercenter\" target=\"_blank\" rel=\"external\">Apple Developer Member Center</a>. </p>\n<p>You will need to be added as an iOS developer in your organization.</p>\n<h3 id=\"Development-certificates\"><a href=\"#Development-certificates\" class=\"headerlink\" title=\"Development certificates\"></a>Development certificates</h3><p>Development certificates are used to sign iOS apps proving the origin of the app. If you plan to use the Xcode tooling it would be best to create a <em>development certificate</em>.</p>\n<p>A few pitfalls are:</p>\n<ul>\n<li>A developer is allowed to have one certificate at any time. You must ‘revoke’ an existing certificate before you can create a new one.</li>\n<li>Certificates consist of public and private keys. The private key is never sent to Apple, so you cannot ‘download’ your certificate from the <em>Member Center</em>. If you lose the private key of your certificate, you have to revoke it and create a new one.</li>\n<li>When revoked or expired, the certificates may further invalidate <em>provisioning profiles</em>. Once the certificate is recreated, the <em>provisioning profiles</em> need to be updated as well.</li>\n<li>Making a certificate requires a Mac. You use the Keychain Access tool to create a certificate request, generating a public and private keys at your side, then send the public key to Apple while storing the private key in your keychain.</li>\n<li>If you follow the steps at the <em>Member Center</em> to create a new <em>development certificate</em>, the certificate must be stored in your keychain. You can consider exporting it and backing it up.</li>\n</ul>\n<blockquote>\n<p><strong>NOTE:</strong> Go to <a href=\"https://developer.apple.com/account/ios/certificate/certificateList.action?type=development\" target=\"_blank\" rel=\"external\">https://developer.apple.com/account/ios/certificate/certificateList.action?type=development</a> click the ‘+’ (add) button and follow the instructions for making a new ‘iOS App Development’ certificate. </p>\n</blockquote>\n<h3 id=\"Production-certificates\"><a href=\"#Production-certificates\" class=\"headerlink\" title=\"Production certificates\"></a>Production certificates</h3><p><em>Production certificates</em> work similarly to development certificates. They consist of public and private keys. The private key stays at your side and is never sent to Apple. Your app is signed with the distribution certificate using your private key,\n so Apple can verify the origin of submissions in <em>iTunes Connect</em> using the public key you sent them.</p>\n<p>This <em>production certificates</em> is used to sign the application binary when it is prepared for submission.\nUsually when an app is built for a device, its IPA file is signed with the development certificate. </p>\n<blockquote>\n<p><strong>Note</strong> You can read more about IPA (file extension) <a href=\"https://en.wikipedia.org/wiki/.ipa_(file_extension\" target=\"_blank\" rel=\"external\">here</a>)\nLater, the tooling resigns the IPA with the <em>production certificate</em> and appends the distribution provisioning profile when submitting to <em>iTunes Connect</em>.</p>\n</blockquote>\n<p>A few pitfalls are:</p>\n<ul>\n<li>Creating <em>production certificates</em> are more restricted than creating development certificates. Apple limit the number of <em>production certificates</em> per team.</li>\n<li>Because production certificates are limited in quantity per team, and frequently shared between multiple team members, you must be extremely careful when you revoke an existing distribution certificate. If you ultimately lost your private key of a distribution certificate and revoke it, consult with anyone that may have backed it up or is in need of the new certificate. Hopefully this will avoid your new copy being revoked in the future or losing your admin rights. </li>\n<li><em>Production certificates</em> can be shared between team members. If you follow the steps at the <em>Member Center</em> to create a new one (link below) the certificate will be stored in your keychain. You can export it as a .p12 file, easily backing it up and sharing it with senior team peers.</li>\n</ul>\n<p>If you need a new distribution certificate, go to <a href=\"https://developer.apple.com/account/ios/certificate/certificateList.action?type=distribution\" target=\"_blank\" rel=\"external\">https://developer.apple.com/account/ios/certificate/certificateList.action?type=distribution</a> click the ‘+’ (add) button and follow the instructions for making a new ‘App Store Distribution’ certificate. Chances are you are part of a larger organization and your role does not have sufficient rights to create a new distribution certificate. Admins or other team member may provide you the certificates in that case. In such cases, you will probably be given a .p12 file and a password. You should import the file in your keychain using the <code>Keychain Access</code> application. </p>\n<h3 id=\"Identifiers-App-IDs\"><a href=\"#Identifiers-App-IDs\" class=\"headerlink\" title=\"Identifiers - App IDs\"></a>Identifiers - App IDs</h3><p>To test your app on a device or submit in the <em>App Store</em>, you will need to create an <em>App ID</em>.\nApp IDs consist of a <em>Prefix</em> or a <em>Team ID</em> that is generated by Apple, followed by an ID provided by you that must match your <em>Bundle ID</em>.\nFor example, you can create an <em>App ID</em> with the <code>org.nativescript.*</code> ID that will match all your NativeScript apps.\nThe wildcard pattern imposes some restrictions on the services you can use, so you may also cosider using a non-wildcard pattern such as <code>org.nativescript.&lt;my-app&gt;</code>.</p>\n<p>These identifiers are later used to bind apps with <em>provisioning profiles</em>.</p>\n<h3 id=\"Devices\"><a href=\"#Devices\" class=\"headerlink\" title=\"Devices\"></a>Devices</h3><p>At the <em>Member Center</em> you can register the devices you and your team use for testing.\nGo to <a href=\"https://developer.apple.com/account/ios/device/deviceList.action\" target=\"_blank\" rel=\"external\">https://developer.apple.com/account/ios/device/deviceList.action</a>.</p>\n<p>To register a phone you will need its UDID. Connect it to the Mac and run in a terminal:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">instruments -s devices</div></pre></td></tr></table></figure></p>\n<p>It will output all known devices and their UDIDs.</p>\n<h3 id=\"Development-provisioning-profiles\"><a href=\"#Development-provisioning-profiles\" class=\"headerlink\" title=\"Development provisioning profiles\"></a>Development provisioning profiles</h3><p>Development provisioning profiles bind together one or multiple developer signing identities (developer certificates), <em>App ID</em> and device IDs.\nThese are created at <a href=\"https://developer.apple.com/account/ios/profile/profileList.action?type=limited\" target=\"_blank\" rel=\"external\">https://developer.apple.com/account/ios/profile/profileList.action?type=limited</a>.\nIf you are making a new one, or adding a new app to an existing one, make sure to select these three:</p>\n<ul>\n<li>Your <em>development certificate</em></li>\n<li><em>App ID identifier</em>, that matches your App ID</li>\n<li>The <em>device</em> you will test on</li>\n</ul>\n<p>Unlike the certificates, <em>provisioning profiles</em> are files that can be easily updated and downloaded from the Member Center (in .mobileprovision files) and installed in Xcode by double-clicking that file.</p>\n<p>Xcode is also capable of obtaining these automatically. Open Xcode and from the menu go to  <code>Xcode &gt; Preferences... &gt; Accounts &gt; (select your apple ID) &gt; (select your Team Name) &gt; View Details...</code>.\nThere you can check all signing identities (developer and <em>production certificates</em>) available to Xcode as well as <code>Download All</code> <em>provisioning profiles</em>.</p>\n<p>When you run an app on a device, Xcode will sign the app with your development certificate and add a provisioning profile that has your certificate, device ID and App ID.</p>\n<p>While the <em>development provisioning profiles</em> are easily created and updated, they frequently invalidate, especially when multiple <em>developer certificates</em> are involved. Every time one of them is revoked or expires, you need to update the provisioning certificate.</p>\n<p>These are not of a particular interest for <em>App Store</em> submissions but you may need one to test on a real device.</p>\n<h3 id=\"Distribution-provisioning-profiles\"><a href=\"#Distribution-provisioning-profiles\" class=\"headerlink\" title=\"Distribution provisioning profiles\"></a>Distribution provisioning profiles</h3><p>There are several <em>distribution provisioning profile</em> types. The one you will need for <em>App Store</em> submission is ‘App Store Distribution Provisioning Profile’.\nThese are similar to the <em>development provisioning profiles</em> because they bind:</p>\n<ul>\n<li>Your <em>distribution certificate</em></li>\n<li>Your <em>device</em>-es</li>\n<li>An <em>App ID</em></li>\n<li>Various settings, enabled services, etc.</li>\n</ul>\n<p><em>Distribution provisioning profiles</em> are created at <a href=\"https://developer.apple.com/account/ios/profile/profileList.action?type=production\" target=\"_blank\" rel=\"external\">https://developer.apple.com/account/ios/profile/profileList.action?type=production</a>.</p>\n<p>For <em>App Store</em> submissions, you must create an <em>App Store Distribution Provisioning Profile</em>. Once you create it, download it and double-click it on your Mac so it gets registered with Xcode.</p>\n<p><em>Distribution provisioning profiles</em> invalidate rarely since they refer a single <em>Distribution Certificate</em>.</p>\n<h2 id=\"iTunes-Connect\"><a href=\"#iTunes-Connect\" class=\"headerlink\" title=\"iTunes Connect\"></a>iTunes Connect</h2><p>While you manage your <em>provisioning profiles</em> and certificates at the <em>Apple Developer Member Center</em>, apps are registered and submitted at <a href=\"https://itunesconnect.apple.com\" target=\"_blank\" rel=\"external\">iTunes Connect</a>.\nThis is where you will be able to create new apps, prepare app screens, descriptions, manage app versions, etc.</p>\n<h3 id=\"Account\"><a href=\"#Account\" class=\"headerlink\" title=\"Account\"></a>Account</h3><p>You will need your <em>Apple ID</em> added to your organization with sufficient rights at <a href=\"https://itunesconnect.apple.com\" target=\"_blank\" rel=\"external\">https://itunesconnect.apple.com</a>.</p>\n<h3 id=\"Creating-an-app\"><a href=\"#Creating-an-app\" class=\"headerlink\" title=\"Creating an app\"></a>Creating an app</h3><p>To publish your app in the iOS <em>App Store</em> you will have to register your app. Log into <a href=\"https://itunesconnect.apple.com\" target=\"_blank\" rel=\"external\">https://itunesconnect.apple.com</a> and go to ‘My Apps’.\nThere you can check the status and edit existing apps or create a new app.</p>\n<p>Click the ‘+’ button at the top left corner. The ‘New App’ dialog should appear. There you have to fill the public <em>App Store</em> name of your app and primary language.</p>\n<p>Also, you have to set <em>Bundle ID</em>, which must match the <em>Bundle ID</em> referred in <a href=\"#bundle-id\">‘1.1. Bundle ID’</a>.\nIf the drop-down does not contain a suitable match, you are probably missing an <em>App ID</em> referred at <a href=\"#identifiers-app-ids\">‘2.4. Identifiers - App IDs’</a>.\nIf there is a wildcard <em>App ID</em>, that is a potential match so select it. You will be able to type the suffix, replacing the wildcard in a text box.</p>\n<p>At that point you have to fill in the App Information.\nThere are various assets that you must provide such as screenshots, icons, description, etc.\nFailing to provide all necessary assets may prevent you from submitting your app, or result in app rejection.</p>\n<blockquote>\n<p>Note: Screenshots not matching the actual app may result in rejection of a new version sent for approval.</p>\n</blockquote>\n<h3 id=\"Builds\"><a href=\"#Builds\" class=\"headerlink\" title=\"Builds\"></a>Builds</h3><p>Once you have your app information registered at <a href=\"https://itunesconnect.apple.com\" target=\"_blank\" rel=\"external\">https://itunesconnect.apple.com</a> it is time to build your NativeScript app for iOS and submit it.</p>\n<p>There are two main ways to submit an app to <em>iTunes Connect</em> — using Xcode or using <em>Application Loader</em>.</p>\n<h4 id=\"Build-versioning\"><a href=\"#Build-versioning\" class=\"headerlink\" title=\"Build versioning\"></a>Build versioning</h4><p>We have already explained how the <em>Bundle ID</em> is set in your project, how the launch screen (or storyboard) and images are added to your app, and how you can set the display name.</p>\n<p>Before the build, you need to set two important things: the <em>Bundle Short Version String</em> and the <em>Bundle Version String</em>.</p>\n<p><em>Bundle Short Version String</em> is the public version of your app. It is incremented between releases. For example: <code>2.1</code>.\n<em>Bundle Version String</em> is the internal build number. One public release usually has multiple release candidates. For example <code>2.1.1</code>, <code>2.1.1</code>, etc.</p>\n<p>iTunes Connect has a restriction that a bundle cannot be uploaded with the same version twice, so you must increment the <em>Bundle Version String</em> with each upload.</p>\n<p>The <em>Bundle Short Version String</em> should be incremented once your app version is uploaded, sent for approval, approved and published.</p>\n<p>Both values are stored in <code>app/App_Resources/iOS/Info.plist</code>:</p>\n<ul>\n<li>The <code>CFBundleShortVersionString</code> key stores the <em>Bundle Short Version String</em>.</li>\n<li>The <code>CFBundleVersion</code> key stores the <em>Bundle Version String</em>.</li>\n</ul>\n<p>In the <code>app/App_Resources/iOS/Info.plist</code> they appear as:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;key&gt;CFBundleShortVersionString&lt;/key&gt;</div><div class=\"line\">&lt;string&gt;2.1&lt;/string&gt;</div><div class=\"line\">&lt;key&gt;CFBundleVersion&lt;/key&gt;</div><div class=\"line\">&lt;string&gt;2.1.2&lt;/string&gt;</div></pre></td></tr></table></figure></p>\n<p>If you need to edit these from the command line, there is a handy tool called <code>PlistBuddy</code> that can read and write Plist files.\nFor example, the following shell script appends the Jenkins <code>$BUILD_NUMBER</code> to the <code>CFBundleVersion</code> in the Info.plist:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### Set CFBundleVersion ###</span></div><div class=\"line\"><span class=\"built_in\">export</span> CFBundleVersion=`/usr/libexec/PlistBuddy app/App_Resources/iOS/Info.plist -c <span class=\"string\">\"Print :CFBundleVersion\"</span>`</div><div class=\"line\">/usr/libexec/PlistBuddy app/App_Resources/iOS/Info.plist -c <span class=\"string\">\"Set :CFBundleVersion <span class=\"variable\">$CFBundleVersion</span>.<span class=\"variable\">$BUILD_NUMBER</span>\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Submit-from-the-NativeScript-CLI\"><a href=\"#Submit-from-the-NativeScript-CLI\" class=\"headerlink\" title=\"Submit from the NativeScript CLI\"></a>Submit from the NativeScript CLI</h4><p>You can execute the following command inside a NativeScript project using the CLI:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios</div></pre></td></tr></table></figure></p>\n<p>The command will prompt for your <code>Apple ID</code> and <code>Password</code> for authentication with <a href=\"https://itunesconnect.apple.com\" target=\"_blank\" rel=\"external\">iTunes Connect</a> and then produce a <code>release</code> build and proceed to upload it to iTunes Connect.</p>\n<p>Alternatively, you can use an existing build by running the following command:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios --ipa &lt;Ipa File Path&gt;</div></pre></td></tr></table></figure></p>\n<p>For more information, run the following command:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns help publish ios</div></pre></td></tr></table></figure></p>\n<h4 id=\"Submit-from-Xcode\"><a href=\"#Submit-from-Xcode\" class=\"headerlink\" title=\"Submit from Xcode\"></a>Submit from Xcode</h4><p>You can execute the following command using the CLI:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns prepare ios</div></pre></td></tr></table></figure></p>\n<p>This will create an Xcode project in <code>platforms/ios/</code>. Then you may consider the following Apple article about how to <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html\" target=\"_blank\" rel=\"external\">configure the project for distribution</a>.</p>\n<p>The <code>platform</code> folder is not meant to stay in source control and you should be careful when you do modifications there.\nRebuilds may erase your changes and you should add changed files to source control.</p>\n<p>A common pitfall, if you are using CocoaPods, is to open the Xcode project instead of the workspace.</p>\n<p>Once you have it open in Xcode, you have to go to your target’s General settings and pick a team.\nIn ‘Build Settings’ there should be a suitable ‘iOS Developer’ and ‘Code Signing Identity’.</p>\n<p>From the top drop-down, select your target, and from the devices and emulators, pick ‘Generic iOS Device’.</p>\n<p>Then you should be able to select from the top menu <code>Product &gt; Archive</code>.</p>\n<p>This makes an xcodearchive and opens it in the Xcode Organizer.\nThe Xcode Organizer displays a list with builds of your app. Pick the last build and click <code>Upload to App Store...</code>.\nYou should select a team again and whether to include app symbols for your app. Next, you can see a list with the binary information, entitlements, etc.\nClick <code>Upload</code>.</p>\n<p>If you upload successfully, you should be able to log in at <a href=\"https://itunesconnect.apple.com\" target=\"_blank\" rel=\"external\">https://itunesconnect.apple.com</a> and see your build in ‘Activities’. From there you can enable Test Flight beta testing or send it for approval.</p>\n<h4 id=\"Submit-with-Telerik-AppManager\"><a href=\"#Submit-with-Telerik-AppManager\" class=\"headerlink\" title=\"Submit with Telerik AppManager\"></a>Submit with Telerik AppManager</h4><p>It is worth mentioning that the NativeScript platform is integreated in the Telerik platform.\nThe Telerik platform has everything you need in the cloud, easing the submission process.\nThis includes managing your <em>production certificates</em> and <em>provisioning profiles</em>,\nas well as support for cloud builds and <em>Google Play</em> submission. </p>\n<p>Read more about app submission process in the <em>Telerik Platform</em> in <a href=\"http://docs.telerik.com/platform/appmanager/getting-started/introduction\" target=\"_blank\" rel=\"external\">‘Introduction to Telerik AppManager’</a></p>\n<h4 id=\"Submission-automation\"><a href=\"#Submission-automation\" class=\"headerlink\" title=\"Submission automation\"></a>Submission automation</h4><p>Automation can be achieved using the NativeScript CLI only. All of the parameters needed for publishing can be passed to the <code>publish</code> command directly:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios [&lt;Apple ID&gt; [&lt;Password&gt; [&lt;Mobile Provisioning Profile Identifier&gt; [&lt;Code Sign Identity&gt;]]]]]</div></pre></td></tr></table></figure>\n<p>For example, assuming that you want to issue a build using a mobile provision with an identifier <em>d5d40f61-b303-4fc8-aea3-fbb229a8171c</em>, you could run:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios my-apple-id my-password d5d40f61-b303-4fc8-aea3-fbb229a8171c &quot;iPhone Distribution&quot;</div></pre></td></tr></table></figure></p>\n<p>Note that the <code>Code Sign Identity</code> can be set to something generic like <em>iPhone Distribution</em> in order to let the build automatically detect a code sign identity.</p>\n<p>You can also automate the uploads of already built packages:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios my-apple-id my-password --ipa /tmp/build/myIpa.ipa</div></pre></td></tr></table></figure></p>\n<p>Some tools that allow the submission process to be automated - <a href=\"https://github.com/fastlane/fastlane\" target=\"_blank\" rel=\"external\">MIT Licensed one: fastlane</a>. \nAlso, the previously mentioned <em>Application Loader</em> has a command line tool called <em>iTMSTransporter</em> in its package,\nwhich you may use to hack your own <a href=\"https://gist.github.com/jedi4ever/b1f8b27d4a803d487fa4\" target=\"_blank\" rel=\"external\">shell scripts</a> around.</p>\n<h3 id=\"Send-for-approval-and-publish\"><a href=\"#Send-for-approval-and-publish\" class=\"headerlink\" title=\"Send for approval and publish\"></a>Send for approval and publish</h3><p>Once you successfully submit a build at <em>iTunes Connect</em>, you can enable testing through <em>Test Flight</em>.\nWhen you are ready, go to the ‘Build’ section of your iOS app, pick the build, and click ‘Submit for Review’ for that version.\nThe app will pass through several <a href=\"https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/ChangingAppStatus.html#//apple_ref/doc/uid/TP40011225-CH30-SW23\" target=\"_blank\" rel=\"external\">App Statuses</a>. If your app passes Apple review, it can go live at the <em>App Store</em>.</p>\n","excerpt":"","more":"<h1 id=\"Publishing-a-NativeScript-iOS-App-in-the-App-Store\"><a href=\"#Publishing-a-NativeScript-iOS-App-in-the-App-Store\" class=\"headerlink\" title=\"Publishing a NativeScript iOS App in the App Store\"></a>Publishing a NativeScript iOS App in the App Store</h1><ol>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#creating-ios-nativescript-app\">Creating iOS NativeScript app</a><ol>\n<li><a href=\"#bundle-id\">Bundle ID</a></li>\n<li><a href=\"#app-name\">App name</a></li>\n<li><a href=\"#app-icons\">App icons</a></li>\n<li><a href=\"#launch-files\">Launch files</a><ol>\n<li><a href=\"#launch-screen-images\">Launch screen images</a></li>\n<li><a href=\"#launch-screen-storyboard\">Launch Screen Storyboard</a></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><a href=\"#certificates-identifiers--profiles\">Certificates, identifiers &amp; profiles</a><ol>\n<li><a href=\"#account-with-apple-id\">Account with Apple ID</a></li>\n<li><a href=\"#development-certificates\">Development certificates</a></li>\n<li><a href=\"#distribution-certificates\">Production certificates</a></li>\n<li><a href=\"#identifiers---app-ids\">Identifiers - App IDs</a></li>\n<li><a href=\"#devices\">Devices</a></li>\n<li><a href=\"#development-provisioning-profiles\">Development provisioning profiles</a></li>\n<li><a href=\"#distribution-provisioning-profiles\">Distribution provisioning profiles</a></li>\n</ol>\n</li>\n<li><a href=\"#itunes-connect\">iTunes Connect</a><ol>\n<li><a href=\"#account\">Account</a></li>\n<li><a href=\"#creating-an-app\">Creating an app</a></li>\n<li><a href=\"#builds\">Builds</a><ol>\n<li><a href=\"#build-versioning\">Build versioning</a></li>\n<li><a href=\"#submit-from-the-nativescript-cli\">Submit from the NativeScript CLI</a></li>\n<li><a href=\"#submit-from-xcode\">Submit from Xcode</a></li>\n<li><a href=\"#submit-with-telerik-appmanager\">Submit with Telerik AppManager</a></li>\n<li><a href=\"#submission-automation\">Submission automation</a></li>\n</ol>\n</li>\n<li><a href=\"#send-for-approval-and-publish\">Send for approval and publish</a></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>You can publish a NativeScript app in the <em>App Store</em> the same way you would <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html\">release a purely native iOS app</a>.</p>\n<ol>\n<li><p>Verify that the iOS native project inside your app contains your latest changes and resources by running the following command.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns prepare ios</div></pre></td></tr></table></figure>\n</li>\n<li><p>Open the iOS native project in Xcode. Your native project is located at: <code>{app-name}/platforms/ios/{app-name}.xcodeproj</code>.</p>\n</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html\">Configure the project for distribution</a>.</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/UploadingYourApptoiTunesConnect/UploadingYourApptoiTunesConnect.html\">Upload the app to iTunes Connect</a>.</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html\">Submit it to the <em>App Store</em></a>.</li>\n</ol>\n<h2 id=\"Creating-iOS-NativeScript-app\"><a href=\"#Creating-iOS-NativeScript-app\" class=\"headerlink\" title=\"Creating iOS NativeScript app\"></a>Creating iOS NativeScript app</h2><h3 id=\"Bundle-ID\"><a href=\"#Bundle-ID\" class=\"headerlink\" title=\"Bundle ID\"></a>Bundle ID</h3><p>The <em>Bundle ID</em> is a unique identifier, provided by you for your app. It uses reverse domain name notation. For example, the NativeScript CLI will use <code>org.nativescript.&lt;AppName&gt;</code> as default. During <code>tns create</code> you can provide the <em>Bundle ID</em> using the <code>--appid &lt;id&gt;</code> option.</p>\n<p>In iOS apps, the <em>Bundle ID</em> is stored in the <code>CFBundleIdentifier</code> in the <code>Info.plist</code>, but the NativeScript CLI will explicitly set this to the value of the <code>nativescript.id</code> key stored in the <code>package.json</code> file in the root of your application.</p>\n<blockquote>\n<p><strong>NOTE:</strong> To edit the <em>Bundle ID</em>, edit the <code>package.json</code> of your app and set the <code>nativescript.id</code> key.</p>\n</blockquote>\n<p>The <em>Bundle ID</em> is used to precisely identify your app at various situations and plays an important role, when it is built and launched by the CLI, as well as when <em>Provisioning Profiles</em> and certificates are created in the <em>Apple Member Center</em>.</p>\n<p>For more information consider <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html\">the ‘About Bundle IDs’ section in the following article</a>.</p>\n<h3 id=\"App-name\"><a href=\"#App-name\" class=\"headerlink\" title=\"App name\"></a>App name</h3><p>This is the display name for your app. It is purely cosmetic but highly important. Fot example, it will appear under the app icon.\nThe value is stored in the <code>app/App_Resources/iOS/Info.plist</code> file as the <code>CFBundleDisplayName</code> key.</p>\n<h3 id=\"App-icons\"><a href=\"#App-icons\" class=\"headerlink\" title=\"App icons\"></a>App icons</h3><p>The NativeScript framework will use icons from <code>app/App_Resources/iOS/</code>. All files from that folder are added as resources in the generated Xcode project in <code>platforms/ios</code>.</p>\n<p><em>App Store</em> submissions will be rejected if certain icon files are not present. To ensure you have the required icons, you can consider the following Apple article: <a href=\"https://developer.apple.com/library/ios/qa/qa1686/_index.html\">‘App Icons on iPad and iPhone’</a>.</p>\n<p>If you want to extend the default icon set, and you don’t want to use the default naming, or you need finer control, you can use the <code>app/App_Resources/iOS/Info.plist</code>.\nList the icons using <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW10\"><code>CFBundleIconFiles</code></a> or <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW13\"><code>CFBundleIcon</code></a>.</p>\n<p>For example, listing icons using <code>CFBundleIconFiles</code>:</p>\n<h3 id=\"Example-1-How-to-customise-Info-plist-gt\"><a href=\"#Example-1-How-to-customise-Info-plist-gt\" class=\"headerlink\" title=\"Example 1: How to customise Info.plist.__&gt;\"></a>Example 1: How to customise Info.plist.__&gt;</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</div><div class=\"line\">&lt;dict&gt;</div><div class=\"line\">    &lt;!-- The full content of the Info.plist still should be here. --&gt;</div><div class=\"line\">\t&lt;key&gt;CFBundleIconFiles&lt;/key&gt;</div><div class=\"line\">\t&lt;array&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon@2x.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon-Small@3x.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon-Small@2x.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon-Small.png&lt;/string&gt;</div><div class=\"line\">\t\t&lt;string&gt;Icon-Small-50@2x.png&lt;/string&gt;</div><div class=\"line\">        &lt;!-- etc --&gt;</div><div class=\"line\">\t&lt;/array&gt;</div><div class=\"line\">&lt;/dict&gt;</div><div class=\"line\">&lt;/plist&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Launch-files\"><a href=\"#Launch-files\" class=\"headerlink\" title=\"Launch files\"></a>Launch files</h3><p>Launch screens are an essential part of your iOS app. This is the first thing your users see when they start your app.</p>\n<p>The Springboard will play a subtle animation transitioning from the home screen to your app. In order to provide a pleasing experience, it’s best to avoid a default that’s entirely black or white.</p>\n<p>The launch files are not a splash screen; instead, they are a way for the OS to quickly grab a preview image of your app and use it during the first ~300ms while your app is booting.</p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html\">For design guidelines you can consider the following article provided by Apple</a>.</p>\n<blockquote>\n<p><strong>QUOTE:</strong> If you think that following these guidelines will result in a plain, boring launch image, you’re right. Remember, the launch image doesn’t provide you with an opportunity for artistic expression. It’s solely intended to enhance the user’s perception of your app as quick to launch and immediately ready for use.</p>\n</blockquote>\n<p><em>App Store</em> submissions will be rejected if certain launch files are not present. Make sure that when new iOS versions and devices are released that you update your <em>launch files</em> and accommodate the upcoming form factors.</p>\n<p>If a customer runs your app on a device with a high resolution screen and your app is missing the launch screen file for that device, then iOS will render your app using a smaller resolution, degrading its quality:</p>\n<ul>\n<li>Your app may be upscaled, and blurred</li>\n<li>Your app may have black areas</li>\n</ul>\n<p>Earlier iOS versions had to support a small range of form factors. Providing a different launch image per screen size was trivial. With the new devices released by Apple, the number of images that had to be provided increased. That’s where Apple introduced the <em>launch screen storyboard</em>. \nThe storyboard allows basic primitives such as images to be presented on the screen, and you can have dynamic layout using layout constraints. This makes it possible to design a single <em>launch screen</em> that fits well for all form factors.</p>\n<p>The NativeScript framework default project has a <em>Launch Screen Storyboard</em> and <em>Launch Images</em>. In iOS8 and later, your app may use storyboards; your app can use launch images for devices that run earlier versions of iOS. </p>\n<h4 id=\"Launch-screen-images\"><a href=\"#Launch-screen-images\" class=\"headerlink\" title=\"Launch screen images\"></a>Launch screen images</h4><p>The images are placed, similar to the icons already mentioned, in <code>app/App_Resources/iOS</code>. The default project template ships several <code>Default-*.PNG</code> files there; you may consider changing them.</p>\n<p>In iOS8 and later versions, your app will display its storyboard. If you want to use images on all devices, you can consider disabling the <em>Launch Screen Storyboard</em>. Instructions for how to do this are explained later in the next section.</p>\n<p>Similar to the icons, you can use the <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW24\"><code>UILaunchImageFile</code></a> and <a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW28\"><code>UILaunchImages</code></a> key in the <code>app/App_Resources/iOS</code>.</p>\n<h4 id=\"Launch-Screen-Storyboard\"><a href=\"#Launch-Screen-Storyboard\" class=\"headerlink\" title=\"Launch Screen Storyboard\"></a>Launch Screen Storyboard</h4><p>The NativeScript framework will provide a <em>Launch Screen Storyboard</em> in <code>platforms/ios/&lt;YourAppName&gt;/en.lproj/LaunchScreen.xib</code>, but does <strong>not</strong> yet provide a means to store it at <code>app/App_Resources/iOS</code>.\nIf you want to edit it you can use the <code>.xcodeproj</code> generated in <code>platforms/ios</code>. You will have to add it in source control.\nCLI rebuilds may overwrite it, so you will have to watch out for automatic changes in it when you commit.</p>\n<p>To disable the default <em>Launch Screen Storyboard</em>, remove the <code>UILaunchStoryboardName</code> from the <code>app/App_Resources/iOS/Info.plist</code>:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;key&gt;UILaunchStoryboardName&lt;/key&gt;</div><div class=\"line\">&lt;string&gt;LaunchScreen&lt;/string&gt;</div></pre></td></tr></table></figure></p>\n<p>This will force all supported launch screens to use the <em>launch image</em>. </p>\n<h2 id=\"Certificates-identifiers-amp-profiles\"><a href=\"#Certificates-identifiers-amp-profiles\" class=\"headerlink\" title=\"Certificates, identifiers &amp; profiles\"></a>Certificates, identifiers &amp; profiles</h2><p>Certificates, identifiers and profiles are managed at <a href=\"https://developer.apple.com/membercenter\">https://developer.apple.com/membercenter</a>.</p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html\">You should really explore the information Apple provides on certificates and identities</a>.\nThis article will cover only the basics.</p>\n<h3 id=\"Account-with-Apple-ID\"><a href=\"#Account-with-Apple-ID\" class=\"headerlink\" title=\"Account with Apple ID\"></a>Account with Apple ID</h3><p>You will need a developer account with an <em>Apple ID</em> so you can access the <a href=\"https://developer.apple.com/membercenter\">Apple Developer Member Center</a>. </p>\n<p>You will need to be added as an iOS developer in your organization.</p>\n<h3 id=\"Development-certificates\"><a href=\"#Development-certificates\" class=\"headerlink\" title=\"Development certificates\"></a>Development certificates</h3><p>Development certificates are used to sign iOS apps proving the origin of the app. If you plan to use the Xcode tooling it would be best to create a <em>development certificate</em>.</p>\n<p>A few pitfalls are:</p>\n<ul>\n<li>A developer is allowed to have one certificate at any time. You must ‘revoke’ an existing certificate before you can create a new one.</li>\n<li>Certificates consist of public and private keys. The private key is never sent to Apple, so you cannot ‘download’ your certificate from the <em>Member Center</em>. If you lose the private key of your certificate, you have to revoke it and create a new one.</li>\n<li>When revoked or expired, the certificates may further invalidate <em>provisioning profiles</em>. Once the certificate is recreated, the <em>provisioning profiles</em> need to be updated as well.</li>\n<li>Making a certificate requires a Mac. You use the Keychain Access tool to create a certificate request, generating a public and private keys at your side, then send the public key to Apple while storing the private key in your keychain.</li>\n<li>If you follow the steps at the <em>Member Center</em> to create a new <em>development certificate</em>, the certificate must be stored in your keychain. You can consider exporting it and backing it up.</li>\n</ul>\n<blockquote>\n<p><strong>NOTE:</strong> Go to <a href=\"https://developer.apple.com/account/ios/certificate/certificateList.action?type=development\">https://developer.apple.com/account/ios/certificate/certificateList.action?type=development</a> click the ‘+’ (add) button and follow the instructions for making a new ‘iOS App Development’ certificate. </p>\n</blockquote>\n<h3 id=\"Production-certificates\"><a href=\"#Production-certificates\" class=\"headerlink\" title=\"Production certificates\"></a>Production certificates</h3><p><em>Production certificates</em> work similarly to development certificates. They consist of public and private keys. The private key stays at your side and is never sent to Apple. Your app is signed with the distribution certificate using your private key,\n so Apple can verify the origin of submissions in <em>iTunes Connect</em> using the public key you sent them.</p>\n<p>This <em>production certificates</em> is used to sign the application binary when it is prepared for submission.\nUsually when an app is built for a device, its IPA file is signed with the development certificate. </p>\n<blockquote>\n<p><strong>Note</strong> You can read more about IPA (file extension) <a href=\"https://en.wikipedia.org/wiki/.ipa_(file_extension\">here</a>)\nLater, the tooling resigns the IPA with the <em>production certificate</em> and appends the distribution provisioning profile when submitting to <em>iTunes Connect</em>.</p>\n</blockquote>\n<p>A few pitfalls are:</p>\n<ul>\n<li>Creating <em>production certificates</em> are more restricted than creating development certificates. Apple limit the number of <em>production certificates</em> per team.</li>\n<li>Because production certificates are limited in quantity per team, and frequently shared between multiple team members, you must be extremely careful when you revoke an existing distribution certificate. If you ultimately lost your private key of a distribution certificate and revoke it, consult with anyone that may have backed it up or is in need of the new certificate. Hopefully this will avoid your new copy being revoked in the future or losing your admin rights. </li>\n<li><em>Production certificates</em> can be shared between team members. If you follow the steps at the <em>Member Center</em> to create a new one (link below) the certificate will be stored in your keychain. You can export it as a .p12 file, easily backing it up and sharing it with senior team peers.</li>\n</ul>\n<p>If you need a new distribution certificate, go to <a href=\"https://developer.apple.com/account/ios/certificate/certificateList.action?type=distribution\">https://developer.apple.com/account/ios/certificate/certificateList.action?type=distribution</a> click the ‘+’ (add) button and follow the instructions for making a new ‘App Store Distribution’ certificate. Chances are you are part of a larger organization and your role does not have sufficient rights to create a new distribution certificate. Admins or other team member may provide you the certificates in that case. In such cases, you will probably be given a .p12 file and a password. You should import the file in your keychain using the <code>Keychain Access</code> application. </p>\n<h3 id=\"Identifiers-App-IDs\"><a href=\"#Identifiers-App-IDs\" class=\"headerlink\" title=\"Identifiers - App IDs\"></a>Identifiers - App IDs</h3><p>To test your app on a device or submit in the <em>App Store</em>, you will need to create an <em>App ID</em>.\nApp IDs consist of a <em>Prefix</em> or a <em>Team ID</em> that is generated by Apple, followed by an ID provided by you that must match your <em>Bundle ID</em>.\nFor example, you can create an <em>App ID</em> with the <code>org.nativescript.*</code> ID that will match all your NativeScript apps.\nThe wildcard pattern imposes some restrictions on the services you can use, so you may also cosider using a non-wildcard pattern such as <code>org.nativescript.&lt;my-app&gt;</code>.</p>\n<p>These identifiers are later used to bind apps with <em>provisioning profiles</em>.</p>\n<h3 id=\"Devices\"><a href=\"#Devices\" class=\"headerlink\" title=\"Devices\"></a>Devices</h3><p>At the <em>Member Center</em> you can register the devices you and your team use for testing.\nGo to <a href=\"https://developer.apple.com/account/ios/device/deviceList.action\">https://developer.apple.com/account/ios/device/deviceList.action</a>.</p>\n<p>To register a phone you will need its UDID. Connect it to the Mac and run in a terminal:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">instruments -s devices</div></pre></td></tr></table></figure></p>\n<p>It will output all known devices and their UDIDs.</p>\n<h3 id=\"Development-provisioning-profiles\"><a href=\"#Development-provisioning-profiles\" class=\"headerlink\" title=\"Development provisioning profiles\"></a>Development provisioning profiles</h3><p>Development provisioning profiles bind together one or multiple developer signing identities (developer certificates), <em>App ID</em> and device IDs.\nThese are created at <a href=\"https://developer.apple.com/account/ios/profile/profileList.action?type=limited\">https://developer.apple.com/account/ios/profile/profileList.action?type=limited</a>.\nIf you are making a new one, or adding a new app to an existing one, make sure to select these three:</p>\n<ul>\n<li>Your <em>development certificate</em></li>\n<li><em>App ID identifier</em>, that matches your App ID</li>\n<li>The <em>device</em> you will test on</li>\n</ul>\n<p>Unlike the certificates, <em>provisioning profiles</em> are files that can be easily updated and downloaded from the Member Center (in .mobileprovision files) and installed in Xcode by double-clicking that file.</p>\n<p>Xcode is also capable of obtaining these automatically. Open Xcode and from the menu go to  <code>Xcode &gt; Preferences... &gt; Accounts &gt; (select your apple ID) &gt; (select your Team Name) &gt; View Details...</code>.\nThere you can check all signing identities (developer and <em>production certificates</em>) available to Xcode as well as <code>Download All</code> <em>provisioning profiles</em>.</p>\n<p>When you run an app on a device, Xcode will sign the app with your development certificate and add a provisioning profile that has your certificate, device ID and App ID.</p>\n<p>While the <em>development provisioning profiles</em> are easily created and updated, they frequently invalidate, especially when multiple <em>developer certificates</em> are involved. Every time one of them is revoked or expires, you need to update the provisioning certificate.</p>\n<p>These are not of a particular interest for <em>App Store</em> submissions but you may need one to test on a real device.</p>\n<h3 id=\"Distribution-provisioning-profiles\"><a href=\"#Distribution-provisioning-profiles\" class=\"headerlink\" title=\"Distribution provisioning profiles\"></a>Distribution provisioning profiles</h3><p>There are several <em>distribution provisioning profile</em> types. The one you will need for <em>App Store</em> submission is ‘App Store Distribution Provisioning Profile’.\nThese are similar to the <em>development provisioning profiles</em> because they bind:</p>\n<ul>\n<li>Your <em>distribution certificate</em></li>\n<li>Your <em>device</em>-es</li>\n<li>An <em>App ID</em></li>\n<li>Various settings, enabled services, etc.</li>\n</ul>\n<p><em>Distribution provisioning profiles</em> are created at <a href=\"https://developer.apple.com/account/ios/profile/profileList.action?type=production\">https://developer.apple.com/account/ios/profile/profileList.action?type=production</a>.</p>\n<p>For <em>App Store</em> submissions, you must create an <em>App Store Distribution Provisioning Profile</em>. Once you create it, download it and double-click it on your Mac so it gets registered with Xcode.</p>\n<p><em>Distribution provisioning profiles</em> invalidate rarely since they refer a single <em>Distribution Certificate</em>.</p>\n<h2 id=\"iTunes-Connect\"><a href=\"#iTunes-Connect\" class=\"headerlink\" title=\"iTunes Connect\"></a>iTunes Connect</h2><p>While you manage your <em>provisioning profiles</em> and certificates at the <em>Apple Developer Member Center</em>, apps are registered and submitted at <a href=\"https://itunesconnect.apple.com\">iTunes Connect</a>.\nThis is where you will be able to create new apps, prepare app screens, descriptions, manage app versions, etc.</p>\n<h3 id=\"Account\"><a href=\"#Account\" class=\"headerlink\" title=\"Account\"></a>Account</h3><p>You will need your <em>Apple ID</em> added to your organization with sufficient rights at <a href=\"https://itunesconnect.apple.com\">https://itunesconnect.apple.com</a>.</p>\n<h3 id=\"Creating-an-app\"><a href=\"#Creating-an-app\" class=\"headerlink\" title=\"Creating an app\"></a>Creating an app</h3><p>To publish your app in the iOS <em>App Store</em> you will have to register your app. Log into <a href=\"https://itunesconnect.apple.com\">https://itunesconnect.apple.com</a> and go to ‘My Apps’.\nThere you can check the status and edit existing apps or create a new app.</p>\n<p>Click the ‘+’ button at the top left corner. The ‘New App’ dialog should appear. There you have to fill the public <em>App Store</em> name of your app and primary language.</p>\n<p>Also, you have to set <em>Bundle ID</em>, which must match the <em>Bundle ID</em> referred in <a href=\"#bundle-id\">‘1.1. Bundle ID’</a>.\nIf the drop-down does not contain a suitable match, you are probably missing an <em>App ID</em> referred at <a href=\"#identifiers-app-ids\">‘2.4. Identifiers - App IDs’</a>.\nIf there is a wildcard <em>App ID</em>, that is a potential match so select it. You will be able to type the suffix, replacing the wildcard in a text box.</p>\n<p>At that point you have to fill in the App Information.\nThere are various assets that you must provide such as screenshots, icons, description, etc.\nFailing to provide all necessary assets may prevent you from submitting your app, or result in app rejection.</p>\n<blockquote>\n<p>Note: Screenshots not matching the actual app may result in rejection of a new version sent for approval.</p>\n</blockquote>\n<h3 id=\"Builds\"><a href=\"#Builds\" class=\"headerlink\" title=\"Builds\"></a>Builds</h3><p>Once you have your app information registered at <a href=\"https://itunesconnect.apple.com\">https://itunesconnect.apple.com</a> it is time to build your NativeScript app for iOS and submit it.</p>\n<p>There are two main ways to submit an app to <em>iTunes Connect</em> — using Xcode or using <em>Application Loader</em>.</p>\n<h4 id=\"Build-versioning\"><a href=\"#Build-versioning\" class=\"headerlink\" title=\"Build versioning\"></a>Build versioning</h4><p>We have already explained how the <em>Bundle ID</em> is set in your project, how the launch screen (or storyboard) and images are added to your app, and how you can set the display name.</p>\n<p>Before the build, you need to set two important things: the <em>Bundle Short Version String</em> and the <em>Bundle Version String</em>.</p>\n<p><em>Bundle Short Version String</em> is the public version of your app. It is incremented between releases. For example: <code>2.1</code>.\n<em>Bundle Version String</em> is the internal build number. One public release usually has multiple release candidates. For example <code>2.1.1</code>, <code>2.1.1</code>, etc.</p>\n<p>iTunes Connect has a restriction that a bundle cannot be uploaded with the same version twice, so you must increment the <em>Bundle Version String</em> with each upload.</p>\n<p>The <em>Bundle Short Version String</em> should be incremented once your app version is uploaded, sent for approval, approved and published.</p>\n<p>Both values are stored in <code>app/App_Resources/iOS/Info.plist</code>:</p>\n<ul>\n<li>The <code>CFBundleShortVersionString</code> key stores the <em>Bundle Short Version String</em>.</li>\n<li>The <code>CFBundleVersion</code> key stores the <em>Bundle Version String</em>.</li>\n</ul>\n<p>In the <code>app/App_Resources/iOS/Info.plist</code> they appear as:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;key&gt;CFBundleShortVersionString&lt;/key&gt;</div><div class=\"line\">&lt;string&gt;2.1&lt;/string&gt;</div><div class=\"line\">&lt;key&gt;CFBundleVersion&lt;/key&gt;</div><div class=\"line\">&lt;string&gt;2.1.2&lt;/string&gt;</div></pre></td></tr></table></figure></p>\n<p>If you need to edit these from the command line, there is a handy tool called <code>PlistBuddy</code> that can read and write Plist files.\nFor example, the following shell script appends the Jenkins <code>$BUILD_NUMBER</code> to the <code>CFBundleVersion</code> in the Info.plist:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### Set CFBundleVersion ###</span></div><div class=\"line\"><span class=\"built_in\">export</span> CFBundleVersion=`/usr/libexec/PlistBuddy app/App_Resources/iOS/Info.plist -c <span class=\"string\">\"Print :CFBundleVersion\"</span>`</div><div class=\"line\">/usr/libexec/PlistBuddy app/App_Resources/iOS/Info.plist -c <span class=\"string\">\"Set :CFBundleVersion <span class=\"variable\">$CFBundleVersion</span>.<span class=\"variable\">$BUILD_NUMBER</span>\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Submit-from-the-NativeScript-CLI\"><a href=\"#Submit-from-the-NativeScript-CLI\" class=\"headerlink\" title=\"Submit from the NativeScript CLI\"></a>Submit from the NativeScript CLI</h4><p>You can execute the following command inside a NativeScript project using the CLI:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios</div></pre></td></tr></table></figure></p>\n<p>The command will prompt for your <code>Apple ID</code> and <code>Password</code> for authentication with <a href=\"https://itunesconnect.apple.com\">iTunes Connect</a> and then produce a <code>release</code> build and proceed to upload it to iTunes Connect.</p>\n<p>Alternatively, you can use an existing build by running the following command:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios --ipa &lt;Ipa File Path&gt;</div></pre></td></tr></table></figure></p>\n<p>For more information, run the following command:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns help publish ios</div></pre></td></tr></table></figure></p>\n<h4 id=\"Submit-from-Xcode\"><a href=\"#Submit-from-Xcode\" class=\"headerlink\" title=\"Submit from Xcode\"></a>Submit from Xcode</h4><p>You can execute the following command using the CLI:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns prepare ios</div></pre></td></tr></table></figure></p>\n<p>This will create an Xcode project in <code>platforms/ios/</code>. Then you may consider the following Apple article about how to <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/ConfiguringYourApp/ConfiguringYourApp.html\">configure the project for distribution</a>.</p>\n<p>The <code>platform</code> folder is not meant to stay in source control and you should be careful when you do modifications there.\nRebuilds may erase your changes and you should add changed files to source control.</p>\n<p>A common pitfall, if you are using CocoaPods, is to open the Xcode project instead of the workspace.</p>\n<p>Once you have it open in Xcode, you have to go to your target’s General settings and pick a team.\nIn ‘Build Settings’ there should be a suitable ‘iOS Developer’ and ‘Code Signing Identity’.</p>\n<p>From the top drop-down, select your target, and from the devices and emulators, pick ‘Generic iOS Device’.</p>\n<p>Then you should be able to select from the top menu <code>Product &gt; Archive</code>.</p>\n<p>This makes an xcodearchive and opens it in the Xcode Organizer.\nThe Xcode Organizer displays a list with builds of your app. Pick the last build and click <code>Upload to App Store...</code>.\nYou should select a team again and whether to include app symbols for your app. Next, you can see a list with the binary information, entitlements, etc.\nClick <code>Upload</code>.</p>\n<p>If you upload successfully, you should be able to log in at <a href=\"https://itunesconnect.apple.com\">https://itunesconnect.apple.com</a> and see your build in ‘Activities’. From there you can enable Test Flight beta testing or send it for approval.</p>\n<h4 id=\"Submit-with-Telerik-AppManager\"><a href=\"#Submit-with-Telerik-AppManager\" class=\"headerlink\" title=\"Submit with Telerik AppManager\"></a>Submit with Telerik AppManager</h4><p>It is worth mentioning that the NativeScript platform is integreated in the Telerik platform.\nThe Telerik platform has everything you need in the cloud, easing the submission process.\nThis includes managing your <em>production certificates</em> and <em>provisioning profiles</em>,\nas well as support for cloud builds and <em>Google Play</em> submission. </p>\n<p>Read more about app submission process in the <em>Telerik Platform</em> in <a href=\"http://docs.telerik.com/platform/appmanager/getting-started/introduction\">‘Introduction to Telerik AppManager’</a></p>\n<h4 id=\"Submission-automation\"><a href=\"#Submission-automation\" class=\"headerlink\" title=\"Submission automation\"></a>Submission automation</h4><p>Automation can be achieved using the NativeScript CLI only. All of the parameters needed for publishing can be passed to the <code>publish</code> command directly:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios [&lt;Apple ID&gt; [&lt;Password&gt; [&lt;Mobile Provisioning Profile Identifier&gt; [&lt;Code Sign Identity&gt;]]]]]</div></pre></td></tr></table></figure>\n<p>For example, assuming that you want to issue a build using a mobile provision with an identifier <em>d5d40f61-b303-4fc8-aea3-fbb229a8171c</em>, you could run:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios my-apple-id my-password d5d40f61-b303-4fc8-aea3-fbb229a8171c &quot;iPhone Distribution&quot;</div></pre></td></tr></table></figure></p>\n<p>Note that the <code>Code Sign Identity</code> can be set to something generic like <em>iPhone Distribution</em> in order to let the build automatically detect a code sign identity.</p>\n<p>You can also automate the uploads of already built packages:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns publish ios my-apple-id my-password --ipa /tmp/build/myIpa.ipa</div></pre></td></tr></table></figure></p>\n<p>Some tools that allow the submission process to be automated - <a href=\"https://github.com/fastlane/fastlane\">MIT Licensed one: fastlane</a>. \nAlso, the previously mentioned <em>Application Loader</em> has a command line tool called <em>iTMSTransporter</em> in its package,\nwhich you may use to hack your own <a href=\"https://gist.github.com/jedi4ever/b1f8b27d4a803d487fa4\">shell scripts</a> around.</p>\n<h3 id=\"Send-for-approval-and-publish\"><a href=\"#Send-for-approval-and-publish\" class=\"headerlink\" title=\"Send for approval and publish\"></a>Send for approval and publish</h3><p>Once you successfully submit a build at <em>iTunes Connect</em>, you can enable testing through <em>Test Flight</em>.\nWhen you are ready, go to the ‘Build’ section of your iOS app, pick the build, and click ‘Submit for Review’ for that version.\nThe app will pass through several <a href=\"https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/ChangingAppStatus.html#//apple_ref/doc/uid/TP40011225-CH30-SW23\">App Statuses</a>. If your app passes Apple review, it can go live at the <em>App Store</em>.</p>\n"},{"title":"Unit Testing","description":"Learn how to write and execute tests for your NativeScript app.","_content":"\n# Unit Testing\n\nWhen you develop new features inside your app, you can ensure that they are working properly and that past functionality has not regressed by writing and executing unit tests on a regular basis. With the NativeScript CLI, you can write and execute unit tests using [Jasmine][http://jasmine.github.io/], [Mocha][https://mochajs.org/] with [Chai][http://chaijs.com/] or [QUnit][https://qunitjs.com/].\n\nTo run your unit tests, the NativeScript CLI uses [Karma][http://karma-runner.github.io/0.13/index.html].\n\n* [Before You Begin](#before-you-begin)\n* [Configure Your Project](#configure-your-project)\n* [Write Your Tests](#write-your-tests)\n* [Run Your Tests](#run-your-tests)\n\t* [Requirements](#requirements)\n\t* [Run the Tests](#run-the-tests)\n\t* [Re-Run Tests on Code Change](#re-run-tests-on-code-change)\n\t* [Configure the Karma Server](#configure-the-karma-server)\n* [Continuous Integration](#continuous-integration)\n\n## Before You Begin\n\nBefore writing and running unit tests, verify that you have completed the following steps.\n\n1. [Install and configure the NativeScript CLI on your system.][install]\n1. If you don't have any projects, create a new project and navigate to the directory of the newly created directory.\n\t\n\t```Shell\n\ttns create projectName\n\tcd projectName\n\t```\n1. If you want to create tests for an existing directory, navigate to the directory of the project.\n\n\t```Shell\n\tcd existingProjectDirectory\n\t```\n\n> **TIP:** You don't need to explicitly add the platforms for which you want to test your project. The NativeScript CLI will configure your project when you begin to run your tests.\n\n## Configure Your Project\n\nThe NativeScript CLI lets you choose between three widely popular unit testing frameworks: [Jasmine][Jasmine], [Mocha][Mocha] with [Chai][Chai] and [QUnit][QUnit]. You need to configure the project for unit testing by choosing a framework. You can use only framework at a time.\n\nTo initialize your project for unit testing, run the following command and, when prompted, use the keyboard arrows to select the framework that you want to use.\n\n```Shell\ntns test init\n```\n\nThis operation applies the following changes to your project.\n* It creates the `app/tests` directory. You need to store all tests in this directory. This directory is excluded from release builds.\n* It creates an `example.js` file in the `app/tests` directory. This sample test illustrates the basic syntax for the selected framework.\n* It installs the nativescript-unit-test-runner npm module for the selected framework and its dev dependencies in `node_modules`.\n* It creates `karma.conf.js` in the root of your project. This file contains the default configuration for the Karma server for the selected framework.\n\n## Write Your Tests\n\nWith the NativeScript CLI, you can extensively test **all JavaScript-related functionality**. You cannot test styling and UI which are not applied or created via JavaScript.\n\nWhen creating tests for a new or existing functionality, keep in mind the following specifics.\n\n* You need to create your tests as JavaScript files in the `app/tests` directory. The NativeScript CLI recognizes JavaScript files stored in `app/tests` as unit tests.\n* You need to write tests which comply with the testing framework specification you have chosen for the project.\n* You need to export the functionality that you want to test in the code of your NativeScript project.\n* You need to require the module which exposes the functionality that you want to test in the code of your unit tests.\n\nWhen creating tests for a new or existing functionality, keep in mind the following limitations.\n\n* You cannot require the file or module in which `application.start()` is called.\n* You cannot use more than one testing framework per project.\n* You cannot test styling and UI which are not applied or created via JavaScript.\n\nThe following samples test the initial value of the counter and the message in the Hello World template. These tests show the specifics and limitations outlined above.\n\n```Jasmine\nvar mainViewModel = require(\"../main-view-model\"); //Require the main view model to expose the functionality inside it.\n\ndescribe(\"Hello World Sample Test:\", function() {\n  it(\"Check counter.\", function() {\n    expect(mainViewModel.mainViewModel.counter).toEqual(42); //Check if the counter equals 42.\n  });\n  it(\"Check message.\", function () {\n  \texpect(mainViewModel.mainViewModel.message).toBe(\"42 taps left\"); //Check if the message is \"42 taps left\".\n  });\n});\n```\n```Mocha\nvar mainViewModel = require(\"../main-view-model\"); //Require the main view model to expose the functionality inside it.\n\ndescribe('Hello World Sample Test:', function () {\n\tit('Counter should be 42 on start.', function () {\n\t\tassert.equal(mainViewModel.mainViewModel.counter, 42); //Assert that the counter equals 42.\n\t});\n\tit('Message should be \"42 taps left\" on start.', function () {\n\t\tassert.equal(mainViewModel.mainViewModel.message, \"42 taps left\"); //Assert that the message is \"42 taps left\".\n\t});\n});\n```\n```QUnit\nvar mainViewModel = require(\"../main-view-model\"); //Require the main view model to expose the functionality inside it.\n\nQUnit.test(\"Hello World Sample Test:\", function (assert) {\n\tassert.equal( mainViewModel.mainViewModel.counter, 42, \"Counter, 42; equal succeeds.\" ); //Assert that the counter equals 42.\n\tassert.equal( mainViewModel.mainViewModel.message, \"42 taps left\", \"Message, 42 taps left; equal succeeds.\" ); //Assert that the message is \"42 taps left\".\n});\n```\n\n## Run Your Tests\n\nAfter you have completed your test suite, you can run it on physical devices or in the native emulators.\n\n### Requirements\n\nBefore running your tests, verify that your development machine and your testing devices meet the following prerequisites.\n\n* The Android native emulators on which you want to run your tests must be running on your development machine. To verify that your machine recognizes the devices, run the following command.\n\n\t```Shell\n\ttns device\n\t```\n* The physical devices on which you want to run your tests must be connected to your development machine. To verify that your machine recognizes the devices, run the following command.\n\n\t```Shell\n\ttns device\n\t```\n* The physical devices on which you want to run your tests must be able to resolve the IP of your development machine. To verify that the device can access the Karma server, connect the device and the development machine to the same Wi-Fi network or establish USB or Bluetooth tethering between the device and the development machine.\n* Port 9876 must be allowed on your development machine. The Karma server uses this port to communicate with the testing device.\n\n### Run the Tests\n\nTo execute your test suite on any connected Android devices or running Android emulators, run the following command.\n\n```Shell\ntns test android\n```\n\nTo execute your test suite on connected iOS devices, run the following command.\n\n```Shell\ntns test ios\n```\n\nTo execute your test suite in the iOS Simulator, run the following command.\n\n```Shell\ntns test ios --emulator\n```\n\nEach execution of `$ tns test` consists of the following steps, performed automatically.\n\n1. The CLI starts a Karma server on the development machine.\n1. The CLI prepares, builds and deploys your project, if not already deployed. If already deployed, the CLI synchronizes changes to the application package.\n1. The CLI embeds the NativeScript unit test runner and your host network and Karma configuration in the deployed package.\n1. The CLI launches the main module of the NativeScript unit test runner instead of launching the main module of your app.\n1. The NativeScript unit test runner uses the embedded network configuration to try to connect to the Karma server on the development machine.\n1. When the connection between the NativeScript unit test runner and the Karma server is established, the test runner begins the execution of the unit tests.\n1. When the execution completes, the NativeScript unit test runner reports the results to the Karma server.\n1. The Karma server reports the results on the command line. \n\n### Re-Run Tests on Code Change\n\nThe NativeScript can continuously monitor your code for changes and when such changes occur, it can deploy those changes to your testing devices and re-run your tests.\n\nTo enable this behavior, run your `$ tns test` command with the `--watch` flag. For example:\n\n```Shell\ntns test android --watch\ntns test ios --watch\ntns test ios --emulator --watch\n```\n\nThe NativeScript CLI remains active and re-runs tests on code change. To unlock the console, press `Ctrl+C` to stop the process. \n\n### Configure the Karma Server\n\nWhen you configure your project for unit testing, the NativeScript CLI adds `karma.conf.js` to the root of your project. This file contains the default configuration of the Karma server, including default port and selected testing framework. You can edit this file to customize your Karma server.\n\nWhen you modify `karma.conf.js`, make sure that your changes meet the specification of the [Karma Configuration File][http://karma-runner.github.io/0.13/config/configuration-file.html].\n\n## Continuous Integration\n\nTo integrate the NativeScript unit test runner into a continuous integration process, you need to configure a Karma reporter, for example, the [JUnit reporter](https://github.com/karma-runner/karma-junit-reporter).\n\n[Karma Configuration File]: http://karma-runner.github.io/0.13/config/configuration-file.html\n[install]: #the-nativescript-cli\n[Jasmine]: http://jasmine.github.io/\n[Mocha]: https://mochajs.org/\n[Chai]: http://chaijs.com/\n[QUnit]: https://qunitjs.com/\n[Karma]: http://karma-runner.github.io/0.13/index.html\n","source":"workflow/testing.md","raw":"---\ntitle: Unit Testing\ndescription: Learn how to write and execute tests for your NativeScript app.\n---\n\n# Unit Testing\n\nWhen you develop new features inside your app, you can ensure that they are working properly and that past functionality has not regressed by writing and executing unit tests on a regular basis. With the NativeScript CLI, you can write and execute unit tests using [Jasmine][http://jasmine.github.io/], [Mocha][https://mochajs.org/] with [Chai][http://chaijs.com/] or [QUnit][https://qunitjs.com/].\n\nTo run your unit tests, the NativeScript CLI uses [Karma][http://karma-runner.github.io/0.13/index.html].\n\n* [Before You Begin](#before-you-begin)\n* [Configure Your Project](#configure-your-project)\n* [Write Your Tests](#write-your-tests)\n* [Run Your Tests](#run-your-tests)\n\t* [Requirements](#requirements)\n\t* [Run the Tests](#run-the-tests)\n\t* [Re-Run Tests on Code Change](#re-run-tests-on-code-change)\n\t* [Configure the Karma Server](#configure-the-karma-server)\n* [Continuous Integration](#continuous-integration)\n\n## Before You Begin\n\nBefore writing and running unit tests, verify that you have completed the following steps.\n\n1. [Install and configure the NativeScript CLI on your system.][install]\n1. If you don't have any projects, create a new project and navigate to the directory of the newly created directory.\n\t\n\t```Shell\n\ttns create projectName\n\tcd projectName\n\t```\n1. If you want to create tests for an existing directory, navigate to the directory of the project.\n\n\t```Shell\n\tcd existingProjectDirectory\n\t```\n\n> **TIP:** You don't need to explicitly add the platforms for which you want to test your project. The NativeScript CLI will configure your project when you begin to run your tests.\n\n## Configure Your Project\n\nThe NativeScript CLI lets you choose between three widely popular unit testing frameworks: [Jasmine][Jasmine], [Mocha][Mocha] with [Chai][Chai] and [QUnit][QUnit]. You need to configure the project for unit testing by choosing a framework. You can use only framework at a time.\n\nTo initialize your project for unit testing, run the following command and, when prompted, use the keyboard arrows to select the framework that you want to use.\n\n```Shell\ntns test init\n```\n\nThis operation applies the following changes to your project.\n* It creates the `app/tests` directory. You need to store all tests in this directory. This directory is excluded from release builds.\n* It creates an `example.js` file in the `app/tests` directory. This sample test illustrates the basic syntax for the selected framework.\n* It installs the nativescript-unit-test-runner npm module for the selected framework and its dev dependencies in `node_modules`.\n* It creates `karma.conf.js` in the root of your project. This file contains the default configuration for the Karma server for the selected framework.\n\n## Write Your Tests\n\nWith the NativeScript CLI, you can extensively test **all JavaScript-related functionality**. You cannot test styling and UI which are not applied or created via JavaScript.\n\nWhen creating tests for a new or existing functionality, keep in mind the following specifics.\n\n* You need to create your tests as JavaScript files in the `app/tests` directory. The NativeScript CLI recognizes JavaScript files stored in `app/tests` as unit tests.\n* You need to write tests which comply with the testing framework specification you have chosen for the project.\n* You need to export the functionality that you want to test in the code of your NativeScript project.\n* You need to require the module which exposes the functionality that you want to test in the code of your unit tests.\n\nWhen creating tests for a new or existing functionality, keep in mind the following limitations.\n\n* You cannot require the file or module in which `application.start()` is called.\n* You cannot use more than one testing framework per project.\n* You cannot test styling and UI which are not applied or created via JavaScript.\n\nThe following samples test the initial value of the counter and the message in the Hello World template. These tests show the specifics and limitations outlined above.\n\n```Jasmine\nvar mainViewModel = require(\"../main-view-model\"); //Require the main view model to expose the functionality inside it.\n\ndescribe(\"Hello World Sample Test:\", function() {\n  it(\"Check counter.\", function() {\n    expect(mainViewModel.mainViewModel.counter).toEqual(42); //Check if the counter equals 42.\n  });\n  it(\"Check message.\", function () {\n  \texpect(mainViewModel.mainViewModel.message).toBe(\"42 taps left\"); //Check if the message is \"42 taps left\".\n  });\n});\n```\n```Mocha\nvar mainViewModel = require(\"../main-view-model\"); //Require the main view model to expose the functionality inside it.\n\ndescribe('Hello World Sample Test:', function () {\n\tit('Counter should be 42 on start.', function () {\n\t\tassert.equal(mainViewModel.mainViewModel.counter, 42); //Assert that the counter equals 42.\n\t});\n\tit('Message should be \"42 taps left\" on start.', function () {\n\t\tassert.equal(mainViewModel.mainViewModel.message, \"42 taps left\"); //Assert that the message is \"42 taps left\".\n\t});\n});\n```\n```QUnit\nvar mainViewModel = require(\"../main-view-model\"); //Require the main view model to expose the functionality inside it.\n\nQUnit.test(\"Hello World Sample Test:\", function (assert) {\n\tassert.equal( mainViewModel.mainViewModel.counter, 42, \"Counter, 42; equal succeeds.\" ); //Assert that the counter equals 42.\n\tassert.equal( mainViewModel.mainViewModel.message, \"42 taps left\", \"Message, 42 taps left; equal succeeds.\" ); //Assert that the message is \"42 taps left\".\n});\n```\n\n## Run Your Tests\n\nAfter you have completed your test suite, you can run it on physical devices or in the native emulators.\n\n### Requirements\n\nBefore running your tests, verify that your development machine and your testing devices meet the following prerequisites.\n\n* The Android native emulators on which you want to run your tests must be running on your development machine. To verify that your machine recognizes the devices, run the following command.\n\n\t```Shell\n\ttns device\n\t```\n* The physical devices on which you want to run your tests must be connected to your development machine. To verify that your machine recognizes the devices, run the following command.\n\n\t```Shell\n\ttns device\n\t```\n* The physical devices on which you want to run your tests must be able to resolve the IP of your development machine. To verify that the device can access the Karma server, connect the device and the development machine to the same Wi-Fi network or establish USB or Bluetooth tethering between the device and the development machine.\n* Port 9876 must be allowed on your development machine. The Karma server uses this port to communicate with the testing device.\n\n### Run the Tests\n\nTo execute your test suite on any connected Android devices or running Android emulators, run the following command.\n\n```Shell\ntns test android\n```\n\nTo execute your test suite on connected iOS devices, run the following command.\n\n```Shell\ntns test ios\n```\n\nTo execute your test suite in the iOS Simulator, run the following command.\n\n```Shell\ntns test ios --emulator\n```\n\nEach execution of `$ tns test` consists of the following steps, performed automatically.\n\n1. The CLI starts a Karma server on the development machine.\n1. The CLI prepares, builds and deploys your project, if not already deployed. If already deployed, the CLI synchronizes changes to the application package.\n1. The CLI embeds the NativeScript unit test runner and your host network and Karma configuration in the deployed package.\n1. The CLI launches the main module of the NativeScript unit test runner instead of launching the main module of your app.\n1. The NativeScript unit test runner uses the embedded network configuration to try to connect to the Karma server on the development machine.\n1. When the connection between the NativeScript unit test runner and the Karma server is established, the test runner begins the execution of the unit tests.\n1. When the execution completes, the NativeScript unit test runner reports the results to the Karma server.\n1. The Karma server reports the results on the command line. \n\n### Re-Run Tests on Code Change\n\nThe NativeScript can continuously monitor your code for changes and when such changes occur, it can deploy those changes to your testing devices and re-run your tests.\n\nTo enable this behavior, run your `$ tns test` command with the `--watch` flag. For example:\n\n```Shell\ntns test android --watch\ntns test ios --watch\ntns test ios --emulator --watch\n```\n\nThe NativeScript CLI remains active and re-runs tests on code change. To unlock the console, press `Ctrl+C` to stop the process. \n\n### Configure the Karma Server\n\nWhen you configure your project for unit testing, the NativeScript CLI adds `karma.conf.js` to the root of your project. This file contains the default configuration of the Karma server, including default port and selected testing framework. You can edit this file to customize your Karma server.\n\nWhen you modify `karma.conf.js`, make sure that your changes meet the specification of the [Karma Configuration File][http://karma-runner.github.io/0.13/config/configuration-file.html].\n\n## Continuous Integration\n\nTo integrate the NativeScript unit test runner into a continuous integration process, you need to configure a Karma reporter, for example, the [JUnit reporter](https://github.com/karma-runner/karma-junit-reporter).\n\n[Karma Configuration File]: http://karma-runner.github.io/0.13/config/configuration-file.html\n[install]: #the-nativescript-cli\n[Jasmine]: http://jasmine.github.io/\n[Mocha]: https://mochajs.org/\n[Chai]: http://chaijs.com/\n[QUnit]: https://qunitjs.com/\n[Karma]: http://karma-runner.github.io/0.13/index.html\n","date":"2016-08-26T21:05:54.641Z","updated":"2016-08-26T21:05:54.641Z","path":"workflow/testing.html","comments":1,"layout":"page","_id":"cisn95cb5001ewsl0v78nyfh8","content":"<h1 id=\"Unit-Testing\"><a href=\"#Unit-Testing\" class=\"headerlink\" title=\"Unit Testing\"></a>Unit Testing</h1><p>When you develop new features inside your app, you can ensure that they are working properly and that past functionality has not regressed by writing and executing unit tests on a regular basis. With the NativeScript CLI, you can write and execute unit tests using [Jasmine][<a href=\"http://jasmine.github.io/\" target=\"_blank\" rel=\"external\">http://jasmine.github.io/</a>], [Mocha][<a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"external\">https://mochajs.org/</a>] with [Chai][<a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">http://chaijs.com/</a>] or [QUnit][<a href=\"https://qunitjs.com/\" target=\"_blank\" rel=\"external\">https://qunitjs.com/</a>].</p>\n<p>To run your unit tests, the NativeScript CLI uses [Karma][<a href=\"http://karma-runner.github.io/0.13/index.html\" target=\"_blank\" rel=\"external\">http://karma-runner.github.io/0.13/index.html</a>].</p>\n<ul>\n<li><a href=\"#before-you-begin\">Before You Begin</a></li>\n<li><a href=\"#configure-your-project\">Configure Your Project</a></li>\n<li><a href=\"#write-your-tests\">Write Your Tests</a></li>\n<li><a href=\"#run-your-tests\">Run Your Tests</a><ul>\n<li><a href=\"#requirements\">Requirements</a></li>\n<li><a href=\"#run-the-tests\">Run the Tests</a></li>\n<li><a href=\"#re-run-tests-on-code-change\">Re-Run Tests on Code Change</a></li>\n<li><a href=\"#configure-the-karma-server\">Configure the Karma Server</a></li>\n</ul>\n</li>\n<li><a href=\"#continuous-integration\">Continuous Integration</a></li>\n</ul>\n<h2 id=\"Before-You-Begin\"><a href=\"#Before-You-Begin\" class=\"headerlink\" title=\"Before You Begin\"></a>Before You Begin</h2><p>Before writing and running unit tests, verify that you have completed the following steps.</p>\n<ol>\n<li><a href=\"#the-nativescript-cli\">Install and configure the NativeScript CLI on your system.</a></li>\n<li><p>If you don’t have any projects, create a new project and navigate to the directory of the newly created directory.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns create projectName</div><div class=\"line\">cd projectName</div></pre></td></tr></table></figure>\n</li>\n<li><p>If you want to create tests for an existing directory, navigate to the directory of the project.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd existingProjectDirectory</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p><strong>TIP:</strong> You don’t need to explicitly add the platforms for which you want to test your project. The NativeScript CLI will configure your project when you begin to run your tests.</p>\n</blockquote>\n<h2 id=\"Configure-Your-Project\"><a href=\"#Configure-Your-Project\" class=\"headerlink\" title=\"Configure Your Project\"></a>Configure Your Project</h2><p>The NativeScript CLI lets you choose between three widely popular unit testing frameworks: <a href=\"http://jasmine.github.io/\" target=\"_blank\" rel=\"external\">Jasmine</a>, <a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"external\">Mocha</a> with <a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai</a> and <a href=\"https://qunitjs.com/\" target=\"_blank\" rel=\"external\">QUnit</a>. You need to configure the project for unit testing by choosing a framework. You can use only framework at a time.</p>\n<p>To initialize your project for unit testing, run the following command and, when prompted, use the keyboard arrows to select the framework that you want to use.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test init</div></pre></td></tr></table></figure>\n<p>This operation applies the following changes to your project.</p>\n<ul>\n<li>It creates the <code>app/tests</code> directory. You need to store all tests in this directory. This directory is excluded from release builds.</li>\n<li>It creates an <code>example.js</code> file in the <code>app/tests</code> directory. This sample test illustrates the basic syntax for the selected framework.</li>\n<li>It installs the nativescript-unit-test-runner npm module for the selected framework and its dev dependencies in <code>node_modules</code>.</li>\n<li>It creates <code>karma.conf.js</code> in the root of your project. This file contains the default configuration for the Karma server for the selected framework.</li>\n</ul>\n<h2 id=\"Write-Your-Tests\"><a href=\"#Write-Your-Tests\" class=\"headerlink\" title=\"Write Your Tests\"></a>Write Your Tests</h2><p>With the NativeScript CLI, you can extensively test <strong>all JavaScript-related functionality</strong>. You cannot test styling and UI which are not applied or created via JavaScript.</p>\n<p>When creating tests for a new or existing functionality, keep in mind the following specifics.</p>\n<ul>\n<li>You need to create your tests as JavaScript files in the <code>app/tests</code> directory. The NativeScript CLI recognizes JavaScript files stored in <code>app/tests</code> as unit tests.</li>\n<li>You need to write tests which comply with the testing framework specification you have chosen for the project.</li>\n<li>You need to export the functionality that you want to test in the code of your NativeScript project.</li>\n<li>You need to require the module which exposes the functionality that you want to test in the code of your unit tests.</li>\n</ul>\n<p>When creating tests for a new or existing functionality, keep in mind the following limitations.</p>\n<ul>\n<li>You cannot require the file or module in which <code>application.start()</code> is called.</li>\n<li>You cannot use more than one testing framework per project.</li>\n<li>You cannot test styling and UI which are not applied or created via JavaScript.</li>\n</ul>\n<p>The following samples test the initial value of the counter and the message in the Hello World template. These tests show the specifics and limitations outlined above.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mainViewModel = require(&quot;../main-view-model&quot;); //Require the main view model to expose the functionality inside it.</div><div class=\"line\"></div><div class=\"line\">describe(&quot;Hello World Sample Test:&quot;, function() &#123;</div><div class=\"line\">  it(&quot;Check counter.&quot;, function() &#123;</div><div class=\"line\">    expect(mainViewModel.mainViewModel.counter).toEqual(42); //Check if the counter equals 42.</div><div class=\"line\">  &#125;);</div><div class=\"line\">  it(&quot;Check message.&quot;, function () &#123;</div><div class=\"line\">  \texpect(mainViewModel.mainViewModel.message).toBe(&quot;42 taps left&quot;); //Check if the message is &quot;42 taps left&quot;.</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mainViewModel = require(&quot;../main-view-model&quot;); //Require the main view model to expose the functionality inside it.</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Hello World Sample Test:&apos;, function () &#123;</div><div class=\"line\">\tit(&apos;Counter should be 42 on start.&apos;, function () &#123;</div><div class=\"line\">\t\tassert.equal(mainViewModel.mainViewModel.counter, 42); //Assert that the counter equals 42.</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tit(&apos;Message should be &quot;42 taps left&quot; on start.&apos;, function () &#123;</div><div class=\"line\">\t\tassert.equal(mainViewModel.mainViewModel.message, &quot;42 taps left&quot;); //Assert that the message is &quot;42 taps left&quot;.</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mainViewModel = require(&quot;../main-view-model&quot;); //Require the main view model to expose the functionality inside it.</div><div class=\"line\"></div><div class=\"line\">QUnit.test(&quot;Hello World Sample Test:&quot;, function (assert) &#123;</div><div class=\"line\">\tassert.equal( mainViewModel.mainViewModel.counter, 42, &quot;Counter, 42; equal succeeds.&quot; ); //Assert that the counter equals 42.</div><div class=\"line\">\tassert.equal( mainViewModel.mainViewModel.message, &quot;42 taps left&quot;, &quot;Message, 42 taps left; equal succeeds.&quot; ); //Assert that the message is &quot;42 taps left&quot;.</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Run-Your-Tests\"><a href=\"#Run-Your-Tests\" class=\"headerlink\" title=\"Run Your Tests\"></a>Run Your Tests</h2><p>After you have completed your test suite, you can run it on physical devices or in the native emulators.</p>\n<h3 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h3><p>Before running your tests, verify that your development machine and your testing devices meet the following prerequisites.</p>\n<ul>\n<li><p>The Android native emulators on which you want to run your tests must be running on your development machine. To verify that your machine recognizes the devices, run the following command.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns device</div></pre></td></tr></table></figure>\n</li>\n<li><p>The physical devices on which you want to run your tests must be connected to your development machine. To verify that your machine recognizes the devices, run the following command.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns device</div></pre></td></tr></table></figure>\n</li>\n<li><p>The physical devices on which you want to run your tests must be able to resolve the IP of your development machine. To verify that the device can access the Karma server, connect the device and the development machine to the same Wi-Fi network or establish USB or Bluetooth tethering between the device and the development machine.</p>\n</li>\n<li>Port 9876 must be allowed on your development machine. The Karma server uses this port to communicate with the testing device.</li>\n</ul>\n<h3 id=\"Run-the-Tests\"><a href=\"#Run-the-Tests\" class=\"headerlink\" title=\"Run the Tests\"></a>Run the Tests</h3><p>To execute your test suite on any connected Android devices or running Android emulators, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test android</div></pre></td></tr></table></figure>\n<p>To execute your test suite on connected iOS devices, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test ios</div></pre></td></tr></table></figure>\n<p>To execute your test suite in the iOS Simulator, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test ios --emulator</div></pre></td></tr></table></figure>\n<p>Each execution of <code>$ tns test</code> consists of the following steps, performed automatically.</p>\n<ol>\n<li>The CLI starts a Karma server on the development machine.</li>\n<li>The CLI prepares, builds and deploys your project, if not already deployed. If already deployed, the CLI synchronizes changes to the application package.</li>\n<li>The CLI embeds the NativeScript unit test runner and your host network and Karma configuration in the deployed package.</li>\n<li>The CLI launches the main module of the NativeScript unit test runner instead of launching the main module of your app.</li>\n<li>The NativeScript unit test runner uses the embedded network configuration to try to connect to the Karma server on the development machine.</li>\n<li>When the connection between the NativeScript unit test runner and the Karma server is established, the test runner begins the execution of the unit tests.</li>\n<li>When the execution completes, the NativeScript unit test runner reports the results to the Karma server.</li>\n<li>The Karma server reports the results on the command line. </li>\n</ol>\n<h3 id=\"Re-Run-Tests-on-Code-Change\"><a href=\"#Re-Run-Tests-on-Code-Change\" class=\"headerlink\" title=\"Re-Run Tests on Code Change\"></a>Re-Run Tests on Code Change</h3><p>The NativeScript can continuously monitor your code for changes and when such changes occur, it can deploy those changes to your testing devices and re-run your tests.</p>\n<p>To enable this behavior, run your <code>$ tns test</code> command with the <code>--watch</code> flag. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test android --watch</div><div class=\"line\">tns test ios --watch</div><div class=\"line\">tns test ios --emulator --watch</div></pre></td></tr></table></figure>\n<p>The NativeScript CLI remains active and re-runs tests on code change. To unlock the console, press <code>Ctrl+C</code> to stop the process. </p>\n<h3 id=\"Configure-the-Karma-Server\"><a href=\"#Configure-the-Karma-Server\" class=\"headerlink\" title=\"Configure the Karma Server\"></a>Configure the Karma Server</h3><p>When you configure your project for unit testing, the NativeScript CLI adds <code>karma.conf.js</code> to the root of your project. This file contains the default configuration of the Karma server, including default port and selected testing framework. You can edit this file to customize your Karma server.</p>\n<p>When you modify <code>karma.conf.js</code>, make sure that your changes meet the specification of the [Karma Configuration File][<a href=\"http://karma-runner.github.io/0.13/config/configuration-file.html\" target=\"_blank\" rel=\"external\">http://karma-runner.github.io/0.13/config/configuration-file.html</a>].</p>\n<h2 id=\"Continuous-Integration\"><a href=\"#Continuous-Integration\" class=\"headerlink\" title=\"Continuous Integration\"></a>Continuous Integration</h2><p>To integrate the NativeScript unit test runner into a continuous integration process, you need to configure a Karma reporter, for example, the <a href=\"https://github.com/karma-runner/karma-junit-reporter\" target=\"_blank\" rel=\"external\">JUnit reporter</a>.</p>\n","excerpt":"","more":"<h1 id=\"Unit-Testing\"><a href=\"#Unit-Testing\" class=\"headerlink\" title=\"Unit Testing\"></a>Unit Testing</h1><p>When you develop new features inside your app, you can ensure that they are working properly and that past functionality has not regressed by writing and executing unit tests on a regular basis. With the NativeScript CLI, you can write and execute unit tests using [Jasmine][<a href=\"http://jasmine.github.io/\">http://jasmine.github.io/</a>], [Mocha][<a href=\"https://mochajs.org/\">https://mochajs.org/</a>] with [Chai][<a href=\"http://chaijs.com/\">http://chaijs.com/</a>] or [QUnit][<a href=\"https://qunitjs.com/\">https://qunitjs.com/</a>].</p>\n<p>To run your unit tests, the NativeScript CLI uses [Karma][<a href=\"http://karma-runner.github.io/0.13/index.html\">http://karma-runner.github.io/0.13/index.html</a>].</p>\n<ul>\n<li><a href=\"#before-you-begin\">Before You Begin</a></li>\n<li><a href=\"#configure-your-project\">Configure Your Project</a></li>\n<li><a href=\"#write-your-tests\">Write Your Tests</a></li>\n<li><a href=\"#run-your-tests\">Run Your Tests</a><ul>\n<li><a href=\"#requirements\">Requirements</a></li>\n<li><a href=\"#run-the-tests\">Run the Tests</a></li>\n<li><a href=\"#re-run-tests-on-code-change\">Re-Run Tests on Code Change</a></li>\n<li><a href=\"#configure-the-karma-server\">Configure the Karma Server</a></li>\n</ul>\n</li>\n<li><a href=\"#continuous-integration\">Continuous Integration</a></li>\n</ul>\n<h2 id=\"Before-You-Begin\"><a href=\"#Before-You-Begin\" class=\"headerlink\" title=\"Before You Begin\"></a>Before You Begin</h2><p>Before writing and running unit tests, verify that you have completed the following steps.</p>\n<ol>\n<li><a href=\"#the-nativescript-cli\">Install and configure the NativeScript CLI on your system.</a></li>\n<li><p>If you don’t have any projects, create a new project and navigate to the directory of the newly created directory.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns create projectName</div><div class=\"line\">cd projectName</div></pre></td></tr></table></figure>\n</li>\n<li><p>If you want to create tests for an existing directory, navigate to the directory of the project.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd existingProjectDirectory</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p><strong>TIP:</strong> You don’t need to explicitly add the platforms for which you want to test your project. The NativeScript CLI will configure your project when you begin to run your tests.</p>\n</blockquote>\n<h2 id=\"Configure-Your-Project\"><a href=\"#Configure-Your-Project\" class=\"headerlink\" title=\"Configure Your Project\"></a>Configure Your Project</h2><p>The NativeScript CLI lets you choose between three widely popular unit testing frameworks: <a href=\"http://jasmine.github.io/\">Jasmine</a>, <a href=\"https://mochajs.org/\">Mocha</a> with <a href=\"http://chaijs.com/\">Chai</a> and <a href=\"https://qunitjs.com/\">QUnit</a>. You need to configure the project for unit testing by choosing a framework. You can use only framework at a time.</p>\n<p>To initialize your project for unit testing, run the following command and, when prompted, use the keyboard arrows to select the framework that you want to use.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test init</div></pre></td></tr></table></figure>\n<p>This operation applies the following changes to your project.</p>\n<ul>\n<li>It creates the <code>app/tests</code> directory. You need to store all tests in this directory. This directory is excluded from release builds.</li>\n<li>It creates an <code>example.js</code> file in the <code>app/tests</code> directory. This sample test illustrates the basic syntax for the selected framework.</li>\n<li>It installs the nativescript-unit-test-runner npm module for the selected framework and its dev dependencies in <code>node_modules</code>.</li>\n<li>It creates <code>karma.conf.js</code> in the root of your project. This file contains the default configuration for the Karma server for the selected framework.</li>\n</ul>\n<h2 id=\"Write-Your-Tests\"><a href=\"#Write-Your-Tests\" class=\"headerlink\" title=\"Write Your Tests\"></a>Write Your Tests</h2><p>With the NativeScript CLI, you can extensively test <strong>all JavaScript-related functionality</strong>. You cannot test styling and UI which are not applied or created via JavaScript.</p>\n<p>When creating tests for a new or existing functionality, keep in mind the following specifics.</p>\n<ul>\n<li>You need to create your tests as JavaScript files in the <code>app/tests</code> directory. The NativeScript CLI recognizes JavaScript files stored in <code>app/tests</code> as unit tests.</li>\n<li>You need to write tests which comply with the testing framework specification you have chosen for the project.</li>\n<li>You need to export the functionality that you want to test in the code of your NativeScript project.</li>\n<li>You need to require the module which exposes the functionality that you want to test in the code of your unit tests.</li>\n</ul>\n<p>When creating tests for a new or existing functionality, keep in mind the following limitations.</p>\n<ul>\n<li>You cannot require the file or module in which <code>application.start()</code> is called.</li>\n<li>You cannot use more than one testing framework per project.</li>\n<li>You cannot test styling and UI which are not applied or created via JavaScript.</li>\n</ul>\n<p>The following samples test the initial value of the counter and the message in the Hello World template. These tests show the specifics and limitations outlined above.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mainViewModel = require(&quot;../main-view-model&quot;); //Require the main view model to expose the functionality inside it.</div><div class=\"line\"></div><div class=\"line\">describe(&quot;Hello World Sample Test:&quot;, function() &#123;</div><div class=\"line\">  it(&quot;Check counter.&quot;, function() &#123;</div><div class=\"line\">    expect(mainViewModel.mainViewModel.counter).toEqual(42); //Check if the counter equals 42.</div><div class=\"line\">  &#125;);</div><div class=\"line\">  it(&quot;Check message.&quot;, function () &#123;</div><div class=\"line\">  \texpect(mainViewModel.mainViewModel.message).toBe(&quot;42 taps left&quot;); //Check if the message is &quot;42 taps left&quot;.</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mainViewModel = require(&quot;../main-view-model&quot;); //Require the main view model to expose the functionality inside it.</div><div class=\"line\"></div><div class=\"line\">describe(&apos;Hello World Sample Test:&apos;, function () &#123;</div><div class=\"line\">\tit(&apos;Counter should be 42 on start.&apos;, function () &#123;</div><div class=\"line\">\t\tassert.equal(mainViewModel.mainViewModel.counter, 42); //Assert that the counter equals 42.</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tit(&apos;Message should be &quot;42 taps left&quot; on start.&apos;, function () &#123;</div><div class=\"line\">\t\tassert.equal(mainViewModel.mainViewModel.message, &quot;42 taps left&quot;); //Assert that the message is &quot;42 taps left&quot;.</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mainViewModel = require(&quot;../main-view-model&quot;); //Require the main view model to expose the functionality inside it.</div><div class=\"line\"></div><div class=\"line\">QUnit.test(&quot;Hello World Sample Test:&quot;, function (assert) &#123;</div><div class=\"line\">\tassert.equal( mainViewModel.mainViewModel.counter, 42, &quot;Counter, 42; equal succeeds.&quot; ); //Assert that the counter equals 42.</div><div class=\"line\">\tassert.equal( mainViewModel.mainViewModel.message, &quot;42 taps left&quot;, &quot;Message, 42 taps left; equal succeeds.&quot; ); //Assert that the message is &quot;42 taps left&quot;.</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Run-Your-Tests\"><a href=\"#Run-Your-Tests\" class=\"headerlink\" title=\"Run Your Tests\"></a>Run Your Tests</h2><p>After you have completed your test suite, you can run it on physical devices or in the native emulators.</p>\n<h3 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h3><p>Before running your tests, verify that your development machine and your testing devices meet the following prerequisites.</p>\n<ul>\n<li><p>The Android native emulators on which you want to run your tests must be running on your development machine. To verify that your machine recognizes the devices, run the following command.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns device</div></pre></td></tr></table></figure>\n</li>\n<li><p>The physical devices on which you want to run your tests must be connected to your development machine. To verify that your machine recognizes the devices, run the following command.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns device</div></pre></td></tr></table></figure>\n</li>\n<li><p>The physical devices on which you want to run your tests must be able to resolve the IP of your development machine. To verify that the device can access the Karma server, connect the device and the development machine to the same Wi-Fi network or establish USB or Bluetooth tethering between the device and the development machine.</p>\n</li>\n<li>Port 9876 must be allowed on your development machine. The Karma server uses this port to communicate with the testing device.</li>\n</ul>\n<h3 id=\"Run-the-Tests\"><a href=\"#Run-the-Tests\" class=\"headerlink\" title=\"Run the Tests\"></a>Run the Tests</h3><p>To execute your test suite on any connected Android devices or running Android emulators, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test android</div></pre></td></tr></table></figure>\n<p>To execute your test suite on connected iOS devices, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test ios</div></pre></td></tr></table></figure>\n<p>To execute your test suite in the iOS Simulator, run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test ios --emulator</div></pre></td></tr></table></figure>\n<p>Each execution of <code>$ tns test</code> consists of the following steps, performed automatically.</p>\n<ol>\n<li>The CLI starts a Karma server on the development machine.</li>\n<li>The CLI prepares, builds and deploys your project, if not already deployed. If already deployed, the CLI synchronizes changes to the application package.</li>\n<li>The CLI embeds the NativeScript unit test runner and your host network and Karma configuration in the deployed package.</li>\n<li>The CLI launches the main module of the NativeScript unit test runner instead of launching the main module of your app.</li>\n<li>The NativeScript unit test runner uses the embedded network configuration to try to connect to the Karma server on the development machine.</li>\n<li>When the connection between the NativeScript unit test runner and the Karma server is established, the test runner begins the execution of the unit tests.</li>\n<li>When the execution completes, the NativeScript unit test runner reports the results to the Karma server.</li>\n<li>The Karma server reports the results on the command line. </li>\n</ol>\n<h3 id=\"Re-Run-Tests-on-Code-Change\"><a href=\"#Re-Run-Tests-on-Code-Change\" class=\"headerlink\" title=\"Re-Run Tests on Code Change\"></a>Re-Run Tests on Code Change</h3><p>The NativeScript can continuously monitor your code for changes and when such changes occur, it can deploy those changes to your testing devices and re-run your tests.</p>\n<p>To enable this behavior, run your <code>$ tns test</code> command with the <code>--watch</code> flag. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns test android --watch</div><div class=\"line\">tns test ios --watch</div><div class=\"line\">tns test ios --emulator --watch</div></pre></td></tr></table></figure>\n<p>The NativeScript CLI remains active and re-runs tests on code change. To unlock the console, press <code>Ctrl+C</code> to stop the process. </p>\n<h3 id=\"Configure-the-Karma-Server\"><a href=\"#Configure-the-Karma-Server\" class=\"headerlink\" title=\"Configure the Karma Server\"></a>Configure the Karma Server</h3><p>When you configure your project for unit testing, the NativeScript CLI adds <code>karma.conf.js</code> to the root of your project. This file contains the default configuration of the Karma server, including default port and selected testing framework. You can edit this file to customize your Karma server.</p>\n<p>When you modify <code>karma.conf.js</code>, make sure that your changes meet the specification of the [Karma Configuration File][<a href=\"http://karma-runner.github.io/0.13/config/configuration-file.html\">http://karma-runner.github.io/0.13/config/configuration-file.html</a>].</p>\n<h2 id=\"Continuous-Integration\"><a href=\"#Continuous-Integration\" class=\"headerlink\" title=\"Continuous Integration\"></a>Continuous Integration</h2><p>To integrate the NativeScript unit test runner into a continuous integration process, you need to configure a Karma reporter, for example, the <a href=\"https://github.com/karma-runner/karma-junit-reporter\">JUnit reporter</a>.</p>\n"},{"title":"Transpilers","description":"Learn how to enable TypeScript and other transpiler support in your project.","position":9,"slug":"transpilers","previous_url":"/transpilers","_content":"\n# Using transpilers in NativeScript\n\nTranspilers allow you to develop your application in languages other than JavaScript, CSS and XML. NativeScript applications can be developed more comfortably when transpilers are used in the project. NativeScript projects support two transpilers out-of-the-box - TypeScript and Babel, although any other transpiler can be integrated through the necessary hooks.\n\n## Installing TypeScript\n\nRun the following command to install TypeScript support into your project:\n\n```Shell\ntns install typescript\n```\n\nThe above command installs the TypeScript compiler and the `nativescript-dev-typescript` npm module as dev dependencies. The latter installs the necessary `prepare` and `livesync` hooks into your project, so that the TypeScript files in your project are automatically transpiled during build and when live-syncing.\n\nIt also creates a `tsconfig.json` file in the root of your project that contains the compiler configuration. You can edit it to change the configuration.\n\nIf you want to change the version of the TypeScript compiler used in your project, simply install the version you want into your project through npm.\n\n## Installing Babel\n\nRun the following command to install Babel support into your project:\n\n```Shell\ntns install babel\n```\n\nThe above command installs the Babel compiler and the `nativescript-dev-babel` npm module as a dev dependencies. The latter installs a `prepare` hook into your project, that transpiles your JavaScript files with Babel during build and when live-syncing.\n\nIf you want to change the version of the Babel compiler used in your project, simply install the version you want into your project through npm.\n\nIf you want to configure Babel, create a `.babelrc` file in the root of your project according to [spec](https://babeljs.io/docs/usage/babelrc/).\n\n## Installing other transpilers\n\nTranspiler support can be extended through the use of hooks. The easiest way to distribute transpiler hooks is by means of npm modules. You can use the implementation of the TypeScript and Babel hooks as reference and grok the [nativescript-hook module](https://github.com/NativeScript/nativescript-hook) that provides common hook installation support to transpiler authors.","source":"workflow/transpilers.md","raw":"---\ntitle: Transpilers\ndescription: Learn how to enable TypeScript and other transpiler support in your project.\nposition: 9\nslug: transpilers\nprevious_url: /transpilers\n---\n\n# Using transpilers in NativeScript\n\nTranspilers allow you to develop your application in languages other than JavaScript, CSS and XML. NativeScript applications can be developed more comfortably when transpilers are used in the project. NativeScript projects support two transpilers out-of-the-box - TypeScript and Babel, although any other transpiler can be integrated through the necessary hooks.\n\n## Installing TypeScript\n\nRun the following command to install TypeScript support into your project:\n\n```Shell\ntns install typescript\n```\n\nThe above command installs the TypeScript compiler and the `nativescript-dev-typescript` npm module as dev dependencies. The latter installs the necessary `prepare` and `livesync` hooks into your project, so that the TypeScript files in your project are automatically transpiled during build and when live-syncing.\n\nIt also creates a `tsconfig.json` file in the root of your project that contains the compiler configuration. You can edit it to change the configuration.\n\nIf you want to change the version of the TypeScript compiler used in your project, simply install the version you want into your project through npm.\n\n## Installing Babel\n\nRun the following command to install Babel support into your project:\n\n```Shell\ntns install babel\n```\n\nThe above command installs the Babel compiler and the `nativescript-dev-babel` npm module as a dev dependencies. The latter installs a `prepare` hook into your project, that transpiles your JavaScript files with Babel during build and when live-syncing.\n\nIf you want to change the version of the Babel compiler used in your project, simply install the version you want into your project through npm.\n\nIf you want to configure Babel, create a `.babelrc` file in the root of your project according to [spec](https://babeljs.io/docs/usage/babelrc/).\n\n## Installing other transpilers\n\nTranspiler support can be extended through the use of hooks. The easiest way to distribute transpiler hooks is by means of npm modules. You can use the implementation of the TypeScript and Babel hooks as reference and grok the [nativescript-hook module](https://github.com/NativeScript/nativescript-hook) that provides common hook installation support to transpiler authors.","date":"2016-08-26T21:05:54.642Z","updated":"2016-08-26T21:05:54.642Z","path":"workflow/transpilers.html","comments":1,"layout":"page","_id":"cisn95cb6001fwsl067u4vd2x","content":"<h1 id=\"Using-transpilers-in-NativeScript\"><a href=\"#Using-transpilers-in-NativeScript\" class=\"headerlink\" title=\"Using transpilers in NativeScript\"></a>Using transpilers in NativeScript</h1><p>Transpilers allow you to develop your application in languages other than JavaScript, CSS and XML. NativeScript applications can be developed more comfortably when transpilers are used in the project. NativeScript projects support two transpilers out-of-the-box - TypeScript and Babel, although any other transpiler can be integrated through the necessary hooks.</p>\n<h2 id=\"Installing-TypeScript\"><a href=\"#Installing-TypeScript\" class=\"headerlink\" title=\"Installing TypeScript\"></a>Installing TypeScript</h2><p>Run the following command to install TypeScript support into your project:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns install typescript</div></pre></td></tr></table></figure>\n<p>The above command installs the TypeScript compiler and the <code>nativescript-dev-typescript</code> npm module as dev dependencies. The latter installs the necessary <code>prepare</code> and <code>livesync</code> hooks into your project, so that the TypeScript files in your project are automatically transpiled during build and when live-syncing.</p>\n<p>It also creates a <code>tsconfig.json</code> file in the root of your project that contains the compiler configuration. You can edit it to change the configuration.</p>\n<p>If you want to change the version of the TypeScript compiler used in your project, simply install the version you want into your project through npm.</p>\n<h2 id=\"Installing-Babel\"><a href=\"#Installing-Babel\" class=\"headerlink\" title=\"Installing Babel\"></a>Installing Babel</h2><p>Run the following command to install Babel support into your project:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns install babel</div></pre></td></tr></table></figure>\n<p>The above command installs the Babel compiler and the <code>nativescript-dev-babel</code> npm module as a dev dependencies. The latter installs a <code>prepare</code> hook into your project, that transpiles your JavaScript files with Babel during build and when live-syncing.</p>\n<p>If you want to change the version of the Babel compiler used in your project, simply install the version you want into your project through npm.</p>\n<p>If you want to configure Babel, create a <code>.babelrc</code> file in the root of your project according to <a href=\"https://babeljs.io/docs/usage/babelrc/\" target=\"_blank\" rel=\"external\">spec</a>.</p>\n<h2 id=\"Installing-other-transpilers\"><a href=\"#Installing-other-transpilers\" class=\"headerlink\" title=\"Installing other transpilers\"></a>Installing other transpilers</h2><p>Transpiler support can be extended through the use of hooks. The easiest way to distribute transpiler hooks is by means of npm modules. You can use the implementation of the TypeScript and Babel hooks as reference and grok the <a href=\"https://github.com/NativeScript/nativescript-hook\" target=\"_blank\" rel=\"external\">nativescript-hook module</a> that provides common hook installation support to transpiler authors.</p>\n","excerpt":"","more":"<h1 id=\"Using-transpilers-in-NativeScript\"><a href=\"#Using-transpilers-in-NativeScript\" class=\"headerlink\" title=\"Using transpilers in NativeScript\"></a>Using transpilers in NativeScript</h1><p>Transpilers allow you to develop your application in languages other than JavaScript, CSS and XML. NativeScript applications can be developed more comfortably when transpilers are used in the project. NativeScript projects support two transpilers out-of-the-box - TypeScript and Babel, although any other transpiler can be integrated through the necessary hooks.</p>\n<h2 id=\"Installing-TypeScript\"><a href=\"#Installing-TypeScript\" class=\"headerlink\" title=\"Installing TypeScript\"></a>Installing TypeScript</h2><p>Run the following command to install TypeScript support into your project:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns install typescript</div></pre></td></tr></table></figure>\n<p>The above command installs the TypeScript compiler and the <code>nativescript-dev-typescript</code> npm module as dev dependencies. The latter installs the necessary <code>prepare</code> and <code>livesync</code> hooks into your project, so that the TypeScript files in your project are automatically transpiled during build and when live-syncing.</p>\n<p>It also creates a <code>tsconfig.json</code> file in the root of your project that contains the compiler configuration. You can edit it to change the configuration.</p>\n<p>If you want to change the version of the TypeScript compiler used in your project, simply install the version you want into your project through npm.</p>\n<h2 id=\"Installing-Babel\"><a href=\"#Installing-Babel\" class=\"headerlink\" title=\"Installing Babel\"></a>Installing Babel</h2><p>Run the following command to install Babel support into your project:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tns install babel</div></pre></td></tr></table></figure>\n<p>The above command installs the Babel compiler and the <code>nativescript-dev-babel</code> npm module as a dev dependencies. The latter installs a <code>prepare</code> hook into your project, that transpiles your JavaScript files with Babel during build and when live-syncing.</p>\n<p>If you want to change the version of the Babel compiler used in your project, simply install the version you want into your project through npm.</p>\n<p>If you want to configure Babel, create a <code>.babelrc</code> file in the root of your project according to <a href=\"https://babeljs.io/docs/usage/babelrc/\">spec</a>.</p>\n<h2 id=\"Installing-other-transpilers\"><a href=\"#Installing-other-transpilers\" class=\"headerlink\" title=\"Installing other transpilers\"></a>Installing other transpilers</h2><p>Transpiler support can be extended through the use of hooks. The easiest way to distribute transpiler hooks is by means of npm modules. You can use the implementation of the TypeScript and Babel hooks as reference and grok the <a href=\"https://github.com/NativeScript/nativescript-hook\">nativescript-hook module</a> that provides common hook installation support to transpiler authors.</p>\n"},{"title":"NativeScript Extension for Visual Studio Code","description":"How to install, set up and use the NativeScript extension for Visual Studio Code.","position":12,"slug":"nativescript-extension-for-visual-studio-code","_content":"\n# NativeScript Extension for Visual Studio Code\n\n1. [Installation](#installation)\n2. [Debugging](#debugging)\n  1. [Generate launch configurations](#generate-launch-configurations)\n  2. [Launch an application with debugger](#launch-an-application-with-debugger)\n  3. [Attach the debugger to an already running app](#attach-the-debugger-to-an-already-running-app)\n  4. [Debug TypeScript](#debug-typescript)\n  5. [Supply additional arguments to the debug command](#supply-additional-arguments-to-the-debug-command)\n  6. [Turn on debugging protocol diagnostic logging](#turn-on-diagnostic-logging)\n3. [Use NativeScript-specific commands](#use-nativescript-specific-commands)\n4. [NativeScript CLI version detection](#nativescript-cli-version-detection)\n\n## Installation\n\nTo install the [NativeScript extension for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript) open the Command Palette (`F1` or `Cmd+Shift+P`) and run `Extensions: Install Extension` command, then search for 'NativeScript' and choose it from the list.\n\n### Figure 1: How to install NativeScript extention for Visual Studio Code.\n![Installing the NativeScript extension for Visual Studio Code](../docs/img/visual-studio-code-extension/install.png)\n\nAfter the installation completes, the extension appears in the list of installed extensions. You can see it if you run `Extensions: Show Installed Extensions` command from the Command Palette.\n\n## Debugging\n\nOpen your application root folder, created with the `tns create` command, in Visual Studio Code.\n\n### Generate launch configurations\n\nClick the debugging icon ![VS Code debug panel](../docs/img/visual-studio-code-extension/debug-panel.png) in the View bar, and then click the gear icon ![gear icon](../docs/img/visual-studio-code-extension/gear-icon.png) to choose the NativeScript debug environment. A `launch.json` file should be generated in your `.vscode` folder located next to the `app` folder. The configurations, described in `launch.json`, can be selected from the menu in the Debug Panel.\n\n### Figure 2: How to debug application via Visual Studio Code.\n![Installing NativeScript extension for Visual Studio Code](../img/visual-studio-code-extension/configurations-menu.png)\n\n### Launch an application with the debugger\n\nChoose one of the launch configurations (e.g., `Launch on iOS Emulator`) and press the `Start` button next to the menu. This will run your app in the iOS emulator and attach the VS Code debugger. The app should break on the first JavaScript/TypeScript statement. You can find more information about the debugging support in VS Code in the [VS Code Debugging Guide](https://code.visualstudio.com/docs/editor/debugging).\n\n### Figure 3: Attach the debugger without rebuilding the application.\n![NativeScript Debugging](../img/visual-studio-code-extension/nativescript-debugging.png)\n\n### Attach the debugger to an already running app\n\nIf you already have a NativeScript application running your Android or iOS emulator or device, you can attach the VS Code debugger to it, without rebuilding and restarting the application. Just select the desired attach configuration through the debug configuration menu and press the start button.\n\n### Debug TypeScript\n\nIf you are writing your app in TypeScript, you have fully functional debugging support in Visual Studio Code. To debug TypeScript, make sure the TS compiler is producing source maps by setting `\"sourceMap\": true\"` in your `tsconfig.json`.\n\n> Using the [TypeScript plugin for NativeScript](https://github.com/NativeScript/nativescript-dev-typescript) is strongly recommended instead of manually setting up the TypeScript compiler options and build tasks. The plugin handles the creation of all the configuration settings and guarantees smooth integration with Visual Studio Code.\n\n### Supply additional arguments to the debug command\n\nUnder the hood, starting a particular debug configuration executes the `tns debug` command with various arguments. You can append additional arguments by supplying them in the `tnsArgs` property of a debug configuration definition in `launch.json`. For example, if you add `\"tnsArgs\": \"--log=trace\"` in the `Launch on iOS Emulator` configuration, in the background VS Code will execute the `tns debug ios --emulator --no-client --log=trace` command, which will give you more verbose information in the Debug Console.\n\n### Figure 4: Adding additional command while debugging.\n![Supply custom arguments to the debug command](../img/visual-studio-code-extension/nativescript-tns-args.png)\n\n### Turn on diagnostic logging\n\nIf the `diagnosticLogging` flag for a particular debug configuration in `launch.json` file is set to `true` (its default value is `false`), diagnostic messages will be logged on the debugger console after attaching the debugger to the NativeScript application. This is useful for rough debugging of the extension itself, because all sent/received messages that are part of the communication between the frontend and the backend are logged.\n\n## Use NativeScript-specific commands\n\nType `nativescript` in the Command Palette and you will see all NativeScript-specific commands. Currently there are only two of them but the list will grow in the future.\n\n### Figure 5: Using NativeScript-specific commands directly from Visual Studio Code .\n![NativeScript commands](../img/visual-studio-code-extension/nativescript-commands.png)\n\nThe Run command is the equivalent to `tns run` in the NativeScript CLI. It lets you build, deploy and run your app on an emulator/device directly from Visual Studio Code.\n\n## NativeScript CLI version detection\n\nThe extension depends on a globally installed NativeScript CLI. It will show an error message if it can't find it.\n\n### Figure 6: Handle NativeScript's error for extensions builded for specific NativeScript CLI.\n![NativeScript not found](../img/visual-studio-code-extension/nativescript-not-found-error-message.png)\n\n> The extension requires a specific NativeScript CLI version and if you have another version installed, you will see a warning message. The extension is likely to work with the unsupported version but it is recommended that you update the NativeScript CLI or the VS Code extension.\n","source":"workflow/visual-studio-code-extension.md","raw":"---\ntitle: NativeScript Extension for Visual Studio Code\ndescription: How to install, set up and use the NativeScript extension for Visual Studio Code.\nposition: 12\nslug: nativescript-extension-for-visual-studio-code\n---\n\n# NativeScript Extension for Visual Studio Code\n\n1. [Installation](#installation)\n2. [Debugging](#debugging)\n  1. [Generate launch configurations](#generate-launch-configurations)\n  2. [Launch an application with debugger](#launch-an-application-with-debugger)\n  3. [Attach the debugger to an already running app](#attach-the-debugger-to-an-already-running-app)\n  4. [Debug TypeScript](#debug-typescript)\n  5. [Supply additional arguments to the debug command](#supply-additional-arguments-to-the-debug-command)\n  6. [Turn on debugging protocol diagnostic logging](#turn-on-diagnostic-logging)\n3. [Use NativeScript-specific commands](#use-nativescript-specific-commands)\n4. [NativeScript CLI version detection](#nativescript-cli-version-detection)\n\n## Installation\n\nTo install the [NativeScript extension for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript) open the Command Palette (`F1` or `Cmd+Shift+P`) and run `Extensions: Install Extension` command, then search for 'NativeScript' and choose it from the list.\n\n### Figure 1: How to install NativeScript extention for Visual Studio Code.\n![Installing the NativeScript extension for Visual Studio Code](../img/visual-studio-code-extension/install.png)\n\nAfter the installation completes, the extension appears in the list of installed extensions. You can see it if you run `Extensions: Show Installed Extensions` command from the Command Palette.\n\n## Debugging\n\nOpen your application root folder, created with the `tns create` command, in Visual Studio Code.\n\n### Generate launch configurations\n\nClick the debugging icon ![VS Code debug panel](../img/visual-studio-code-extension/debug-panel.png) in the View bar, and then click the gear icon ![gear icon](../img/visual-studio-code-extension/gear-icon.png) to choose the NativeScript debug environment. A `launch.json` file should be generated in your `.vscode` folder located next to the `app` folder. The configurations, described in `launch.json`, can be selected from the menu in the Debug Panel.\n\n### Figure 2: How to debug application via Visual Studio Code.\n![Installing NativeScript extension for Visual Studio Code](../img/visual-studio-code-extension/configurations-menu.png)\n\n### Launch an application with the debugger\n\nChoose one of the launch configurations (e.g., `Launch on iOS Emulator`) and press the `Start` button next to the menu. This will run your app in the iOS emulator and attach the VS Code debugger. The app should break on the first JavaScript/TypeScript statement. You can find more information about the debugging support in VS Code in the [VS Code Debugging Guide](https://code.visualstudio.com/docs/editor/debugging).\n\n### Figure 3: Attach the debugger without rebuilding the application.\n![NativeScript Debugging](../img/visual-studio-code-extension/nativescript-debugging.png)\n\n### Attach the debugger to an already running app\n\nIf you already have a NativeScript application running your Android or iOS emulator or device, you can attach the VS Code debugger to it, without rebuilding and restarting the application. Just select the desired attach configuration through the debug configuration menu and press the start button.\n\n### Debug TypeScript\n\nIf you are writing your app in TypeScript, you have fully functional debugging support in Visual Studio Code. To debug TypeScript, make sure the TS compiler is producing source maps by setting `\"sourceMap\": true\"` in your `tsconfig.json`.\n\n> Using the [TypeScript plugin for NativeScript](https://github.com/NativeScript/nativescript-dev-typescript) is strongly recommended instead of manually setting up the TypeScript compiler options and build tasks. The plugin handles the creation of all the configuration settings and guarantees smooth integration with Visual Studio Code.\n\n### Supply additional arguments to the debug command\n\nUnder the hood, starting a particular debug configuration executes the `tns debug` command with various arguments. You can append additional arguments by supplying them in the `tnsArgs` property of a debug configuration definition in `launch.json`. For example, if you add `\"tnsArgs\": \"--log=trace\"` in the `Launch on iOS Emulator` configuration, in the background VS Code will execute the `tns debug ios --emulator --no-client --log=trace` command, which will give you more verbose information in the Debug Console.\n\n### Figure 4: Adding additional command while debugging.\n![Supply custom arguments to the debug command](../img/visual-studio-code-extension/nativescript-tns-args.png)\n\n### Turn on diagnostic logging\n\nIf the `diagnosticLogging` flag for a particular debug configuration in `launch.json` file is set to `true` (its default value is `false`), diagnostic messages will be logged on the debugger console after attaching the debugger to the NativeScript application. This is useful for rough debugging of the extension itself, because all sent/received messages that are part of the communication between the frontend and the backend are logged.\n\n## Use NativeScript-specific commands\n\nType `nativescript` in the Command Palette and you will see all NativeScript-specific commands. Currently there are only two of them but the list will grow in the future.\n\n### Figure 5: Using NativeScript-specific commands directly from Visual Studio Code .\n![NativeScript commands](../img/visual-studio-code-extension/nativescript-commands.png)\n\nThe Run command is the equivalent to `tns run` in the NativeScript CLI. It lets you build, deploy and run your app on an emulator/device directly from Visual Studio Code.\n\n## NativeScript CLI version detection\n\nThe extension depends on a globally installed NativeScript CLI. It will show an error message if it can't find it.\n\n### Figure 6: Handle NativeScript's error for extensions builded for specific NativeScript CLI.\n![NativeScript not found](../img/visual-studio-code-extension/nativescript-not-found-error-message.png)\n\n> The extension requires a specific NativeScript CLI version and if you have another version installed, you will see a warning message. The extension is likely to work with the unsupported version but it is recommended that you update the NativeScript CLI or the VS Code extension.\n","date":"2016-08-26T21:05:54.643Z","updated":"2016-08-26T21:05:54.643Z","path":"workflow/visual-studio-code-extension.html","comments":1,"layout":"page","_id":"cisn95cb7001gwsl01bdp2eoh","content":"<h1 id=\"NativeScript-Extension-for-Visual-Studio-Code\"><a href=\"#NativeScript-Extension-for-Visual-Studio-Code\" class=\"headerlink\" title=\"NativeScript Extension for Visual Studio Code\"></a>NativeScript Extension for Visual Studio Code</h1><ol>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#debugging\">Debugging</a><ol>\n<li><a href=\"#generate-launch-configurations\">Generate launch configurations</a></li>\n<li><a href=\"#launch-an-application-with-debugger\">Launch an application with debugger</a></li>\n<li><a href=\"#attach-the-debugger-to-an-already-running-app\">Attach the debugger to an already running app</a></li>\n<li><a href=\"#debug-typescript\">Debug TypeScript</a></li>\n<li><a href=\"#supply-additional-arguments-to-the-debug-command\">Supply additional arguments to the debug command</a></li>\n<li><a href=\"#turn-on-diagnostic-logging\">Turn on debugging protocol diagnostic logging</a></li>\n</ol>\n</li>\n<li><a href=\"#use-nativescript-specific-commands\">Use NativeScript-specific commands</a></li>\n<li><a href=\"#nativescript-cli-version-detection\">NativeScript CLI version detection</a></li>\n</ol>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>To install the <a href=\"https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript\" target=\"_blank\" rel=\"external\">NativeScript extension for Visual Studio Code</a> open the Command Palette (<code>F1</code> or <code>Cmd+Shift+P</code>) and run <code>Extensions: Install Extension</code> command, then search for ‘NativeScript’ and choose it from the list.</p>\n<h3 id=\"Figure-1-How-to-install-NativeScript-extention-for-Visual-Studio-Code\"><a href=\"#Figure-1-How-to-install-NativeScript-extention-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Figure 1: How to install NativeScript extention for Visual Studio Code.\"></a>Figure 1: How to install NativeScript extention for Visual Studio Code.</h3><p><img src=\"../img/visual-studio-code-extension/install.png\" alt=\"Installing the NativeScript extension for Visual Studio Code\"></p>\n<p>After the installation completes, the extension appears in the list of installed extensions. You can see it if you run <code>Extensions: Show Installed Extensions</code> command from the Command Palette.</p>\n<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h2><p>Open your application root folder, created with the <code>tns create</code> command, in Visual Studio Code.</p>\n<h3 id=\"Generate-launch-configurations\"><a href=\"#Generate-launch-configurations\" class=\"headerlink\" title=\"Generate launch configurations\"></a>Generate launch configurations</h3><p>Click the debugging icon <img src=\"../img/visual-studio-code-extension/debug-panel.png\" alt=\"VS Code debug panel\"> in the View bar, and then click the gear icon <img src=\"../img/visual-studio-code-extension/gear-icon.png\" alt=\"gear icon\"> to choose the NativeScript debug environment. A <code>launch.json</code> file should be generated in your <code>.vscode</code> folder located next to the <code>app</code> folder. The configurations, described in <code>launch.json</code>, can be selected from the menu in the Debug Panel.</p>\n<h3 id=\"Figure-2-How-to-debug-application-via-Visual-Studio-Code\"><a href=\"#Figure-2-How-to-debug-application-via-Visual-Studio-Code\" class=\"headerlink\" title=\"Figure 2: How to debug application via Visual Studio Code.\"></a>Figure 2: How to debug application via Visual Studio Code.</h3><p><img src=\"../img/visual-studio-code-extension/configurations-menu.png\" alt=\"Installing NativeScript extension for Visual Studio Code\"></p>\n<h3 id=\"Launch-an-application-with-the-debugger\"><a href=\"#Launch-an-application-with-the-debugger\" class=\"headerlink\" title=\"Launch an application with the debugger\"></a>Launch an application with the debugger</h3><p>Choose one of the launch configurations (e.g., <code>Launch on iOS Emulator</code>) and press the <code>Start</code> button next to the menu. This will run your app in the iOS emulator and attach the VS Code debugger. The app should break on the first JavaScript/TypeScript statement. You can find more information about the debugging support in VS Code in the <a href=\"https://code.visualstudio.com/docs/editor/debugging\" target=\"_blank\" rel=\"external\">VS Code Debugging Guide</a>.</p>\n<h3 id=\"Figure-3-Attach-the-debugger-without-rebuilding-the-application\"><a href=\"#Figure-3-Attach-the-debugger-without-rebuilding-the-application\" class=\"headerlink\" title=\"Figure 3: Attach the debugger without rebuilding the application.\"></a>Figure 3: Attach the debugger without rebuilding the application.</h3><p><img src=\"../img/visual-studio-code-extension/nativescript-debugging.png\" alt=\"NativeScript Debugging\"></p>\n<h3 id=\"Attach-the-debugger-to-an-already-running-app\"><a href=\"#Attach-the-debugger-to-an-already-running-app\" class=\"headerlink\" title=\"Attach the debugger to an already running app\"></a>Attach the debugger to an already running app</h3><p>If you already have a NativeScript application running your Android or iOS emulator or device, you can attach the VS Code debugger to it, without rebuilding and restarting the application. Just select the desired attach configuration through the debug configuration menu and press the start button.</p>\n<h3 id=\"Debug-TypeScript\"><a href=\"#Debug-TypeScript\" class=\"headerlink\" title=\"Debug TypeScript\"></a>Debug TypeScript</h3><p>If you are writing your app in TypeScript, you have fully functional debugging support in Visual Studio Code. To debug TypeScript, make sure the TS compiler is producing source maps by setting <code>&quot;sourceMap&quot;: true&quot;</code> in your <code>tsconfig.json</code>.</p>\n<blockquote>\n<p>Using the <a href=\"https://github.com/NativeScript/nativescript-dev-typescript\" target=\"_blank\" rel=\"external\">TypeScript plugin for NativeScript</a> is strongly recommended instead of manually setting up the TypeScript compiler options and build tasks. The plugin handles the creation of all the configuration settings and guarantees smooth integration with Visual Studio Code.</p>\n</blockquote>\n<h3 id=\"Supply-additional-arguments-to-the-debug-command\"><a href=\"#Supply-additional-arguments-to-the-debug-command\" class=\"headerlink\" title=\"Supply additional arguments to the debug command\"></a>Supply additional arguments to the debug command</h3><p>Under the hood, starting a particular debug configuration executes the <code>tns debug</code> command with various arguments. You can append additional arguments by supplying them in the <code>tnsArgs</code> property of a debug configuration definition in <code>launch.json</code>. For example, if you add <code>&quot;tnsArgs&quot;: &quot;--log=trace&quot;</code> in the <code>Launch on iOS Emulator</code> configuration, in the background VS Code will execute the <code>tns debug ios --emulator --no-client --log=trace</code> command, which will give you more verbose information in the Debug Console.</p>\n<h3 id=\"Figure-4-Adding-additional-command-while-debugging\"><a href=\"#Figure-4-Adding-additional-command-while-debugging\" class=\"headerlink\" title=\"Figure 4: Adding additional command while debugging.\"></a>Figure 4: Adding additional command while debugging.</h3><p><img src=\"../img/visual-studio-code-extension/nativescript-tns-args.png\" alt=\"Supply custom arguments to the debug command\"></p>\n<h3 id=\"Turn-on-diagnostic-logging\"><a href=\"#Turn-on-diagnostic-logging\" class=\"headerlink\" title=\"Turn on diagnostic logging\"></a>Turn on diagnostic logging</h3><p>If the <code>diagnosticLogging</code> flag for a particular debug configuration in <code>launch.json</code> file is set to <code>true</code> (its default value is <code>false</code>), diagnostic messages will be logged on the debugger console after attaching the debugger to the NativeScript application. This is useful for rough debugging of the extension itself, because all sent/received messages that are part of the communication between the frontend and the backend are logged.</p>\n<h2 id=\"Use-NativeScript-specific-commands\"><a href=\"#Use-NativeScript-specific-commands\" class=\"headerlink\" title=\"Use NativeScript-specific commands\"></a>Use NativeScript-specific commands</h2><p>Type <code>nativescript</code> in the Command Palette and you will see all NativeScript-specific commands. Currently there are only two of them but the list will grow in the future.</p>\n<h3 id=\"Figure-5-Using-NativeScript-specific-commands-directly-from-Visual-Studio-Code\"><a href=\"#Figure-5-Using-NativeScript-specific-commands-directly-from-Visual-Studio-Code\" class=\"headerlink\" title=\"Figure 5: Using NativeScript-specific commands directly from Visual Studio Code .\"></a>Figure 5: Using NativeScript-specific commands directly from Visual Studio Code .</h3><p><img src=\"../img/visual-studio-code-extension/nativescript-commands.png\" alt=\"NativeScript commands\"></p>\n<p>The Run command is the equivalent to <code>tns run</code> in the NativeScript CLI. It lets you build, deploy and run your app on an emulator/device directly from Visual Studio Code.</p>\n<h2 id=\"NativeScript-CLI-version-detection\"><a href=\"#NativeScript-CLI-version-detection\" class=\"headerlink\" title=\"NativeScript CLI version detection\"></a>NativeScript CLI version detection</h2><p>The extension depends on a globally installed NativeScript CLI. It will show an error message if it can’t find it.</p>\n<h3 id=\"Figure-6-Handle-NativeScript’s-error-for-extensions-builded-for-specific-NativeScript-CLI\"><a href=\"#Figure-6-Handle-NativeScript’s-error-for-extensions-builded-for-specific-NativeScript-CLI\" class=\"headerlink\" title=\"Figure 6: Handle NativeScript’s error for extensions builded for specific NativeScript CLI.\"></a>Figure 6: Handle NativeScript’s error for extensions builded for specific NativeScript CLI.</h3><p><img src=\"../img/visual-studio-code-extension/nativescript-not-found-error-message.png\" alt=\"NativeScript not found\"></p>\n<blockquote>\n<p>The extension requires a specific NativeScript CLI version and if you have another version installed, you will see a warning message. The extension is likely to work with the unsupported version but it is recommended that you update the NativeScript CLI or the VS Code extension.</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"NativeScript-Extension-for-Visual-Studio-Code\"><a href=\"#NativeScript-Extension-for-Visual-Studio-Code\" class=\"headerlink\" title=\"NativeScript Extension for Visual Studio Code\"></a>NativeScript Extension for Visual Studio Code</h1><ol>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#debugging\">Debugging</a><ol>\n<li><a href=\"#generate-launch-configurations\">Generate launch configurations</a></li>\n<li><a href=\"#launch-an-application-with-debugger\">Launch an application with debugger</a></li>\n<li><a href=\"#attach-the-debugger-to-an-already-running-app\">Attach the debugger to an already running app</a></li>\n<li><a href=\"#debug-typescript\">Debug TypeScript</a></li>\n<li><a href=\"#supply-additional-arguments-to-the-debug-command\">Supply additional arguments to the debug command</a></li>\n<li><a href=\"#turn-on-diagnostic-logging\">Turn on debugging protocol diagnostic logging</a></li>\n</ol>\n</li>\n<li><a href=\"#use-nativescript-specific-commands\">Use NativeScript-specific commands</a></li>\n<li><a href=\"#nativescript-cli-version-detection\">NativeScript CLI version detection</a></li>\n</ol>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>To install the <a href=\"https://marketplace.visualstudio.com/items?itemName=Telerik.nativescript\">NativeScript extension for Visual Studio Code</a> open the Command Palette (<code>F1</code> or <code>Cmd+Shift+P</code>) and run <code>Extensions: Install Extension</code> command, then search for ‘NativeScript’ and choose it from the list.</p>\n<h3 id=\"Figure-1-How-to-install-NativeScript-extention-for-Visual-Studio-Code\"><a href=\"#Figure-1-How-to-install-NativeScript-extention-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Figure 1: How to install NativeScript extention for Visual Studio Code.\"></a>Figure 1: How to install NativeScript extention for Visual Studio Code.</h3><p><img src=\"../img/visual-studio-code-extension/install.png\" alt=\"Installing the NativeScript extension for Visual Studio Code\"></p>\n<p>After the installation completes, the extension appears in the list of installed extensions. You can see it if you run <code>Extensions: Show Installed Extensions</code> command from the Command Palette.</p>\n<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h2><p>Open your application root folder, created with the <code>tns create</code> command, in Visual Studio Code.</p>\n<h3 id=\"Generate-launch-configurations\"><a href=\"#Generate-launch-configurations\" class=\"headerlink\" title=\"Generate launch configurations\"></a>Generate launch configurations</h3><p>Click the debugging icon <img src=\"../img/visual-studio-code-extension/debug-panel.png\" alt=\"VS Code debug panel\"> in the View bar, and then click the gear icon <img src=\"../img/visual-studio-code-extension/gear-icon.png\" alt=\"gear icon\"> to choose the NativeScript debug environment. A <code>launch.json</code> file should be generated in your <code>.vscode</code> folder located next to the <code>app</code> folder. The configurations, described in <code>launch.json</code>, can be selected from the menu in the Debug Panel.</p>\n<h3 id=\"Figure-2-How-to-debug-application-via-Visual-Studio-Code\"><a href=\"#Figure-2-How-to-debug-application-via-Visual-Studio-Code\" class=\"headerlink\" title=\"Figure 2: How to debug application via Visual Studio Code.\"></a>Figure 2: How to debug application via Visual Studio Code.</h3><p><img src=\"../img/visual-studio-code-extension/configurations-menu.png\" alt=\"Installing NativeScript extension for Visual Studio Code\"></p>\n<h3 id=\"Launch-an-application-with-the-debugger\"><a href=\"#Launch-an-application-with-the-debugger\" class=\"headerlink\" title=\"Launch an application with the debugger\"></a>Launch an application with the debugger</h3><p>Choose one of the launch configurations (e.g., <code>Launch on iOS Emulator</code>) and press the <code>Start</code> button next to the menu. This will run your app in the iOS emulator and attach the VS Code debugger. The app should break on the first JavaScript/TypeScript statement. You can find more information about the debugging support in VS Code in the <a href=\"https://code.visualstudio.com/docs/editor/debugging\">VS Code Debugging Guide</a>.</p>\n<h3 id=\"Figure-3-Attach-the-debugger-without-rebuilding-the-application\"><a href=\"#Figure-3-Attach-the-debugger-without-rebuilding-the-application\" class=\"headerlink\" title=\"Figure 3: Attach the debugger without rebuilding the application.\"></a>Figure 3: Attach the debugger without rebuilding the application.</h3><p><img src=\"../img/visual-studio-code-extension/nativescript-debugging.png\" alt=\"NativeScript Debugging\"></p>\n<h3 id=\"Attach-the-debugger-to-an-already-running-app\"><a href=\"#Attach-the-debugger-to-an-already-running-app\" class=\"headerlink\" title=\"Attach the debugger to an already running app\"></a>Attach the debugger to an already running app</h3><p>If you already have a NativeScript application running your Android or iOS emulator or device, you can attach the VS Code debugger to it, without rebuilding and restarting the application. Just select the desired attach configuration through the debug configuration menu and press the start button.</p>\n<h3 id=\"Debug-TypeScript\"><a href=\"#Debug-TypeScript\" class=\"headerlink\" title=\"Debug TypeScript\"></a>Debug TypeScript</h3><p>If you are writing your app in TypeScript, you have fully functional debugging support in Visual Studio Code. To debug TypeScript, make sure the TS compiler is producing source maps by setting <code>&quot;sourceMap&quot;: true&quot;</code> in your <code>tsconfig.json</code>.</p>\n<blockquote>\n<p>Using the <a href=\"https://github.com/NativeScript/nativescript-dev-typescript\">TypeScript plugin for NativeScript</a> is strongly recommended instead of manually setting up the TypeScript compiler options and build tasks. The plugin handles the creation of all the configuration settings and guarantees smooth integration with Visual Studio Code.</p>\n</blockquote>\n<h3 id=\"Supply-additional-arguments-to-the-debug-command\"><a href=\"#Supply-additional-arguments-to-the-debug-command\" class=\"headerlink\" title=\"Supply additional arguments to the debug command\"></a>Supply additional arguments to the debug command</h3><p>Under the hood, starting a particular debug configuration executes the <code>tns debug</code> command with various arguments. You can append additional arguments by supplying them in the <code>tnsArgs</code> property of a debug configuration definition in <code>launch.json</code>. For example, if you add <code>&quot;tnsArgs&quot;: &quot;--log=trace&quot;</code> in the <code>Launch on iOS Emulator</code> configuration, in the background VS Code will execute the <code>tns debug ios --emulator --no-client --log=trace</code> command, which will give you more verbose information in the Debug Console.</p>\n<h3 id=\"Figure-4-Adding-additional-command-while-debugging\"><a href=\"#Figure-4-Adding-additional-command-while-debugging\" class=\"headerlink\" title=\"Figure 4: Adding additional command while debugging.\"></a>Figure 4: Adding additional command while debugging.</h3><p><img src=\"../img/visual-studio-code-extension/nativescript-tns-args.png\" alt=\"Supply custom arguments to the debug command\"></p>\n<h3 id=\"Turn-on-diagnostic-logging\"><a href=\"#Turn-on-diagnostic-logging\" class=\"headerlink\" title=\"Turn on diagnostic logging\"></a>Turn on diagnostic logging</h3><p>If the <code>diagnosticLogging</code> flag for a particular debug configuration in <code>launch.json</code> file is set to <code>true</code> (its default value is <code>false</code>), diagnostic messages will be logged on the debugger console after attaching the debugger to the NativeScript application. This is useful for rough debugging of the extension itself, because all sent/received messages that are part of the communication between the frontend and the backend are logged.</p>\n<h2 id=\"Use-NativeScript-specific-commands\"><a href=\"#Use-NativeScript-specific-commands\" class=\"headerlink\" title=\"Use NativeScript-specific commands\"></a>Use NativeScript-specific commands</h2><p>Type <code>nativescript</code> in the Command Palette and you will see all NativeScript-specific commands. Currently there are only two of them but the list will grow in the future.</p>\n<h3 id=\"Figure-5-Using-NativeScript-specific-commands-directly-from-Visual-Studio-Code\"><a href=\"#Figure-5-Using-NativeScript-specific-commands-directly-from-Visual-Studio-Code\" class=\"headerlink\" title=\"Figure 5: Using NativeScript-specific commands directly from Visual Studio Code .\"></a>Figure 5: Using NativeScript-specific commands directly from Visual Studio Code .</h3><p><img src=\"../img/visual-studio-code-extension/nativescript-commands.png\" alt=\"NativeScript commands\"></p>\n<p>The Run command is the equivalent to <code>tns run</code> in the NativeScript CLI. It lets you build, deploy and run your app on an emulator/device directly from Visual Studio Code.</p>\n<h2 id=\"NativeScript-CLI-version-detection\"><a href=\"#NativeScript-CLI-version-detection\" class=\"headerlink\" title=\"NativeScript CLI version detection\"></a>NativeScript CLI version detection</h2><p>The extension depends on a globally installed NativeScript CLI. It will show an error message if it can’t find it.</p>\n<h3 id=\"Figure-6-Handle-NativeScript’s-error-for-extensions-builded-for-specific-NativeScript-CLI\"><a href=\"#Figure-6-Handle-NativeScript’s-error-for-extensions-builded-for-specific-NativeScript-CLI\" class=\"headerlink\" title=\"Figure 6: Handle NativeScript’s error for extensions builded for specific NativeScript CLI.\"></a>Figure 6: Handle NativeScript’s error for extensions builded for specific NativeScript CLI.</h3><p><img src=\"../img/visual-studio-code-extension/nativescript-not-found-error-message.png\" alt=\"NativeScript not found\"></p>\n<blockquote>\n<p>The extension requires a specific NativeScript CLI version and if you have another version installed, you will see a warning message. The extension is likely to work with the unsupported version but it is recommended that you update the NativeScript CLI or the VS Code extension.</p>\n</blockquote>\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}